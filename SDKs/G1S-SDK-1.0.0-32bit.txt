Class: Package.Object

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x2dffaf591a602e

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: Enum.Field.Object

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: AndroidJavaSurfaceViewDevices.Object
	JavaSurfaceViewDevice[] SurfaceViewDevices;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: JavaSurfaceViewDevice
	FString Manufacturer;//[Offset: 0x0, Size: 0x10]
	FString Model;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AndroidDeviceProfileMatchingRules.Object
	ProfileMatch[] MatchProfile;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ProfileMatch
	FString Profile;//[Offset: 0x0, Size: 0x10]
	ProfileMatchItem[] Match;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ProfileMatchItem
	byte SourceType;//[Offset: 0x0, Size: 0x1]
	byte CompareType;//[Offset: 0x1, Size: 0x1]
	FString MatchString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: GCObjectReferencer.Object

--------------------------------
Class: SlateThemeManager.Object
	Guid CurrentThemeId;//[Offset: 0x28, Size: 0x10]
	StyleColorList ActiveColors;//[Offset: 0x38, Size: 0x988]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: StyleColorList
	LinearColor StyleColors;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AssetRegistryImpl.Object

--------------------------------
Class: DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: SparseDelegateFunction.DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: TextBuffer.Object

--------------------------------
Class: DynamicClass.Class.Struct.Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Interface.Object

--------------------------------
Class: LinkerPlaceholderClass.Class.Struct.Field.Object

--------------------------------
Class: LinkerPlaceholderExportObject.Object

--------------------------------
Class: LinkerPlaceholderFunction.Function.Struct.Field.Object

--------------------------------
Class: MetaData.Object

--------------------------------
Class: ObjectRedirector.Object

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: EnumProperty.Property.Field.Object

--------------------------------
Class: ArrayProperty.Property.Field.Object

--------------------------------
Class: ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: BoolProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: ByteProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: ClassProperty.ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: DelegateProperty.Property.Field.Object

--------------------------------
Class: DoubleProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: IntProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: Int8Property.NumericProperty.Property.Field.Object

--------------------------------
Class: Int16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: Int64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: InterfaceProperty.Property.Field.Object

--------------------------------
Class: LazyObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: MapProperty.Property.Field.Object

--------------------------------
Class: MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: MulticastInlineDelegateProperty.MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: MulticastSparseDelegateProperty.MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: NameProperty.Property.Field.Object

--------------------------------
Class: SetProperty.Property.Field.Object

--------------------------------
Class: SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: SoftClassProperty.SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: StrProperty.Property.Field.Object

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: UInt16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: UInt32Property.NumericProperty.Property.Field.Object

--------------------------------
Class: UInt64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: WeakObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: TextProperty.Property.Field.Object

--------------------------------
Class: PropertyWrapper.Object

--------------------------------
Class: MulticastDelegatePropertyWrapper.PropertyWrapper.Object

--------------------------------
Class: MulticastInlineDelegatePropertyWrapper.MulticastDelegatePropertyWrapper.PropertyWrapper.Object

--------------------------------
Class: Model.Object

--------------------------------
Class: ActiveSoundUpdateInterface.Interface.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x30]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 0x1]
	bool bCallPreReplication;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 0x1]
	bool bCallPreReplicationForReplay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 0x1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bForceNetAddressable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 0x1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5b, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5c, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5c, Size: 0x1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5e, Size: 0x1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5f, Size: 0x1]
	byte RemoteRole;//[Offset: 0x60, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x68, Size: 0x68]
	float InitialLifeSpan;//[Offset: 0xd0, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0xd4, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xe0, Size: 0x60]
	Actor* Owner;//[Offset: 0x140, Size: 0x8]
	FName NetDriverName;//[Offset: 0x148, Size: 0x8]
	byte Role;//[Offset: 0x150, Size: 0x1]
	byte NetDormancy;//[Offset: 0x151, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x152, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0x153, Size: 0x1]
	int InputPriority;//[Offset: 0x154, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x158, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x160, Size: 0x4]
	int NetTag;//[Offset: 0x164, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x168, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x16c, Size: 0x4]
	float NetPriority;//[Offset: 0x170, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x178, Size: 0x8]
	Actor*[] Children;//[Offset: 0x180, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x190, Size: 0x8]
	int RayTracingGroupId;//[Offset: 0x1a0, Size: 0x4]
	FName[] Layers;//[Offset: 0x1a8, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x1b8, Size: 0x8]
	FName[] Tags;//[Offset: 0x1c8, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x1d8, Size: 0x1]
	delegate OnTakePointDamage;//[Offset: 0x1d9, Size: 0x1]
	delegate OnTakeRadialDamage;//[Offset: 0x1da, Size: 0x1]
	delegate OnActorBeginOverlap;//[Offset: 0x1db, Size: 0x1]
	delegate OnActorEndOverlap;//[Offset: 0x1dc, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x1dd, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x1de, Size: 0x1]
	delegate OnClicked;//[Offset: 0x1df, Size: 0x1]
	delegate OnReleased;//[Offset: 0x1e0, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x1e1, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x1e2, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x1e3, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x1e4, Size: 0x1]
	delegate OnActorHit;//[Offset: 0x1e5, Size: 0x1]
	delegate OnDestroyed;//[Offset: 0x1e6, Size: 0x1]
	delegate OnEndPlay;//[Offset: 0x1e7, Size: 0x1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x248, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x258, Size: 0x10]
	bool WasRecentlyRendered(float Tolerance);// 0x1a4858eb6041
	void UserConstructionScript();// 0x1a4758eb6041
	void TearOff();// 0x1a4658eb6041
	void SetTickGroup(byte NewTickGroup);// 0x1a4558eb6041
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x1a4458eb6041
	void SetReplicates(bool bInReplicates);// 0x1a4358eb6041
	void SetReplicateMovement(bool bInReplicateMovement);// 0x1a4258eb6041
	void SetRayTracingGroupId(int InRaytracingGroupId);// 0x1a4158eb6041
	void SetOwner(Actor* NewOwner);// 0x1a4058eb6041
	void SetNetDormancy(byte NewDormancy);// 0x1a3f58eb6041
	void SetLifeSpan(float InLifespan);// 0x1a3e58eb6041
	void SetAutoDestroyWhenFinished(bool bVal);// 0x1a3d58eb6041
	void SetActorTickInterval(float TickInterval);// 0x1a3c58eb6041
	void SetActorTickEnabled(bool bEnabled);// 0x1a3b58eb6041
	void SetActorScale3D(Vector NewScale3D);// 0x1a3a58eb6041
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x1a3958eb6041
	void SetActorHiddenInGame(bool bNewHidden);// 0x1a3858eb6041
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x1a3758eb6041
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x1a3658eb6041
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x1a3558eb6041
	void ReceiveTick(float DeltaSeconds);// 0x1de358eb6041
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x1a3358eb6041
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x1a3258eb6041
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x1a3158eb6041
	void ReceiveEndPlay(byte EndPlayReason);// 0x1a3058eb6041
	void ReceiveDestroyed();// 0x1a2f58eb6041
	void ReceiveBeginPlay();// 0x1a2e58eb6041
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x1a2d58eb6041
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x1a2c58eb6041
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x1a2b58eb6041
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x1a2a58eb6041
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x1a2958eb6041
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x1a2858eb6041
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x1a2758eb6041
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x1a2658eb6041
	void ReceiveActorEndCursorOver();// 0x1a2558eb6041
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x1a2458eb6041
	void ReceiveActorBeginCursorOver();// 0x1a2358eb6041
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x1a2258eb6041
	void OnRep_ReplicateMovement();// 0x1a2158eb6041
	void OnRep_ReplicatedMovement();// 0x1a2058eb6041
	void OnRep_Owner();// 0x1a1f58eb6041
	void OnRep_Instigator();// 0x1a1e58eb6041
	void OnRep_AttachmentReplication();// 0x1a1d58eb6041
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x1a1c58eb6041
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x1a1b58eb6041
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a1a58eb6041
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x1a1958eb6041
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a1858eb6041
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a1758eb6041
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a1658eb6041
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a1558eb6041
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a1458eb6041
	void K2_OnReset();// 0x1a5958eb6041
	void K2_OnEndViewTarget(PlayerController* PC);// 0x1a1258eb6041
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x1a1158eb6041
	SceneComponent* K2_GetRootComponent();// 0x1a1058eb6041
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x1a0f58eb6041
	Rotator K2_GetActorRotation();// 0x1a0e58eb6041
	Vector K2_GetActorLocation();// 0x1a0d58eb6041
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x1a0c58eb6041
	void K2_DestroyActor();// 0x1a0b58eb6041
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x1a0a58eb6041
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x1a0958eb6041
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x1a0858eb6041
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x1a0758eb6041
	void K2_AddActorWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a0658eb6041
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a0558eb6041
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a0458eb6041
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a0358eb6041
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a0258eb6041
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a0158eb6041
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x1a0058eb6041
	bool IsOverlappingActor(const Actor* Other);// 0x19ff58eb6041
	bool IsChildActor();// 0x19fe58eb6041
	bool IsActorTickEnabled();// 0x19fd58eb6041
	bool IsActorBeingDestroyed();// 0x19fc58eb6041
	bool HasAuthority();// 0x19fb58eb6041
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x19fa58eb6041
	Vector GetVelocity();// 0x19f958eb6041
	Transform GetTransform();// 0x19f858eb6041
	bool GetTickableWhenPaused();// 0x19f758eb6041
	float GetSquaredHorizontalDistanceTo(const Actor* OtherActor);// 0x19f658eb6041
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x19f558eb6041
	byte GetRemoteRole();// 0x19f458eb6041
	int GetRayTracingGroupId();// 0x19f358eb6041
	ChildActorComponent* GetParentComponent();// 0x1a3458eb6041
	Actor* GetParentActor();// 0x19f158eb6041
	Actor* GetOwner();// 0x19f058eb6041
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x19ef58eb6041
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x19ee58eb6041
	byte GetLocalRole();// 0x19ed58eb6041
	float GetLifeSpan();// 0x19ec58eb6041
	Transform GetLevelTransform();// 0x19eb58eb6041
	Level* GetLevel();// 0x19ea58eb6041
	Controller* GetInstigatorController();// 0x19e958eb6041
	Pawn* GetInstigator();// 0x19e858eb6041
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x19e758eb6041
	float GetInputAxisValue(const FName InputAxisName);// 0x19e658eb6041
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x19e558eb6041
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x19e458eb6041
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x19e358eb6041
	float GetGameTimeSinceCreation();// 0x19e258eb6041
	float GetDotProductTo(const Actor* OtherActor);// 0x19e158eb6041
	float GetDistanceTo(const Actor* OtherActor);// 0x19e058eb6041
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x19df58eb6041
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x19de58eb6041
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x19dd58eb6041
	FName GetAttachParentSocketName();// 0x19dc58eb6041
	Actor* GetAttachParentActor();// 0x19db58eb6041
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray, bool bRecursivelyIncludeAttachedActors);// 0x19da58eb6041
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x19d958eb6041
	Vector GetActorUpVector();// 0x19d858eb6041
	float GetActorTimeDilation();// 0x19d758eb6041
	float GetActorTickInterval();// 0x19d658eb6041
	Vector GetActorScale3D();// 0x19d558eb6041
	Vector GetActorRightVector();// 0x19d458eb6041
	Vector GetActorRelativeScale3D();// 0x19d358eb6041
	Vector GetActorForwardVector();// 0x19d258eb6041
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x1a1358eb6041
	bool GetActorEnableCollision();// 0x19d058eb6041
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x19cf58eb6041
	void ForceNetUpdate();// 0x19ce58eb6041
	void FlushNetDormancy();// 0x19cd58eb6041
	void FinishAddComponent(ActorComponent* Component, bool bManualAttachment, out const Transform RelativeTransform);// 0x19cc58eb6041
	void EnableInput(PlayerController* PlayerController);// 0x19cb58eb6041
	void DisableInput(PlayerController* PlayerController);// 0x19ca58eb6041
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x19c958eb6041
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x19c858eb6041
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x19c758eb6041
	ActorComponent* AddComponentByClass(class ActorComponent Class, bool bManualAttachment, out const Transform RelativeTransform, bool bDeferredFinish);// 0x19c658eb6041
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext, bool bDeferredFinish);// 0x19c558eb6041
	bool ActorHasTag(FName Tag);// 0x17c058eb6041

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	float TickInterval;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0x18]
	Vector AngularVelocity;//[Offset: 0x18, Size: 0x18]
	Vector Location;//[Offset: 0x30, Size: 0x18]
	Rotator Rotation;//[Offset: 0x48, Size: 0x18]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x61, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x62, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x63, Size: 0x1]

--------------------------------
Class: Vector
	double X;//[Offset: 0x0, Size: 0x8]
	double Y;//[Offset: 0x8, Size: 0x8]
	double Z;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Rotator
	double Pitch;//[Offset: 0x0, Size: 0x8]
	double Yaw;//[Offset: 0x8, Size: 0x8]
	double Roll;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0x18]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x20, Size: 0x18]
	Rotator RotationOffset;//[Offset: 0x38, Size: 0x18]
	FName AttachSocket;//[Offset: 0x50, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 0x8]
	FName AttachSocketName;//[Offset: 0xc8, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 0x10]
	Vector RelativeLocation;//[Offset: 0x138, Size: 0x18]
	Rotator RelativeRotation;//[Offset: 0x150, Size: 0x18]
	Vector RelativeScale3D;//[Offset: 0x168, Size: 0x18]
	Vector ComponentVelocity;//[Offset: 0x180, Size: 0x18]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x198, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x198, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x198, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x198, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x198, Size: 0x1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x198, Size: 0x1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x198, Size: 0x1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x199, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x199, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x199, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x199, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x199, Size: 0x1]
	bool bComputeFastLocalBounds;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x199, Size: 0x1]
	bool bComputeBoundsOnceForGame;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x199, Size: 0x1]
	bool bComputedBoundsOnceForGame;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x199, Size: 0x1]
	byte Mobility;//[Offset: 0x19b, Size: 0x1]
	byte DetailMode;//[Offset: 0x19c, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x19d, Size: 0x1]
	void ToggleVisibility(bool bPropagateToChildren);// 0xead58eb6041
	void SetWorldScale3D(Vector NewScale);// 0xeac58eb6041
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0xf5658eb6041
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0xeaa58eb6041
	void SetRelativeScale3D(Vector NewScale3D);// 0xea858eb6041
	void SetMobility(byte NewMobility);// 0xea758eb6041
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0xea658eb6041
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0xea558eb6041
	void ResetRelativeTransform();// 0xea458eb6041
	void OnRep_Visibility(bool OldValue);// 0xea358eb6041
	void OnRep_Transform();// 0xea258eb6041
	void OnRep_AttachSocketName();// 0xea158eb6041
	void OnRep_AttachParent();// 0xea058eb6041
	void OnRep_AttachChildren();// 0xe9f58eb6041
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe9e58eb6041
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe9d58eb6041
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe9c58eb6041
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe9b58eb6041
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe9a58eb6041
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe9958eb6041
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe9858eb6041
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe9758eb6041
	Transform K2_GetComponentToWorld();// 0xe9658eb6041
	Vector K2_GetComponentScale();// 0xe9558eb6041
	Rotator K2_GetComponentRotation();// 0xe9458eb6041
	Vector K2_GetComponentLocation();// 0xe9258eb6041
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0xe9058eb6041
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0xe8e58eb6041
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0xe8d58eb6041
	void K2_AddWorldTransformKeepScale(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe8c58eb6041
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe8b58eb6041
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe8a58eb6041
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe8958eb6041
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe8858eb6041
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe8758eb6041
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xf0458eb6041
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe8558eb6041
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0xe8458eb6041
	bool IsVisible();// 0xe8358eb6041
	bool IsSimulatingPhysics(FName BoneName);// 0xe8258eb6041
	bool IsAnySimulatingPhysics();// 0xe8158eb6041
	Vector GetUpVector();// 0xe7f58eb6041
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0xe7e58eb6041
	Rotator GetSocketRotation(FName InSocketName);// 0xe7d58eb6041
	Quat GetSocketQuaternion(FName InSocketName);// 0xe7c58eb6041
	Vector GetSocketLocation(FName InSocketName);// 0xe7b58eb6041
	bool GetShouldUpdatePhysicsVolume();// 0xe7a58eb6041
	Vector GetRightVector();// 0xe7958eb6041
	Transform GetRelativeTransform();// 0xe7858eb6041
	PhysicsVolume* GetPhysicsVolume();// 0xe7758eb6041
	void GetParentComponents(out SceneComponent*[] Parents);// 0xe7658eb6041
	int GetNumChildrenComponents();// 0xe7558eb6041
	Vector GetForwardVector();// 0xe7458eb6041
	Vector GetComponentVelocity();// 0xe7358eb6041
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0xe7258eb6041
	SceneComponent* GetChildComponent(int ChildIndex);// 0xe7158eb6041
	FName GetAttachSocketName();// 0xe7058eb6041
	SceneComponent* GetAttachParent();// 0xe6f58eb6041
	FName[] GetAllSocketNames();// 0xe6e58eb6041
	bool DoesSocketExist(FName InSocketName);// 0xe6d58eb6041
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0xffffff8158eb6000

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x30]
	FName[] ComponentTags;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	int UCSSerializationIndex;//[Offset: 0x84, Size: 0x4]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8a, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8a, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8a, Size: 0x1]
	enum CreationMethod;//[Offset: 0x8c, Size: 0x1]
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 0x1]
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 0x10]
	void ToggleActive();// 0xb4f58eb6041
	void SetTickGroup(byte NewTickGroup);// 0xb4758eb6041
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0xb4558eb6041
	void SetIsReplicated(bool ShouldReplicate);// 0xb4458eb6041
	void SetComponentTickIntervalAndCooldown(float TickInterval);// 0xb4358eb6041
	void SetComponentTickInterval(float TickInterval);// 0xb4258eb6041
	void SetComponentTickEnabled(bool bEnabled);// 0xb4158eb6041
	void SetAutoActivate(bool bNewAutoActivate);// 0xb4058eb6041
	void SetActive(bool bNewActive, bool bReset);// 0xb3f58eb6041
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xb3e58eb6041
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xb3d58eb6041
	void ReceiveTick(float DeltaSeconds);// 0xb3c58eb6041
	void ReceiveEndPlay(byte EndPlayReason);// 0xb3b58eb6041
	void ReceiveBeginPlay();// 0xb3958eb6041
	void OnRep_IsActive();// 0xb3858eb6041
	void K2_DestroyComponent(Object* Object);// 0xb3758eb6041
	bool IsComponentTickEnabled();// 0xb3658eb6041
	bool IsBeingDestroyed();// 0xb3558eb6041
	bool IsActive();// 0xb3458eb6041
	Actor* GetOwner();// 0xb3358eb6041
	float GetComponentTickInterval();// 0xb3258eb6041
	void Deactivate();// 0xb3158eb6041
	bool ComponentHasTag(FName Tag);// 0xb3058eb6041
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0xb2f58eb6041
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0xb2e58eb6041
	void Activate(bool bReset);// 0xae358eb6041

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x20]
	Vector Translation;//[Offset: 0x20, Size: 0x18]
	Vector Scale3D;//[Offset: 0x40, Size: 0x18]

--------------------------------
Class: Quat
	double X;//[Offset: 0x0, Size: 0x8]
	double Y;//[Offset: 0x8, Size: 0x8]
	double Z;//[Offset: 0x10, Size: 0x8]
	double W;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: HitResult
	int FaceIndex;//[Offset: 0x0, Size: 0x4]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Distance;//[Offset: 0x8, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0x18]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x28, Size: 0x18]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x40, Size: 0x18]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x58, Size: 0x18]
	Vector_NetQuantize TraceStart;//[Offset: 0x70, Size: 0x18]
	Vector_NetQuantize TraceEnd;//[Offset: 0x88, Size: 0x18]
	float PenetrationDepth;//[Offset: 0xa0, Size: 0x4]
	int MyItem;//[Offset: 0xa4, Size: 0x4]
	int Item;//[Offset: 0xa8, Size: 0x4]
	byte ElementIndex;//[Offset: 0xac, Size: 0x1]
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xad, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xad, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0xb0, Size: 0x8]
	ActorInstanceHandle HitObjectHandle;//[Offset: 0xb8, Size: 0x18]
	PrimitiveComponent* Component;//[Offset: 0xd0, Size: 0x8]
	FName BoneName;//[Offset: 0xd8, Size: 0x8]
	FName MyBoneName;//[Offset: 0xe0, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	float StaticFriction;//[Offset: 0x2c, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x30, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	float Restitution;//[Offset: 0x34, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x38, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	float Density;//[Offset: 0x3c, Size: 0x4]
	float SleepLinearVelocityThreshold;//[Offset: 0x40, Size: 0x4]
	float SleepAngularVelocityThreshold;//[Offset: 0x44, Size: 0x4]
	int SleepCounterThreshold;//[Offset: 0x48, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x4c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x50, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x58, Size: 0x8]
	byte SurfaceType;//[Offset: 0x60, Size: 0x1]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: ActorInstanceHandle
	Actor* Actor;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x2c0, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x2c4, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x2c8, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x2cc, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x2cd, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x2ce, Size: 0x1]
	enum LightmapType;//[Offset: 0x2cf, Size: 0x1]
	bool bIsValidTextureStreamingBuiltData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d0, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d1, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d1, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d1, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d1, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d1, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d1, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d1, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d1, Size: 0x1]
	bool bVisibleInRealTimeSkyCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d2, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d2, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d2, Size: 0x1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d2, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d2, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d2, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d2, Size: 0x1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d2, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d3, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d3, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d3, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d3, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d3, Size: 0x1]
	bool bEmissiveLightSource;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d3, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d3, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d3, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d4, Size: 0x1]
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d4, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d4, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d4, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d4, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d4, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d5, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d5, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d5, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d5, Size: 0x1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d5, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d5, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d5, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d5, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d6, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d6, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d6, Size: 0x1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d6, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d6, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d6, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d6, Size: 0x1]
	bool bIsBeingMovedByEditor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d6, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d7, Size: 0x1]
	bool bVisibleInSceneCaptureOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d7, Size: 0x1]
	bool bHiddenInSceneCapture;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d7, Size: 0x1]
	bool bRayTracingFarField;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d7, Size: 0x1]
	bool bHasNoStreamableTextures;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d7, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x2d8, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x2da, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x2db, Size: 0x1]
	int RayTracingGroupId;//[Offset: 0x2dc, Size: 0x4]
	int VisibilityId;//[Offset: 0x2e0, Size: 0x4]
	int CustomDepthStencilValue;//[Offset: 0x2e4, Size: 0x4]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x2e8, Size: 0x10]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x2f8, Size: 0x10]
	int TranslucencySortPriority;//[Offset: 0x310, Size: 0x4]
	float TranslucencySortDistanceOffset;//[Offset: 0x314, Size: 0x4]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x318, Size: 0x10]
	int8 VirtualTextureLodBias;//[Offset: 0x328, Size: 0x1]
	int8 VirtualTextureCullMips;//[Offset: 0x329, Size: 0x1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x32a, Size: 0x1]
	enum VirtualTextureRenderPassType;//[Offset: 0x32b, Size: 0x1]
	float BoundsScale;//[Offset: 0x33c, Size: 0x4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x350, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x360, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x380, Size: 0x188]
	delegate OnComponentHit;//[Offset: 0x508, Size: 0x1]
	delegate OnComponentBeginOverlap;//[Offset: 0x509, Size: 0x1]
	delegate OnComponentEndOverlap;//[Offset: 0x50a, Size: 0x1]
	delegate OnComponentWake;//[Offset: 0x50b, Size: 0x1]
	delegate OnComponentSleep;//[Offset: 0x50c, Size: 0x1]
	delegate OnBeginCursorOver;//[Offset: 0x50e, Size: 0x1]
	delegate OnEndCursorOver;//[Offset: 0x50f, Size: 0x1]
	delegate OnClicked;//[Offset: 0x510, Size: 0x1]
	delegate OnReleased;//[Offset: 0x511, Size: 0x1]
	delegate OnInputTouchBegin;//[Offset: 0x512, Size: 0x1]
	delegate OnInputTouchEnd;//[Offset: 0x513, Size: 0x1]
	delegate OnInputTouchEnter;//[Offset: 0x514, Size: 0x1]
	delegate OnInputTouchLeave;//[Offset: 0x515, Size: 0x1]
	enum RayTracingGroupCullingPriority;//[Offset: 0x516, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x517, Size: 0x1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x530, Size: 0x8]
	bool WasRecentlyRendered(float Tolerance);// 0xfc558eb6041
	void WakeRigidBody(FName BoneName);// 0xfc458eb6041
	void WakeAllRigidBodies();// 0xfc358eb6041
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0xfc258eb6041
	void SetVisibleInSceneCaptureOnly(bool bValue);// 0xfc158eb6041
	void SetVisibleInRayTracing(bool bNewVisibleInRayTracing);// 0x103e58eb6041
	void SetVectorParameterForDefaultCustomPrimitiveData(FName ParameterName, Vector4 Value);// 0xfbf58eb6041
	void SetVectorParameterForCustomPrimitiveData(FName ParameterName, Vector4 Value);// 0xfbe58eb6041
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0xfbd58eb6041
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0xfbc58eb6041
	void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset);// 0xfbb58eb6041
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0xfba58eb6041
	void SetSimulatePhysics(bool bSimulate);// 0xfb958eb6041
	void SetScalarParameterForDefaultCustomPrimitiveData(FName ParameterName, float Value);// 0xfb858eb6041
	void SetScalarParameterForCustomPrimitiveData(FName ParameterName, float Value);// 0xfb758eb6041
	void SetRenderInMainPass(bool bValue);// 0xfb658eb6041
	void SetRenderInDepthPass(bool bValue);// 0xfb558eb6041
	void SetRenderCustomDepth(bool bValue);// 0xfb458eb6041
	void SetReceivesDecals(bool bNewReceivesDecals);// 0xfb358eb6041
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0xfb258eb6041
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xfb158eb6041
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0xfb058eb6041
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0xfaf58eb6041
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xfae58eb6041
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0xfad58eb6041
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0xfac58eb6041
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0xfab58eb6041
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0xfaa58eb6041
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0xfa958eb6041
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0xfa858eb6041
	void SetMassScale(FName BoneName, float InMassScale);// 0xfa758eb6041
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0xfa658eb6041
	void SetLinearDamping(float InDamping);// 0xfa558eb6041
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0xfa458eb6041
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0xfa358eb6041
	void SetHiddenInSceneCapture(bool bValue);// 0xfa258eb6041
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0xfa158eb6041
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0xfa058eb6041
	void SetEnableGravity(bool bGravityEnabled);// 0x101c58eb6041
	void SetEmissiveLightSource(bool NewEmissiveLightSource);// 0xf9e58eb6041
	void SetDefaultCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0xf9d58eb6041
	void SetDefaultCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0xf9c58eb6041
	void SetDefaultCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0xf9b58eb6041
	void SetDefaultCustomPrimitiveDataFloat(int DataIndex, float Value);// 0xf9a58eb6041
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0xf9958eb6041
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0xf9858eb6041
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0xf9758eb6041
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0xf9558eb6041
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0xf9458eb6041
	void SetCustomDepthStencilValue(int Value);// 0xf9358eb6041
	void SetCullDistance(float NewCullDistance);// 0xf9158eb6041
	void SetConstraintMode(byte ConstraintMode);// 0xf9058eb6041
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0xf8f58eb6041
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0xf8e58eb6041
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0xf8d58eb6041
	void SetCollisionObjectType(byte Channel);// 0xf8c58eb6041
	void SetCollisionEnabled(byte NewType);// 0xf8b58eb6041
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0xf8a58eb6041
	void SetCastShadow(bool NewCastShadow);// 0xf8958eb6041
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0xf8858eb6041
	void SetCastHiddenShadow(bool NewCastHiddenShadow);// 0xf8758eb6041
	void SetCastContactShadow(bool bInCastContactShadow);// 0xf8658eb6041
	void SetBoundsScale(float NewBoundsScale);// 0xf8558eb6041
	void SetAngularDamping(float InDamping);// 0xf8458eb6041
	void SetAllUseCCD(bool InUseCCD);// 0xf8358eb6041
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0xf8258eb6041
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0xf8158eb6041
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0xf8058eb6041
	void SetAllMassScale(float InMassScale);// 0xf7f58eb6041
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0xf7e58eb6041
	void PutRigidBodyToSleep(FName BoneName);// 0xf7d58eb6041
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xfc058eb6041
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xf7b58eb6041
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xf7a58eb6041
	bool K2_IsQueryCollisionEnabled();// 0xf7958eb6041
	bool K2_IsPhysicsCollisionEnabled();// 0xf7858eb6041
	bool K2_IsCollisionEnabled();// 0xf7758eb6041
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0xf7658eb6041
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0xf7558eb6041
	bool IsOverlappingActor(const Actor* Other);// 0xf7458eb6041
	bool IsGravityEnabled();// 0xf7358eb6041
	bool IsAnyRigidBodyAwake();// 0xf7258eb6041
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0xf7158eb6041
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0xf6e58eb6041
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0xf6d58eb6041
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0xf6c58eb6041
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0xf6b58eb6041
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0xf6a58eb6041
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0xf6958eb6041
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0xf6858eb6041
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0xf6758eb6041
	int GetNumMaterials();// 0xf6658eb6041
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0xf6558eb6041
	MaterialInterface* GetMaterial(int ElementIndex);// 0xf6458eb6041
	float GetMassScale(FName BoneName);// 0xf6358eb6041
	float GetMass();// 0xf6258eb6041
	float GetLinearDamping();// 0xf6158eb6041
	Vector GetInertiaTensor(FName BoneName);// 0xf6058eb6041
	bool GetGenerateOverlapEvents();// 0xf5f58eb6041
	int GetCustomPrimitiveDataIndexForVectorParameter(FName ParameterName);// 0xf5e58eb6041
	int GetCustomPrimitiveDataIndexForScalarParameter(FName ParameterName);// 0xf5c58eb6041
	byte GetCollisionResponseToChannel(byte Channel);// 0xf5b58eb6041
	FName GetCollisionProfileName();// 0xf5958eb6041
	byte GetCollisionObjectType();// 0xf5758eb6041
	byte GetCollisionEnabled();// 0xf9f58eb6041
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0xf5558eb6041
	Vector GetCenterOfMass(FName BoneName);// 0xf5458eb6041
	float GetAngularDamping();// 0xf5358eb6041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0xf5258eb6041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0xf5158eb6041
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0xf5058eb6041
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0xf4f58eb6041
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0xf4e58eb6041
	void ClearMoveIgnoreComponents();// 0xf4d58eb6041
	void ClearMoveIgnoreActors();// 0xf4c58eb6041
	bool CanCharacterStepUp(Pawn* Pawn);// 0xf4b58eb6041
	void AddVelocityChangeImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0xf4a58eb6041
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0xf4958eb6041
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0xf4858eb6041
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0xf4758eb6041
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0xf4658eb6041
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0xf4558eb6041
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0xf4458eb6041
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0xf4358eb6041
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0xf4258eb6041
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0xf4158eb6041
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0xf4058eb6041
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0xf3e58eb6041

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: Vector4
	double X;//[Offset: 0x0, Size: 0x8]
	double Y;//[Offset: 0x8, Size: 0x8]
	double Z;//[Offset: 0x10, Size: 0x8]
	double W;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x10]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x27bc58eb6041
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x27bb58eb6041
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0x27ba58eb6041
	PhysicalMaterial* GetPhysicalMaterial();// 0x27b958eb6041
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x27b858eb6041
	Material* GetBaseMaterial();// 0x27b758eb6041

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 0x4]
	byte AddressX;//[Offset: 0x2c, Size: 0x1]
	byte AddressY;//[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x98, Size: 0x8]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0xa0, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0xa8, Size: 0x8]
	ColorMaterialInput BaseColor;//[Offset: 0xe8, Size: 0x14]
	ScalarMaterialInput Metallic;//[Offset: 0xfc, Size: 0x14]
	ScalarMaterialInput Specular;//[Offset: 0x110, Size: 0x14]
	ScalarMaterialInput Roughness;//[Offset: 0x124, Size: 0x14]
	ScalarMaterialInput Anisotropy;//[Offset: 0x138, Size: 0x14]
	VectorMaterialInput Normal;//[Offset: 0x14c, Size: 0x14]
	VectorMaterialInput Tangent;//[Offset: 0x160, Size: 0x14]
	ColorMaterialInput EmissiveColor;//[Offset: 0x174, Size: 0x14]
	byte MaterialDomain;//[Offset: 0x188, Size: 0x1]
	byte BlendMode;//[Offset: 0x189, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x18a, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x18b, Size: 0x1]
	byte ShadingModel;//[Offset: 0x18c, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18d, Size: 0x1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x18e, Size: 0x2]
	float OpacityMaskClipValue;//[Offset: 0x190, Size: 0x4]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x194, Size: 0x14]
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x1a8, Size: 0x14]
	ScalarMaterialInput Refraction;//[Offset: 0x1bc, Size: 0x14]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x1d0, Size: 0x18]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x1e8, Size: 0x14]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1fc, Size: 0x14]
	StrataMaterialInput FrontMaterial;//[Offset: 0x210, Size: 0x14]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x224, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x224, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x224, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x224, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x224, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x224, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x224, Size: 0x1]
	byte TranslucencyPass;//[Offset: 0x225, Size: 0x1]
	byte TranslucencyLightingMode;//[Offset: 0x226, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x227, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x228, Size: 0x4]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x22c, Size: 0x4]
	float TranslucentShadowDensityScale;//[Offset: 0x230, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x234, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x238, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x23c, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x240, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x244, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x254, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x258, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x258, Size: 0x1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x258, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x258, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x258, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x259, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x259, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x259, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x259, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x259, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x259, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x259, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x259, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25a, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25a, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25a, Size: 0x1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25a, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x25a, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25a, Size: 0x1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x25a, Size: 0x1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x25a, Size: 0x1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25b, Size: 0x1]
	bool bUsedWithVirtualHeightfieldMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25b, Size: 0x1]
	bool bUsedWithNanite;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25b, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25b, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x25b, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25b, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x25b, Size: 0x1]
	byte FloatPrecisionMode;//[Offset: 0x25c, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25d, Size: 0x1]
	bool bMobileEnableHighQualityBRDF;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25d, Size: 0x1]
	bool bUseAlphaToCoverage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25d, Size: 0x1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25d, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x25d, Size: 0x1]
	bool bForwardBlendsSkyLightCubemaps;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25d, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x25d, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x25d, Size: 0x1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25e, Size: 0x1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25e, Size: 0x1]
	byte ShadingRate;//[Offset: 0x25f, Size: 0x1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x260, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x260, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x260, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x260, Size: 0x1]
	bool bEnableExecWire;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x260, Size: 0x1]
	bool bEnableNewHLSLGenerator;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x260, Size: 0x1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x260, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x261, Size: 0x1]
	bool bApplyCloudFogging;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x261, Size: 0x1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x261, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x261, Size: 0x1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x261, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x261, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x261, Size: 0x1]
	byte BlendableLocation;//[Offset: 0x262, Size: 0x1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x263, Size: 0x1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x263, Size: 0x1]
	byte StencilCompare;//[Offset: 0x264, Size: 0x1]
	byte StencilRefValue;//[Offset: 0x265, Size: 0x1]
	byte RefractionMode;//[Offset: 0x266, Size: 0x1]
	int BlendablePriority;//[Offset: 0x268, Size: 0x4]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x270, Size: 0x4]
	float RefractionDepthBias;//[Offset: 0x274, Size: 0x4]
	Guid StateId;//[Offset: 0x278, Size: 0x10]

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName InputName;//[Offset: 0x4, Size: 0x8]
	FName ExpressionName;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 0x2]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName InputName;//[Offset: 0x4, Size: 0x8]
	FName ExpressionName;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: StrataMaterialInput.MaterialInput

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x9c]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 0x10]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 0x10]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 0x4]
	float WorldUnitScale;//[Offset: 0x24, Size: 0x4]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	LinearColor Tint;//[Offset: 0x2c, Size: 0x10]
	float ScatterRadius;//[Offset: 0x3c, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x40, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x50, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x60, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x70, Size: 0x4]
	float NormalScale;//[Offset: 0x74, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x78, Size: 0x4]
	float IOR;//[Offset: 0x7c, Size: 0x4]
	float Roughness0;//[Offset: 0x80, Size: 0x4]
	float Roughness1;//[Offset: 0x84, Size: 0x4]
	float LobeMix;//[Offset: 0x88, Size: 0x4]
	LinearColor TransmissionTintColor;//[Offset: 0x8c, Size: 0x10]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x4, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0x8, Size: 0x4]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: Vector2D
	double X;//[Offset: 0x0, Size: 0x8]
	double Y;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 0x18]
	Vector Max;//[Offset: 0x18, Size: 0x18]
	byte IsValid;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x33b358eb6041
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x33b258eb6041
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x33b158eb6041
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x33ed58eb6041
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x33af58eb6041
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x33ae58eb6041
	void SetRuntimeVirtualTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, RuntimeVirtualTexture* Value);// 0x33ad58eb6041
	void SetRuntimeVirtualTextureParameterValue(FName ParameterName, RuntimeVirtualTexture* Value);// 0x33ac58eb6041
	void SetDoubleVectorParameterValue(FName ParameterName, Vector Value);// 0x33ab58eb6041
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x33aa58eb6041
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x33a958eb6041
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x33a858eb6041
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x33a758eb6041
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x33a658eb6041
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x33a558eb6041
	float K2_GetScalarParameterValue(FName ParameterName);// 0x33a458eb6041
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x33a358eb6041
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x33a258eb6041
	void CopyInterpParameters(MaterialInstance* Source);// 0x33a158eb6041

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x98, Size: 0x8]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0xa0, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0xe0, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xf0, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x100, Size: 0x10]
	DoubleVectorParameterValue[] DoubleVectorParameterValues;//[Offset: 0x110, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x120, Size: 0x10]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x130, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0x140, Size: 0x10]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x150, Size: 0x8]
	StaticParameterSet StaticParameters;//[Offset: 0x168, Size: 0x58]

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0xe0, Size: 0x10]
	int LevelIndex;//[Offset: 0xf0, Size: 0x4]
	int LODBias;//[Offset: 0xf4, Size: 0x4]
	byte CompressionSettings;//[Offset: 0xf8, Size: 0x1]
	byte Filter;//[Offset: 0xf9, Size: 0x1]
	enum MipLoadOptions;//[Offset: 0xfa, Size: 0x1]
	byte LODGroup;//[Offset: 0xfb, Size: 0x1]
	PerPlatformFloat Downscale;//[Offset: 0xfc, Size: 0x4]
	enum DownscaleOptions;//[Offset: 0x100, Size: 0x1]
	bool sRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x101, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x101, Size: 0x1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x101, Size: 0x1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x101, Size: 0x1]
	bool bNotOfflineProcessed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x101, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x101, Size: 0x1]
	AssetUserData*[] AssetUserData;//[Offset: 0x108, Size: 0x10]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x40, Size: 0x8]
	int NumCinematicMipLevels;//[Offset: 0x48, Size: 0x4]
	PerQualityLevelInt NoRefStreamingLODBias;//[Offset: 0x50, Size: 0x68]
	int StreamingIndex;//[Offset: 0xb8, Size: 0x4]
	int CachedCombinedLODBias;//[Offset: 0xbc, Size: 0x4]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	void SetForceMipLevelsToBeResident(float Seconds, int CinematicLODGroupMask);// 0x26e858eb6041

--------------------------------
Class: PerQualityLevelInt
	int Default;//[Offset: 0x10, Size: 0x4]
	<int,int> PerQuality;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGuid;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGuid;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: DoubleVectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Vector4d ParameterValue;//[Offset: 0x10, Size: 0x20]
	Guid ExpressionGuid;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Vector4d
	double X;//[Offset: 0x0, Size: 0x8]
	double Y;//[Offset: 0x8, Size: 0x8]
	double Z;//[Offset: 0x10, Size: 0x8]
	double W;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGuid;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGuid;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: RuntimeVirtualTexture.Object
	int TileCount;//[Offset: 0x28, Size: 0x4]
	int TileSize;//[Offset: 0x2c, Size: 0x4]
	int TileBorderSize;//[Offset: 0x30, Size: 0x4]
	enum MaterialType;//[Offset: 0x34, Size: 0x1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	bool bUseLowQualityCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1]
	int RemoveLowMips;//[Offset: 0x3c, Size: 0x4]
	byte LODGroup;//[Offset: 0x40, Size: 0x1]
	int Size;//[Offset: 0x44, Size: 0x4]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 0x8]
	int GetTileSize();// 0x34f558eb6041
	int GetTileCount();// 0x34b258eb6041
	int GetTileBorderSize();// 0x34b158eb6041
	int GetSize();// 0x34b058eb6041
	int GetPageTableSize();// 0x34af58eb6041

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int FirstResourceMemMip;//[Offset: 0x1f0, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1]
	byte AddressX;//[Offset: 0x1f5, Size: 0x1]
	byte AddressY;//[Offset: 0x1f6, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0x1f8, Size: 0x8]
	int Blueprint_GetSizeY();// 0x2ddc58eb6041
	int Blueprint_GetSizeX();// 0x2e1d58eb6041

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGuid;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8]
	int NumCharacters;//[Offset: 0x118, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10]
	float ScalingFactor;//[Offset: 0x130, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x15, Size: 0x1]
	FString Chars;//[Offset: 0x18, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4]
	int XPadding;//[Offset: 0x78, Size: 0x4]
	int YPadding;//[Offset: 0x7c, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int Kerning;//[Offset: 0x94, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x14, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x15, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x18, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	FString Cultures;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_OutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	byte BlendMode;//[Offset: 0x2, Size: 0x1]
	byte ShadingModel;//[Offset: 0x3, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	MaterialLayersFunctions MaterialLayers;//[Offset: 0x30, Size: 0x20]
	bool bHasMaterialLayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGuid;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 0x1]

--------------------------------
Class: StaticTerrainLayerWeightParameter
	FName LayerName;//[Offset: 0x0, Size: 0x8]
	int WeightmapIndex;//[Offset: 0x8, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280, Size: 0x1]
	bool bIsLocalViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x280, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x284, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x288, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x289, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x28a, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x290, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x298, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x2a8, Size: 0x8]
	Controller* Controller;//[Offset: 0x2b0, Size: 0x8]
	Controller* PreviousController;//[Offset: 0x2b8, Size: 0x8]
	delegate ReceiveControllerChangedDelegate;//[Offset: 0x2c4, Size: 0x1]
	delegate ReceiveRestartedDelegate;//[Offset: 0x2c5, Size: 0x1]
	Vector ControlInputVector;//[Offset: 0x2c8, Size: 0x18]
	Vector LastControlInputVector;//[Offset: 0x2e0, Size: 0x18]
	void SpawnDefaultController();// 0x1de758eb6041
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x1de658eb6041
	void ReceiveUnpossessed(Controller* OldController);// 0x1de558eb6041
	void ReceiveRestarted();// 0x1de458eb6041
	void ReceivePossessed(Controller* NewController);// 0x1e2558eb6041
	void ReceiveControllerChanged(Controller* OldController, Controller* NewController);// 0x1de258eb6041
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x1de158eb6041
	void OnRep_PlayerState();// 0x1de058eb6041
	void OnRep_Controller();// 0x1ddf58eb6041
	bool IsPlayerControlled();// 0x1dde58eb6041
	bool IsPawnControlled();// 0x1ddd58eb6041
	bool IsMoveInputIgnored();// 0x1ddc58eb6041
	bool IsLocallyViewed();// 0x1ddb58eb6041
	bool IsLocallyControlled();// 0x1dda58eb6041
	bool IsControlled();// 0x1dd958eb6041
	bool IsBotControlled();// 0x1dd858eb6041
	Vector GetPendingMovementInputVector();// 0x1dd758eb6041
	Vector GetNavAgentLocation();// 0x1dd658eb6041
	PawnMovementComponent* GetMovementComponent();// 0x1dd558eb6041
	Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x1dd458eb6041
	PlayerController* GetLocalViewingPlayerController();// 0x1dd358eb6041
	Vector GetLastMovementInputVector();// 0x1dd258eb6041
	Rotator GetControlRotation();// 0x1dd158eb6041
	Controller* GetController();// 0x1dd058eb6041
	Rotator GetBaseAimRotation();// 0x1dcf58eb6041
	void DetachFromControllerPendingDestroy();// 0x1dce58eb6041
	Vector ConsumeMovementInputVector();// 0x1dcd58eb6041
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x1dcc58eb6041
	void AddControllerYawInput(float Val);// 0x1dcb58eb6041
	void AddControllerRollInput(float Val);// 0x1dca58eb6041
	void AddControllerPitchInput(float Val);// 0x1a6158eb6041

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x280, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x290, Size: 0x10]
	delegate OnPossessedPawnChanged;//[Offset: 0x2a0, Size: 0x10]
	FName StateName;//[Offset: 0x2b0, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x2b8, Size: 0x8]
	Character* Character;//[Offset: 0x2c8, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x2d0, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x2f0, Size: 0x18]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x308, Size: 0x1]
	void UnPossess();// 0x264a58eb6041
	void StopMovement();// 0x264958eb6041
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x264858eb6041
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x264758eb6041
	void SetIgnoreLookInput(bool bNewLookInput);// 0x264658eb6041
	void SetControlRotation(out const Rotator NewRotation);// 0x264558eb6041
	void ResetIgnoreMoveInput();// 0x264458eb6041
	void ResetIgnoreLookInput();// 0x264358eb6041
	void ResetIgnoreInputFlags();// 0x264258eb6041
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x264158eb6041
	void ReceivePossess(Pawn* PossessedPawn);// 0x264058eb6041
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x263f58eb6041
	void Possess(Pawn* InPawn);// 0x263e58eb6041
	void OnRep_PlayerState();// 0x267f58eb6041
	void OnRep_Pawn();// 0x263c58eb6041
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x263b58eb6041
	Pawn* K2_GetPawn();// 0x263a58eb6041
	bool IsPlayerController();// 0x263958eb6041
	bool IsMoveInputIgnored();// 0x263858eb6041
	bool IsLookInputIgnored();// 0x263758eb6041
	bool IsLocalPlayerController();// 0x263658eb6041
	bool IsLocalController();// 0x263558eb6041
	Actor* GetViewTarget();// 0x263458eb6041
	void GetPlayerViewPoint(out Vector Location, out Rotator Rotation);// 0x263358eb6041
	Rotator GetDesiredRotation();// 0x263258eb6041
	Rotator GetControlRotation();// 0x263158eb6041
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x263058eb6041
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x262f58eb6041

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x278, Size: 0x4]
	int PlayerId;//[Offset: 0x27c, Size: 0x4]
	byte CompressedPing;//[Offset: 0x280, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x282, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x282, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x282, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x282, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x282, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x282, Size: 0x1]
	int StartTime;//[Offset: 0x284, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x288, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x298, Size: 0x10]
	UniqueNetIdRepl UniqueId;//[Offset: 0x2a8, Size: 0x30]
	delegate OnPawnSet;//[Offset: 0x2e0, Size: 0x10]
	Pawn* PawnPrivate;//[Offset: 0x2f0, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x368, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x345f58eb6041
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x345e58eb6041
	void OnRep_UniqueId();// 0x345d58eb6041
	void OnRep_Score();// 0x345c58eb6041
	void OnRep_PlayerName();// 0x345b58eb6041
	void OnRep_PlayerId();// 0x345a58eb6041
	void OnRep_bIsInactive();// 0x345958eb6041
	void OnPawnPrivateDestroyed(Actor* InActor);// 0x345858eb6041
	bool IsOnlyASpectator();// 0x345758eb6041
	FString GetPlayerName();// 0x345658eb6041
	PlayerController* GetPlayerController();// 0x345558eb6041
	float GetPingInMilliseconds();// 0x345458eb6041
	Pawn* GetPawn();// 0x345358eb6041
	UniqueNetIdRepl BP_GetUniqueId();// 0x345258eb6041

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x310, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x318, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x320, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x328, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x330, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x338, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x348, Size: 0x18]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x378, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x380, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x390, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x3a4, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x3a8, Size: 0x18]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x3c0, Size: 0x18]
	int ClientCap;//[Offset: 0x3d8, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x3e0, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x3e8, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x3f0, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x3f8, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x488, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x489, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x4e8, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x4f0, Size: 0x8]
	float InputYawScale;//[Offset: 0x510, Size: 0x4]
	float InputPitchScale;//[Offset: 0x514, Size: 0x4]
	float InputRollScale;//[Offset: 0x518, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51c, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51c, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x51c, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x51c, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x51c, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x51c, Size: 0x1]
	bool bEnableStreamingSource;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x51c, Size: 0x1]
	bool bStreamingSourceShouldActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x51c, Size: 0x1]
	bool bStreamingSourceShouldBlockOnSlowStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51d, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x520, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x528, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x538, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x539, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x53a, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x53b, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x53c, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x540, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x542, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x5b8, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c0, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x5d8, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x658, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x668, Size: 0x18]
	bool WasInputKeyJustReleased(Key Key);// 0x26e158eb6041
	bool WasInputKeyJustPressed(Key Key);// 0x26e058eb6041
	void ToggleSpeaking(bool bInSpeaking);// 0x26df58eb6041
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x26de58eb6041
	void SwitchLevel(FString URL);// 0x26dd58eb6041
	bool StreamingSourceShouldBlockOnSlowStreaming();// 0x26dc58eb6041
	bool StreamingSourceShouldActivate();// 0x26db58eb6041
	void StopHapticEffect(enum Hand);// 0x26da58eb6041
	void StartFire(byte FireModeNum);// 0x26d958eb6041
	void SetVirtualJoystickVisibility(bool bVisible);// 0x26d858eb6041
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x26d758eb6041
	void SetName(FString S);// 0x26d658eb6041
	void SetMouseLocation(const int X, const int Y);// 0x26d558eb6041
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x26d458eb6041
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x26d358eb6041
	void SetDisableHaptics(bool bNewDisabled);// 0x26d258eb6041
	void SetDeprecatedInputYawScale(float NewValue);// 0x26d158eb6041
	void SetDeprecatedInputRollScale(float NewValue);// 0x26d058eb6041
	void SetDeprecatedInputPitchScale(float NewValue);// 0x26cf58eb6041
	void SetControllerLightColor(Color Color);// 0x26ce58eb6041
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x26cd58eb6041
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x26cc58eb6041
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x26cb58eb6041
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x26ca58eb6041
	void ServerViewPrevPlayer();// 0x26c958eb6041
	void ServerViewNextPlayer();// 0x26c858eb6041
	void ServerVerifyViewTarget();// 0x26c758eb6041
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x26c658eb6041
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x26c558eb6041
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x26c458eb6041
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x26c358eb6041
	void ServerUnblockPlayer(UniqueNetIdRepl PlayerId);// 0x26c258eb6041
	void ServerToggleAILogging();// 0x270358eb6041
	void ServerShortTimeout();// 0x26c058eb6041
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x26bf58eb6041
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x26be58eb6041
	void ServerRestartPlayer();// 0x26bd58eb6041
	void ServerRecvClientInputFrame(int RecvClientInputFrame, const byte[] Data);// 0x26bc58eb6041
	void ServerPause();// 0x26bb58eb6041
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x26ba58eb6041
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x26b958eb6041
	void ServerExecRPC(FString Msg);// 0x26b858eb6041
	void ServerExec(FString Msg);// 0x26b758eb6041
	void ServerCheckClientPossessionReliable();// 0x26b658eb6041
	void ServerCheckClientPossession();// 0x26b558eb6041
	void ServerChangeName(FString S);// 0x26b458eb6041
	void ServerCamera(FName NewMode);// 0x26b358eb6041
	void ServerBlockPlayer(UniqueNetIdRepl PlayerId);// 0x26b258eb6041
	void ServerAcknowledgePossession(Pawn* P);// 0x26b158eb6041
	void SendToConsole(FString Command);// 0x26b058eb6041
	void RestartLevel();// 0x26af58eb6041
	void ResetControllerLightColor();// 0x26ae58eb6041
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x26ad58eb6041
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x26ac58eb6041
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x26ab58eb6041
	void Pause();// 0x26aa58eb6041
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x26a958eb6041
	void LocalTravel(FString URL);// 0x26a858eb6041
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x26a758eb6041
	bool IsStreamingSourceEnabled();// 0x26a658eb6041
	bool IsInputKeyDown(Key Key);// 0x26a558eb6041
	void GetViewportSize(out int SizeX, out int SizeY);// 0x26a458eb6041
	SpectatorPawn* GetSpectatorPawn();// 0x26a358eb6041
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x26a258eb6041
	Vector GetInputVectorKeyState(Key Key);// 0x26a158eb6041
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x26e258eb6041
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x269f58eb6041
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x269e58eb6041
	float GetInputKeyTimeDown(Key Key);// 0x269d58eb6041
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x269c58eb6041
	float GetInputAnalogKeyState(Key Key);// 0x269b58eb6041
	HUD* GetHUD();// 0x269a58eb6041
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x269958eb6041
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x269858eb6041
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x269758eb6041
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x269658eb6041
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x269558eb6041
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x269458eb6041
	Vector GetFocalLocation();// 0x269358eb6041
	float GetDeprecatedInputYawScale();// 0x269258eb6041
	float GetDeprecatedInputRollScale();// 0x269158eb6041
	float GetDeprecatedInputPitchScale();// 0x269058eb6041
	void FOV(float NewFOV);// 0x268f58eb6041
	void EnableCheats();// 0x268e58eb6041
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x268d58eb6041
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x268c58eb6041
	void ConsoleKey(Key Key);// 0x268b58eb6041
	void ClientWasKicked(const FText KickReason);// 0x268a58eb6041
	void ClientVoiceHandshakeComplete();// 0x268958eb6041
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x268858eb6041
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x268758eb6041
	void ClientUnmutePlayers(const UniqueNetIdRepl[] PlayerIds);// 0x268658eb6041
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x268558eb6041
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x268458eb6041
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x268358eb6041
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x268258eb6041
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x268158eb6041
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x268058eb6041
	void ClientStopCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x26c158eb6041
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x267e58eb6041
	void ClientStartOnlineSession();// 0x267d58eb6041
	void ClientStartCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent);// 0x267c58eb6041
	void ClientStartCameraShake(class CameraShakeBase Shake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x267b58eb6041
	void ClientSpawnGenericCameraLensEffect(class Actor LensEffectEmitterClass);// 0x267a58eb6041
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x267958eb6041
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x267858eb6041
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x267758eb6041
	void ClientSetHUD(class HUD NewHUDClass);// 0x267658eb6041
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x267558eb6041
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x267458eb6041
	void ClientSetCameraMode(FName NewCamMode);// 0x267358eb6041
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished);// 0x267258eb6041
	void ClientSetBlockOnAsyncLoading();// 0x267158eb6041
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x267058eb6041
	void ClientReturnToMainMenu(FString ReturnReason);// 0x266f58eb6041
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x266e58eb6041
	void ClientRestart(Pawn* NewPawn);// 0x266d58eb6041
	void ClientReset();// 0x266c58eb6041
	void ClientRepObjRef(Object* Object);// 0x266b58eb6041
	void ClientRecvServerAckFrameDebug(byte NumBuffered, float TargetNumBufferedCmds);// 0x266a58eb6041
	void ClientRecvServerAckFrame(int LastProcessedInputFrame, int RecvServerFrameNumber, int8 TimeDilation);// 0x266958eb6041
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int SWITCH, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x266858eb6041
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x266758eb6041
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x266658eb6041
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x266558eb6041
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x266458eb6041
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x266358eb6041
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum Space, Rotator CustomPlaySpace);// 0x266258eb6041
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x266158eb6041
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x266058eb6041
	void ClientIgnoreMoveInput(bool bIgnore);// 0x265f58eb6041
	void ClientIgnoreLookInput(bool bIgnore);// 0x26a058eb6041
	void ClientGotoState(FName NewState);// 0x265d58eb6041
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x265c58eb6041
	void ClientForceGarbageCollection();// 0x265b58eb6041
	void ClientFlushLevelStreaming();// 0x265a58eb6041
	void ClientEndOnlineSession();// 0x265958eb6041
	void ClientEnableNetworkVoice(bool bEnable);// 0x265858eb6041
	void ClientCommitMapChange();// 0x265758eb6041
	void ClientClearCameraLensEffects();// 0x265658eb6041
	void ClientCapBandwidth(int Cap);// 0x265558eb6041
	void ClientCancelPendingMapChange();// 0x265458eb6041
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x265358eb6041
	void ClearAudioListenerOverride();// 0x265258eb6041
	void ClearAudioListenerAttenuationOverride();// 0x265158eb6041
	bool CanRestartPlayer();// 0x265058eb6041
	void Camera(FName NewMode);// 0x264f58eb6041
	void AddYawInput(float Val);// 0x264e58eb6041
	void AddRollInput(float Val);// 0x264d58eb6041
	void AddPitchInput(float Val);// 0x264c58eb6041
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x264b58eb6041

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x130, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x140, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x150, Size: 0x14]
	delegate ForegroundColorDelegate;//[Offset: 0x164, Size: 0x10]
	delegate OnVisibilityChanged;//[Offset: 0x178, Size: 0x10]
	Margin Padding;//[Offset: 0x1a0, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1b0, Size: 0x10]
	UMGSequenceTickManager* AnimationTickManager;//[Offset: 0x1c0, Size: 0x8]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1c8, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1d8, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x1e8, Size: 0x8]
	int Priority;//[Offset: 0x1f0, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f4, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f4, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f4, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f4, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f4, Size: 0x1]
	enum TickFrequency;//[Offset: 0x208, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x210, Size: 0x8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x218, Size: 0x10]
	void UnregisterInputComponent();// 0x2a0358eb6041
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x2a0258eb6041
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x2a0158eb6041
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x2a0058eb6041
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x29ff58eb6041
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x29fe58eb6041
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x29fd58eb6041
	void StopListeningForAllInputActions();// 0x29fc58eb6041
	void StopAnimationsAndLatentActions();// 0x29fb58eb6041
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x29fa58eb6041
	void StopAllAnimations();// 0x29f958eb6041
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x29f858eb6041
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x29f758eb6041
	void SetPadding(Margin InPadding);// 0x29f658eb6041
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x29f558eb6041
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x29f458eb6041
	void SetInputActionPriority(int NewPriority);// 0x29f358eb6041
	void SetInputActionBlocking(bool bShouldBlock);// 0x29f258eb6041
	void SetForegroundColor(SlateColor InForegroundColor);// 0x29f158eb6041
	void SetDesiredSizeInViewport(Vector2D Size);// 0x29f058eb6041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x29ef58eb6041
	void SetAnimationCurrentTime(const WidgetAnimation* InAnimation, float InTime);// 0x29ee58eb6041
	void SetAnchorsInViewport(Anchors Anchors);// 0x29ed58eb6041
	void SetAlignmentInViewport(Vector2D Alignment);// 0x29ec58eb6041
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x2a2d58eb6041
	void RemoveFromViewport();// 0x29ea58eb6041
	void RegisterInputComponent();// 0x29e958eb6041
	void PreConstruct(bool IsDesignTime);// 0x29e858eb6041
	void PlaySound(SoundBase* SoundToPlay);// 0x29e758eb6041
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x29e658eb6041
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x29e558eb6041
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x29e458eb6041
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x29e358eb6041
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x29e258eb6041
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x29e158eb6041
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x29e058eb6041
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x29df58eb6041
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x29de58eb6041
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x29dd58eb6041
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x29dc58eb6041
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29db58eb6041
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x29da58eb6041
	void OnPaint(out PaintContext Context);// 0x29d958eb6041
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29d858eb6041
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29d758eb6041
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x29d658eb6041
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29d558eb6041
	void OnMouseCaptureLost();// 0x29d458eb6041
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29d358eb6041
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x29d258eb6041
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x29d158eb6041
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x29d058eb6041
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x29cf58eb6041
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x29ce58eb6041
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x29cd58eb6041
	void OnInitialized();// 0x29cc58eb6041
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x29cb58eb6041
	void OnFocusLost(FocusEvent InFocusEvent);// 0x2a0c58eb6041
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x29c958eb6041
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x29c858eb6041
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x29c758eb6041
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x29c658eb6041
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x29c558eb6041
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x29c458eb6041
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x29c358eb6041
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x29c258eb6041
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x29c158eb6041
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x29c058eb6041
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x29bf58eb6041
	bool IsPlayingAnimation();// 0x29be58eb6041
	bool IsListeningForInputAction(FName ActionName);// 0x29bd58eb6041
	bool IsInViewport();// 0x29bc58eb6041
	bool IsInteractable();// 0x29bb58eb6041
	bool IsAnyAnimationPlaying();// 0x29ba58eb6041
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x29b958eb6041
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x29b858eb6041
	Pawn* GetOwningPlayerPawn();// 0x29b758eb6041
	PlayerCameraManager* GetOwningPlayerCameraManager();// 0x29b658eb6041
	bool GetIsVisible();// 0x29b558eb6041
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x29b458eb6041
	Anchors GetAnchorsInViewport();// 0x29b358eb6041
	Vector2D GetAlignmentInViewport();// 0x29b258eb6041
	void FlushAnimations();// 0x29b158eb6041
	void Destruct();// 0x29b058eb6041
	void Construct();// 0x29af58eb6041
	void CancelLatentActions();// 0x29ae58eb6041
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x29ad58eb6041
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x29ac58eb6041
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x29ab58eb6041
	void AddToViewport(int ZOrder);// 0x29aa58eb6041
	bool AddToPlayerScreen(int ZOrder);// 0x29eb58eb6041

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 0x38]
	Vector2D RenderTransformPivot;//[Offset: 0xc8, Size: 0x10]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd8, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd8, Size: 0x1]
	enum FlowDirectionPreference;//[Offset: 0xd9, Size: 0x1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xe0, Size: 0x8]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	byte Cursor;//[Offset: 0xe9, Size: 0x1]
	enum Clipping;//[Offset: 0xea, Size: 0x1]
	enum Visibility;//[Offset: 0xeb, Size: 0x1]
	float RenderOpacity;//[Offset: 0xec, Size: 0x4]
	WidgetNavigation* Navigation;//[Offset: 0xf0, Size: 0x8]
	PropertyBinding*[] NativeBindings;//[Offset: 0x118, Size: 0x10]
	void SetVisibility(enum InVisibility);// 0x106158eb6041
	void SetUserFocus(PlayerController* PlayerController);// 0x106058eb6041
	void SetToolTipText(out const FText InToolTipText);// 0x105f58eb6041
	void SetToolTip(Widget* Widget);// 0x105e58eb6041
	void SetRenderTranslation(Vector2D Translation);// 0x105d58eb6041
	void SetRenderTransformPivot(Vector2D Pivot);// 0x105c58eb6041
	void SetRenderTransformAngle(float Angle);// 0x105a58eb6041
	void SetRenderTransform(WidgetTransform InTransform);// 0x105958eb6041
	void SetRenderShear(Vector2D Shear);// 0x105858eb6041
	void SetRenderScale(Vector2D Scale);// 0x105758eb6041
	void SetRenderOpacity(float InOpacity);// 0x105658eb6041
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x105558eb6041
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x105458eb6041
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x105258eb6041
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x105158eb6041
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x105058eb6041
	void SetKeyboardFocus();// 0x104f58eb6041
	void SetIsEnabled(bool bInIsEnabled);// 0x104e58eb6041
	void SetFocus();// 0x104d58eb6041
	void SetCursor(byte InCursor);// 0x104c58eb6041
	void SetClipping(enum InClipping);// 0x104b58eb6041
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x104a58eb6041
	void ResetCursor();// 0x104958eb6041
	void RemoveFromParent();// 0x104858eb6041
	EventReply OnReply__DelegateSignature();// 0x104458eb6041
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x104358eb6041
	bool IsVisible();// 0x104258eb6041
	bool IsHovered();// 0x104158eb6041
	void InvalidateLayoutAndVolatility();// 0x104058eb6041
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x103f58eb6041
	bool HasUserFocus(PlayerController* PlayerController);// 0x108c58eb6041
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x103d58eb6041
	bool HasMouseCapture();// 0x103c58eb6041
	bool HasKeyboardFocus();// 0x103b58eb6041
	bool HasFocusedDescendants();// 0x103a58eb6041
	bool HasAnyUserFocus();// 0x103958eb6041
	Widget* GetWidget__DelegateSignature();// 0x103858eb6041
	enum GetVisibility();// 0x103758eb6041
	Geometry GetTickSpaceGeometry();// 0x103658eb6041
	FText GetText__DelegateSignature();// 0x103458eb6041
	enum GetSlateVisibility__DelegateSignature();// 0x103358eb6041
	SlateColor GetSlateColor__DelegateSignature();// 0x102e58eb6041
	SlateBrush GetSlateBrush__DelegateSignature();// 0x102d58eb6041
	float GetRenderTransformAngle();// 0x102c58eb6041
	float GetRenderOpacity();// 0x102b58eb6041
	PanelWidget* GetParent();// 0x102a58eb6041
	Geometry GetPaintSpaceGeometry();// 0x102958eb6041
	PlayerController* GetOwningPlayer();// 0x102858eb6041
	LocalPlayer* GetOwningLocalPlayer();// 0x102758eb6041
	byte GetMouseCursor__DelegateSignature();// 0x102658eb6041
	LinearColor GetLinearColor__DelegateSignature();// 0x102558eb6041
	bool GetIsEnabled();// 0x102458eb6041
	int GetInt32__DelegateSignature();// 0x102358eb6041
	GameInstance* GetGameInstance();// 0x102258eb6041
	float GetFloat__DelegateSignature();// 0x102158eb6041
	Vector2D GetDesiredSize();// 0x102058eb6041
	enum GetClipping();// 0x101f58eb6041
	enum GetCheckBoxState__DelegateSignature();// 0x101d58eb6041
	Geometry GetCachedGeometry();// 0xffffff8158eb6000
	bool GetBool__DelegateSignature();// 0x101b58eb6041
	FText GetAccessibleText();// 0x101a58eb6041
	FText GetAccessibleSummaryText();// 0x101958eb6041
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x101858eb6041
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x101758eb6041
	void ForceVolatile(bool bForce);// 0x101658eb6041
	void ForceLayoutPrepass();// 0x101158eb6041

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	enum ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x68, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x80, Size: 0x10]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x2a1758eb6041
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x2a1658eb6041
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x2a1558eb6041
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x2a1458eb6041
	float GetStartTime();// 0x2a1358eb6041
	float GetEndTime();// 0x2a1258eb6041
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x2a1158eb6041
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x2a1058eb6041

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneCompiledData* CompiledData;//[Offset: 0x50, Size: 0x8]
	enum DefaultCompletionMode;//[Offset: 0x58, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	enum SequenceFlags;//[Offset: 0x5b, Size: 0x1]
	MovieSceneTimecodeSource GetEarliestTimecodeSource();// 0x200e58eb6041
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x200d58eb6041
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x200c58eb6041

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneTimecodeSource
	Timecode Timecode;//[Offset: 0x0, Size: 0x14]

--------------------------------
Class: Timecode
	int Hours;//[Offset: 0x0, Size: 0x4]
	int Minutes;//[Offset: 0x4, Size: 0x4]
	int Seconds;//[Offset: 0x8, Size: 0x4]
	int Frames;//[Offset: 0xc, Size: 0x4]
	bool bDropFrameFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MovieSceneObjectBindingID
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	int SequenceID;//[Offset: 0x10, Size: 0x4]
	int ResolveParentIndex;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: MovieSceneCompiledData.Object
	MovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x28, Size: 0x160]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x188, Size: 0x118]
	MovieSceneEntityComponentField EntityComponentField;//[Offset: 0x2a0, Size: 0xf0]
	MovieSceneEvaluationField TrackTemplateField;//[Offset: 0x390, Size: 0x30]
	FrameTime[] DeterminismFences;//[Offset: 0x3c0, Size: 0x10]
	Guid CompiledSignature;//[Offset: 0x3d0, Size: 0x10]
	Guid CompilerVersion;//[Offset: 0x3e0, Size: 0x10]
	MovieSceneSequenceCompilerMaskStruct AccumulatedMask;//[Offset: 0x3f0, Size: 0x1]
	MovieSceneSequenceCompilerMaskStruct AllocatedMask;//[Offset: 0x3f1, Size: 0x1]
	enum AccumulatedFlags;//[Offset: 0x3f2, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	Guid SequenceSignature;//[Offset: 0xa0, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0xb0, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0xb8, Size: 0xa8]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingID;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneTrack* SourceTrack;//[Offset: 0x14, Size: 0x8]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0x68, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	int[] RowsDisabled;//[Offset: 0x58, Size: 0x10]
	Guid EvaluationFieldGuid;//[Offset: 0x6c, Size: 0x10]
	MovieSceneTrackEvaluationField EvaluationField;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MovieSceneTrackEvaluationField
	MovieSceneTrackEvaluationFieldEntry[] Entries;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneTrackEvaluationFieldEntry
	MovieSceneSection* Section;//[Offset: 0x0, Size: 0x8]
	FrameNumberRange Range;//[Offset: 0x8, Size: 0x10]
	FrameNumber ForcedTime;//[Offset: 0x18, Size: 0x4]
	enum Flags;//[Offset: 0x1c, Size: 0x1]
	int16 LegacySortOrder;//[Offset: 0x1e, Size: 0x2]

--------------------------------
Class: MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x2]
	MovieSceneEasingSettings Easing;//[Offset: 0x58, Size: 0x38]
	MovieSceneFrameRange SectionRange;//[Offset: 0x90, Size: 0x10]
	FrameNumber PreRollFrames;//[Offset: 0xa0, Size: 0x4]
	FrameNumber PostRollFrames;//[Offset: 0xa4, Size: 0x4]
	int RowIndex;//[Offset: 0xa8, Size: 0x4]
	int OverlapPriority;//[Offset: 0xac, Size: 0x4]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	float StartTime;//[Offset: 0xb4, Size: 0x4]
	float EndTime;//[Offset: 0xb8, Size: 0x4]
	float PrerollTime;//[Offset: 0xbc, Size: 0x4]
	float PostrollTime;//[Offset: 0xc0, Size: 0x4]
	bool bIsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1]
	bool bSupportsInfiniteRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 0x1]
	OptionalMovieSceneBlendType BlendType;//[Offset: 0xc6, Size: 0x2]
	void SetRowIndex(int NewRowIndex);// 0x202258eb6041
	void SetPreRollFrames(int InPreRollFrames);// 0x202158eb6041
	void SetPostRollFrames(int InPostRollFrames);// 0x202058eb6041
	void SetOverlapPriority(int NewPriority);// 0x201f58eb6041
	void SetIsLocked(bool bInIsLocked);// 0x201e58eb6041
	void SetIsActive(bool bInIsActive);// 0x201d58eb6041
	void SetCompletionMode(enum InCompletionMode);// 0x201c58eb6041
	void SetBlendType(enum InBlendType);// 0x201b58eb6041
	bool IsLocked();// 0x201a58eb6041
	bool IsActive();// 0x201958eb6041
	int GetRowIndex();// 0x201858eb6041
	int GetPreRollFrames();// 0x201758eb6041
	int GetPostRollFrames();// 0x201658eb6041
	int GetOverlapPriority();// 0x201558eb6041
	enum GetCompletionMode();// 0x201458eb6041
	OptionalMovieSceneBlendType GetBlendType();// 0x201358eb6041

--------------------------------
Class: OptionalMovieSceneBlendType
	enum BlendType;//[Offset: 0x0, Size: 0x1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: MovieSceneSectionEvalOptions
	bool bCanEditCompletionMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	enum CompletionMode;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: MovieSceneEasingSettings
	int AutoEaseInDuration;//[Offset: 0x0, Size: 0x4]
	int AutoEaseOutDuration;//[Offset: 0x4, Size: 0x4]
	interface class None* EaseIn;//[Offset: 0x8, Size: 0x10]
	bool bManualEaseIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int ManualEaseInDuration;//[Offset: 0x1c, Size: 0x4]
	interface class None* EaseOut;//[Offset: 0x20, Size: 0x10]
	bool bManualEaseOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int ManualEaseOutDuration;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: FrameNumberRange
	FrameNumberRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FrameNumberRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FrameNumberRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	FrameNumber Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: MovieSceneSequenceHierarchy
	MovieSceneSequenceHierarchyNode RootNode;//[Offset: 0x0, Size: 0x18]
	MovieSceneSubSequenceTree Tree;//[Offset: 0x18, Size: 0x60]
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x78, Size: 0x50]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0xc8, Size: 0x50]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneSubSequenceTree

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0x18, Size: 0x20]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x38, Size: 0x20]
	FrameRate TickResolution;//[Offset: 0x58, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x60, Size: 0x4]
	MovieSceneFrameRange ParentPlayRange;//[Offset: 0x64, Size: 0x10]
	FrameNumber ParentStartFrameOffset;//[Offset: 0x74, Size: 0x4]
	FrameNumber ParentEndFrameOffset;//[Offset: 0x78, Size: 0x4]
	FrameNumber ParentFirstLoopStartFrameOffset;//[Offset: 0x7c, Size: 0x4]
	bool bCanLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	MovieSceneFrameRange PlayRange;//[Offset: 0x84, Size: 0x10]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x94, Size: 0x10]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0xa4, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0xb4, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0xc4, Size: 0x10]
	int16 HierarchicalBias;//[Offset: 0xd4, Size: 0x2]
	bool bHasHierarchicalEasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 0x1]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0xd8, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0xf8, Size: 0x10]

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 0xc]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber Start;//[Offset: 0x0, Size: 0x4]
	FrameNumber End;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneEntityComponentField
	MovieSceneEvaluationFieldEntityTree PersistentEntityTree;//[Offset: 0x0, Size: 0x60]
	MovieSceneEvaluationFieldEntityTree OneShotEntityTree;//[Offset: 0x60, Size: 0x60]
	MovieSceneEvaluationFieldEntity[] Entities;//[Offset: 0xc0, Size: 0x10]
	MovieSceneEvaluationFieldEntityMetaData[] EntityMetaData;//[Offset: 0xd0, Size: 0x10]
	MovieSceneEvaluationFieldSharedEntityMetaData[] SharedMetaData;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationFieldEntityTree

--------------------------------
Class: MovieSceneEvaluationFieldEntity
	MovieSceneEvaluationFieldEntityKey Key;//[Offset: 0x0, Size: 0xc]
	int SharedMetaDataIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldEntityKey
	Object* EntityOwner;//[Offset: 0x0, Size: 0x8]
	uint32 EntityID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldEntityMetaData
	FString OverrideBoundPropertyPath;//[Offset: 0x0, Size: 0x10]
	FrameNumber ForcedTime;//[Offset: 0x10, Size: 0x4]
	enum Flags;//[Offset: 0x18, Size: 0x1]
	bool bEvaluateInSequencePreRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bEvaluateInSequencePostRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationFieldSharedEntityMetaData
	Guid ObjectBindingID;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneFieldEntry_EvaluationTrack[] TrackLUT;//[Offset: 0x10, Size: 0x10]
	MovieSceneFieldEntry_ChildTemplate[] SectionLUT;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int NumInitPtrs;//[Offset: 0x0, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneFieldEntry_EvaluationTrack
	MovieSceneEvaluationFieldTrackPtr TrackPtr;//[Offset: 0x0, Size: 0x8]
	uint16 NumChildren;//[Offset: 0x8, Size: 0x2]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneFieldEntry_ChildTemplate
	uint16 ChildIndex;//[Offset: 0x0, Size: 0x2]
	enum Flags;//[Offset: 0x2, Size: 0x1]
	FrameNumber ForcedTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint16 SetupIndex;//[Offset: 0xc, Size: 0x2]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 0x2]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceCompilerMaskStruct
	bool bHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvaluationTemplate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluationTemplateField;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEntityComponentField;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 0x50]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0x108, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 0x8]
	enum EvaluationType;//[Offset: 0x118, Size: 0x1]
	enum ClockSource;//[Offset: 0x119, Size: 0x1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 0x18]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 0x10]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x60]
	FName[] Tags;//[Offset: 0x60, Size: 0x10]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool bNetAddressableName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool bEvaluateTracksWhenNotSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	Guid Guid;//[Offset: 0x74, Size: 0x10]
	FString Name;//[Offset: 0x88, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x98, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0xa0, Size: 0x10]
	enum Ownership;//[Offset: 0xb0, Size: 0x1]
	FName LevelName;//[Offset: 0xb4, Size: 0x8]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	Guid ParentGuid;//[Offset: 0x30, Size: 0x10]
	MovieSceneObjectBindingID SpawnableObjectBindingID;//[Offset: 0x40, Size: 0x18]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x8, Size: 0x10]
	bool bIsDeterminismFence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Geometry

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x238, Size: 0x8]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x248, Size: 0xe0]
	void SetUserTag(FName InUserTag);// 0x29a058eb6041
	FName GetUserTag();// 0x299f58eb6041

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	MovieSceneSequence* WeakRootSequence;//[Offset: 0x0, Size: 0x8]
	MovieSceneCompiledDataManager* CompiledDataManager;//[Offset: 0x8, Size: 0x8]
	MovieSceneEntitySystemLinker* EntitySystemLinker;//[Offset: 0x18, Size: 0x8]
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x88, Size: 0x50]

--------------------------------
Class: MovieSceneCompiledDataManager.Object
	<int,MovieSceneSequenceHierarchy> Hierarchies;//[Offset: 0xd8, Size: 0x50]
	<int,MovieSceneEvaluationTemplate> TrackTemplates;//[Offset: 0x128, Size: 0x50]
	<int,MovieSceneEvaluationField> TrackTemplateFields;//[Offset: 0x178, Size: 0x50]
	<int,MovieSceneEntityComponentField> EntityComponentFields;//[Offset: 0x1c8, Size: 0x50]

--------------------------------
Class: MovieSceneEntitySystemLinker.Object
	MovieSceneEntitySystemGraph SystemGraph;//[Offset: 0x298, Size: 0x138]

--------------------------------
Class: MovieSceneEntitySystemGraph
	MovieSceneEntitySystemGraphNodes Nodes;//[Offset: 0x80, Size: 0x38]

--------------------------------
Class: MovieSceneEntitySystemGraphNodes

--------------------------------
Class: UMGSequenceTickManager.Object
	<UserWidget*,SequenceTickManagerWidgetData> WeakUserWidgetData;//[Offset: 0x28, Size: 0x50]
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: SequenceTickManagerWidgetData

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x10]
	Vector2D Maximum;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x10]
	Vector2D Scale;//[Offset: 0x10, Size: 0x10]
	Vector2D Shear;//[Offset: 0x20, Size: 0x10]
	float Angle;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: EventReply

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x10]
	Margin Margin;//[Offset: 0x18, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x28, Size: 0x14]
	SlateBrushOutlineSettings OutlineSettings;//[Offset: 0x40, Size: 0x40]
	Object* ResourceObject;//[Offset: 0x80, Size: 0x8]
	FName ResourceName;//[Offset: 0x88, Size: 0x8]
	Box2f UVRegion;//[Offset: 0x90, Size: 0x14]
	byte DrawAs;//[Offset: 0xa4, Size: 0x1]
	byte Tiling;//[Offset: 0xa5, Size: 0x1]
	byte Mirroring;//[Offset: 0xa6, Size: 0x1]
	byte ImageType;//[Offset: 0xa7, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 0x1]

--------------------------------
Class: SlateBrushOutlineSettings
	Vector4 CornerRadii;//[Offset: 0x0, Size: 0x20]
	SlateColor Color;//[Offset: 0x20, Size: 0x14]
	float Width;//[Offset: 0x34, Size: 0x4]
	byte RoundingType;//[Offset: 0x38, Size: 0x1]
	bool bUseBrushTransparency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]

--------------------------------
Class: Box2f
	Vector2f Min;//[Offset: 0x0, Size: 0x8]
	Vector2f Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Vector2f
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* Content;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x128, Size: 0x10]
	bool RemoveChildAt(int Index);// 0x10b458eb6041
	bool RemoveChild(Widget* Content);// 0x10b358eb6041
	bool HasChild(Widget* Content);// 0x10b258eb6041
	bool HasAnyChildren();// 0x10b158eb6041
	int GetChildrenCount();// 0x10b058eb6041
	int GetChildIndex(const Widget* Content);// 0x10af58eb6041
	Widget* GetChildAt(int Index);// 0x10ae58eb6041
	Widget*[] GetAllChildren();// 0x10ad58eb6041
	void ClearChildren();// 0x10ac58eb6041
	PanelSlot* AddChild(Widget* Content);// 0x10aa58eb6041

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 0x1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 0x1]
	FText AccessibleText;//[Offset: 0x30, Size: 0x18]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 0x10]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 0x18]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x78, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0xb8, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0xc0, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	int ControllerId;//[Offset: 0xe0, Size: 0x4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 0x4]
	World* World;//[Offset: 0x70, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8]
	void SSSwapControllers();// 0x2f7458eb6041
	void ShowTitleSafeArea();// 0x2f7358eb6041
	void SetConsoleTarget(int PlayerIndex);// 0x2f7258eb6041

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 0x10]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0x98, Size: 0x28]
	FString StreamingLevelsPrefix;//[Offset: 0xc0, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xd0, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xd8, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xe0, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xe8, Size: 0x8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xf0, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x116, Size: 0x1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x120, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x128, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x130, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x138, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x140, Size: 0x8]
	Level*[] Levels;//[Offset: 0x148, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x158, Size: 0x10]
	GameInstance* OwningGameInstance;//[Offset: 0x190, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x198, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x1a8, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1b0, Size: 0x8]
	PhysicsFieldComponent* PhysicsField;//[Offset: 0x228, Size: 0x8]
	uint32 LWILastAssignedUID;//[Offset: 0x230, Size: 0x4]
	<ActorComponent*> ComponentsThatNeedPreEndOfFrameSync;//[Offset: 0x238, Size: 0x50]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x288, Size: 0x10]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x298, Size: 0x10]
	WorldComposition* WorldComposition;//[Offset: 0x630, Size: 0x8]
	WorldPSCPool PSCPool;//[Offset: 0x6e0, Size: 0x58]
	WorldSettings* K2_GetWorldSettings();// 0x362558eb6041
	void HandleTimelineScrubbed();// 0x362458eb6041

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 0x8]
	Model* Model;//[Offset: 0xc0, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x110, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 0x10]
	FName[] StreamingTextures;//[Offset: 0x138, Size: 0x10]
	uint32 PackedTextureStreamingQualityLevelFeatureLevel;//[Offset: 0x148, Size: 0x4]
	Guid LevelBuildDataId;//[Offset: 0x210, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x220, Size: 0x8]
	IntVector LightBuildLevelOffset;//[Offset: 0x228, Size: 0xc]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 0x1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x234, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x234, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x234, Size: 0x1]
	bool bIsPartitioned;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x236, Size: 0x1]
	bool bIsWorldPartitionRuntimeCell;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x236, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x2a0, Size: 0x8]
	WorldDataLayers* WorldDataLayers;//[Offset: 0x2a8, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x2b8, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x2d8, Size: 0x10]

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x550, Size: 0x8]

--------------------------------
Class: BodySetup.BodySetupCore.Object
	KAggregateGeom AggGeom;//[Offset: 0x38, Size: 0x58]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x90, Size: 0x1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x90, Size: 0x1]
	bool bNeverNeedsCookedCollisionData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x91, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x98, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa0, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0x128, Size: 0x188]
	Vector BuildScale3D;//[Offset: 0x2b8, Size: 0x18]

--------------------------------
Class: BodySetupCore.Object
	FName BoneName;//[Offset: 0x28, Size: 0x8]
	byte PhysicsType;//[Offset: 0x30, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x31, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x32, Size: 0x1]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0x18]
	float Radius;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x19, Size: 0x1]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0x18]
	Rotator Rotation;//[Offset: 0x48, Size: 0x18]
	float X;//[Offset: 0x60, Size: 0x4]
	float Y;//[Offset: 0x64, Size: 0x4]
	float Z;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0x18]
	Rotator Rotation;//[Offset: 0x48, Size: 0x18]
	float Radius;//[Offset: 0x60, Size: 0x4]
	float Length;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	int[] IndexData;//[Offset: 0x40, Size: 0x10]
	Box ElemBox;//[Offset: 0x50, Size: 0x38]
	Transform Transform;//[Offset: 0x90, Size: 0x60]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0x18]
	Rotator Rotation;//[Offset: 0x48, Size: 0x18]
	float Radius0;//[Offset: 0x60, Size: 0x4]
	float Radius1;//[Offset: 0x64, Size: 0x4]
	float Length;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: BodyInstance.BodyInstanceCore
	byte ObjectType;//[Offset: 0x1a, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x1c, Size: 0x1]
	enum SleepFamily;//[Offset: 0x51, Size: 0x1]
	byte DOFMode;//[Offset: 0x52, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53, Size: 0x1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x53, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x53, Size: 0x1]
	bool bSmoothEdgeCollisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x53, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x53, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x53, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x53, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x54, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x70, Size: 0x8]
	byte PositionSolverIterationCount;//[Offset: 0x78, Size: 0x1]
	byte VelocitySolverIterationCount;//[Offset: 0x79, Size: 0x1]
	CollisionResponse CollisionResponses;//[Offset: 0x80, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0xb0, Size: 0x4]
	float MassInKgOverride;//[Offset: 0xb4, Size: 0x4]
	float LinearDamping;//[Offset: 0xc0, Size: 0x4]
	float AngularDamping;//[Offset: 0xc4, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0xc8, Size: 0x18]
	Vector COMNudge;//[Offset: 0xe0, Size: 0x18]
	float MassScale;//[Offset: 0xf8, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x100, Size: 0x18]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x128, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0x138, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0x140, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0x144, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0x148, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0x14c, Size: 0x4]

--------------------------------
Class: BodyInstanceCore
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x339658eb6041
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x339558eb6041
	bool RemoteEvent(FName EventName);// 0x339458eb6041
	void LevelReset();// 0x339358eb6041

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x280, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x288, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x290, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x550, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x554, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x2d6058eb6041
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x2d5f58eb6041
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x2d5e58eb6041
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x2d5d58eb6041
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x2d5c58eb6041
	float GetUnscaledCapsuleRadius();// 0x2d5b58eb6041
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x2d5a58eb6041
	float GetUnscaledCapsuleHalfHeight();// 0x2d5958eb6041
	float GetShapeScale();// 0x2d5858eb6041
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x2d9958eb6041
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x2d5658eb6041
	float GetScaledCapsuleRadius();// 0x2d5558eb6041
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x2d5458eb6041
	float GetScaledCapsuleHalfHeight();// 0x2d5358eb6041

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x538, Size: 0x8]
	class NavAreaBase* AreaClass;//[Offset: 0x540, Size: 0x8]
	Color ShapeColor;//[Offset: 0x548, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54c, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54c, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54c, Size: 0x1]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x538, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x540, Size: 0x1]
	float ScreenSize;//[Offset: 0x544, Size: 0x4]
	float U;//[Offset: 0x548, Size: 0x4]
	float UL;//[Offset: 0x54c, Size: 0x4]
	float V;//[Offset: 0x550, Size: 0x4]
	float VL;//[Offset: 0x554, Size: 0x4]
	float OpacityMaskRefVal;//[Offset: 0x558, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x2cf958eb6041
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x2cb658eb6041
	void SetSprite(Texture2D* NewSprite);// 0x2cb558eb6041
	void SetOpacityMaskRefVal(float RefVal);// 0x2cb458eb6041

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x280, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x284, Size: 0x1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x285, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x285, Size: 0x1]
	bool bEnableLargeWorlds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x285, Size: 0x1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x285, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x285, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x285, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x285, Size: 0x1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x285, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x286, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x286, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x286, Size: 0x1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x286, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x286, Size: 0x1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x286, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x286, Size: 0x1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x286, Size: 0x1]
	bool bGenerateSingleClusterForLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x287, Size: 0x1]
	class AISystemBase* AISystemClass;//[Offset: 0x288, Size: 0x28]
	Vector LevelInstancePivotOffset;//[Offset: 0x2b0, Size: 0x18]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x2c8, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x2d0, Size: 0x8]
	WorldPartition* WorldPartition;//[Offset: 0x2d8, Size: 0x8]
	float WorldToMeters;//[Offset: 0x2e0, Size: 0x4]
	float KillZ;//[Offset: 0x2e4, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x2e8, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x2f0, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x2f4, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x2f8, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x300, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x308, Size: 0x8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x310, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x318, Size: 0x4]
	Vector DefaultColorScale;//[Offset: 0x320, Size: 0x18]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x338, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x33c, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x340, Size: 0x4]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x348, Size: 0x20]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x368, Size: 0x24]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x390, Size: 0x8]
	float TimeDilation;//[Offset: 0x398, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x39c, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x3a0, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x3a4, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x3a8, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x3ac, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x3b0, Size: 0x4]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x3b8, Size: 0x80]
	NetViewer[] ReplicationViewers;//[Offset: 0x438, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x448, Size: 0x10]
	PlayerState* PauserPlayerState;//[Offset: 0x458, Size: 0x8]
	int MaxNumberOfBookmarks;//[Offset: 0x460, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x468, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x470, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x480, Size: 0x8]
	void OnRep_WorldGravityZ();// 0x363258eb6041

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 0x4]
	FName DefaultAgentName;//[Offset: 0x44, Size: 0x8]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: WorldPartition.ActorDescContainer.Object
	WorldPartitionRuntimeHash* RuntimeHash;//[Offset: 0x60, Size: 0x8]
	WorldPartitionStreamingPolicy* StreamingPolicy;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: ActorDescContainer.Object
	World* World;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WorldPartitionRuntimeHash.Object

--------------------------------
Class: WorldPartitionStreamingPolicy.Object

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x2b0, Size: 0x4]
	int Priority;//[Offset: 0x2b4, Size: 0x4]
	float FluidFriction;//[Offset: 0x2b8, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bc, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2bc, Size: 0x1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x278, Size: 0x1]
	Color BrushColor;//[Offset: 0x27c, Size: 0x4]
	int PolyFlags;//[Offset: 0x280, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x284, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x284, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x284, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x284, Size: 0x1]
	Model* Brush;//[Offset: 0x288, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x290, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x2a0, Size: 0x10]

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x538, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x540, Size: 0x8]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x30, Size: 0x8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	bool bEnableBusSends;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1]
	bool bEnableBaseSubmix;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 0x1]
	enum VirtualizationMode;//[Offset: 0x39, Size: 0x1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x90, Size: 0x50]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xe0, Size: 0x24]
	float Duration;//[Offset: 0x104, Size: 0x4]
	float MaxDistance;//[Offset: 0x108, Size: 0x4]
	float TotalSamples;//[Offset: 0x10c, Size: 0x4]
	float Priority;//[Offset: 0x110, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x118, Size: 0x8]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x160, Size: 0x10]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x78]
	SoundClass*[] ChildClasses;//[Offset: 0xa0, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0xb0, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 0x4]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 0x4]
	float LFEBleed;//[Offset: 0x10, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x14, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x18, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x1c, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 0x1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x20, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x20, Size: 0x1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x20, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x24, Size: 0x4]
	SoundModulationDefaultSettings ModulationSettings;//[Offset: 0x28, Size: 0x40]
	byte OutputTarget;//[Offset: 0x68, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x69, Size: 0x1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: SoundModulationDefaultSettings
	SoundModulationDestinationSettings VolumeModulationDestination;//[Offset: 0x0, Size: 0x10]
	SoundModulationDestinationSettings PitchModulationDestination;//[Offset: 0x10, Size: 0x10]
	SoundModulationDestinationSettings HighpassModulationDestination;//[Offset: 0x20, Size: 0x10]
	SoundModulationDestinationSettings LowpassModulationDestination;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SoundModulationDestinationSettings
	float Value;//[Offset: 0x0, Size: 0x4]
	SoundModulatorBase* Modulator;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SoundModulatorBase.Object

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x50, Size: 0x10]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x60, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x68, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x6c, Size: 0x4]
	float OutputVolume;//[Offset: 0x70, Size: 0x4]
	float WetLevel;//[Offset: 0x74, Size: 0x4]
	float DryLevel;//[Offset: 0x78, Size: 0x4]
	SoundModulationDestinationSettings OutputVolumeModulation;//[Offset: 0x80, Size: 0x10]
	SoundModulationDestinationSettings WetLevelModulation;//[Offset: 0x90, Size: 0x10]
	SoundModulationDestinationSettings DryLevelModulation;//[Offset: 0xa0, Size: 0x10]
	AudioLinkSettingsAbstract* AudioLinkSettings;//[Offset: 0xb0, Size: 0x8]
	delegate OnSubmixRecordedFileDone;//[Offset: 0xb8, Size: 0x10]
	void StopSpectralAnalysis(const Object* WorldContextObject);// 0x356658eb6041
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x356558eb6041
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x356458eb6041
	void StartSpectralAnalysis(const Object* WorldContextObject, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0x356358eb6041
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x356258eb6041
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x356158eb6041
	void SetSubmixWetLevel(const Object* WorldContextObject, float InWetLevel);// 0x356058eb6041
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x355f58eb6041
	void SetSubmixDryLevel(const Object* WorldContextObject, float InDryLevel);// 0x355e58eb6041
	void RemoveSpectralAnalysisDelegate(const Object* WorldContextObject, out const delegate OnSubmixSpectralAnalysisBP);// 0x355d58eb6041
	void AddSpectralAnalysisDelegate(const Object* WorldContextObject, out const SoundSubmixSpectralAnalysisBandSettings[] InBandSettings, out const delegate OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime);// 0x355c58eb6041
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x355b58eb6041

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: SoundSubmixBase.Object
	bool bAutoDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float AutoDisableTime;//[Offset: 0x2c, Size: 0x4]
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x178, Size: 0x4]
	int StreamingPriority;//[Offset: 0x17c, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0x180, Size: 0x1]
	byte SoundGroup;//[Offset: 0x182, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x183, Size: 0x1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x183, Size: 0x1]
	enum SoundAssetCompressionType;//[Offset: 0x184, Size: 0x1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x185, Size: 0x1]
	bool bUseBinkAudio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x185, Size: 0x1]
	SoundModulationDefaultRoutingSettings ModulationSettings;//[Offset: 0x1a0, Size: 0x48]
	float[] FrequenciesToAnalyze;//[Offset: 0x1e8, Size: 0x10]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x1f8, Size: 0x10]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x208, Size: 0x10]
	int InitialChunkSize;//[Offset: 0x218, Size: 0x4]
	bool bMature;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25c, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x25c, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x25c, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25d, Size: 0x1]
	enum LoadingBehavior;//[Offset: 0x25e, Size: 0x1]
	FString SpokenText;//[Offset: 0x260, Size: 0x10]
	float SubtitlePriority;//[Offset: 0x270, Size: 0x4]
	float Volume;//[Offset: 0x274, Size: 0x4]
	float Pitch;//[Offset: 0x278, Size: 0x4]
	int NumChannels;//[Offset: 0x27c, Size: 0x4]
	SoundWaveCuePoint[] CuePoints;//[Offset: 0x280, Size: 0x10]
	int SampleRate;//[Offset: 0x290, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0x2a0, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x2b0, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x2b8, Size: 0x8]
	void SetSoundAssetCompressionType(enum InSoundAssetCompressionType);// 0x2b0858eb6041
	enum GetSoundAssetCompressionType();// 0x2b0758eb6041

--------------------------------
Class: SoundModulationDefaultRoutingSettings.SoundModulationDefaultSettings
	enum VolumeRouting;//[Offset: 0x40, Size: 0x1]
	enum PitchRouting;//[Offset: 0x41, Size: 0x1]
	enum HighpassRouting;//[Offset: 0x42, Size: 0x1]
	enum LowpassRouting;//[Offset: 0x43, Size: 0x1]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 0x10]
	float TimeSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float TimeSec;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SoundWaveCuePoint
	int CuePointID;//[Offset: 0x0, Size: 0x4]
	FString Label;//[Offset: 0x8, Size: 0x10]
	int FramePosition;//[Offset: 0x18, Size: 0x4]
	int FrameLength;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: SoundSubmixSpectralAnalysisBandSettings
	float BandFrequency;//[Offset: 0x0, Size: 0x4]
	int AttackTimeMsec;//[Offset: 0x4, Size: 0x4]
	int ReleaseTimeMsec;//[Offset: 0x8, Size: 0x4]
	float QFactor;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AudioLinkSettingsAbstract.Object

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x40]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 0x10]
	float InitialDelay;//[Offset: 0x80, Size: 0x4]
	float FadeInTime;//[Offset: 0x84, Size: 0x4]
	float Duration;//[Offset: 0x88, Size: 0x4]
	float FadeOutTime;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 0x4]
	float Gain0;//[Offset: 0x14, Size: 0x4]
	float Bandwidth0;//[Offset: 0x18, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 0x4]
	float Gain1;//[Offset: 0x20, Size: 0x4]
	float Bandwidth1;//[Offset: 0x24, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x28, Size: 0x4]
	float Gain2;//[Offset: 0x2c, Size: 0x4]
	float Bandwidth2;//[Offset: 0x30, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x34, Size: 0x4]
	float Gain3;//[Offset: 0x38, Size: 0x4]
	float Bandwidth3;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0x24]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float RetriggerTime;//[Offset: 0x8, Size: 0x4]
	float VolumeScale;//[Offset: 0xc, Size: 0x4]
	enum VolumeScaleMode;//[Offset: 0x10, Size: 0x4]
	float VolumeScaleAttackTime;//[Offset: 0x14, Size: 0x4]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	float VolumeScaleReleaseTime;//[Offset: 0x1c, Size: 0x4]
	float VoiceStealReleaseTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x3c8]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc8, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc8, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc8, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc8, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc8, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc8, Size: 0x1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc9, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc9, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc9, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc9, Size: 0x1]
	bool bEnableSourceDataOverride;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc9, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xca, Size: 0x1]
	float BinauralRadius;//[Offset: 0xcc, Size: 0x4]
	enum AbsorptionMethod;//[Offset: 0xd0, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xd1, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xd2, Size: 0x1]
	enum PriorityAttenuationMethod;//[Offset: 0xd3, Size: 0x1]
	float OmniRadius;//[Offset: 0xd4, Size: 0x4]
	float StereoSpread;//[Offset: 0xd8, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xdc, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xe0, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xe8, Size: 0x88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x170, Size: 0x88]
	float LPFFrequencyAtMin;//[Offset: 0x1f8, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1fc, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x200, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x204, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x208, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x20c, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x210, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x214, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x218, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x21c, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x220, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x224, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x228, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x22c, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x230, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x234, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x238, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x23c, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x240, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x244, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x248, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x24c, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x250, Size: 0x88]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2d8, Size: 0x10]
	float PriorityAttenuationMin;//[Offset: 0x2e8, Size: 0x4]
	float PriorityAttenuationMax;//[Offset: 0x2ec, Size: 0x4]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2f0, Size: 0x4]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2f4, Size: 0x4]
	float ManualPriorityAttenuation;//[Offset: 0x2f8, Size: 0x4]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x300, Size: 0x88]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x388, Size: 0x40]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	enum FalloffMode;//[Offset: 0x10, Size: 0x1]
	Vector AttenuationShapeExtents;//[Offset: 0x18, Size: 0x18]
	float ConeOffset;//[Offset: 0x30, Size: 0x4]
	float FalloffDistance;//[Offset: 0x34, Size: 0x4]
	float ConeSphereRadius;//[Offset: 0x38, Size: 0x4]
	float ConeSphereFalloffDistance;//[Offset: 0x3c, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x40, Size: 0x88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x80]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 0x4]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 0x1]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x60]

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x80]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x2dd458eb6041

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x2dd358eb6041
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x2dd258eb6041

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmixBase* Submix;//[Offset: 0x0, Size: 0x8]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 0x1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 0x4]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 0x4]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 0x4]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 0x4]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 0x4]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 0x88]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]
	SourceDataOverridePluginSourceSettingsBase*[] SourceDataOverridePluginSettingsArray;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SourceDataOverridePluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	enum SendStage;//[Offset: 0x1, Size: 0x1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 0x8]
	float SendLevel;//[Offset: 0x10, Size: 0x4]
	bool DisableManualSendClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	float MinSendLevel;//[Offset: 0x18, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x1c, Size: 0x4]
	float MinSendDistance;//[Offset: 0x20, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x24, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 0x88]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 0x1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
	AudioBus* AudioBus;//[Offset: 0x10, Size: 0x8]
	float SendLevel;//[Offset: 0x18, Size: 0x4]
	float MinSendLevel;//[Offset: 0x1c, Size: 0x4]
	float MaxSendLevel;//[Offset: 0x20, Size: 0x4]
	float MinSendDistance;//[Offset: 0x24, Size: 0x4]
	float MaxSendDistance;//[Offset: 0x28, Size: 0x4]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x30, Size: 0x88]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x338, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x33c, Size: 0x4]
	AudioBus* AudioBus;//[Offset: 0x340, Size: 0x8]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]

--------------------------------
Class: AudioBus.Object
	enum AudioBusChannels;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x278, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x288, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x290, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x298, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x2a0, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x2a8, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x2b0, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2b8, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x2c0, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x2c8, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x2d0, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x2d8, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x2e0, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x2e8, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x300, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x300, Size: 0x1]
	void StartPlay();// 0x261358eb6041
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x261258eb6041
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x261158eb6041
	bool ShouldReset(Actor* ActorToReset);// 0x261058eb6041
	void ReturnToMainMenuHost();// 0x260f58eb6041
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x260e58eb6041
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x260d58eb6041
	void RestartPlayer(Controller* NewPlayer);// 0x260c58eb6041
	void ResetLevel();// 0x260b58eb6041
	bool PlayerCanRestart(PlayerController* Player);// 0x260a58eb6041
	bool MustSpectate(PlayerController* NewPlayerController);// 0x260958eb6041
	void K2_PostLogin(PlayerController* NewPlayer);// 0x260858eb6041
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x260758eb6041
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x260658eb6041
	void K2_OnLogout(Controller* ExitingController);// 0x260558eb6041
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x260458eb6041
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x260358eb6041
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x260258eb6041
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x260158eb6041
	bool HasMatchStarted();// 0x263d58eb6041
	bool HasMatchEnded();// 0x25ff58eb6041
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x25fe58eb6041
	int GetNumSpectators();// 0x25fd58eb6041
	int GetNumPlayers();// 0x25fc58eb6041
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x25fb58eb6041
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x25fa58eb6041
	Actor* ChoosePlayerStart(Controller* Player);// 0x25f958eb6041
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x25f858eb6041
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x25f758eb6041

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x278, Size: 0x4]
	int MaxPlayers;//[Offset: 0x27c, Size: 0x4]
	int MaxPartySize;//[Offset: 0x280, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x284, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1]
	FName SessionName;//[Offset: 0x288, Size: 0x8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x278, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x280, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x288, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x290, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x2a4, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x2a8, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x2ac, Size: 0x4]
	void OnRep_SpectatorClass();// 0x262b58eb6041
	void OnRep_ReplicatedWorldTimeSeconds();// 0x262a58eb6041
	void OnRep_ReplicatedHasBegunPlay();// 0x262958eb6041
	void OnRep_GameModeClass();// 0x262858eb6041
	bool HasMatchStarted();// 0x262758eb6041
	bool HasMatchEnded();// 0x262658eb6041
	bool HasBegunPlay();// 0x262558eb6041
	float GetServerWorldTimeSeconds();// 0x262458eb6041
	float GetPlayerStartTime(Controller* Controller);// 0x262358eb6041
	float GetPlayerRespawnDelay(Controller* Controller);// 0x262258eb6041

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x2f8, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x2fc, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x300, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x308, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x310, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 0x1]
	void TurnAtRate(float Rate);// 0x2e3758eb6041
	void MoveUp_World(float Val);// 0x2e3658eb6041
	void MoveRight(float Val);// 0x2e3558eb6041
	void MoveForward(float Val);// 0x2e3458eb6041
	void LookUpAtRate(float Rate);// 0x2e3358eb6041

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x158, Size: 0x8]
	bool IsMoveInputIgnored();// 0x23e958eb6041
	Vector GetPendingInputVector();// 0x23e858eb6041
	Pawn* GetPawnOwner();// 0x23e758eb6041
	Vector GetLastInputVector();// 0x23e658eb6041
	Vector ConsumeInputVector();// 0x23e558eb6041
	void AddInputVector(Vector WorldVector, bool bForce);// 0x23e458eb6041

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0x118, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x148, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14c, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x14d, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x150, Size: 0x8]
	void StopMovementKeepPathing();// 0x23e358eb6041
	void StopActiveMovement();// 0x23e258eb6041
	bool IsSwimming();// 0x23e158eb6041
	bool IsMovingOnGround();// 0x23e058eb6041
	bool IsFlying();// 0x23df58eb6041
	bool IsFalling();// 0x23de58eb6041
	bool IsCrouching();// 0x23dd58eb6041

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 0x8]
	Vector Velocity;//[Offset: 0xc8, Size: 0x18]
	Vector PlaneConstraintNormal;//[Offset: 0xe0, Size: 0x18]
	Vector PlaneConstraintOrigin;//[Offset: 0xf8, Size: 0x18]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x110, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x110, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x110, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x110, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x110, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0x113, Size: 0x1]
	void StopMovementImmediately();// 0xb6a58eb6041
	void SnapUpdatedComponentToPlane();// 0xb6958eb6041
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0xb6858eb6041
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0xb6758eb6041
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0xb6658eb6041
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0xb6558eb6041
	void SetPlaneConstraintEnabled(bool bEnabled);// 0xb6458eb6041
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0xb6358eb6041
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0xb6258eb6041
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0xb6158eb6041
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0xb6058eb6041
	Vector GetPlaneConstraintOrigin();// 0xb5f58eb6041
	Vector GetPlaneConstraintNormal();// 0xb5e58eb6041
	enum GetPlaneConstraintAxisSetting();// 0xb5d58eb6041
	PhysicsVolume* GetPhysicsVolume();// 0xb5b58eb6041
	float GetMaxSpeed();// 0xb5a58eb6041
	float GetGravityZ();// 0xb5958eb6041
	Vector ConstrainNormalToPlane(Vector Normal);// 0xb0558eb6041
	Vector ConstrainLocationToPlane(Vector Location);// 0xb5758eb6041
	Vector ConstrainDirectionToPlane(Vector Direction);// 0xb5658eb6041

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x550, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x2e7c58eb6041
	float GetUnscaledSphereRadius();// 0x2ebd58eb6041
	float GetShapeScale();// 0x2e7a58eb6041
	float GetScaledSphereRadius();// 0x2e7958eb6041

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x55c, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x560, Size: 0x4]
	int MinLOD;//[Offset: 0x564, Size: 0x4]
	int SubDivisionStepSize;//[Offset: 0x568, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x570, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x578, Size: 0x4]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57c, Size: 0x1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57c, Size: 0x1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x57c, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57c, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x57c, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x57c, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x57c, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x57c, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57d, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57d, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x57d, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57d, Size: 0x1]
	bool bSortTriangles;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x57d, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x57d, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x580, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x584, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x588, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x58c, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x590, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x5a0, Size: 0x10]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x5b0, Size: 0x18]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x279058eb6041
	void SetReverseCulling(bool ReverseCulling);// 0x278f58eb6041
	void SetForcedLodModel(int NewForcedLodModel);// 0x278e58eb6041
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);// 0x278d58eb6041
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x278c58eb6041
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x278b58eb6041
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x278a58eb6041

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x538, Size: 0x10]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x558, Size: 0x1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0xfda58eb6041
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0xfd958eb6041
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0xfd858eb6041
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0xfd758eb6041
	FName[] GetMaterialSlotNames();// 0xfd658eb6041
	MaterialInterface*[] GetMaterials();// 0xfd558eb6041
	int GetMaterialIndex(FName MaterialSlotName);// 0xfc658eb6041

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	PerQualityLevelInt MinQualityLevelLOD;//[Offset: 0xf0, Size: 0x68]
	PerPlatformInt MinLOD;//[Offset: 0x158, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x160, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0x170, Size: 0x4]
	int LightMapResolution;//[Offset: 0x174, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0x178, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x17c, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x180, Size: 0x8]
	int LODForCollision;//[Offset: 0x188, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18c, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18c, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18c, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18c, Size: 0x1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18c, Size: 0x1]
	bool bSupportRayTracing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18c, Size: 0x1]
	bool bDoFastBuild;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18c, Size: 0x1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18c, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18d, Size: 0x1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18d, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0x1b0, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0x1d0, Size: 0x18]
	Vector NegativeBoundsExtension;//[Offset: 0x1e8, Size: 0x18]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x200, Size: 0x38]
	int ElementToIgnoreForTexFactor;//[Offset: 0x238, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x240, Size: 0x10]
	NavCollisionBase* NavCollision;//[Offset: 0x250, Size: 0x8]
	void SetStaticMaterials(out const StaticMaterial[] InStaticMaterials);// 0x359f58eb6041
	void SetMinimumLODForPlatforms(out const <FName,int> PlatformMinimumLODs);// 0x359e58eb6041
	void SetMinimumLODForPlatform(out const FName PlatformName, int InMinLOD);// 0x359d58eb6041
	void RemoveSocket(StaticMeshSocket* Socket);// 0x359c58eb6041
	StaticMeshDescription* GetStaticMeshDescription(int LODIndex);// 0x359b58eb6041
	StaticMaterial[] GetStaticMaterials();// 0x359a58eb6041
	int GetNumSections(int InLOD);// 0x359958eb6041
	int GetNumLODs();// 0x359858eb6041
	void GetMinimumLODForQualityLevels(out <FName,int> QualityLevelMinimumLODs);// 0x359758eb6041
	int GetMinimumLODForQualityLevel(out const FName QualityLevel);// 0x359658eb6041
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x35d758eb6041
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x359458eb6041
	int GetMaterialIndex(FName MaterialSlotName);// 0x359358eb6041
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x359258eb6041
	BoxSphereBounds GetBounds();// 0x359158eb6041
	Box GetBoundingBox();// 0x359058eb6041
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x358f58eb6041
	StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x358e58eb6041
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision, bool bFastBuild);// 0x358d58eb6041
	void AddSocket(StaticMeshSocket* Socket);// 0x358c58eb6041
	FName AddMaterial(MaterialInterface* Material);// 0x358b58eb6041

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0x18]
	Rotator RelativeRotation;//[Offset: 0x48, Size: 0x18]
	Vector RelativeScale;//[Offset: 0x60, Size: 0x18]
	FString Tag;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0x18]
	Vector BoxExtent;//[Offset: 0x18, Size: 0x18]
	double SphereRadius;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x2bae58eb6041
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x2bad58eb6041
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x2bac58eb6041
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x2bab58eb6041

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0x2baa58eb6041
	void SetPolygonVertexInstances(PolygonID PolygonID, out const VertexInstanceID[] VertexInstanceIDs);// 0x2ba958eb6041
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x2ba858eb6041
	void ReversePolygonFacing(PolygonID PolygonID);// 0x2ba758eb6041
	void ReserveNewVertices(int NumberOfNewVertices);// 0x2ba658eb6041
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x2ba558eb6041
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x2ba458eb6041
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x2ba358eb6041
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x2ba258eb6041
	void ReserveNewEdges(int NumberOfNewEdges);// 0x2ba158eb6041
	bool IsVertexValid(VertexID VertexID);// 0x2ba058eb6041
	bool IsVertexOrphaned(VertexID VertexID);// 0x2b9f58eb6041
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x2b9e58eb6041
	bool IsTriangleValid(const TriangleID TriangleID);// 0x2b9d58eb6041
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x2b9c58eb6041
	bool IsPolygonValid(PolygonID PolygonID);// 0x2b9b58eb6041
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x2b9a58eb6041
	bool IsEmpty();// 0x2b9958eb6041
	bool IsEdgeValid(EdgeID EdgeID);// 0x2b9858eb6041
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x2b9758eb6041
	bool IsEdgeInternal(EdgeID EdgeID);// 0x2b9658eb6041
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x2b9558eb6041
	Vector GetVertexPosition(VertexID VertexID);// 0x2b9458eb6041
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x2bd558eb6041
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x2b9258eb6041
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x2b9158eb6041
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x2b9058eb6041
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x2b8f58eb6041
	int GetVertexInstanceCount();// 0x2b8e58eb6041
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x2b8d58eb6041
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x2b8c58eb6041
	int GetVertexCount();// 0x2b8b58eb6041
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x2b8a58eb6041
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x2b8958eb6041
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x2b8858eb6041
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x2b8758eb6041
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x2b8658eb6041
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x2b8558eb6041
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x2b8458eb6041
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x2b8358eb6041
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x2b8258eb6041
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x2b8158eb6041
	int GetTriangleCount();// 0x2b8058eb6041
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x2b7f58eb6041
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x2b7e58eb6041
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x2b7d58eb6041
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x2b7c58eb6041
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x2b7b58eb6041
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x2b7a58eb6041
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x2b7958eb6041
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x2b7858eb6041
	int GetPolygonGroupCount();// 0x2b7758eb6041
	int GetPolygonCount();// 0x2b7658eb6041
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x2b7558eb6041
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x2b7458eb6041
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x2b7358eb6041
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x2bb458eb6041
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x2b7158eb6041
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x2b7058eb6041
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x2b6f58eb6041
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x2b6e58eb6041
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x2b6d58eb6041
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x2b6c58eb6041
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x2b6b58eb6041
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x2b6a58eb6041
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x2b6958eb6041
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x2b6858eb6041
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x2b6758eb6041
	int GetEdgeCount();// 0x2b6658eb6041
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x2b6558eb6041
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x2b6458eb6041
	void Empty();// 0x2b6358eb6041
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x2b6258eb6041
	void DeleteVertex(VertexID VertexID);// 0x2b6158eb6041
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x2b6058eb6041
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x2b5f58eb6041
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x2b5e58eb6041
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x2b5d58eb6041
	void CreateVertexWithID(VertexID VertexID);// 0x2b5c58eb6041
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x2b5b58eb6041
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x2b5a58eb6041
	VertexID CreateVertex();// 0x2b5958eb6041
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x2b5858eb6041
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x2b5758eb6041
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x2b5658eb6041
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x2b5558eb6041
	PolygonGroupID CreatePolygonGroup();// 0x2b5458eb6041
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x2b5358eb6041
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x2b5258eb6041
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x2b9358eb6041
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x2b5058eb6041

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x278, Size: 0x8]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 0x1]
	int CurrentTargetIndex;//[Offset: 0x284, Size: 0x4]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x288, Size: 0x1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x288, Size: 0x1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x288, Size: 0x1]
	Actor*[] PostRenderedActors;//[Offset: 0x290, Size: 0x10]
	FName[] DebugDisplay;//[Offset: 0x2a8, Size: 0x10]
	FName[] ToggledDebugCategories;//[Offset: 0x2b8, Size: 0x10]
	Canvas* Canvas;//[Offset: 0x2c8, Size: 0x8]
	Canvas* DebugCanvas;//[Offset: 0x2d0, Size: 0x8]
	DebugTextInfo[] DebugTextList;//[Offset: 0x2d8, Size: 0x10]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x2e8, Size: 0x8]
	Actor* ShowDebugTargetActor;//[Offset: 0x2f0, Size: 0x8]
	void ShowHUD();// 0x2e2458eb6041
	void ShowDebugToggleSubCategory(FName Category);// 0x2e2358eb6041
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x2e2258eb6041
	void ShowDebug(FName DebugType);// 0x2e2158eb6041
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x2e2058eb6041
	void RemoveAllDebugStrings();// 0x2e1f58eb6041
	void ReceiveHitBoxRelease(const FName BoxName);// 0x2e1e58eb6041
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0xffffff8158eb6000
	void ReceiveHitBoxClick(const FName BoxName);// 0x2e1c58eb6041
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x2e1b58eb6041
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x2e1a58eb6041
	Vector Project(Vector Location, bool bClampToZeroPlane);// 0x2e1958eb6041
	void PreviousDebugTarget();// 0x2e1858eb6041
	void NextDebugTarget();// 0x2e1758eb6041
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x2e1658eb6041
	PlayerController* GetOwningPlayerController();// 0x2e1558eb6041
	Pawn* GetOwningPawn();// 0x2e1458eb6041
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x2e1358eb6041
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x2e1258eb6041
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x2e1158eb6041
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x2e1058eb6041
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x2e0f58eb6041
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x2e0e58eb6041
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x2e0d58eb6041
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x2e0c58eb6041
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x2e0b58eb6041
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x2e0a58eb6041
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x2e0958eb6041
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x2e0858eb6041

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x20]
	Texture2D* DefaultTexture;//[Offset: 0x70, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x78, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x80, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x2d4e58eb6041
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x2d4d58eb6041
	Vector K2_Project(Vector WorldLocation);// 0x2d4c58eb6041
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x2d4b58eb6041
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x2d4a58eb6041
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x2d4958eb6041
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x2d4858eb6041
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x2d4758eb6041
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x2d4658eb6041
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x2d4558eb6041
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x2d4458eb6041
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x2d4358eb6041
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x2d4258eb6041

--------------------------------
Class: Plane.Vector
	double W;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x10]
	Vector2D V0_UV;//[Offset: 0x10, Size: 0x10]
	LinearColor V0_Color;//[Offset: 0x20, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x30, Size: 0x10]
	Vector2D V1_UV;//[Offset: 0x40, Size: 0x10]
	LinearColor V1_Color;//[Offset: 0x50, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x60, Size: 0x10]
	Vector2D V2_UV;//[Offset: 0x70, Size: 0x10]
	LinearColor V2_Color;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 0x8]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 0x18]
	Vector SrcActorDesiredOffset;//[Offset: 0x20, Size: 0x18]
	FString DebugText;//[Offset: 0x38, Size: 0x10]
	float TimeRemaining;//[Offset: 0x48, Size: 0x4]
	float Duration;//[Offset: 0x4c, Size: 0x4]
	Color TextColor;//[Offset: 0x50, Size: 0x4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1]
	Vector OrigActorLocation;//[Offset: 0x58, Size: 0x18]
	Font* Font;//[Offset: 0x70, Size: 0x8]
	float FontScale;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 0x1]
	uint32 Channels;//[Offset: 0x27c, Size: 0x4]
	uint32 InRate;//[Offset: 0x280, Size: 0x4]
	uint32 OutRate;//[Offset: 0x284, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x28c, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x290, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x294, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x298, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x29c, Size: 0x4]
	uint32 InPacketsClientMin;//[Offset: 0x2a0, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x2a4, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x2a8, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x2ac, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x2b0, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x2b4, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x2b8, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x2bc, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x2c0, Size: 0x4]
	uint32 InPackets;//[Offset: 0x2c4, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x2c8, Size: 0x4]
	uint32 InBunches;//[Offset: 0x2cc, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x2d0, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x2d4, Size: 0x4]
	uint32 InLoss;//[Offset: 0x2d8, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x2dc, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x2e0, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x2e4, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x2e8, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x2ec, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x2f0, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x2f4, Size: 0x4]
	uint32 NumConsideredActors;//[Offset: 0x2f8, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x2fc, Size: 0x4]
	uint32 NumRelevantActors;//[Offset: 0x300, Size: 0x4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x304, Size: 0x4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x308, Size: 0x4]
	uint32 NumReplicatedActors;//[Offset: 0x30c, Size: 0x4]
	uint32 NumActors;//[Offset: 0x310, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x314, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x318, Size: 0x4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x31c, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x320, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x324, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x328, Size: 0x4]
	uint32 ObjPathBytes;//[Offset: 0x32c, Size: 0x4]
	uint32 NetGUIDOutRate;//[Offset: 0x330, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x334, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x338, Size: 0x4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x278, Size: 0x4]
	float SeverePacketLossThreshold;//[Offset: 0x27c, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x280, Size: 0x4]
	int SeverePingThreshold;//[Offset: 0x284, Size: 0x4]
	int AdjustedNetSpeed;//[Offset: 0x288, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x28c, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x290, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x294, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x298, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29c, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x2a0, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x2a4, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x2a8, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x2ac, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x2b0, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x2b4, Size: 0x4]
	float MoveRepSize;//[Offset: 0x2b8, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x2bc, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x2c0, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x2c4, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x2c8, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x2cc, Size: 0x4]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x2d0, Size: 0x4]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x2d4, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x2d8, Size: 0x4]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x2dc, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x2e0, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x2e4, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x2e8, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x2ec, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x2f0, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2f8, Size: 0x4]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2fc, Size: 0x4]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x300, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x308, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x30c, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x310, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x314, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 0x1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ReverbEffect.Object
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ReflectionsDelay;//[Offset: 0x2c, Size: 0x4]
	float GainHF;//[Offset: 0x30, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x34, Size: 0x4]
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float LateDelay;//[Offset: 0x3c, Size: 0x4]
	float DecayTime;//[Offset: 0x40, Size: 0x4]
	float Density;//[Offset: 0x44, Size: 0x4]
	float Diffusion;//[Offset: 0x48, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x4c, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x50, Size: 0x4]
	float LateGain;//[Offset: 0x54, Size: 0x4]
	float Gain;//[Offset: 0x58, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	Box MBPBounds;//[Offset: 0x8, Size: 0x38]
	Box MBPOuterBounds;//[Offset: 0x40, Size: 0x38]
	uint32 MBPNumSubdivs;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0x18]
	Vector ViewDir;//[Offset: 0x30, Size: 0x18]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	int MaxPacket;//[Offset: 0xa0, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x160, Size: 0x30]
	double LastReceiveTime;//[Offset: 0x1d8, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x15e0, Size: 0x10]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x3240, Size: 0x8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 0x4]
	int MaxClientRate;//[Offset: 0x64, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x68, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x70, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x74, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x78, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x7c, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x80, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x100, Size: 0x4]
	World* World;//[Offset: 0x140, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x148, Size: 0x8]
	ClassPtrProperty NetConnectionClass;//[Size: 0x8]
	ClassPtrProperty ReplicationDriverClass;//[Size: 0x8]
	FName NetDriverName;//[Offset: 0x190, Size: 0x8]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x198, Size: 0x10]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1a8, Size: 0x50]
	Channel*[] ActorChannelPool;//[Offset: 0x1f8, Size: 0x10]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x6f8, Size: 0x8]

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 0x8]
	FName ClassName;//[Offset: 0x8, Size: 0x8]
	ClassPtrProperty ChannelClass;//[Size: 0x8]
	int StaticChannelIndex;//[Offset: 0x18, Size: 0x4]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: WorldDataLayers.Info.Actor.Object
	<DataLayer*> WorldDataLayers;//[Offset: 0x318, Size: 0x50]
	FName[] RepActiveDataLayerNames;//[Offset: 0x368, Size: 0x10]
	FName[] RepLoadedDataLayerNames;//[Offset: 0x378, Size: 0x10]
	FName[] RepEffectiveActiveDataLayerNames;//[Offset: 0x428, Size: 0x10]
	FName[] RepEffectiveLoadedDataLayerNames;//[Offset: 0x438, Size: 0x10]
	void OnRep_LoadedDataLayerNames();// 0x362a58eb6041
	void OnRep_EffectiveLoadedDataLayerNames();// 0x362958eb6041
	void OnRep_EffectiveActiveDataLayerNames();// 0x362858eb6041
	void OnRep_ActiveDataLayerNames();// 0x362758eb6041
	void OnDataLayerRuntimeStateChanged(const DataLayer* InDataLayer, enum InState);// 0x362658eb6041

--------------------------------
Class: DataLayer.Object
	FName DataLayerLabel;//[Offset: 0x28, Size: 0x8]
	bool bIsRuntime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	enum InitialRuntimeState;//[Offset: 0x31, Size: 0x1]
	Color DebugColor;//[Offset: 0x34, Size: 0x4]
	DataLayer* Parent;//[Offset: 0x38, Size: 0x8]
	DataLayer*[] Children;//[Offset: 0x40, Size: 0x10]
	bool IsVisible();// 0x2dec58eb6041
	bool IsRuntime();// 0x2deb58eb6041
	bool IsInitiallyVisible();// 0x2dea58eb6041
	bool IsInitiallyActive();// 0x2de958eb6041
	bool IsEffectiveVisible();// 0x2de858eb6041
	bool IsDynamicallyLoaded();// 0x2de758eb6041
	enum GetInitialState();// 0x2de658eb6041
	enum GetInitialRuntimeState();// 0x2de558eb6041
	Color GetDebugColor();// 0x2de458eb6041
	FName GetDataLayerLabel();// 0x2de358eb6041
	bool Equals(out const ActorDataLayer ActorDataLayer);// 0x2de258eb6041

--------------------------------
Class: ActorDataLayer
	FName Name;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	ClassPtrProperty ObjClass;//[Size: 0x8]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	int StreamingPriority;//[Offset: 0x50, Size: 0x4]
	FName PackageNameToLoad;//[Offset: 0x54, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x60, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x60]
	bool bClientOnlyVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	int LevelLODIndex;//[Offset: 0xe4, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xeb, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xeb, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xeb, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xeb, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xeb, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xeb, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xec, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0x100, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0x110, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0x118, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0x128, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x138, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x148, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x158, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x160, Size: 0x8]
	bool ShouldBeLoaded();// 0x339058eb6041
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x33d158eb6041
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x338e58eb6041
	void SetPriority(int NewPriority);// 0x338d58eb6041
	void SetLevelLODIndex(int LODIndex);// 0x338c58eb6041
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);// 0x338b58eb6041
	bool IsStreamingStatePending();// 0x338a58eb6041
	bool IsLevelVisible();// 0x338958eb6041
	bool IsLevelLoaded();// 0x338858eb6041
	FName GetWorldAssetPackageFName();// 0x338758eb6041
	Level* GetLoadedLevel();// 0x338658eb6041
	LevelScriptActor* GetLevelScriptActor();// 0x338558eb6041
	bool GetIsRequestingUnloadAndRemoval();// 0x338458eb6041
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x338358eb6041

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x2b0, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c0, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c0, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x2c1, Size: 0x1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreaming*[] StreamingLevels;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x7a0, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x894, Size: 0x4]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0x8b8, Size: 0x10]
	PlayerController*[] SpectatorControllers;//[Offset: 0x8c8, Size: 0x10]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Level* Level;//[Offset: 0x58, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 0x10]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x2cb358eb6041
	int GetObjectCount();// 0x2cb258eb6041
	int GetNewAvoidanceUID();// 0x2cb158eb6041
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x2cb058eb6041

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	delegate OnPawnControllerChangedDelegates;//[Offset: 0x78, Size: 0x10]
	void ReceiveShutdown();// 0xc9158eb6041
	void ReceiveInit();// 0xc8f58eb6041
	void HandleTravelError(byte FailureType);// 0xde758eb6041
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0xc8c58eb6041
	void DebugRemovePlayer(int ControllerId);// 0xc8b58eb6041
	void DebugCreatePlayer(int ControllerId);// 0xc8a58eb6041

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]
	FName[] GetVectorParameterNames();// 0x33b758eb6041
	LinearColor GetVectorParameterDefaultValue(FName ParameterName, out bool bParameterFound);// 0x33b658eb6041
	FName[] GetScalarParameterNames();// 0x33b558eb6041
	float GetScalarParameterDefaultValue(FName ParameterName, out bool bParameterFound);// 0x33b458eb6041

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: PhysicsFieldComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x30, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x34, Size: 0x4]
	float WarmupTime;//[Offset: 0x38, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x3c, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 0x4]
	float MacroUVRadius;//[Offset: 0x64, Size: 0x4]
	float[] LODDistances;//[Offset: 0x68, Size: 0x10]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 0x10]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 0x38]
	float SecondsBeforeInactive;//[Offset: 0xc0, Size: 0x4]
	float Delay;//[Offset: 0xc4, Size: 0x4]
	float DelayLow;//[Offset: 0xc8, Size: 0x4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcc, Size: 0x1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcc, Size: 0x1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xcc, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xcc, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xcc, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xcc, Size: 0x1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcd, Size: 0x1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcd, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xcd, Size: 0x1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xcd, Size: 0x1]
	byte SystemUpdateMode;//[Offset: 0xce, Size: 0x1]
	byte LODMethod;//[Offset: 0xcf, Size: 0x1]
	enum InsignificantReaction;//[Offset: 0xd0, Size: 0x1]
	byte OcclusionBoundsMethod;//[Offset: 0xd1, Size: 0x1]
	enum MaxSignificanceLevel;//[Offset: 0xd3, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xd4, Size: 0x4]
	float InsignificanceDelay;//[Offset: 0xd8, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xe0, Size: 0x18]
	Box CustomOcclusionBounds;//[Offset: 0xf8, Size: 0x38]
	LODSoloTrack[] SoloTracking;//[Offset: 0x130, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0x140, Size: 0x10]
	bool ContainsEmitterType(class Object TypeData);// 0x33c558eb6041

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 0x4]
	uint32 PoolPrimeSize;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 0x4]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 0x18]
	Rotator EmitterRotation;//[Offset: 0x58, Size: 0x18]
	byte ScreenAlignment;//[Offset: 0x70, Size: 0x1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71, Size: 0x1]
	byte SortMode;//[Offset: 0x72, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x73, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x73, Size: 0x1]
	bool bSupportLargeWorldCoordinates;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x73, Size: 0x1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x73, Size: 0x1]
	float EmitterDuration;//[Offset: 0x74, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x78, Size: 0x30]
	ParticleBurst[] BurstList;//[Offset: 0xa8, Size: 0x10]
	float EmitterDelay;//[Offset: 0xb8, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xbc, Size: 0x4]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xc1, Size: 0x1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 0x1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 0x1]
	byte ParticleBurstMethod;//[Offset: 0xc3, Size: 0x1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0xc5, Size: 0x1]
	byte EmitterNormalsMode;//[Offset: 0xc6, Size: 0x1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc7, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xc8, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xcc, Size: 0x4]
	float RandomImageTime;//[Offset: 0xd0, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xd4, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xd8, Size: 0x18]
	float MacroUVRadius;//[Offset: 0xf0, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xf4, Size: 0x1]
	byte BoundingMode;//[Offset: 0xf5, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf6, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0xf8, Size: 0x18]
	float AlphaThreshold;//[Offset: 0x110, Size: 0x4]
	int EmitterLoops;//[Offset: 0x114, Size: 0x4]
	Texture2D* CutoutTexture;//[Offset: 0x118, Size: 0x8]
	int MaxDrawCount;//[Offset: 0x120, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0x124, Size: 0x4]
	Vector NormalsCylinderDirection;//[Offset: 0x128, Size: 0x18]
	FName[] NamedMaterialOverrides;//[Offset: 0x140, Size: 0x10]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	float TimeBias;//[Offset: 0x4, Size: 0x4]
	float[] Values;//[Offset: 0x8, Size: 0x10]
	byte Op;//[Offset: 0x18, Size: 0x1]
	byte EntryCount;//[Offset: 0x19, Size: 0x1]
	byte EntryStride;//[Offset: 0x1a, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 0x1]
	byte LockFlag;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x30]
	RawDistributionFloat RateScale;//[Offset: 0x60, Size: 0x30]
	byte ParticleBurstMethod;//[Offset: 0x90, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0x98, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xa8, Size: 0x30]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x60]
	OrbitOptions OffsetOptions;//[Offset: 0x90, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x98, Size: 0x60]
	OrbitOptions RotationOptions;//[Offset: 0xf8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0x100, Size: 0x60]
	OrbitOptions RotationRateOptions;//[Offset: 0x160, Size: 0x4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 0x4]
	float MaxValue;//[Offset: 0x24, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x28, Size: 0x18]
	Vector MaxValueVec;//[Offset: 0x40, Size: 0x18]
	DistributionVector* Distribution;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1]
	FName EventName;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x538, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x540, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x550, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x561, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x561, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x561, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x561, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x561, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x562, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x562, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x562, Size: 0x1]
	byte LODMethod;//[Offset: 0x56d, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x56e, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x570, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x580, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x590, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x5a0, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x5b0, Size: 0x10]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1]
	Vector OldPosition;//[Offset: 0x5c8, Size: 0x18]
	Vector PartSysVelocity;//[Offset: 0x5e0, Size: 0x18]
	float WarmupTime;//[Offset: 0x5f8, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x5fc, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x604, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x60c, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x630, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x648, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x6a0, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x6a8, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x6b0, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x6b1, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x6b2, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x708, Size: 0x10]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x33dd58eb6041
	void SetTemplate(ParticleSystem* NewTemplate);// 0x33dc58eb6041
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x33db58eb6041
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x33da58eb6041
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x33d958eb6041
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x33d858eb6041
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x33d758eb6041
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x33d658eb6041
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x33d558eb6041
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x33d458eb6041
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x33d358eb6041
	int GetNumActiveParticles();// 0x33d258eb6041
	MaterialInterface* GetNamedMaterial(FName InName);// 0xffffff8158eb6000
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x33d058eb6041
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x33cf58eb6041
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x33ce58eb6041
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x33cd58eb6041
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x33cc58eb6041
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x33cb58eb6041
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x33ca58eb6041
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x33c958eb6041
	void EndTrails();// 0x33c858eb6041
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x33c758eb6041
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x33c658eb6041

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x22af58eb6041
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x22ae58eb6041
	void SetIntParameter(FName ParameterName, int Param);// 0x22ad58eb6041
	void SetFloatParameter(FName ParameterName, float Param);// 0x22ac58eb6041
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x22ab58eb6041
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x22aa58eb6041
	void SetBoolParameter(FName ParameterName, bool Param);// 0x22a958eb6041
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x22a858eb6041
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x22a758eb6041
	void ReleaseToPool();// 0x22a658eb6041
	FXSystemAsset* GetFXSystemAsset();// 0x22a558eb6041

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ClassPtrProperty AnimBlueprintGeneratedClass;//[Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x818, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x820, Size: 0x8]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x828, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x830, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0x858, Size: 0x18]
	Vector LineCheckBoundsScale;//[Offset: 0x870, Size: 0x18]
	AnimInstance*[] LinkedInstances;//[Offset: 0x8b8, Size: 0x10]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x8c8, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x8d8, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0x998, Size: 0x4]
	byte KinematicBonesUpdateType;//[Offset: 0x99c, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x99d, Size: 0x1]
	byte AnimationMode;//[Offset: 0x99f, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a1, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9a1, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9a1, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9a1, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9a1, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9a1, Size: 0x1]
	bool bAllowClothActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a2, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a2, Size: 0x1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a8, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a8, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9a8, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9a8, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9a8, Size: 0x1]
	bool bForceCollisionUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a9, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a9, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9a9, Size: 0x1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9a9, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9a9, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9a9, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9a9, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9aa, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9aa, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9aa, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9aa, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9aa, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9aa, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9aa, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9aa, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9ab, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9ab, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9ab, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9ab, Size: 0x1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9ab, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9ab, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x9ae, Size: 0x2]
	float ClothBlendWeight;//[Offset: 0x9b0, Size: 0x4]
	bool bWaitForParallelClothTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b4, Size: 0x1]
	FName[] DisallowedAnimCurves;//[Offset: 0x9b8, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x9c8, Size: 0x8]
	float ClothMaxDistanceScale;//[Offset: 0x9d4, Size: 0x4]
	delegate OnConstraintBroken;//[Offset: 0x9d8, Size: 0x10]
	delegate OnPlasticDeformation;//[Offset: 0x9e8, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x9f8, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0xaf8, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0xafc, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0xb08, Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xba0, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0xc70, Size: 0x10]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x353d58eb6041
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x353c58eb6041
	void ToggleDisablePostProcessBlueprint();// 0x353b58eb6041
	void TermBodiesBelow(FName ParentBoneName);// 0x353a58eb6041
	void SuspendClothingSimulation();// 0x353958eb6041
	void Stop();// 0x353858eb6041
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x353758eb6041
	void SetUpdateClothInEditor(const bool NewUpdateState);// 0x353658eb6041
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x353558eb6041
	void SetTeleportRotationThreshold(float Threshold);// 0x353458eb6041
	void SetTeleportDistanceThreshold(float Threshold);// 0x353358eb6041
	void SetPosition(float InPos, bool bFireNotifies);// 0x357458eb6041
	void SetPlayRate(float Rate);// 0x353158eb6041
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x353058eb6041
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x352f58eb6041
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x352e58eb6041
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x352d58eb6041
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x352c58eb6041
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x352b58eb6041
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x352a58eb6041
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x352958eb6041
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x352858eb6041
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x352758eb6041
	void SetClothMaxDistanceScale(float Scale);// 0x352658eb6041
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x352558eb6041
	void SetAnimClass(class Object NewClass);// 0x352458eb6041
	void SetAnimationMode(byte InAnimationMode);// 0x352358eb6041
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x352258eb6041
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x352158eb6041
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x352058eb6041
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x351f58eb6041
	void SetAllowClothActors(bool bInAllow);// 0x351e58eb6041
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x351d58eb6041
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x351c58eb6041
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x351b58eb6041
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x351a58eb6041
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x351958eb6041
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x351858eb6041
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x351758eb6041
	void SetAllBodiesBelowPhysicsDisabled(out const FName InBoneName, bool bDisabled, bool bIncludeSelf);// 0x351658eb6041
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x351558eb6041
	void SetAllBodiesBelowLinearVelocity(out const FName InBoneName, out const Vector LinearVelocity, bool bIncludeSelf);// 0x351458eb6041
	void ResumeClothingSimulation();// 0x351358eb6041
	void ResetClothTeleportMode();// 0x351258eb6041
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x355358eb6041
	void ResetAllowedAnimCurveEvaluation();// 0x351058eb6041
	void ResetAllBodiesSimulatePhysics();// 0x350f58eb6041
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x350e58eb6041
	void Play(bool bLooping);// 0x350d58eb6041
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x350c58eb6041
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x350b58eb6041
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x350a58eb6041
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x350958eb6041
	bool IsPlaying();// 0x350858eb6041
	bool IsClothingSimulationSuspended();// 0x350758eb6041
	bool IsBodyGravityEnabled(FName BoneName);// 0x350658eb6041
	bool HasValidAnimationInstance();// 0x350558eb6041
	bool GetTransformAttribute_Ref(out const FName BoneName, out const FName AttributeName, out Transform OutValue, enum LookupType);// 0x350458eb6041
	bool GetTransformAttribute(out const FName BoneName, out const FName AttributeName, Transform DefaultValue, out Transform OutValue, enum LookupType);// 0x350358eb6041
	float GetTeleportRotationThreshold();// 0x350258eb6041
	float GetTeleportDistanceThreshold();// 0x350158eb6041
	bool GetStringAttribute_Ref(out const FName BoneName, out const FName AttributeName, out FString OutValue, enum LookupType);// 0x350058eb6041
	bool GetStringAttribute(out const FName BoneName, out const FName AttributeName, FString DefaultValue, out FString OutValue, enum LookupType);// 0x34ff58eb6041
	Vector GetSkeletalCenterOfMass();// 0x34fe58eb6041
	AnimInstance* GetPostProcessInstance();// 0x34fd58eb6041
	float GetPosition();// 0x34fc58eb6041
	float GetPlayRate();// 0x34fb58eb6041
	float GetMorphTarget(FName MorphTargetName);// 0x34fa58eb6041
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x34f958eb6041
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x34f858eb6041
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x34f758eb6041
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x34f658eb6041
	bool GetIntegerAttribute_Ref(out const FName BoneName, out const FName AttributeName, out int OutValue, enum LookupType);// 0xffffff8158eb6000
	bool GetIntegerAttribute(out const FName BoneName, out const FName AttributeName, int DefaultValue, out int OutValue, enum LookupType);// 0x34f458eb6041
	bool GetFloatAttribute_Ref(out const FName BoneName, out const FName AttributeName, out float OutValue, enum LookupType);// 0x34f358eb6041
	bool GetFloatAttribute(out const FName BoneName, out const FName AttributeName, float DefaultValue, out float OutValue, enum LookupType);// 0x34f258eb6041
	bool GetDisablePostProcessBlueprint();// 0x34f158eb6041
	bool GetDisableAnimCurves();// 0x34f058eb6041
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x34ef58eb6041
	void GetConstraintsFromBody(FName BodyName, bool bParentConstraints, bool bChildConstraints, bool bIncludesTerminated, out ConstraintInstanceAccessor[] OutConstraints);// 0x34ee58eb6041
	void GetConstraints(bool bIncludesTerminated, out ConstraintInstanceAccessor[] OutConstraints);// 0x34ed58eb6041
	ConstraintInstanceAccessor GetConstraintByName(FName ConstraintName, bool bIncludesTerminated);// 0x34ec58eb6041
	float GetClothMaxDistanceScale();// 0x34eb58eb6041
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x34ea58eb6041
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x34e958eb6041
	Vector GetBoneLinearVelocity(out const FName InBoneName);// 0x34e858eb6041
	AnimInstance* GetAnimInstance();// 0x34e758eb6041
	class Object GetAnimClass();// 0x34e658eb6041
	byte GetAnimationMode();// 0x34e558eb6041
	bool GetAllowRigidBodyAnimNode();// 0x34e458eb6041
	bool GetAllowedAnimCurveEvaluate();// 0x34e358eb6041
	bool GetAllowClothActors();// 0x34e258eb6041
	void ForceClothNextUpdateTeleportAndReset();// 0x34e158eb6041
	void ForceClothNextUpdateTeleport();// 0x34e058eb6041
	FName FindConstraintBoneName(int ConstraintIndex);// 0x34df58eb6041
	void ClearMorphTargets();// 0x34de58eb6041
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x34dd58eb6041
	void BindClothToMasterPoseComponent();// 0x34dc58eb6041
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x34db58eb6041
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x34da58eb6041
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x34d958eb6041
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x34d858eb6041

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x568, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x570, Size: 0x8]
	enum[] SkinCacheUsage;//[Offset: 0x578, Size: 0x10]
	MeshDeformer* MeshDeformer;//[Offset: 0x588, Size: 0x8]
	MeshDeformerInstance* MeshDeformerInstance;//[Offset: 0x590, Size: 0x8]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x698, Size: 0x8]
	int ForcedLodModel;//[Offset: 0x6a0, Size: 0x4]
	int MinLodModel;//[Offset: 0x6a4, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x6b0, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x6c0, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x6f4, Size: 0x1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f6, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f6, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f6, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6f6, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6f6, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f7, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f7, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f7, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f7, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f7, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f7, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6f7, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6f7, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f8, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f8, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f8, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f8, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f8, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f8, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f9, Size: 0x1]
	bool bCachedWorldSpaceBoundsUpToDate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f9, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f9, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x6fc, Size: 0x4]
	BoxSphereBounds CachedWorldOrLocalSpaceBounds;//[Offset: 0x738, Size: 0x38]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x770, Size: 0x80]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x349158eb6041
	void UnHideBoneByName(FName BoneName);// 0x349058eb6041
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x348f58eb6041
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x348e58eb6041
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x348d58eb6041
	void ShowAllMaterialSections(int LODIndex);// 0x348c58eb6041
	void SetVertexOffsetUsage(int LODIndex, int Usage);// 0x348b58eb6041
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x348a58eb6041
	bool SetSkinWeightProfile(FName InProfileName);// 0x348958eb6041
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x348858eb6041
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x348758eb6041
	void SetRenderStatic(bool bNewValue);// 0x348658eb6041
	void SetPreSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x348558eb6041
	void SetPostSkinningOffsets(int LODIndex, Vector[] Offsets);// 0x348458eb6041
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x348358eb6041
	void SetMinLOD(int InNewMinLOD);// 0x348258eb6041
	void SetMeshDeformer(MeshDeformer* InMeshDeformer);// 0x348158eb6041
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x348058eb6041
	void SetForcedLOD(int InNewForcedLOD);// 0x347f58eb6041
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x347e58eb6041
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x347d58eb6041
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x347c58eb6041
	bool IsUsingSkinWeightProfile();// 0x347b58eb6041
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x347a58eb6041
	bool IsBoneHiddenByName(FName BoneName);// 0x347958eb6041
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x347858eb6041
	int GetVertexOffsetUsage(int LODIndex);// 0x347758eb6041
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x347658eb6041
	FName GetSocketBoneName(FName InSocketName);// 0x347558eb6041
	Transform GetRefPoseTransform(int BoneIndex);// 0x347458eb6041
	Vector GetRefPosePosition(int BoneIndex);// 0x347358eb6041
	FName GetParentBone(FName BoneName);// 0x347258eb6041
	int GetNumLODs();// 0x34b358eb6041
	int GetNumBones();// 0x347058eb6041
	int GetForcedLOD();// 0x346f58eb6041
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x346e58eb6041
	FName GetCurrentSkinWeightProfileName();// 0x346d58eb6041
	FName GetBoneName(int BoneIndex);// 0x346c58eb6041
	int GetBoneIndex(FName BoneName);// 0x346b58eb6041
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x346a58eb6041
	void ClearVertexColorOverride(int LODIndex);// 0x346958eb6041
	void ClearSkinWeightProfile();// 0x346858eb6041
	void ClearSkinWeightOverride(int LODIndex);// 0x346758eb6041
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x346658eb6041

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 0x1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 0x1]
	bool bUseMainInstanceMontageEvaluationData;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x38, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x48, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x58, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x68, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x150, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x1c0, Size: 0x10]
	AnimNotifyEventReference[] ActiveAnimNotifyEventReference;//[Offset: 0x1d0, Size: 0x10]
	bool WasAnimNotifyTriggeredInStateMachine(int MachineIndex, class AnimNotify AnimNotifyType);// 0x1fc758eb6041
	bool WasAnimNotifyTriggeredInSourceState(int MachineIndex, int StateIndex, class AnimNotify AnimNotifyType);// 0x1fc658eb6041
	bool WasAnimNotifyTriggeredInAnyState(class AnimNotify AnimNotifyType);// 0x1fc558eb6041
	bool WasAnimNotifyStateActiveInStateMachine(int MachineIndex, class AnimNotifyState AnimNotifyStateType);// 0x1fc458eb6041
	bool WasAnimNotifyStateActiveInSourceState(int MachineIndex, int StateIndex, class AnimNotifyState AnimNotifyStateType);// 0x1fc358eb6041
	bool WasAnimNotifyStateActiveInAnyState(class AnimNotifyState AnimNotifyStateType);// 0x1fc258eb6041
	bool WasAnimNotifyNameTriggeredInStateMachine(int MachineIndex, FName NotifyName);// 0x1fc158eb6041
	bool WasAnimNotifyNameTriggeredInSourceState(int MachineIndex, int StateIndex, FName NotifyName);// 0x1fc058eb6041
	bool WasAnimNotifyNameTriggeredInAnyState(FName NotifyName);// 0x1fbf58eb6041
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x1fbe58eb6041
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x1fbd58eb6041
	Pawn* TryGetPawnOwner();// 0x1fbc58eb6041
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x1fbb58eb6041
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x1fba58eb6041
	void SetUseMainInstanceMontageEvaluationData(bool bSet);// 0x1fb958eb6041
	void SetRootMotionMode(byte Value);// 0x1fb858eb6041
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x1fb758eb6041
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x1fb658eb6041
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x1fb558eb6041
	void SavePoseSnapshot(FName SnapshotName);// 0x1fb458eb6041
	void ResetDynamics(enum InTeleportType);// 0x1fb358eb6041
	void RequestSlotGroupInertialization(FName InSlotGroupName, float Duration);// 0x1fb258eb6041
	void RemovePoseSnapshot(FName SnapshotName);// 0x1fb158eb6041
	AnimMontage* PlaySlotAnimationAsDynamicMontage_WithBlendSettings(AnimSequenceBase* Asset, FName SlotNodeName, out const MontageBlendSettings BlendInSettings, out const MontageBlendSettings BlendOutSettings, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x1fb058eb6041
	AnimMontage* PlaySlotAnimationAsDynamicMontage_WithBlendArgs(AnimSequenceBase* Asset, FName SlotNodeName, out const AlphaBlendArgs BlendIn, out const AlphaBlendArgs BlendOut, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x1faf58eb6041
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x1fae58eb6041
	void MontageSync_StopFollowing(const AnimMontage* MontageFollower);// 0x1fad58eb6041
	void MontageSync_Follow(const AnimMontage* MontageFollower, const AnimInstance* OtherAnimInstance, const AnimMontage* MontageLeader);// 0x1fac58eb6041
	void Montage_StopWithBlendSettings(out const MontageBlendSettings BlendOutSettings, const AnimMontage* Montage);// 0x1fab58eb6041
	void Montage_StopWithBlendOut(out const AlphaBlendArgs BlendOut, const AnimMontage* Montage);// 0x1faa58eb6041
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x1fa958eb6041
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x1fa858eb6041
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x1fe958eb6041
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x1fa658eb6041
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x1fa558eb6041
	void Montage_Resume(const AnimMontage* Montage);// 0x1fa458eb6041
	float Montage_PlayWithBlendSettings(AnimMontage* MontageToPlay, out const MontageBlendSettings BlendInSettings, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x1fa358eb6041
	float Montage_PlayWithBlendIn(AnimMontage* MontageToPlay, out const AlphaBlendArgs BlendIn, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x1fa258eb6041
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x1fa158eb6041
	void Montage_Pause(const AnimMontage* Montage);// 0x1fa058eb6041
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x1f9f58eb6041
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x1f9e58eb6041
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x1f9d58eb6041
	bool Montage_IsActive(const AnimMontage* Montage);// 0x1f9c58eb6041
	float Montage_GetPosition(const AnimMontage* Montage);// 0x1f9b58eb6041
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x1f9a58eb6041
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x1f9958eb6041
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x1f9858eb6041
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x1f9758eb6041
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x1f9658eb6041
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x1f9558eb6041
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x1f9458eb6041
	bool IsUsingMainInstanceMontageEvaluationData();// 0x1f9358eb6041
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x1f9258eb6041
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x1f9158eb6041
	bool IsAnyMontagePlaying();// 0x1f9058eb6041
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x1f8f58eb6041
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x1f8e58eb6041
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x1f8d58eb6041
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x1f8c58eb6041
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x1f8b58eb6041
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x1f8a58eb6041
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x1f8958eb6041
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x1f8858eb6041
	bool GetReceiveNotifiesFromLinkedInstances();// 0x1f8758eb6041
	bool GetPropagateNotifiesToLinkedInstances();// 0x1fc858eb6041
	SkeletalMeshComponent* GetOwningComponent();// 0x1f8558eb6041
	Actor* GetOwningActor();// 0x1f8458eb6041
	void GetLinkedAnimLayerInstancesByGroup(FName InGroup, out AnimInstance*[] OutLinkedInstances);// 0x1f8358eb6041
	AnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, class AnimInstance InClass);// 0x1f8258eb6041
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x1f8158eb6041
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x1f8058eb6041
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x1f7f58eb6041
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x1f7e58eb6041
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x1f7d58eb6041
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x1f7c58eb6041
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x1f7b58eb6041
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x1f7a58eb6041
	float GetInstanceMachineWeight(int MachineIndex);// 0x1f7958eb6041
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x1f7858eb6041
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x1f7758eb6041
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x1f7658eb6041
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x1f7558eb6041
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x1f7458eb6041
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x1f7358eb6041
	float GetDeltaSeconds();// 0x1f7258eb6041
	float GetCurveValue(FName CurveName);// 0x1f7158eb6041
	FName GetCurrentStateName(int MachineIndex);// 0x1f7058eb6041
	AnimMontage* GetCurrentActiveMontage();// 0x1f6f58eb6041
	void GetAllCurveNames(out FName[] OutNames);// 0x1f6e58eb6041
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x1f6d58eb6041
	void ClearMorphTargets();// 0x1f6c58eb6041
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x1f6b58eb6041
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x1f6a58eb6041
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);// 0x1f6958eb6041
	void BlueprintPostEvaluateAnimation();// 0x1f6858eb6041
	void BlueprintLinkedAnimationLayersInitialized();// 0x1f6758eb6041
	void BlueprintInitializeAnimation();// 0x1f6658eb6041
	void BlueprintBeginPlay();// 0x1fa758eb6041

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, out const AnimNotifyEventReference EventReference);// 0x236058eb6041
	FString GetNotifyName();// 0x235f58eb6041
	float GetDefaultTriggerWeightThreshold();// 0x235e58eb6041

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
	float GetPlayLength();// 0x2c4958eb6041

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	int TrackIndex;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime, out const AnimNotifyEventReference EventReference);// 0x235b58eb6041
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, out const AnimNotifyEventReference EventReference);// 0x235a58eb6041
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration, out const AnimNotifyEventReference EventReference);// 0x235958eb6041
	FString GetNotifyName();// 0x235858eb6041
	float GetDefaultTriggerWeightThreshold();// 0x235758eb6041

--------------------------------
Class: AnimNotifyEventReference
	MirrorDataTable* MirrorTable;//[Offset: 0x18, Size: 0x8]
	Object* NotifySource;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: MirrorDataTable.DataTable.Object
	MirrorFindReplaceExpression[] MirrorFindReplaceExpressions;//[Offset: 0xb0, Size: 0x10]
	byte MirrorAxis;//[Offset: 0xc0, Size: 0x1]
	Skeleton* Skeleton;//[Offset: 0xc8, Size: 0x8]

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	FString ImportKeyField;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: MirrorFindReplaceExpression
	FName FindExpression;//[Offset: 0x0, Size: 0x8]
	FName ReplaceExpression;//[Offset: 0x8, Size: 0x8]
	byte FindReplaceMethod;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	Skeleton*[] CompatibleSkeletons;//[Offset: 0x190, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x1a0, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x200, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x280, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x290, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x460, Size: 0x10]
	BlendProfile* GetBlendProfile(out const FName InProfileName);// 0x354158eb6041
	void AddCompatibleSkeleton(const Skeleton* SourceSkeleton);// 0x354058eb6041

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]
	enum Mode;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float BlendScale;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0x18]
	Rotator RelativeRotation;//[Offset: 0x50, Size: 0x18]
	Vector RelativeScale;//[Offset: 0x68, Size: 0x18]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x353f58eb6041
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x353e58eb6041

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	enum BlendModeIn;//[Offset: 0xa8, Size: 0x1]
	enum BlendModeOut;//[Offset: 0xa9, Size: 0x1]
	AlphaBlend BlendIn;//[Offset: 0xb0, Size: 0x30]
	float BlendInTime;//[Offset: 0xe0, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe8, Size: 0x30]
	float BlendOutTime;//[Offset: 0x118, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x11c, Size: 0x4]
	FName SyncGroup;//[Offset: 0x120, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x128, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x130, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x150, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x160, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x170, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x182, Size: 0x1]
	BlendProfile* BlendProfileIn;//[Offset: 0x188, Size: 0x8]
	BlendProfile* BlendProfileOut;//[Offset: 0x190, Size: 0x8]
	byte RootMotionRootLock;//[Offset: 0x198, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x1a0, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x1b0, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1c0, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1e8, Size: 0x8]
	bool IsValidSectionName(FName InSectionName);// 0x2c6458eb6041
	float GetDefaultBlendOutTime();// 0x2c6358eb6041
	float GetDefaultBlendInTime();// 0x2c6258eb6041
	AlphaBlendArgs GetBlendOutArgs();// 0x2c6158eb6041
	AlphaBlendArgs GetBlendInArgs();// 0x2c6058eb6041
	AnimMontage* CreateSlotAnimationAsDynamicMontage_WithBlendSettings(AnimSequenceBase* Asset, FName SlotNodeName, out const MontageBlendSettings BlendInSettings, out const MontageBlendSettings BlendOutSettings, float InPlayRate, int LoopCount, float InBlendOutTriggerTime);// 0x2c5f58eb6041

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlendArgs
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	enum BlendOption;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 0x8]
	float BlendTime;//[Offset: 0x8, Size: 0x4]
	enum BlendOption;//[Offset: 0x24, Size: 0x1]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: MontageBlendSettings
	BlendProfile* BlendProfile;//[Offset: 0x0, Size: 0x8]
	AlphaBlendArgs Blend;//[Offset: 0x8, Size: 0x10]
	enum BlendMode;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x80]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: ConstraintInstanceAccessor
	Object* Owner;//[Offset: 0x0, Size: 0x8]
	uint32 Index;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ClothingSimulationInteractor.Object
	<FName,ClothingInteractor*> ClothingInteractors;//[Offset: 0x28, Size: 0x50]
	void SetNumSubsteps(int NumSubsteps);// 0x228d58eb6041
	void SetNumIterations(int NumIterations);// 0x228c58eb6041
	void SetMaxNumIterations(int MaxNumIterations);// 0x228b58eb6041
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x228a58eb6041
	void PhysicsAssetUpdated();// 0x228958eb6041
	float GetSimulationTime();// 0x228858eb6041
	int GetNumSubsteps();// 0x228758eb6041
	int GetNumKinematicParticles();// 0x228658eb6041
	int GetNumIterations();// 0x228558eb6041
	int GetNumDynamicParticles();// 0x228458eb6041
	int GetNumCloths();// 0x228358eb6041
	ClothingInteractor* GetClothingInteractor(FString ClothingAssetName);// 0x228258eb6041
	void EnableGravityOverride(out const Vector InVector);// 0x228158eb6041
	void DisableGravityOverride();// 0x228058eb6041
	void ClothConfigUpdated();// 0x227f58eb6041

--------------------------------
Class: ClothingInteractor.Object

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0xf8, Size: 0x8]
	BoxSphereBounds ImportedBounds;//[Offset: 0x100, Size: 0x38]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x138, Size: 0x38]
	Vector PositiveBoundsExtension;//[Offset: 0x170, Size: 0x18]
	Vector NegativeBoundsExtension;//[Offset: 0x188, Size: 0x18]
	SkeletalMaterial[] Materials;//[Offset: 0x1a0, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0x1b0, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0x1c0, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0x220, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x224, Size: 0x1]
	byte SkelMirrorAxis;//[Offset: 0x225, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0x226, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x227, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x227, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x227, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x227, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x227, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x228, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x230, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x238, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x240, Size: 0x10]
	bool bSupportRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x250, Size: 0x1]
	int RayTracingMinLOD;//[Offset: 0x254, Size: 0x4]
	enum ClothLODBiasMode;//[Offset: 0x258, Size: 0x1]
	MorphTarget*[] MorphTargets;//[Offset: 0x260, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x3e8, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x3f0, Size: 0x10]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x400, Size: 0x30]
	AssetUserData*[] AssetUserData;//[Offset: 0x430, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x440, Size: 0x10]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x460, Size: 0x10]
	void SetSkeleton(Skeleton* InSkeleton);// 0x34d358eb6041
	void SetMorphTargets(out const MorphTarget*[] InMorphTargets);// 0x34d258eb6041
	void SetMeshClothingAssets(out const ClothingAssetBase*[] InMeshClothingAssets);// 0x34d158eb6041
	void SetMaterials(out const SkeletalMaterial[] InMaterials);// 0x34d058eb6041
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x34cf58eb6041
	void SetDefaultAnimatingRig(Object* InAnimatingRig);// 0x34ce58eb6041
	int NumSockets();// 0x34cd58eb6041
	FString[] K2_GetAllMorphTargetNames();// 0x34cc58eb6041
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x34cb58eb6041
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x34ca58eb6041
	Skeleton* GetSkeleton();// 0x34c958eb6041
	PhysicsAsset* GetShadowPhysicsAsset();// 0x34c858eb6041
	PhysicsAsset* GetPhysicsAsset();// 0x34c758eb6041
	NodeMappingContainer*[] GetNodeMappingData();// 0x34c658eb6041
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x34c558eb6041
	MorphTarget*[] GetMorphTargets();// 0x34c458eb6041
	ClothingAssetBase*[] GetMeshClothingAssets();// 0x34c358eb6041
	SkeletalMaterial[] GetMaterials();// 0x34c258eb6041
	SkeletalMeshLODSettings* GetLODSettings();// 0x34c158eb6041
	BoxSphereBounds GetImportedBounds();// 0x34c058eb6041
	Object* GetDefaultAnimatingRig();// 0x34bf58eb6041
	BoxSphereBounds GetBounds();// 0x34be58eb6041
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x34bd58eb6041
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x34bc58eb6041
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x34bb58eb6041

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 0x14]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 0x10]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 0x10]
	SectionReference[] SectionsToPrioritize;//[Offset: 0x88, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x98, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0xa0, Size: 0x8]
	AnimSequence* BakePoseOverride;//[Offset: 0xa8, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0xb0, Size: 0x10]
	enum SkinCacheUsage;//[Offset: 0xc0, Size: 0x1]
	float MorphTargetPositionErrorTolerance;//[Offset: 0xc4, Size: 0x4]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc8, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc8, Size: 0x1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bUseBackwardsCompatibleF16TruncUVs;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	float ThresholdPosition;//[Offset: 0x4, Size: 0x4]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 0x4]
	float ThresholdUV;//[Offset: 0xc, Size: 0x4]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	bool bMergeCoincidentVertBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: SectionReference
	int SectionIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xa8, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xb0, Size: 0x8]
	byte AdditiveAnimType;//[Offset: 0x128, Size: 0x1]
	byte RefPoseType;//[Offset: 0x129, Size: 0x1]
	int RefFrameIndex;//[Offset: 0x12c, Size: 0x4]
	AnimSequence* RefPoseSeq;//[Offset: 0x130, Size: 0x8]
	FName RetargetSource;//[Offset: 0x138, Size: 0x8]
	Transform[] RetargetSourceAssetReferencePose;//[Offset: 0x140, Size: 0x10]
	enum Interpolation;//[Offset: 0x150, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x152, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x158, Size: 0x10]
	FrameRate TargetFrameRate;//[Offset: 0x178, Size: 0x8]
	<AnimationAttributeIdentifier,AttributeCurve> AttributeCurves;//[Offset: 0x180, Size: 0x50]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimationAttributeIdentifier
	FName Name;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	int BoneIndex;//[Offset: 0x10, Size: 0x4]
	ScriptStruct* ScriptStruct;//[Offset: 0x18, Size: 0x8]
	SoftObjectPath ScriptStructPath;//[Offset: 0x20, Size: 0x18]

--------------------------------
Class: AttributeCurve.IndexedCurve
	AttributeKey[] Keys;//[Offset: 0x68, Size: 0x10]
	SoftObjectPath ScriptStructPath;//[Offset: 0x78, Size: 0x18]
	ScriptStruct* ScriptStruct;//[Offset: 0x90, Size: 0x8]
	bool bShouldInterpolate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]

--------------------------------
Class: AttributeKey
	float Time;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	PhysicsAssetSolverSettings SolverSettings;//[Offset: 0x60, Size: 0x18]
	SolverIterations SolverIterations;//[Offset: 0x78, Size: 0x18]
	enum SolverType;//[Offset: 0x90, Size: 0x1]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x91, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x138, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x140, Size: 0x10]

--------------------------------
Class: SkeletalBodySetup.BodySetup.BodySetupCore.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2e8, Size: 0x10]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x270]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x298, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x2a8, Size: 0x158]

--------------------------------
Class: ConstraintInstance.ConstraintInstanceBase
	FName JointName;//[Offset: 0x38, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x40, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x48, Size: 0x8]
	Vector Pos1;//[Offset: 0x50, Size: 0x18]
	Vector PriAxis1;//[Offset: 0x68, Size: 0x18]
	Vector SecAxis1;//[Offset: 0x80, Size: 0x18]
	Vector Pos2;//[Offset: 0x98, Size: 0x18]
	Vector PriAxis2;//[Offset: 0xb0, Size: 0x18]
	Vector SecAxis2;//[Offset: 0xc8, Size: 0x18]
	Rotator AngularRotationOffset;//[Offset: 0xe0, Size: 0x18]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x100, Size: 0x158]

--------------------------------
Class: ConstraintInstanceBase

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float ProjectionLinearAlpha;//[Offset: 0x8, Size: 0x4]
	float ProjectionAngularAlpha;//[Offset: 0xc, Size: 0x4]
	float ShockPropagationAlpha;//[Offset: 0x10, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x14, Size: 0x4]
	float LinearPlasticityThreshold;//[Offset: 0x18, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0x1c, Size: 0x4]
	float AngularPlasticityThreshold;//[Offset: 0x20, Size: 0x4]
	float ContactTransferScale;//[Offset: 0x24, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x28, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x44, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x64, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x80, Size: 0x68]
	AngularDriveConstraint AngularDrive;//[Offset: 0xe8, Size: 0x68]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x150, Size: 0x1]
	bool bEnableLinearProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x150, Size: 0x1]
	bool bEnableAngularProjection;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x150, Size: 0x1]
	bool bEnableShockPropagation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x150, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x150, Size: 0x1]
	bool bEnableSoftProjection;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x150, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x150, Size: 0x1]
	bool bAngularPlasticity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x151, Size: 0x1]
	bool bLinearPlasticity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x151, Size: 0x1]
	byte LinearPlasticityType;//[Offset: 0x152, Size: 0x1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0x18]
	Vector VelocityTarget;//[Offset: 0x18, Size: 0x18]
	ConstraintDrive XDrive;//[Offset: 0x30, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x40, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x50, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0x18]
	Vector AngularVelocityTarget;//[Offset: 0x48, Size: 0x18]
	byte AngularDriveMode;//[Offset: 0x60, Size: 0x1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x158]
	FName ProfileName;//[Offset: 0x158, Size: 0x8]

--------------------------------
Class: PhysicsAssetSolverSettings
	int PositionIterations;//[Offset: 0x0, Size: 0x4]
	int VelocityIterations;//[Offset: 0x4, Size: 0x4]
	int ProjectionIterations;//[Offset: 0x8, Size: 0x4]
	float CullDistance;//[Offset: 0xc, Size: 0x4]
	float MaxDepenetrationVelocity;//[Offset: 0x10, Size: 0x4]
	float FixedTimeStep;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SolverIterations
	int SolverIterations;//[Offset: 0x0, Size: 0x4]
	int JointIterations;//[Offset: 0x4, Size: 0x4]
	int CollisionIterations;//[Offset: 0x8, Size: 0x4]
	int SolverPushOutIterations;//[Offset: 0xc, Size: 0x4]
	int JointPushOutIterations;//[Offset: 0x10, Size: 0x4]
	int CollisionPushOutIterations;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x60]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 0x1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x34, Size: 0x1]
	bool bOverrideLODStreamingSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x36, Size: 0x1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x38, Size: 0x4]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x3c, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10]
	int[] SectionsToPrioritize;//[Offset: 0x30, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x40, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x48, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x50, Size: 0x3c]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	byte BlueprintType;//[Offset: 0x58, Size: 0x1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 0x4]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 0x10]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SCS_Node.Object
	ClassPtrProperty ComponentClass;//[Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x48]
	FName AttachToName;//[Offset: 0x80, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xc0, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 0x10]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]
	byte TimelineTickGroup;//[Offset: 0x90, Size: 0x1]
	FName VariableName;//[Offset: 0x94, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x9c, Size: 0x8]
	FName UpdateFunctionName;//[Offset: 0xa4, Size: 0x8]
	FName FinishedFunctionName;//[Offset: 0xac, Size: 0x8]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x14, Size: 0x8]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	Vector GetVectorValue(float InTime);// 0x2de158eb6041

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x80]
	float AdjustHue;//[Offset: 0x230, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x234, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x238, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x240, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 0x4]
	LinearColor GetUnadjustedLinearColorValue(float InTime);// 0x2dda58eb6041
	LinearColor GetLinearColorValue(float InTime);// 0x2dd958eb6041
	LinearColor GetClampedLinearColorValue(float InTime);// 0x2dd858eb6041

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 0x8]
	ClassPtrProperty ComponentClass;//[Size: 0x8]

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ComponentOverrideRecord
	ClassPtrProperty ComponentClass;//[Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x48]

--------------------------------
Class: ComponentKey
	ClassPtrProperty OwnerClass;//[Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MeshDeformer.Object

--------------------------------
Class: MeshDeformerInstance.Object

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x20]
	Plane YPlane;//[Offset: 0x20, Size: 0x20]
	Plane ZPlane;//[Offset: 0x40, Size: 0x20]
	Plane WPlane;//[Offset: 0x60, Size: 0x20]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x18, Size: 0x18]
	Vector Vector_Low;//[Offset: 0x30, Size: 0x18]
	Color Color;//[Offset: 0x48, Size: 0x4]
	Actor* Actor;//[Offset: 0x50, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x50, Size: 0x10]
	delegate OnDrop;//[Offset: 0x60, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x70, Size: 0x10]
	delegate OnDragged;//[Offset: 0x80, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x28be58eb6041
	void Dragged(out const PointerEvent PointerEvent);// 0x28bd58eb6041
	void DragCancelled(out const PointerEvent PointerEvent);// 0x28bc58eb6041

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0x2fb058eb6041
	bool WasControllerKeyJustPressed(Key Key);// 0x2faf58eb6041
	void OnInputOwnerEndPlayed(Actor* InOwner, byte EndPlayReason);// 0x2fae58eb6041
	bool IsControllerKeyDown(Key Key);// 0x2fad58eb6041
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x2fac58eb6041
	Vector GetControllerVectorKeyState(Key Key);// 0x2fab58eb6041
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x2faa58eb6041
	float GetControllerKeyTimeDown(Key Key);// 0x2fa958eb6041
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x2fa858eb6041
	float GetControllerAnalogKeyState(Key Key);// 0x2fa758eb6041

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x1a0, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x1e0, Size: 0x10]
	void SetMouseSensitivity(const float Sensitivity);// 0x345158eb6041
	void SetBind(FName BindName, FString Command);// 0x349258eb6041
	void InvertAxisKey(const Key AxisKey);// 0x344f58eb6041
	void InvertAxis(const FName AxisName);// 0x344e58eb6041
	void ClearSmoothing();// 0x344d58eb6041

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]
	FName UserTag;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x278, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x280, Size: 0x8]
	float DefaultFOV;//[Offset: 0x290, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x298, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x2a0, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x310, Size: 0x790]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0xaa0, Size: 0x790]
	TViewTarget ViewTarget;//[Offset: 0x1230, Size: 0x7a0]
	TViewTarget PendingViewTarget;//[Offset: 0x19d0, Size: 0x7a0]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x21a0, Size: 0x790]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2930, Size: 0x790]
	CameraModifier*[] ModifierList;//[Offset: 0x30c0, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x30d0, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x30e0, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x30e8, Size: 0x18]
	Vector ViewTargetOffset;//[Offset: 0x3100, Size: 0x18]
	delegate OnAudioFadeChangeEvent;//[Offset: 0x3118, Size: 0x10]
	interface classNone[] CameraLensEffects;//[Offset: 0x3140, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x3150, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x3158, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x3198, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x31b8, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x31c8, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x31d8, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31e0, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31e0, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31e0, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x31e0, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31e1, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x31e4, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x31e8, Size: 0x4]
	float ViewYawMin;//[Offset: 0x31ec, Size: 0x4]
	float ViewYawMax;//[Offset: 0x31f0, Size: 0x4]
	float ViewRollMin;//[Offset: 0x31f4, Size: 0x4]
	float ViewRollMax;//[Offset: 0x31f8, Size: 0x4]
	float ServerUpdateCameraTimeout;//[Offset: 0x3200, Size: 0x4]
	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();// 0x344c58eb6041
	void StopCameraShake(CameraShakeBase* ShakeInstance, bool bImmediately);// 0x344b58eb6041
	void StopCameraFade();// 0x344a58eb6041
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x344958eb6041
	void StopAllInstancesOfCameraShakeFromSource(class CameraShakeBase Shake, CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x344858eb6041
	void StopAllInstancesOfCameraShake(class CameraShakeBase Shake, bool bImmediately);// 0x344758eb6041
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x344658eb6041
	void StopAllCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x344558eb6041
	void StopAllCameraShakes(bool bImmediately);// 0x344458eb6041
	void StopAllCameraAnims(bool bImmediate);// 0x344358eb6041
	CameraShakeBase* StartCameraShakeFromSource(class CameraShakeBase ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x344258eb6041
	CameraShakeBase* StartCameraShake(class CameraShakeBase ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x344158eb6041
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x344058eb6041
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x343f58eb6041
	void SetGameCameraCutThisFrame();// 0x343e58eb6041
	void RemoveGenericCameraLensEffect(interface classNone Emitter);// 0x343d58eb6041
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x343c58eb6041
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x343b58eb6041
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x343a58eb6041
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x343958eb6041
	void OnPhotographySessionStart();// 0x343858eb6041
	void OnPhotographySessionEnd();// 0x343758eb6041
	void OnPhotographyMultiPartCaptureStart();// 0x343658eb6041
	void OnPhotographyMultiPartCaptureEnd();// 0x343558eb6041
	PlayerController* GetOwningPlayerController();// 0x343458eb6041
	float GetFOVAngle();// 0x343358eb6041
	Rotator GetCameraRotation();// 0x343258eb6041
	Vector GetCameraLocation();// 0x343158eb6041
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x343058eb6041
	void ClearCameraLensEffects();// 0x347158eb6041
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x342e58eb6041
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x342d58eb6041
	interface classNone AddGenericCameraLensEffect(class Actor LensEffectEmitterClass);// 0x342c58eb6041
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x342b58eb6041

--------------------------------
Class: CameraShakeBase.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float ShakeScale;//[Offset: 0x2c, Size: 0x4]
	CameraShakePattern* RootShakePattern;//[Offset: 0x30, Size: 0x8]
	PlayerCameraManager* CameraManager;//[Offset: 0x38, Size: 0x8]
	void SetRootShakePattern(CameraShakePattern* InPattern);// 0x21d958eb6041
	CameraShakePattern* GetRootShakePattern();// 0x21d858eb6041

--------------------------------
Class: CameraShakePattern.Object

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x780]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0x18]
	Rotator Rotation;//[Offset: 0x18, Size: 0x18]
	float FOV;//[Offset: 0x30, Size: 0x4]
	float DesiredFOV;//[Offset: 0x34, Size: 0x4]
	float OrthoWidth;//[Offset: 0x38, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x3c, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x40, Size: 0x4]
	float AspectRatio;//[Offset: 0x44, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x49, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x4c, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x50, Size: 0x6b0]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x700, Size: 0x10]

--------------------------------
Class: PostProcessSettings
	bool bOverride_TemperatureType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_ToneCurveAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomConvolutionScatterDispersion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_LocalExposureContrastScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_LocalExposureDetailStrength;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_LocalExposureBlurredLuminanceBlend;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_LocalExposureBlurredLuminanceKernelSizePercent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_LocalExposureMiddleGreyBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_FilmGrainIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_FilmGrainIntensityShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_FilmGrainIntensityMidtones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_FilmGrainIntensityHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_FilmGrainShadowsMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_FilmGrainHighlightsMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_FilmGrainHighlightsMax;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_FilmGrainTexelSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_FilmGrainTexture;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionTemporalBlendWeight;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAOIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_RayTracingAORadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_ReflectionMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_LumenReflectionQuality;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1]
	bool bOverride_DynamicGlobalIlluminationMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1]
	bool bOverride_LumenSceneLightingQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1]
	bool bOverride_LumenSceneDetail;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1]
	bool bOverride_LumenSceneViewDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1]
	bool bOverride_LumenSceneLightingUpdateSpeed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 0x1]
	bool bOverride_LumenFinalGatherQuality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 0x1]
	bool bOverride_LumenFinalGatherLightingUpdateSpeed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 0x1]
	bool bOverride_LumenMaxTraceDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 0x1]
	bool bOverride_LumenRayLightingMode;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17, Size: 0x1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1]
	bool bOverride_PathTracingFilterWidth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1]
	bool bOverride_PathTracingEnableEmissive;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1]
	bool bOverride_PathTracingMaxPathExposure;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1]
	bool bOverride_PathTracingEnableReferenceDOF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bOverride_PathTracingEnableDenoiser;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1]
	byte BloomMethod;//[Offset: 0x1a, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x1b, Size: 0x1]
	byte TemperatureType;//[Offset: 0x1c, Size: 0x1]
	float WhiteTemp;//[Offset: 0x20, Size: 0x4]
	float WhiteTint;//[Offset: 0x24, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 0x20]
	Vector4 ColorContrast;//[Offset: 0x50, Size: 0x20]
	Vector4 ColorGamma;//[Offset: 0x70, Size: 0x20]
	Vector4 ColorGain;//[Offset: 0x90, Size: 0x20]
	Vector4 ColorOffset;//[Offset: 0xb0, Size: 0x20]
	Vector4 ColorSaturationShadows;//[Offset: 0xd0, Size: 0x20]
	Vector4 ColorContrastShadows;//[Offset: 0xf0, Size: 0x20]
	Vector4 ColorGammaShadows;//[Offset: 0x110, Size: 0x20]
	Vector4 ColorGainShadows;//[Offset: 0x130, Size: 0x20]
	Vector4 ColorOffsetShadows;//[Offset: 0x150, Size: 0x20]
	Vector4 ColorSaturationMidtones;//[Offset: 0x170, Size: 0x20]
	Vector4 ColorContrastMidtones;//[Offset: 0x190, Size: 0x20]
	Vector4 ColorGammaMidtones;//[Offset: 0x1b0, Size: 0x20]
	Vector4 ColorGainMidtones;//[Offset: 0x1d0, Size: 0x20]
	Vector4 ColorOffsetMidtones;//[Offset: 0x1f0, Size: 0x20]
	Vector4 ColorSaturationHighlights;//[Offset: 0x210, Size: 0x20]
	Vector4 ColorContrastHighlights;//[Offset: 0x230, Size: 0x20]
	Vector4 ColorGammaHighlights;//[Offset: 0x250, Size: 0x20]
	Vector4 ColorGainHighlights;//[Offset: 0x270, Size: 0x20]
	Vector4 ColorOffsetHighlights;//[Offset: 0x290, Size: 0x20]
	float ColorCorrectionHighlightsMin;//[Offset: 0x2b0, Size: 0x4]
	float ColorCorrectionHighlightsMax;//[Offset: 0x2b4, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x2b8, Size: 0x4]
	float BlueCorrection;//[Offset: 0x2bc, Size: 0x4]
	float ExpandGamut;//[Offset: 0x2c0, Size: 0x4]
	float ToneCurveAmount;//[Offset: 0x2c4, Size: 0x4]
	float FilmSlope;//[Offset: 0x2c8, Size: 0x4]
	float FilmToe;//[Offset: 0x2cc, Size: 0x4]
	float FilmShoulder;//[Offset: 0x2d0, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x2d4, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x2d8, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x2dc, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x2ec, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x2f0, Size: 0x4]
	float BloomIntensity;//[Offset: 0x2f4, Size: 0x4]
	float BloomThreshold;//[Offset: 0x2f8, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x2fc, Size: 0x4]
	float Bloom1Size;//[Offset: 0x300, Size: 0x4]
	float Bloom2Size;//[Offset: 0x304, Size: 0x4]
	float Bloom3Size;//[Offset: 0x308, Size: 0x4]
	float Bloom4Size;//[Offset: 0x30c, Size: 0x4]
	float Bloom5Size;//[Offset: 0x310, Size: 0x4]
	float Bloom6Size;//[Offset: 0x314, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x318, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x328, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x338, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x348, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x358, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x368, Size: 0x10]
	float BloomConvolutionScatterDispersion;//[Offset: 0x378, Size: 0x4]
	float BloomConvolutionSize;//[Offset: 0x37c, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x380, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x388, Size: 0x10]
	float BloomConvolutionPreFilterMin;//[Offset: 0x398, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x39c, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x3a0, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x3a4, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x3a8, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x3b0, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x3b4, Size: 0x10]
	byte DynamicGlobalIlluminationMethod;//[Offset: 0x3c4, Size: 0x1]
	LinearColor IndirectLightingColor;//[Offset: 0x3c8, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x3d8, Size: 0x4]
	float LumenSceneLightingQuality;//[Offset: 0x3dc, Size: 0x4]
	float LumenSceneDetail;//[Offset: 0x3e0, Size: 0x4]
	float LumenSceneViewDistance;//[Offset: 0x3e4, Size: 0x4]
	float LumenSceneLightingUpdateSpeed;//[Offset: 0x3e8, Size: 0x4]
	float LumenFinalGatherQuality;//[Offset: 0x3ec, Size: 0x4]
	float LumenFinalGatherLightingUpdateSpeed;//[Offset: 0x3f0, Size: 0x4]
	float LumenMaxTraceDistance;//[Offset: 0x3f4, Size: 0x4]
	enum RayTracingGIType;//[Offset: 0x3f8, Size: 0x1]
	int RayTracingGIMaxBounces;//[Offset: 0x3fc, Size: 0x4]
	int RayTracingGISamplesPerPixel;//[Offset: 0x400, Size: 0x4]
	byte ReflectionMethod;//[Offset: 0x404, Size: 0x1]
	enum ReflectionsType;//[Offset: 0x405, Size: 0x1]
	float LumenReflectionQuality;//[Offset: 0x408, Size: 0x4]
	enum LumenRayLightingMode;//[Offset: 0x40c, Size: 0x1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x410, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x414, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x418, Size: 0x4]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x41c, Size: 0x4]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x420, Size: 0x4]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x424, Size: 0x4]
	enum RayTracingReflectionsShadows;//[Offset: 0x428, Size: 0x1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x429, Size: 0x1]
	LinearColor AmbientCubemapTint;//[Offset: 0x42c, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x43c, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x440, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x448, Size: 0x4]
	float CameraISO;//[Offset: 0x44c, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x450, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x454, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x458, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x45c, Size: 0x4]
	float AutoExposureBiasBackup;//[Offset: 0x460, Size: 0x4]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x464, Size: 0x1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x464, Size: 0x1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x468, Size: 0x8]
	Texture* AutoExposureMeterMask;//[Offset: 0x470, Size: 0x8]
	float AutoExposureLowPercent;//[Offset: 0x478, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x47c, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x480, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x484, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x488, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x48c, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x490, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x494, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x498, Size: 0x4]
	float LocalExposureContrastScale;//[Offset: 0x49c, Size: 0x4]
	float LocalExposureDetailStrength;//[Offset: 0x4a0, Size: 0x4]
	float LocalExposureBlurredLuminanceBlend;//[Offset: 0x4a4, Size: 0x4]
	float LocalExposureBlurredLuminanceKernelSizePercent;//[Offset: 0x4a8, Size: 0x4]
	float LocalExposureMiddleGreyBias;//[Offset: 0x4ac, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x4b0, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x4b4, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x4c4, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x4c8, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x4d0, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x4d8, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x558, Size: 0x4]
	float GrainJitter;//[Offset: 0x55c, Size: 0x4]
	float GrainIntensity;//[Offset: 0x560, Size: 0x4]
	float FilmGrainIntensity;//[Offset: 0x564, Size: 0x4]
	float FilmGrainIntensityShadows;//[Offset: 0x568, Size: 0x4]
	float FilmGrainIntensityMidtones;//[Offset: 0x56c, Size: 0x4]
	float FilmGrainIntensityHighlights;//[Offset: 0x570, Size: 0x4]
	float FilmGrainShadowsMax;//[Offset: 0x574, Size: 0x4]
	float FilmGrainHighlightsMin;//[Offset: 0x578, Size: 0x4]
	float FilmGrainHighlightsMax;//[Offset: 0x57c, Size: 0x4]
	float FilmGrainTexelSize;//[Offset: 0x580, Size: 0x4]
	Texture2D* FilmGrainTexture;//[Offset: 0x588, Size: 0x8]
	float AmbientOcclusionIntensity;//[Offset: 0x590, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x594, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x598, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59c, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x5a0, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x5a4, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x5a8, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x5ac, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x5b0, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x5b4, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x5b8, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x5bc, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x5c0, Size: 0x4]
	float AmbientOcclusionTemporalBlendWeight;//[Offset: 0x5c4, Size: 0x4]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c8, Size: 0x1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x5cc, Size: 0x4]
	float RayTracingAOIntensity;//[Offset: 0x5d0, Size: 0x4]
	float RayTracingAORadius;//[Offset: 0x5d4, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x5d8, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x5e0, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x5e8, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x5ec, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x5f0, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x5f4, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x5f8, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x5fc, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x600, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x604, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x608, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x60c, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x610, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x614, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x618, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x61c, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x620, Size: 0x4]
	int MotionBlurTargetFPS;//[Offset: 0x624, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x628, Size: 0x4]
	float LPVIntensity;//[Offset: 0x62c, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x630, Size: 0x4]
	float LPVSize;//[Offset: 0x634, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x638, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x63c, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x640, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x644, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x648, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x64c, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x650, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x654, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x658, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x65c, Size: 0x4]
	enum TranslucencyType;//[Offset: 0x660, Size: 0x1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x664, Size: 0x4]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x668, Size: 0x4]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x66c, Size: 0x4]
	enum RayTracingTranslucencyShadows;//[Offset: 0x670, Size: 0x1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x671, Size: 0x1]
	int PathTracingMaxBounces;//[Offset: 0x674, Size: 0x4]
	int PathTracingSamplesPerPixel;//[Offset: 0x678, Size: 0x4]
	float PathTracingFilterWidth;//[Offset: 0x67c, Size: 0x4]
	bool PathTracingEnableEmissive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x680, Size: 0x1]
	float PathTracingMaxPathExposure;//[Offset: 0x684, Size: 0x4]
	bool PathTracingEnableReferenceDOF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x688, Size: 0x1]
	bool PathTracingEnableDenoiser;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x688, Size: 0x1]
	float LPVFadeRange;//[Offset: 0x68c, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x690, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x694, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x698, Size: 0x10]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x780]
	PlayerState* PlayerState;//[Offset: 0x790, Size: 0x8]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x29, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	void OnCameraOwnerDestroyed(Actor* InOwner);// 0x21cf58eb6041
	bool IsDisabled();// 0x221058eb6041
	Actor* GetViewTarget();// 0x21cd58eb6041
	void EnableModifier();// 0x21cc58eb6041
	void DisableModifier(bool bImmediate);// 0x21cb58eb6041
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x21ca58eb6041
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x21c958eb6041

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	<class CameraShakeBase,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 0x50]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShakeBase* ShakeInstance;//[Offset: 0x0, Size: 0x8]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 0x8]
	bool bIsCustomInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x2b0, Size: 0x1]
	float InnerAttenuationRadius;//[Offset: 0x2b4, Size: 0x4]
	float OuterAttenuationRadius;//[Offset: 0x2b8, Size: 0x4]
	class CameraShakeBase* CameraShake;//[Offset: 0x2c0, Size: 0x8]
	bool bAutoStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	void StopAllCameraShakesOfType(class CameraShakeBase InCameraShake, bool bImmediately);// 0x2d3f58eb6041
	void StopAllCameraShakes(bool bImmediately);// 0x2d3e58eb6041
	void StartCameraShake(class CameraShakeBase InCameraShake, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x2d3d58eb6041
	void Start();// 0x2d3c58eb6041
	float GetAttenuationFactor(out const Vector Location);// 0x2d3b58eb6041

--------------------------------
Class: PooledCameraShakes
	CameraShakeBase*[] PooledShakes;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	enum PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x2d3458eb6041
	void SetScale(float NewDuration);// 0x2d3358eb6041
	void SetDuration(float NewDuration);// 0x2d3258eb6041

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x38, Size: 0x38]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1]
	float BaseFOV;//[Offset: 0x74, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x80, Size: 0x6b0]
	float BasePostProcessBlendWeight;//[Offset: 0x730, Size: 0x4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x8, Size: 0x18]
	Vector ArriveTangent;//[Offset: 0x20, Size: 0x18]
	Vector LeaveTangent;//[Offset: 0x38, Size: 0x18]
	byte InterpMode;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0x18]
	Rotator ResetRotation;//[Offset: 0x40, Size: 0x18]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x278, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x280, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x288, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1]
	float AspectRatio;//[Offset: 0x29c, Size: 0x4]
	float FOVAngle;//[Offset: 0x2a0, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x2a4, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2b0, Size: 0x6b0]
	int GetAutoActivatePlayerIndex();// 0x2a9158eb6041

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x2b0, Size: 0x4]
	float OrthoWidth;//[Offset: 0x2b4, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x2b8, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x2bc, Size: 0x4]
	float AspectRatio;//[Offset: 0x2c0, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c4, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c4, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x2c5, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x330, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x360, Size: 0x6b0]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x2a9f58eb6041
	void SetProjectionMode(byte InProjectionMode);// 0x2a9e58eb6041
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x2a9d58eb6041
	void SetOrthoWidth(float InOrthoWidth);// 0x2a9c58eb6041
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x2a9b58eb6041
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x2a9a58eb6041
	void SetFieldOfView(float InFieldOfView);// 0x2a9958eb6041
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x2a9858eb6041
	void SetAspectRatio(float InAspectRatio);// 0x2a9758eb6041
	void RemoveBlendable(interface classNone InBlendableObject);// 0x2a9658eb6041
	void OnCameraMeshHiddenChanged();// 0x2a9558eb6041
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x2a9458eb6041
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x2a9358eb6041

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x2d0, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x2d8, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x2e0, Size: 0x60]
	float BaseFOV;//[Offset: 0x340, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344, Size: 0x1]
	class Actor[] EmittersToTreatAsSame;//[Offset: 0x348, Size: 0x10]
	float DistFromCamera;//[Offset: 0x358, Size: 0x4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x278, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x288, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x298, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x2a8, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x2b8, Size: 0x10]
	void ToggleActive();// 0x2e8858eb6041
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x2e8758eb6041
	void SetTemplate(ParticleSystem* NewTemplate);// 0x2e8658eb6041
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x2e8558eb6041
	void SetFloatParameter(FName ParameterName, float Param);// 0x2e8458eb6041
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x2e8358eb6041
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x2e8258eb6041
	void OnRep_bCurrentlyActive();// 0x2e8158eb6041
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x2e8058eb6041
	bool IsActive();// 0x2e7f58eb6041
	void Deactivate();// 0x2e7e58eb6041
	void Activate();// 0x2e7d58eb6041

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	FName Filename;//[Offset: 0x8, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	CheatManagerExtension*[] CheatManagerExtensions;//[Offset: 0x78, Size: 0x10]
	void Walk();// 0x2d9a58eb6041
	void ViewSelf();// 0x2ddb58eb6041
	void ViewPlayer(FString S);// 0x2d9858eb6041
	void ViewClass(class Actor DesiredClass);// 0x2d9758eb6041
	void ViewActor(FName ActorName);// 0x2d9658eb6041
	void UpdateSafeArea();// 0x2d9558eb6041
	void ToggleServerStatReplicatorUpdateStatNet();// 0x2d9458eb6041
	void ToggleServerStatReplicatorClientOverwrite();// 0x2d9358eb6041
	void ToggleDebugCamera();// 0x2d9258eb6041
	void ToggleAILogging();// 0x2d9158eb6041
	void TestCollisionDistance();// 0x2d9058eb6041
	void Teleport();// 0x2d8f58eb6041
	void Summon(FString ClassName);// 0x2d8e58eb6041
	void StreamLevelOut(FName PackageName);// 0x2d8d58eb6041
	void StreamLevelIn(FName PackageName);// 0x2d8c58eb6041
	void SpawnServerStatReplicator();// 0x2d8b58eb6041
	void Slomo(float NewTimeDilation);// 0x2d8a58eb6041
	void SetWorldOrigin();// 0x2d8958eb6041
	void SetMouseSensitivityToDefault();// 0x2d8858eb6041
	void ServerToggleAILogging();// 0x2d8758eb6041
	void ReceiveInitCheatManager();// 0x2d8658eb6041
	void ReceiveEndPlay();// 0x2d8558eb6041
	void PlayersOnly();// 0x2d8458eb6041
	void OnPlayerEndPlayed(Actor* Player, byte EndPlayReason);// 0x2d8358eb6041
	void OnlyLoadLevel(FName PackageName);// 0x2d8258eb6041
	void LogLoc();// 0x2d8158eb6041
	void InvertMouse();// 0x2d8058eb6041
	void God();// 0x2d7f58eb6041
	void Ghost();// 0x2d7e58eb6041
	PlayerController* GetPlayerController();// 0x2d7d58eb6041
	void FreezeFrame(float Delay);// 0x2d7c58eb6041
	void Fly();// 0x2d7b58eb6041
	void FlushLog();// 0x2d7a58eb6041
	void EnableDebugCamera();// 0x2d7958eb6041
	void DumpVoiceMutingState();// 0x2dba58eb6041
	void DumpPartyState();// 0x2d7758eb6041
	void DumpOnlineSessionState();// 0x2d7658eb6041
	void DumpChatState();// 0x2d7558eb6041
	void DisableDebugCamera();// 0x2d7458eb6041
	void DestroyTarget();// 0x2d7358eb6041
	void DestroyServerStatReplicator();// 0x2d7258eb6041
	void DestroyPawns(class Pawn aClass);// 0x2d7158eb6041
	void DestroyAllPawnsExceptTarget();// 0x2d7058eb6041
	void DestroyAll(class Actor aClass);// 0x2d6f58eb6041
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x2d6e58eb6041
	void DebugCapsuleSweepPawn();// 0x2d6d58eb6041
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x2d6c58eb6041
	void DebugCapsuleSweepClear();// 0x2d6b58eb6041
	void DebugCapsuleSweepChannel(byte Channel);// 0x2d6a58eb6041
	void DebugCapsuleSweepCapture();// 0x2d6958eb6041
	void DebugCapsuleSweep();// 0x2d6858eb6041
	void DamageTarget(float DamageAmount);// 0x2d6758eb6041
	void CheatScript(FString ScriptName);// 0x2d6658eb6041
	void ChangeSize(float F);// 0x2d6558eb6041
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x2d6458eb6041
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x2d6358eb6041
	void BugIt(FString ScreenShotDescription);// 0x2d6258eb6041

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c8, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c8, Size: 0x1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c8, Size: 0x1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c8, Size: 0x1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c8, Size: 0x1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7c8, Size: 0x1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c8, Size: 0x1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7c8, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x7d0, Size: 0x8]
	Actor* SelectedActor;//[Offset: 0x7d8, Size: 0x8]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x7e0, Size: 0x8]
	HitResult SelectedHitPoint;//[Offset: 0x7e8, Size: 0xe8]
	PlayerController* OriginalControllerRef;//[Offset: 0x8d0, Size: 0x8]
	Player* OriginalPlayer;//[Offset: 0x8d8, Size: 0x8]
	float SpeedScale;//[Offset: 0x8e0, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x8e4, Size: 0x4]
	float InitialAccel;//[Offset: 0x8e8, Size: 0x4]
	float InitialDecel;//[Offset: 0x8ec, Size: 0x4]
	void ToggleDisplay();// 0x2e0758eb6041
	void ShowDebugSelectedInfo();// 0x2e0658eb6041
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x2e0558eb6041
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x2e0458eb6041
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x2e0358eb6041
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x2e0258eb6041
	Actor* GetSelectedActor();// 0x2e0158eb6041

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bFrustumEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 0x1]
	Color FrustumColor;//[Offset: 0x53c, Size: 0x4]
	float FrustumAngle;//[Offset: 0x540, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x544, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x548, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x54c, Size: 0x4]
	Texture* Texture;//[Offset: 0x550, Size: 0x8]

--------------------------------
Class: CheatManagerExtension.Object
	PlayerController* GetPlayerController();// 0x2d6158eb6041

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	Vector2D Center;//[Offset: 0x10, Size: 0x10]
	Vector2D VisualSize;//[Offset: 0x20, Size: 0x10]
	Vector2D ThumbSize;//[Offset: 0x30, Size: 0x10]
	Vector2D InteractionSize;//[Offset: 0x40, Size: 0x10]
	Vector2D InputScale;//[Offset: 0x50, Size: 0x10]
	Key MainInputKey;//[Offset: 0x60, Size: 0x18]
	Key AltInputKey;//[Offset: 0x78, Size: 0x18]

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x2f8, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x300, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x308, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x310, Size: 0x48]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x358, Size: 0x48]
	float AnimRootMotionTranslationScale;//[Offset: 0x3a0, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x3a8, Size: 0x18]
	Quat BaseRotationOffset;//[Offset: 0x3c0, Size: 0x20]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x3e0, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x3e4, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x3e8, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x3ec, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f0, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f0, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f0, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f0, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3f0, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3f0, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3f0, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f1, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f1, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f1, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x3f4, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x3f8, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x3fc, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x400, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x404, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x408, Size: 0x4]
	int JumpCurrentCountPreJump;//[Offset: 0x40c, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x418, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x438, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x448, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x458, Size: 0x48]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x4a0, Size: 0x70]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x510, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x520, Size: 0xd8]
	void UnCrouch(bool bClientSimulation);// 0x1e1758eb6041
	void StopJumping();// 0x1e1658eb6041
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x1e1558eb6041
	void ServerMovePacked(const CharacterServerMovePackedBits PackedBits);// 0x1e1458eb6041
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x1e1358eb6041
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x1e1258eb6041
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x1e1158eb6041
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x1e1058eb6041
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x1e0f58eb6041
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x1e0e58eb6041
	void RootMotionDebugClientPrintOnScreen(FString InString);// 0x1e0d58eb6041
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x1e0c58eb6041
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x1e0b58eb6041
	void OnRep_RootMotion();// 0x1e0a58eb6041
	void OnRep_ReplicatedBasedMovement();// 0x1e0958eb6041
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x1e0858eb6041
	void OnRep_IsCrouched();// 0x1e0758eb6041
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1e0658eb6041
	void OnLanded(out const HitResult Hit);// 0x1e0558eb6041
	void OnJumped();// 0x1e4158eb6041
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x1e0358eb6041
	void K2_UpdateCustomMovement(float DeltaTime);// 0x1e0258eb6041
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1e0158eb6041
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x1e0058eb6041
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x1dff58eb6041
	void Jump();// 0x1dfe58eb6041
	bool IsPlayingRootMotion();// 0x1dfd58eb6041
	bool IsPlayingNetworkedRootMotionMontage();// 0x1dfc58eb6041
	bool IsJumpProvidingForce();// 0x1dfb58eb6041
	bool HasAnyRootMotion();// 0x1dfa58eb6041
	AnimMontage* GetCurrentMontage();// 0x1df958eb6041
	Vector GetBaseTranslationOffset();// 0x1df858eb6041
	Rotator GetBaseRotationOffsetRotator();// 0x1df758eb6041
	float GetAnimRootMotionTranslationScale();// 0x1df658eb6041
	void Crouch(bool bClientSimulation);// 0x1df558eb6041
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1df458eb6041
	void ClientMoveResponsePacked(const CharacterMoveResponsePackedBits PackedBits);// 0x1df358eb6041
	void ClientCheatWalk();// 0x1df258eb6041
	void ClientCheatGhost();// 0x1df158eb6041
	void ClientCheatFly();// 0x1df058eb6041
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1def58eb6041
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1dee58eb6041
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x1ded58eb6041
	void ClientAckGoodMove(float Timestamp);// 0x1dec58eb6041
	bool CanJumpInternal();// 0x1deb58eb6041
	bool CanJump();// 0x1dea58eb6041
	bool CanCrouch();// 0x1de958eb6041
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x1de858eb6041

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x170, Size: 0x8]
	float GravityScale;//[Offset: 0x178, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x17c, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x180, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x184, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x1a4, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x1a8, Size: 0x4]
	byte MovementMode;//[Offset: 0x1ac, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x1ad, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x1ae, Size: 0x1]
	float GroundFriction;//[Offset: 0x1b0, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x1f8, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x1fc, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x200, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x204, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x208, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x20c, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x210, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x214, Size: 0x4]
	float BrakingFriction;//[Offset: 0x218, Size: 0x4]
	float BrakingSubStepTime;//[Offset: 0x21c, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x220, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x224, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x228, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x22c, Size: 0x4]
	float AirControl;//[Offset: 0x230, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x234, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x238, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x23c, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x240, Size: 0x4]
	float Buoyancy;//[Offset: 0x244, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x248, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x24c, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x250, Size: 0x18]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x268, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x268, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x268, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x268, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x268, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x268, Size: 0x1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x269, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x269, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x269, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x269, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x269, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x269, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x269, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26a, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26a, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x26a, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x26a, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x26a, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x26a, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x26a, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26b, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x270, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x278, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x27c, Size: 0x4]
	float Mass;//[Offset: 0x280, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x284, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x288, Size: 0x4]
	float PushForceFactor;//[Offset: 0x28c, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x290, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x294, Size: 0x4]
	float MinTouchForce;//[Offset: 0x298, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x29c, Size: 0x4]
	float RepulsionForce;//[Offset: 0x2a0, Size: 0x4]
	Vector Acceleration;//[Offset: 0x2a8, Size: 0x18]
	Quat LastUpdateRotation;//[Offset: 0x2c0, Size: 0x20]
	Vector LastUpdateLocation;//[Offset: 0x2e0, Size: 0x18]
	Vector LastUpdateVelocity;//[Offset: 0x2f8, Size: 0x18]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x310, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x314, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x318, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x320, Size: 0x18]
	Vector PendingForceToApply;//[Offset: 0x338, Size: 0x18]
	float AnalogInputModifier;//[Offset: 0x350, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x360, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x364, Size: 0x4]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x368, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x36c, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x370, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x374, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x378, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x37c, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x380, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x384, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x388, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x38c, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x390, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x394, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x398, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x39c, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x3a0, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x3a4, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x3a8, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x3ac, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x3b0, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x3b8, Size: 0xf8]
	byte DefaultLandMovementMode;//[Offset: 0x4b0, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x4b1, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x4b2, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4bc, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4bc, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4bc, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4bc, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4bc, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4bc, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4bc, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4bc, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4bd, Size: 0x1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4bd, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4bd, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4bd, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4bd, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4bd, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4bd, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4bd, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4be, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4be, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4be, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4be, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4be, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4be, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4be, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4bf, Size: 0x1]
	float FormerBaseVelocityDecayHalfLife;//[Offset: 0x4c0, Size: 0x4]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c4, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c4, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c4, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4c4, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4c4, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x4e4, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x4e8, Size: 0x18]
	int AvoidanceUID;//[Offset: 0x500, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x504, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x508, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x50c, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x510, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x518, Size: 0x18]
	float NavMeshProjectionInterval;//[Offset: 0x668, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x66c, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x670, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x674, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x678, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x67c, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x6b0, Size: 0x30]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x6f8, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0xc60, Size: 0x48]
	RootMotionSourceGroup ServerCorrectionRootMotion;//[Offset: 0xca8, Size: 0x48]
	RootMotionMovementParams RootMotionParams;//[Offset: 0xe50, Size: 0x70]
	Vector AnimRootMotionVelocity;//[Offset: 0xec0, Size: 0x18]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x241058eb6041
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x240f58eb6041
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x240e58eb6041
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x240d58eb6041
	void SetGroupsToIgnore(int GroupFlags);// 0x240c58eb6041
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x240b58eb6041
	void SetGroupsToAvoid(int GroupFlags);// 0x240a58eb6041
	void SetCrouchedHalfHeight(const float NewValue);// 0x240958eb6041
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x240858eb6041
	void SetAvoidanceGroup(int GroupFlags);// 0x240758eb6041
	void SetAvoidanceEnabled(bool bEnable);// 0x240658eb6041
	float K2_GetWalkableFloorZ();// 0x240558eb6041
	float K2_GetWalkableFloorAngle();// 0x240458eb6041
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x240358eb6041
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x240258eb6041
	bool IsWalking();// 0x240158eb6041
	bool IsWalkable(out const HitResult Hit);// 0x240058eb6041
	float GetValidPerchRadius();// 0x23ff58eb6041
	float GetPerchRadiusThreshold();// 0x23fe58eb6041
	PrimitiveComponent* GetMovementBase();// 0x23fd58eb6041
	float GetMinAnalogSpeed();// 0x23fc58eb6041
	float GetMaxJumpHeightWithJumpTime();// 0x23fb58eb6041
	float GetMaxJumpHeight();// 0x23fa58eb6041
	float GetMaxBrakingDeceleration();// 0x23f958eb6041
	float GetMaxAcceleration();// 0x23f858eb6041
	Vector GetLastUpdateVelocity();// 0x23f758eb6041
	Rotator GetLastUpdateRotation();// 0x23f658eb6041
	Vector GetLastUpdateLocation();// 0x243758eb6041
	Vector GetImpartedMovementBaseVelocity();// 0x23f458eb6041
	Vector GetCurrentAcceleration();// 0x23f358eb6041
	float GetCrouchedHalfHeight();// 0x23f258eb6041
	Character* GetCharacterOwner();// 0x23f158eb6041
	float GetAnalogInputModifier();// 0x23f058eb6041
	void DisableMovement();// 0x23ef58eb6041
	void ClearAccumulatedForces();// 0x23ee58eb6041
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x23ed58eb6041
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x23ec58eb6041
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x23eb58eb6041
	void AddForce(Vector Force);// 0x23ea58eb6041

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0x10, Size: 0xe8]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x30, Size: 0x18]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x60]

--------------------------------
Class: CharacterServerMovePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterNetworkSerializationPackedBits

--------------------------------
Class: CharacterMoveResponsePackedBits.CharacterNetworkSerializationPackedBits

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0x18]
	Rotator Rotation;//[Offset: 0x28, Size: 0x18]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0xd8]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x18, Size: 0x18]
	Rotator Rotation;//[Offset: 0x30, Size: 0x18]
	PrimitiveComponent* MovementBase;//[Offset: 0x48, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x50, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x60, Size: 0x48]
	Vector_NetQuantize10 Acceleration;//[Offset: 0xa8, Size: 0x18]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0xc0, Size: 0x18]

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x2b0, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x2b8, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x2c0, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x2d9b58eb6041

--------------------------------
Class: ActorChannel.Channel.Object
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	Object*[] CreateSubObjects;//[Offset: 0x158, Size: 0x10]

--------------------------------
Class: ActorElementAssetDataInterface.Object

--------------------------------
Class: ActorElementCounterInterface.Object

--------------------------------
Class: ActorElementHierarchyInterface.Object

--------------------------------
Class: ActorElementObjectInterface.Object

--------------------------------
Class: ActorElementSelectionInterface.Object

--------------------------------
Class: ActorElementWorldInterface.Object

--------------------------------
Class: ActorFolder.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: WorldSubsystem.Subsystem.Object

--------------------------------
Class: ActorPartitionSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: ActorSoundParameterInterface.Interface.Object
	void GetActorSoundParams(out AudioParameter[] Params);// 0x2c4858eb6041

--------------------------------
Class: AudioParameter
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	float FloatParam;//[Offset: 0x8, Size: 0x4]
	bool BoolParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	int IntParam;//[Offset: 0x10, Size: 0x4]
	Object* ObjectParam;//[Offset: 0x18, Size: 0x8]
	FString StringParam;//[Offset: 0x20, Size: 0x10]
	float[] ArrayFloatParam;//[Offset: 0x30, Size: 0x10]
	bool[] ArrayBoolParam;//[Offset: 0x40, Size: 0x10]
	int[] ArrayIntParam;//[Offset: 0x50, Size: 0x10]
	Object*[] ArrayObjectParam;//[Offset: 0x60, Size: 0x10]
	FString[] ArrayStringParam;//[Offset: 0x70, Size: 0x10]
	enum ParamType;//[Offset: 0x80, Size: 0x1]
	FName TypeName;//[Offset: 0x84, Size: 0x8]

--------------------------------
Class: ActorTextureStreamingBuildDataComponent.ActorComponent.Object

--------------------------------
Class: BlendSpace.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	InterpolationParameter InterpolationParam;//[Offset: 0x8c, Size: 0x10]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xbc, Size: 0x4]
	bool bTargetWeightInterpolationEaseInOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	float AnimLength;//[Offset: 0xc4, Size: 0x4]
	byte NotifyTriggerMode;//[Offset: 0xc8, Size: 0x1]
	bool bInterpolateUsingGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 0x1]
	enum PreferredTriangulationDirection;//[Offset: 0xca, Size: 0x1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xd0, Size: 0x10]
	int SampleIndexWithMarkers;//[Offset: 0xe0, Size: 0x4]
	BlendSample[] SampleData;//[Offset: 0xe8, Size: 0x10]
	EditorElement[] GridSamples;//[Offset: 0xf8, Size: 0x10]
	BlendSpaceData BlendSpaceData;//[Offset: 0x108, Size: 0x20]
	BlendParameter BlendParameters;//[Offset: 0x128, Size: 0x20]
	byte AxisToScaleAnimation;//[Offset: 0x188, Size: 0x1]
	int[] DimensionIndices;//[Offset: 0x190, Size: 0x10]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	float DampingRatio;//[Offset: 0x4, Size: 0x4]
	float MaxSpeed;//[Offset: 0x8, Size: 0x4]
	byte InterpolationType;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x10]
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8]
	Vector SampleValue;//[Offset: 0x8, Size: 0x18]
	float RateScale;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BlendSpaceData
	BlendSpaceSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	BlendSpaceTriangle[] Triangles;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: BlendSpaceSegment
	int SampleIndices;//[Offset: 0x0, Size: 0x4]
	float Vertices;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BlendSpaceTriangle
	int SampleIndices;//[Offset: 0x0, Size: 0x4]
	Vector2D Vertices;//[Offset: 0x10, Size: 0x10]
	BlendSpaceTriangleEdgeInfo EdgeInfo;//[Offset: 0x40, Size: 0x28]

--------------------------------
Class: BlendSpaceTriangleEdgeInfo
	Vector2D Normal;//[Offset: 0x0, Size: 0x10]
	int NeighbourTriangleIndex;//[Offset: 0x10, Size: 0x4]
	int AdjacentPerimeterTriangleIndices;//[Offset: 0x14, Size: 0x4]
	int AdjacentPerimeterVertexIndices;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10]
	float Min;//[Offset: 0x10, Size: 0x4]
	float Max;//[Offset: 0x14, Size: 0x4]
	int GridNum;//[Offset: 0x18, Size: 0x4]
	bool bSnapToGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bWrapInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.AnimationAsset.Object

--------------------------------
Class: BlendSpace1D.BlendSpace.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]

--------------------------------
Class: AimOffsetBlendSpace1D.BlendSpace1D.BlendSpace.AnimationAsset.Object

--------------------------------
Class: AmbientSound.Actor.Object
	AudioComponent* AudioComponent;//[Offset: 0x278, Size: 0x8]
	void Stop();// 0x2c4e58eb6041
	void Play(float StartTime);// 0x2c4d58eb6041
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);// 0x2c4c58eb6041
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);// 0x2c4b58eb6041
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);// 0x2c4a58eb6041

--------------------------------
Class: AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* Sound;//[Offset: 0x438, Size: 0x8]
	AudioParameter[] DefaultParameters;//[Offset: 0x440, Size: 0x10]
	AudioParameter[] InstanceParameters;//[Offset: 0x450, Size: 0x10]
	SoundClass* SoundClassOverride;//[Offset: 0x460, Size: 0x8]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x468, Size: 0x1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x468, Size: 0x1]
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x468, Size: 0x1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x468, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x468, Size: 0x1]
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x468, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x468, Size: 0x1]
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x468, Size: 0x1]
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x469, Size: 0x1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x469, Size: 0x1]
	bool bCanPlayMultipleInstances;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x469, Size: 0x1]
	bool bDisableParameterUpdatesWhilePlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x469, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x46a, Size: 0x1]
	FName AudioComponentUserID;//[Offset: 0x470, Size: 0x8]
	float PitchModulationMin;//[Offset: 0x478, Size: 0x4]
	float PitchModulationMax;//[Offset: 0x47c, Size: 0x4]
	float VolumeModulationMin;//[Offset: 0x480, Size: 0x4]
	float VolumeModulationMax;//[Offset: 0x484, Size: 0x4]
	float VolumeMultiplier;//[Offset: 0x488, Size: 0x4]
	int EnvelopeFollowerAttackTime;//[Offset: 0x48c, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x490, Size: 0x4]
	float Priority;//[Offset: 0x494, Size: 0x4]
	float SubtitlePriority;//[Offset: 0x498, Size: 0x4]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x4a0, Size: 0x8]
	float PitchMultiplier;//[Offset: 0x4a8, Size: 0x4]
	float LowPassFilterFrequency;//[Offset: 0x4ac, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x4b8, Size: 0x8]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x4c0, Size: 0x3c8]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x888, Size: 0x8]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x890, Size: 0x50]
	enum AutoAttachLocationRule;//[Offset: 0x8ec, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x8ed, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x8ee, Size: 0x1]
	SoundModulationDefaultRoutingSettings ModulationRouting;//[Offset: 0x8f0, Size: 0x48]
	delegate OnAudioPlayStateChanged;//[Offset: 0x938, Size: 0x10]
	delegate OnAudioVirtualizationChanged;//[Offset: 0x960, Size: 0x10]
	delegate OnAudioFinished;//[Offset: 0x988, Size: 0x10]
	delegate OnAudioPlaybackPercent;//[Offset: 0x9b0, Size: 0x10]
	delegate OnAudioSingleEnvelopeValue;//[Offset: 0x9d8, Size: 0x10]
	delegate OnAudioMultiEnvelopeValue;//[Offset: 0xa00, Size: 0x10]
	delegate OnQueueSubtitles;//[Offset: 0xa28, Size: 0x10]
	SceneComponent* AutoAttachParent;//[Offset: 0xa48, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0xa50, Size: 0x8]
	void StopDelayed(float DelayTime);// 0x224158eb6041
	void Stop();// 0x224058eb6041
	void SetWaveParameter(FName InName, SoundWave* InWave);// 0x223f58eb6041
	void SetVolumeMultiplier(float NewVolumeMultiplier);// 0x223e58eb6041
	void SetUISound(bool bInUISound);// 0x223d58eb6041
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x223c58eb6041
	void SetSourceBusSendPreEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x223b58eb6041
	void SetSourceBusSendPostEffect(SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);// 0x223a58eb6041
	void SetSound(SoundBase* NewSound);// 0x223958eb6041
	void SetPitchMultiplier(float NewPitchMultiplier);// 0x223858eb6041
	void SetPaused(bool bPause);// 0x223758eb6041
	void SetOutputToBusOnly(bool bInOutputToBusOnly);// 0x223658eb6041
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x223558eb6041
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x223458eb6041
	void SetIntParameter(FName InName, int inInt);// 0x223358eb6041
	void SetFloatParameter(FName InName, float InFloat);// 0x223258eb6041
	void SetBoolParameter(FName InName, bool InBool);// 0x227358eb6041
	void SetAudioBusSendPreEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0x223058eb6041
	void SetAudioBusSendPostEffect(AudioBus* AudioBus, float AudioBusSendLevel);// 0x222f58eb6041
	void PlayQuantized(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle, out QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum InFadeCurve);// 0x222e58eb6041
	void Play(float StartTime);// 0x222d58eb6041
	bool IsVirtualized();// 0x222c58eb6041
	bool IsPlaying();// 0x222b58eb6041
	bool HasCookedFFTData();// 0x222a58eb6041
	bool HasCookedAmplitudeEnvelopeData();// 0x222958eb6041
	enum GetPlayState();// 0x222858eb6041
	bool GetCookedFFTDataForAllPlayingSounds(out SoundWaveSpectralDataPerSound[] OutSoundWaveSpectralData);// 0x222758eb6041
	bool GetCookedFFTData(out const float[] FrequenciesToGet, out SoundWaveSpectralData[] OutSoundWaveSpectralData);// 0x222658eb6041
	bool GetCookedEnvelopeDataForAllPlayingSounds(out SoundWaveEnvelopeDataPerSound[] OutEnvelopeData);// 0x222558eb6041
	bool GetCookedEnvelopeData(out float OutEnvelopeData);// 0x222458eb6041
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, const enum FadeCurve);// 0x222358eb6041
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, const enum FadeCurve);// 0x222258eb6041
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x222158eb6041
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, const enum FadeCurve);// 0x222058eb6041
	void AdjustAttenuation(out const SoundAttenuationSettings InAttenuationSettings);// 0x221f58eb6041

--------------------------------
Class: QuartzClockHandle.Object
	void UnsubscribeFromTimeDivision(const Object* WorldContextObject, enum InQuantizationBoundary, out QuartzClockHandle* ClockHandle);// 0x2aec58eb6041
	void UnsubscribeFromAllTimeDivisions(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x2aeb58eb6041
	void SubscribeToQuantizationEvent(const Object* WorldContextObject, enum InQuantizationBoundary, out const delegate OnQuantizationEvent, out QuartzClockHandle* ClockHandle);// 0x2aea58eb6041
	void SubscribeToAllQuantizationEvents(const Object* WorldContextObject, out const delegate OnQuantizationEvent, out QuartzClockHandle* ClockHandle);// 0x2ae958eb6041
	void StopClock(const Object* WorldContextObject, bool CancelPendingEvents, out QuartzClockHandle* ClockHandle);// 0x2ae858eb6041
	void StartOtherClock(const Object* WorldContextObject, FName OtherClockName, QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate);// 0x2ae758eb6041
	void StartClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x2ae658eb6041
	void SetTicksPerSecond(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float TicksPerSecond);// 0x2ae558eb6041
	void SetThirtySecondNotesPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float ThirtySecondsNotesPerMinute);// 0x2ae458eb6041
	void SetSecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float SecondsPerTick);// 0x2ae358eb6041
	void SetMillisecondsPerTick(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float MillisecondsPerTick);// 0x2ae258eb6041
	void SetBeatsPerMinute(const Object* WorldContextObject, out const QuartzQuantizationBoundary QuantizationBoundary, out const delegate Delegate, out QuartzClockHandle* ClockHandle, float BeatsPerMinute);// 0x2ae158eb6041
	void ResumeClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x2ae058eb6041
	void ResetTransportQuantized(const Object* WorldContextObject, QuartzQuantizationBoundary InQuantizationBoundary, out const delegate InDelegate, out QuartzClockHandle* ClockHandle);// 0x2adf58eb6041
	void ResetTransport(const Object* WorldContextObject, out const delegate InDelegate);// 0x2ade58eb6041
	void PauseClock(const Object* WorldContextObject, out QuartzClockHandle* ClockHandle);// 0x2add58eb6041
	bool IsClockRunning(const Object* WorldContextObject);// 0x2adc58eb6041
	float GetTicksPerSecond(const Object* WorldContextObject);// 0x2adb58eb6041
	float GetThirtySecondNotesPerMinute(const Object* WorldContextObject);// 0x2ada58eb6041
	float GetSecondsPerTick(const Object* WorldContextObject);// 0x2ad958eb6041
	float GetMillisecondsPerTick(const Object* WorldContextObject);// 0x2ad858eb6041
	float GetEstimatedRunTime(const Object* WorldContextObject);// 0x2ad758eb6041
	float GetDurationOfQuantizationTypeInSeconds(const Object* WorldContextObject, out const enum QuantizationType, float Multiplier);// 0x2ad658eb6041
	QuartzTransportTimeStamp GetCurrentTimestamp(const Object* WorldContextObject);// 0x2ad558eb6041
	float GetBeatsPerMinute(const Object* WorldContextObject);// 0x2ad458eb6041

--------------------------------
Class: QuartzQuantizationBoundary
	enum Quantization;//[Offset: 0x0, Size: 0x1]
	float Multiplier;//[Offset: 0x4, Size: 0x4]
	enum CountingReferencePoint;//[Offset: 0x8, Size: 0x1]
	bool bFireOnClockStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bCancelCommandIfClockIsNotRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bResetClockOnQueued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool bResumeClockOnQueued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: QuartzTransportTimeStamp
	int Bars;//[Offset: 0x0, Size: 0x4]
	int Beat;//[Offset: 0x4, Size: 0x4]
	float BeatFraction;//[Offset: 0x8, Size: 0x4]
	float Seconds;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SoundWaveSpectralDataPerSound
	SoundWaveSpectralData[] SpectralData;//[Offset: 0x0, Size: 0x10]
	float PlaybackTime;//[Offset: 0x10, Size: 0x4]
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SoundWaveSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4]
	float Magnitude;//[Offset: 0x4, Size: 0x4]
	float NormalizedMagnitude;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SoundWaveEnvelopeDataPerSound
	float Envelope;//[Offset: 0x0, Size: 0x4]
	float PlaybackTime;//[Offset: 0x4, Size: 0x4]
	SoundWave* SoundWave;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: AnimationAssetExtensions.BlueprintFunctionLibrary.Object

--------------------------------
Class: DeveloperSettings.Object

--------------------------------
Class: AnimationSettings.DeveloperSettings.Object
	int CompressCommandletVersion;//[Offset: 0x38, Size: 0x4]
	FString[] KeyEndEffectorsMatchNameArray;//[Offset: 0x40, Size: 0x10]
	bool ForceRecompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bForceBelowThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bFirstRecompressUsingCurrentOrDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	bool bRaiseMaxErrorToExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1]
	bool bEnablePerformanceLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bStripAnimationDataOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	bool bTickAnimationOnSkeletalMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 0x1]
	TimecodeCustomAttributeNameSettings BoneTimecodeCustomAttributeNameSettings;//[Offset: 0x58, Size: 0x38]
	CustomAttributeSetting[] BoneCustomAttributesNames;//[Offset: 0x90, Size: 0x10]
	FString[] BoneNamesWithCustomAttributes;//[Offset: 0xa0, Size: 0x10]
	<FName,enum> AttributeBlendModes;//[Offset: 0xb0, Size: 0x50]
	enum DefaultAttributeBlendMode;//[Offset: 0x100, Size: 0x1]
	FString[] TransformAttributeNames;//[Offset: 0x108, Size: 0x10]
	MirrorFindReplaceExpression[] MirrorFindReplaceExpressions;//[Offset: 0x118, Size: 0x10]
	FString[] GetBoneCustomAttributeNamesToImport();// 0x2c4f58eb6041

--------------------------------
Class: TimecodeCustomAttributeNameSettings
	FName HourAttributeName;//[Offset: 0x0, Size: 0x8]
	FName MinuteAttributeName;//[Offset: 0x8, Size: 0x8]
	FName SecondAttributeName;//[Offset: 0x10, Size: 0x8]
	FName FrameAttributeName;//[Offset: 0x18, Size: 0x8]
	FName SubframeAttributeName;//[Offset: 0x20, Size: 0x8]
	FName RateAttributeName;//[Offset: 0x28, Size: 0x8]
	FName TakenameAttributeName;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: CustomAttributeSetting
	FString Name;//[Offset: 0x0, Size: 0x10]
	FString Meaning;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AnimBlueprint.Blueprint.BlueprintCore.Object
	Skeleton* TargetSkeleton;//[Offset: 0xa8, Size: 0x8]
	AnimGroupInfo[] Groups;//[Offset: 0xb0, Size: 0x10]
	bool bIsTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 0x1]

--------------------------------
Class: AnimGroupInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	LinearColor Color;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimBlueprintClassSubsystem_PropertyAccess.Object

--------------------------------
Class: AnimBlueprintGeneratedStruct.ScriptStruct.Struct.Field.Object

--------------------------------
Class: BlueprintGeneratedClass.Class.Struct.Field.Object
	int NumReplicatedProperties;//[Offset: 0x2c0, Size: 0x4]
	bool bHasNativizedParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1]
	bool bHasCookedComponentInstancingData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 0x1]
	DynamicBlueprintBinding*[] DynamicBindingObjects;//[Offset: 0x2c8, Size: 0x10]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x2d8, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x2e8, Size: 0x10]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x2f8, Size: 0x10]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x308, Size: 0x8]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x310, Size: 0x8]
	StructProperty* UberGraphFramePointerProperty;//[Offset: 0x318, Size: 0x8]
	Function* UberGraphFunction;//[Offset: 0x328, Size: 0x8]
	<FName,BlueprintCookedComponentInstancingData> CookedComponentInstancingData;//[Offset: 0x330, Size: 0x50]

--------------------------------
Class: DynamicBlueprintBinding.Object

--------------------------------
Class: AnimBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x3c0, Size: 0x10]
	Skeleton* TargetSkeleton;//[Offset: 0x3d0, Size: 0x8]
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x3d8, Size: 0x10]
	<FName,CachedPoseIndices> OrderedSavedPoseIndicesMap;//[Offset: 0x3e8, Size: 0x50]
	FName[] SyncGroupNames;//[Offset: 0x4b8, Size: 0x10]
	<FName,GraphAssetPlayerInformation> GraphAssetPlayerInformation;//[Offset: 0x4c8, Size: 0x50]
	<FName,AnimGraphBlendOptions> GraphBlendOptions;//[Offset: 0x518, Size: 0x50]
	AnimNodeData[] AnimNodeData;//[Offset: 0x568, Size: 0x10]
	<ScriptStruct*,AnimNodeStructData> NodeTypeMap;//[Offset: 0x578, Size: 0x50]

--------------------------------
Class: BakedAnimationStateMachine
	FName MachineName;//[Offset: 0x0, Size: 0x8]
	int InitialState;//[Offset: 0x8, Size: 0x4]
	BakedAnimationState[] States;//[Offset: 0x10, Size: 0x10]
	AnimationTransitionBetweenStates[] Transitions;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: BakedAnimationState
	FName StateName;//[Offset: 0x0, Size: 0x8]
	BakedStateExitTransition[] Transitions;//[Offset: 0x8, Size: 0x10]
	int StateRootNodeIndex;//[Offset: 0x18, Size: 0x4]
	int StartNotify;//[Offset: 0x1c, Size: 0x4]
	int EndNotify;//[Offset: 0x20, Size: 0x4]
	int FullyBlendedNotify;//[Offset: 0x24, Size: 0x4]
	bool bIsAConduit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int EntryRuleNodeIndex;//[Offset: 0x2c, Size: 0x4]
	int[] PlayerNodeIndices;//[Offset: 0x30, Size: 0x10]
	int[] LayerNodeIndices;//[Offset: 0x40, Size: 0x10]
	bool bAlwaysResetOnEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: BakedStateExitTransition
	int CanTakeDelegateIndex;//[Offset: 0x0, Size: 0x4]
	int CustomResultNodeIndex;//[Offset: 0x4, Size: 0x4]
	int TransitionIndex;//[Offset: 0x8, Size: 0x4]
	bool bDesiredTransitionReturnValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bAutomaticRemainingTimeRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	FName SyncGroupNameToRequireValidMarkersRule;//[Offset: 0x10, Size: 0x8]
	int[] PoseEvaluatorLinks;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: AnimationTransitionBetweenStates.AnimationStateBase
	int PreviousState;//[Offset: 0x8, Size: 0x4]
	int NextState;//[Offset: 0xc, Size: 0x4]
	float CrossfadeDuration;//[Offset: 0x10, Size: 0x4]
	int StartNotify;//[Offset: 0x14, Size: 0x4]
	int EndNotify;//[Offset: 0x18, Size: 0x4]
	int InterruptNotify;//[Offset: 0x1c, Size: 0x4]
	enum BlendMode;//[Offset: 0x20, Size: 0x1]
	CurveFloat* CustomCurve;//[Offset: 0x28, Size: 0x8]
	BlendProfile* BlendProfile;//[Offset: 0x30, Size: 0x8]
	byte LogicType;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: AnimationStateBase
	FName StateName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: CachedPoseIndices
	int[] OrderedSavedPoseNodeIndices;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: GraphAssetPlayerInformation
	int[] PlayerNodeIndices;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimGraphBlendOptions
	float BlendInTime;//[Offset: 0x0, Size: 0x4]
	float BlendOutTime;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AnimNodeData
	interface class None* AnimClassInterface;//[Offset: 0x0, Size: 0x10]
	uint32[] Entries;//[Offset: 0x10, Size: 0x10]
	int NodeIndex;//[Offset: 0x20, Size: 0x4]
	enum Flags;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: AnimNodeStructData
	<FName,int> NameToIndexMap;//[Offset: 0x0, Size: 0x50]
	int NumProperties;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: AnimClassData.Object
	BakedAnimationStateMachine[] BakedStateMachines;//[Offset: 0x30, Size: 0x10]
	Skeleton* TargetSkeleton;//[Offset: 0x40, Size: 0x8]
	AnimNotifyEvent[] AnimNotifies;//[Offset: 0x48, Size: 0x10]
	<FName,CachedPoseIndices> OrderedSavedPoseIndicesMap;//[Offset: 0x58, Size: 0x50]
	AnimBlueprintFunction[] AnimBlueprintFunctions;//[Offset: 0xa8, Size: 0x10]
	AnimBlueprintFunctionData[] AnimBlueprintFunctionData;//[Offset: 0xb8, Size: 0x10]
	AnimNodeProperties(FieldPathProperty)[] AnimNodeProperties;//[Offset: 0xc8, Size: 0x10]
	LinkedAnimGraphNodeProperties(FieldPathProperty)[] LinkedAnimGraphNodeProperties;//[Offset: 0xe8, Size: 0x10]
	LinkedAnimLayerNodeProperties(FieldPathProperty)[] LinkedAnimLayerNodeProperties;//[Offset: 0x108, Size: 0x10]
	PreUpdateNodeProperties(FieldPathProperty)[] PreUpdateNodeProperties;//[Offset: 0x128, Size: 0x10]
	DynamicResetNodeProperties(FieldPathProperty)[] DynamicResetNodeProperties;//[Offset: 0x148, Size: 0x10]
	StateMachineNodeProperties(FieldPathProperty)[] StateMachineNodeProperties;//[Offset: 0x168, Size: 0x10]
	InitializationNodeProperties(FieldPathProperty)[] InitializationNodeProperties;//[Offset: 0x188, Size: 0x10]
	<FName,GraphAssetPlayerInformation> GraphNameAssetPlayers;//[Offset: 0x1a8, Size: 0x50]
	FName[] SyncGroupNames;//[Offset: 0x1f8, Size: 0x10]
	<FName,AnimGraphBlendOptions> GraphBlendOptions;//[Offset: 0x208, Size: 0x50]

--------------------------------
Class: AnimBlueprintFunction
	FName Name;//[Offset: 0x0, Size: 0x8]
	FName Group;//[Offset: 0x8, Size: 0x8]
	int OutputPoseNodeIndex;//[Offset: 0x10, Size: 0x4]
	FName[] InputPoseNames;//[Offset: 0x18, Size: 0x10]
	int[] InputPoseNodeIndices;//[Offset: 0x28, Size: 0x10]
	bool bImplemented;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: AnimBlueprintFunctionData
	FieldPathProperty OutputPoseNodeProperty;//[Size: 0x20]
	InputPoseNodeProperties(FieldPathProperty)[] InputPoseNodeProperties;//[Offset: 0x20, Size: 0x10]
	InputProperties(FieldPathProperty)[] InputProperties;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: AnimClassInterface.Interface.Object

--------------------------------
Class: AnimComposite.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AnimTrack AnimationTrack;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: AnimCompress.AnimBoneCompressionCodec.Object
	bool bNeedsSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	byte TranslationCompressionFormat;//[Offset: 0x39, Size: 0x1]
	byte RotationCompressionFormat;//[Offset: 0x3a, Size: 0x1]
	byte ScaleCompressionFormat;//[Offset: 0x3b, Size: 0x1]

--------------------------------
Class: AnimCompress_BitwiseCompressOnly.AnimCompress.AnimBoneCompressionCodec.Object

--------------------------------
Class: AnimCompress_LeastDestructive.AnimCompress_BitwiseCompressOnly.AnimCompress.AnimBoneCompressionCodec.Object

--------------------------------
Class: AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxPosDiff;//[Offset: 0x3c, Size: 0x4]
	float MaxAngleDiff;//[Offset: 0x40, Size: 0x4]
	float MaxScaleDiff;//[Offset: 0x44, Size: 0x4]
	float MaxEffectorDiff;//[Offset: 0x48, Size: 0x4]
	float MinEffectorDiff;//[Offset: 0x4c, Size: 0x4]
	float EffectorDiffSocket;//[Offset: 0x50, Size: 0x4]
	float ParentKeyScale;//[Offset: 0x54, Size: 0x4]
	bool bRetarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bActuallyFilterLinearKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: AnimCompress_PerTrackCompression.AnimCompress_RemoveLinearKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxZeroingThreshold;//[Offset: 0x5c, Size: 0x4]
	float MaxPosDiffBitwise;//[Offset: 0x60, Size: 0x4]
	float MaxAngleDiffBitwise;//[Offset: 0x64, Size: 0x4]
	float MaxScaleDiffBitwise;//[Offset: 0x68, Size: 0x4]
	byte[] AllowedRotationFormats;//[Offset: 0x70, Size: 0x10]
	byte[] AllowedTranslationFormats;//[Offset: 0x80, Size: 0x10]
	byte[] AllowedScaleFormats;//[Offset: 0x90, Size: 0x10]
	bool bResampleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	float ResampledFramerate;//[Offset: 0xa4, Size: 0x4]
	int MinKeysForResampling;//[Offset: 0xa8, Size: 0x4]
	bool bUseAdaptiveError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bUseOverrideForEndEffectors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	int TrackHeightBias;//[Offset: 0xb0, Size: 0x4]
	float ParentingDivisor;//[Offset: 0xb4, Size: 0x4]
	float ParentingDivisorExponent;//[Offset: 0xb8, Size: 0x4]
	bool bUseAdaptiveError2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1]
	float RotationErrorSourceRatio;//[Offset: 0xc0, Size: 0x4]
	float TranslationErrorSourceRatio;//[Offset: 0xc4, Size: 0x4]
	float ScaleErrorSourceRatio;//[Offset: 0xc8, Size: 0x4]
	float MaxErrorPerTrackRatio;//[Offset: 0xcc, Size: 0x4]
	float PerturbationProbeSize;//[Offset: 0xd0, Size: 0x4]

--------------------------------
Class: AnimCompress_RemoveEverySecondKey.AnimCompress.AnimBoneCompressionCodec.Object
	int MinKeys;//[Offset: 0x3c, Size: 0x4]
	bool bStartAtSecondKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: AnimCompress_RemoveTrivialKeys.AnimCompress.AnimBoneCompressionCodec.Object
	float MaxPosDiff;//[Offset: 0x3c, Size: 0x4]
	float MaxAngleDiff;//[Offset: 0x40, Size: 0x4]
	float MaxScaleDiff;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: AnimCurveCompressionCodec_CompressedRichCurve.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimCurveCompressionCodec_UniformIndexable.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimCurveCompressionCodec_UniformlySampled.AnimCurveCompressionCodec.Object

--------------------------------
Class: AnimDataModel.Object
	int BracketCounter;//[Offset: 0x28, Size: 0x4]
	delegate ModifiedEventDynamic;//[Offset: 0x30, Size: 0x10]
	BoneAnimationTrack[] BoneAnimationTracks;//[Offset: 0x58, Size: 0x10]
	float PlayLength;//[Offset: 0x68, Size: 0x4]
	FrameRate FrameRate;//[Offset: 0x6c, Size: 0x8]
	int NumberOfFrames;//[Offset: 0x74, Size: 0x4]
	int NumberOfKeys;//[Offset: 0x78, Size: 0x4]
	AnimationCurveData CurveData;//[Offset: 0x80, Size: 0x20]
	AnimatedBoneAttribute[] AnimatedBoneAttributes;//[Offset: 0xa0, Size: 0x10]
	RawAnimSequenceTrack[] RawAnimationTracks;//[Offset: 0xb0, Size: 0x10]
	FName[] RawAnimationTrackNames;//[Offset: 0xc0, Size: 0x10]
	TrackToSkeletonMap[] RawAnimationTrackSkeletonMappings;//[Offset: 0xd0, Size: 0x10]
	RawCurveTracks RawCurveTracks;//[Offset: 0xe8, Size: 0x10]
	bool IsValidBoneTrackIndex(int TrackIndex);// 0x2c5e58eb6041
	float GetPlayLength();// 0x2c5d58eb6041
	int GetNumBoneTracks();// 0x2c5c58eb6041
	int GetNumberOfTransformCurves();// 0x2c5b58eb6041
	int GetNumberOfKeys();// 0x2c5a58eb6041
	int GetNumberOfFrames();// 0x2c5958eb6041
	int GetNumberOfFloatCurves();// 0x2c5858eb6041
	FrameRate GetFrameRate();// 0x2c5758eb6041
	void GetBoneTrackNames(out FName[] OutNames);// 0x2c5658eb6041
	int GetBoneTrackIndexByName(FName TrackName);// 0x2c5558eb6041
	int GetBoneTrackIndex(out const BoneAnimationTrack Track);// 0x2c9658eb6041
	BoneAnimationTrack GetBoneTrackByName(FName TrackName);// 0x2c5358eb6041
	BoneAnimationTrack GetBoneTrackByIndex(int TrackIndex);// 0x2c5258eb6041
	BoneAnimationTrack[] GetBoneAnimationTracks();// 0x2c5158eb6041
	AnimSequence* GetAnimationSequence();// 0x2c5058eb6041

--------------------------------
Class: BoneAnimationTrack
	RawAnimSequenceTrack InternalTrackData;//[Offset: 0x0, Size: 0x30]
	int BoneTreeIndex;//[Offset: 0x30, Size: 0x4]
	FName Name;//[Offset: 0x34, Size: 0x8]

--------------------------------
Class: RawAnimSequenceTrack
	Vector3f[] PosKeys;//[Offset: 0x0, Size: 0x10]
	Quat4f[] RotKeys;//[Offset: 0x10, Size: 0x10]
	Vector3f[] ScaleKeys;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: Vector3f
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: Quat4f
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AnimationCurveData
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]
	TransformCurve[] TransformCurves;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: TransformCurve.AnimCurveBase
	VectorCurve TranslationCurve;//[Offset: 0x18, Size: 0x198]
	VectorCurve RotationCurve;//[Offset: 0x1b0, Size: 0x198]
	VectorCurve ScaleCurve;//[Offset: 0x348, Size: 0x198]

--------------------------------
Class: VectorCurve.AnimCurveBase
	RichCurve FloatCurves;//[Offset: 0x18, Size: 0x80]

--------------------------------
Class: AnimatedBoneAttribute
	AnimationAttributeIdentifier Identifier;//[Offset: 0x0, Size: 0x38]
	AttributeCurve Curve;//[Offset: 0x38, Size: 0xa8]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AnimationDataModelNotifiesExtensions.BlueprintFunctionLibrary.Object

--------------------------------
Class: AnimLayerInterface.Interface.Object

--------------------------------
Class: AnimNotifyMirrorInspectionLibrary.BlueprintFunctionLibrary.Object
	bool IsTriggeredByMirroredAnimation(out const AnimNotifyEventReference EventReference);// 0x2c6658eb6041
	MirrorDataTable* GetMirrorDataTable(out const AnimNotifyEventReference EventReference);// 0x2c6558eb6041

--------------------------------
Class: AnimNotifyStateMachineInspectionLibrary.BlueprintFunctionLibrary.Object
	bool IsTriggeredByStateMachine(out const AnimNotifyEventReference EventReference, AnimInstance* AnimInstance, FName StateMachineName);// 0x2c6958eb6041
	bool IsTriggeredByStateInStateMachine(out const AnimNotifyEventReference EventReference, AnimInstance* AnimInstance, FName StateMachineName, FName StateName);// 0x2c6858eb6041
	bool IsTriggeredByState(out const AnimNotifyEventReference EventReference, AnimInstance* AnimInstance, FName StateName);// 0x2c6758eb6041

--------------------------------
Class: AnimNotifyState_DisableRootMotion.AnimNotifyState.Object

--------------------------------
Class: AnimNotifyState_TimedParticleEffect.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8]
	FName SocketName;//[Offset: 0x38, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x40, Size: 0x18]
	Rotator RotationOffset;//[Offset: 0x58, Size: 0x18]
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: AnimNotifyState_Trail.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x30, Size: 0x8]
	FName FirstSocketName;//[Offset: 0x38, Size: 0x8]
	FName SecondSocketName;//[Offset: 0x40, Size: 0x8]
	byte WidthScaleMode;//[Offset: 0x48, Size: 0x1]
	FName WidthScaleCurve;//[Offset: 0x4c, Size: 0x8]
	bool bRecycleSpawnedSystems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	ParticleSystem* OverridePSTemplate(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x2c6a58eb6041

--------------------------------
Class: AnimNotify_PauseClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotify_PlayParticleEffect.AnimNotify.Object
	ParticleSystem* PSTemplate;//[Offset: 0x38, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x40, Size: 0x18]
	Rotator RotationOffset;//[Offset: 0x58, Size: 0x18]
	Vector Scale;//[Offset: 0x70, Size: 0x18]
	bool Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	FName SocketName;//[Offset: 0xb4, Size: 0x8]

--------------------------------
Class: AnimNotify_PlaySound.AnimNotify.Object
	SoundBase* Sound;//[Offset: 0x38, Size: 0x8]
	float VolumeMultiplier;//[Offset: 0x40, Size: 0x4]
	float PitchMultiplier;//[Offset: 0x44, Size: 0x4]
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	FName AttachName;//[Offset: 0x4c, Size: 0x8]

--------------------------------
Class: AnimNotify_ResetClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotify_ResetDynamics.AnimNotify.Object

--------------------------------
Class: AnimNotify_ResumeClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimSet.Object
	bool bAnimRotationOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	FName[] TrackBoneNames;//[Offset: 0x30, Size: 0x10]
	AnimSetMeshLinkup[] LinkupCache;//[Offset: 0x40, Size: 0x10]
	byte[] BoneUseAnimTranslation;//[Offset: 0x50, Size: 0x10]
	byte[] ForceUseMeshTranslation;//[Offset: 0x60, Size: 0x10]
	FName[] UseTranslationBoneNames;//[Offset: 0x70, Size: 0x10]
	FName[] ForceMeshTranslationBoneNames;//[Offset: 0x80, Size: 0x10]
	FName PreviewSkelMeshName;//[Offset: 0x90, Size: 0x8]
	FName BestRatioSkelMeshName;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: AnimSetMeshLinkup
	int[] BoneToTrackTable;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSingleNodeInstance.AnimInstance.Object
	AnimationAsset* CurrentAsset;//[Offset: 0x348, Size: 0x8]
	delegate PostEvaluateAnimEvent;//[Offset: 0x350, Size: 0x10]
	void StopAnim();// 0x2c7958eb6041
	void SetReverse(bool bInReverse);// 0x2c7858eb6041
	void SetPreviewCurveOverride(out const FName PoseName, float Value, bool bRemoveIfZero);// 0x2c7758eb6041
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);// 0x2c7658eb6041
	void SetPosition(float InPosition, bool bFireNotifies);// 0x2cb758eb6041
	void SetPlayRate(float InPlayRate);// 0x2c7458eb6041
	void SetPlaying(bool bIsPlaying);// 0x2c7358eb6041
	void SetMirrorDataTable(const MirrorDataTable* MirrorDataTable);// 0x2c7258eb6041
	void SetLooping(bool bIsLooping);// 0x2c7158eb6041
	void SetBlendSpacePosition(out const Vector InPosition);// 0x2c7058eb6041
	void SetAnimationAsset(AnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);// 0x2c6f58eb6041
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);// 0x2c6e58eb6041
	MirrorDataTable* GetMirrorDataTable();// 0x2c6d58eb6041
	float GetLength();// 0x2c6c58eb6041
	AnimationAsset* GetAnimationAsset();// 0x2c6b58eb6041

--------------------------------
Class: AnimStateMachineTypes.Object

--------------------------------
Class: AnimStreamable.AnimSequenceBase.AnimationAsset.Object
	int NumberOfKeys;//[Offset: 0xa8, Size: 0x4]
	enum Interpolation;//[Offset: 0xac, Size: 0x1]
	FName RetargetSource;//[Offset: 0xb0, Size: 0x8]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xc8, Size: 0x8]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd0, Size: 0x8]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0xd9, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 0x1]

--------------------------------
Class: RawAnimSequenceTrackExtensions.BlueprintFunctionLibrary.Object
	Vector[] GetScaleKeys(out const RawAnimSequenceTrack Track);// 0x2c7c58eb6041
	Quat[] GetRotationalKeys(out const RawAnimSequenceTrack Track);// 0x2c7b58eb6041
	Vector[] GetPositionalKeys(out const RawAnimSequenceTrack Track);// 0x2c7a58eb6041

--------------------------------
Class: ApplicationLifecycleComponent.ActorComponent.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0xb0, Size: 0x10]
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0xc0, Size: 0x10]
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0xd0, Size: 0x10]
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0xe0, Size: 0x10]
	delegate ApplicationWillTerminateDelegate;//[Offset: 0xf0, Size: 0x10]
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x100, Size: 0x10]
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x110, Size: 0x10]
	delegate OnTemperatureChangeDelegate;//[Offset: 0x120, Size: 0x10]
	delegate OnLowPowerModeDelegate;//[Offset: 0x130, Size: 0x10]

--------------------------------
Class: PhysicsSettingsCore.DeveloperSettings.Object
	float DefaultGravityZ;//[Offset: 0x38, Size: 0x4]
	float DefaultTerminalVelocity;//[Offset: 0x3c, Size: 0x4]
	float DefaultFluidFriction;//[Offset: 0x40, Size: 0x4]
	int SimulateScratchMemorySize;//[Offset: 0x44, Size: 0x4]
	int RagdollAggregateThreshold;//[Offset: 0x48, Size: 0x4]
	float TriangleMeshTriangleMinAreaThreshold;//[Offset: 0x4c, Size: 0x4]
	bool bEnableShapeSharing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bEnablePCM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bEnableStabilization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	bool bWarnMissingLocks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 0x1]
	bool bEnable2DPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bDefaultHasComplexCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	float BounceThresholdVelocity;//[Offset: 0x58, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x5c, Size: 0x1]
	byte RestitutionCombineMode;//[Offset: 0x5d, Size: 0x1]
	float MaxAngularVelocity;//[Offset: 0x60, Size: 0x4]
	float MaxDepenetrationVelocity;//[Offset: 0x64, Size: 0x4]
	float ContactOffsetMultiplier;//[Offset: 0x68, Size: 0x4]
	float MinContactOffset;//[Offset: 0x6c, Size: 0x4]
	float MaxContactOffset;//[Offset: 0x70, Size: 0x4]
	bool bSimulateSkeletalMeshOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	byte DefaultShapeComplexity;//[Offset: 0x75, Size: 0x1]
	ChaosSolverConfiguration SolverOptions;//[Offset: 0x78, Size: 0x6c]

--------------------------------
Class: ChaosSolverConfiguration
	int Iterations;//[Offset: 0x0, Size: 0x4]
	int CollisionPairIterations;//[Offset: 0x4, Size: 0x4]
	int PushOutIterations;//[Offset: 0x8, Size: 0x4]
	int CollisionPushOutPairIterations;//[Offset: 0xc, Size: 0x4]
	float CollisionMarginFraction;//[Offset: 0x10, Size: 0x4]
	float CollisionMarginMax;//[Offset: 0x14, Size: 0x4]
	float CollisionCullDistance;//[Offset: 0x18, Size: 0x4]
	float CollisionMaxPushOutVelocity;//[Offset: 0x1c, Size: 0x4]
	int JointPairIterations;//[Offset: 0x20, Size: 0x4]
	int JointPushOutPairIterations;//[Offset: 0x24, Size: 0x4]
	float ClusterConnectionFactor;//[Offset: 0x28, Size: 0x4]
	enum ClusterUnionConnectionType;//[Offset: 0x2c, Size: 0x1]
	bool bGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	SolverCollisionFilterSettings CollisionFilterSettings;//[Offset: 0x30, Size: 0x10]
	bool bGenerateBreakData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	SolverBreakingFilterSettings BreakingFilterSettings;//[Offset: 0x44, Size: 0x10]
	bool bGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	SolverTrailingFilterSettings TrailingFilterSettings;//[Offset: 0x58, Size: 0x10]
	bool bGenerateContactGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: SolverCollisionFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float MinMass;//[Offset: 0x4, Size: 0x4]
	float MinSpeed;//[Offset: 0x8, Size: 0x4]
	float MinImpulse;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SolverBreakingFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float MinMass;//[Offset: 0x4, Size: 0x4]
	float MinSpeed;//[Offset: 0x8, Size: 0x4]
	float MinVolume;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SolverTrailingFilterSettings
	bool FilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float MinMass;//[Offset: 0x4, Size: 0x4]
	float MinSpeed;//[Offset: 0x8, Size: 0x4]
	float MinVolume;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PhysicsSettings.PhysicsSettingsCore.DeveloperSettings.Object
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0xe4, Size: 0x34]
	byte LockedAxis;//[Offset: 0x118, Size: 0x1]
	byte DefaultDegreesOfFreedom;//[Offset: 0x119, Size: 0x1]
	bool bSuppressFaceRemapTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 0x1]
	bool bSupportUVFromHitResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 0x1]
	bool bDisableActiveActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	bool bDisableKinematicStaticPairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d, Size: 0x1]
	bool bDisableKinematicKinematicPairs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e, Size: 0x1]
	bool bDisableCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f, Size: 0x1]
	bool bEnableEnhancedDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	float AnimPhysicsMinDeltaTime;//[Offset: 0x124, Size: 0x4]
	bool bSimulateAnimPhysicsAfterReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	float MinPhysicsDeltaTime;//[Offset: 0x12c, Size: 0x4]
	float MaxPhysicsDeltaTime;//[Offset: 0x130, Size: 0x4]
	bool bSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1]
	bool bSubsteppingAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 0x1]
	bool bTickPhysicsAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136, Size: 0x1]
	float AsyncFixedTimeStepSize;//[Offset: 0x138, Size: 0x4]
	float MaxSubstepDeltaTime;//[Offset: 0x13c, Size: 0x4]
	int MaxSubsteps;//[Offset: 0x140, Size: 0x4]
	float SyncSceneSmoothingFactor;//[Offset: 0x144, Size: 0x4]
	float InitialAverageFrameRate;//[Offset: 0x148, Size: 0x4]
	int PhysXTreeRebuildRate;//[Offset: 0x14c, Size: 0x4]
	PhysicalSurfaceName[] PhysicalSurfaces;//[Offset: 0x150, Size: 0x10]
	BroadphaseSettings DefaultBroadphaseSettings;//[Offset: 0x160, Size: 0x80]
	float MinDeltaVelocityForHitEvents;//[Offset: 0x1e0, Size: 0x4]
	ChaosPhysicsSettings ChaosSettings;//[Offset: 0x1e4, Size: 0x3]

--------------------------------
Class: RigidBodyErrorCorrection
	float PingExtrapolation;//[Offset: 0x0, Size: 0x4]
	float PingLimit;//[Offset: 0x4, Size: 0x4]
	float ErrorPerLinearDifference;//[Offset: 0x8, Size: 0x4]
	float ErrorPerAngularDifference;//[Offset: 0xc, Size: 0x4]
	float MaxRestoredStateError;//[Offset: 0x10, Size: 0x4]
	float MaxLinearHardSnapDistance;//[Offset: 0x14, Size: 0x4]
	float PositionLerp;//[Offset: 0x18, Size: 0x4]
	float AngleLerp;//[Offset: 0x1c, Size: 0x4]
	float LinearVelocityCoefficient;//[Offset: 0x20, Size: 0x4]
	float AngularVelocityCoefficient;//[Offset: 0x24, Size: 0x4]
	float ErrorAccumulationSeconds;//[Offset: 0x28, Size: 0x4]
	float ErrorAccumulationDistanceSq;//[Offset: 0x2c, Size: 0x4]
	float ErrorAccumulationSimilarity;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: PhysicalSurfaceName
	byte Type;//[Offset: 0x0, Size: 0x1]
	FName Name;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: ChaosPhysicsSettings
	enum DefaultThreadingModel;//[Offset: 0x0, Size: 0x1]
	enum DedicatedThreadTickMode;//[Offset: 0x1, Size: 0x1]
	enum DedicatedThreadBufferMode;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: CollisionProfile.DeveloperSettings.Object
	CollisionResponseTemplate[] Profiles;//[Offset: 0x38, Size: 0x10]
	CustomChannelSetup[] DefaultChannelResponses;//[Offset: 0x48, Size: 0x10]
	CustomProfile[] EditProfiles;//[Offset: 0x58, Size: 0x10]
	Redirector[] ProfileRedirects;//[Offset: 0x68, Size: 0x10]
	Redirector[] CollisionChannelRedirects;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: CollisionResponseTemplate
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	bool bCanModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	FName ObjectTypeName;//[Offset: 0x2c, Size: 0x8]
	ResponseChannel[] CustomResponses;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: CustomChannelSetup
	byte Channel;//[Offset: 0x0, Size: 0x1]
	byte DefaultResponse;//[Offset: 0x1, Size: 0x1]
	bool bTraceType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bStaticObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	FName Name;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: CustomProfile
	FName Name;//[Offset: 0x0, Size: 0x8]
	ResponseChannel[] CustomResponses;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Redirector
	FName OldName;//[Offset: 0x0, Size: 0x8]
	FName NewName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x538, Size: 0x4]
	float ArrowSize;//[Offset: 0x53c, Size: 0x4]
	float ArrowLength;//[Offset: 0x540, Size: 0x4]
	float ScreenSize;//[Offset: 0x544, Size: 0x4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x548, Size: 0x1]
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x548, Size: 0x1]
	void SetArrowColor(LinearColor NewColor);// 0x2c7d58eb6041

--------------------------------
Class: AssetExportTask.Object
	Object* Object;//[Offset: 0x28, Size: 0x8]
	Exporter* Exporter;//[Offset: 0x30, Size: 0x8]
	FString Filename;//[Offset: 0x38, Size: 0x10]
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bReplaceIdentical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool bPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bAutomated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	bool bUseFileArchive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool bWriteEmptyFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	Object*[] IgnoreObjectList;//[Offset: 0x50, Size: 0x10]
	Object* Options;//[Offset: 0x60, Size: 0x8]
	FString[] Errors;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: Exporter.Object
	class Object* SupportedClass;//[Offset: 0x28, Size: 0x8]
	Object* ExportRootScope;//[Offset: 0x30, Size: 0x8]
	FString[] FormatExtension;//[Offset: 0x38, Size: 0x10]
	FString[] FormatDescription;//[Offset: 0x48, Size: 0x10]
	int PreferredFormatIndex;//[Offset: 0x58, Size: 0x4]
	int TextIndent;//[Offset: 0x5c, Size: 0x4]
	bool bText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bSelectedOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool bForceFileOperations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]
	AssetExportTask* ExportTask;//[Offset: 0x68, Size: 0x8]
	bool ScriptRunAssetExportTask(AssetExportTask* Task);// 0x2ea058eb6041
	bool RunAssetExportTasks(out const AssetExportTask*[] ExportTasks);// 0x2e9f58eb6041
	bool RunAssetExportTask(AssetExportTask* Task);// 0x2e9e58eb6041

--------------------------------
Class: AssetImportData.Object

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x330, Size: 0x10]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 0x1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x343, Size: 0x1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 0x1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345, Size: 0x1]
	int NumBulkScanRequests;//[Offset: 0x348, Size: 0x4]
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 0x1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34e, Size: 0x1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34f, Size: 0x1]
	bool bHasCompletedInitialScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 0x1]
	int NumberOfSpawnedNotifications;//[Offset: 0x354, Size: 0x4]

--------------------------------
Class: AssetManagerSettings.DeveloperSettings.Object
	PrimaryAssetTypeInfo[] PrimaryAssetTypesToScan;//[Offset: 0x38, Size: 0x10]
	DirectoryPath[] DirectoriesToExclude;//[Offset: 0x48, Size: 0x10]
	PrimaryAssetRulesOverride[] PrimaryAssetRules;//[Offset: 0x58, Size: 0x10]
	PrimaryAssetRulesCustomOverride[] CustomPrimaryAssetRules;//[Offset: 0x68, Size: 0x10]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bShouldManagerDetermineTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	bool bShouldGuessTypeAndNameInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1]
	bool bShouldWarnAboutInvalidAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	AssetManagerRedirect[] PrimaryAssetIdRedirects;//[Offset: 0x80, Size: 0x10]
	AssetManagerRedirect[] PrimaryAssetTypeRedirects;//[Offset: 0x90, Size: 0x10]
	AssetManagerRedirect[] AssetPathRedirects;//[Offset: 0xa0, Size: 0x10]
	<FName> MetaDataTagsForAssetRegistry;//[Offset: 0xb0, Size: 0x50]

--------------------------------
Class: PrimaryAssetTypeInfo
	FName PrimaryAssetType;//[Offset: 0x0, Size: 0x8]
	class Object* AssetBaseClass;//[Offset: 0x8, Size: 0x28]
	ClassPtrProperty AssetBaseClassLoaded;//[Size: 0x8]
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	DirectoryPath[] Directories;//[Offset: 0x40, Size: 0x10]
	SoftObjectPath[] SpecificAssets;//[Offset: 0x50, Size: 0x10]
	PrimaryAssetRules Rules;//[Offset: 0x60, Size: 0xc]
	FString[] AssetScanPaths;//[Offset: 0x70, Size: 0x10]
	bool bIsDynamicAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	int NumberOfAssets;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PrimaryAssetRules
	int Priority;//[Offset: 0x0, Size: 0x4]
	int ChunkId;//[Offset: 0x4, Size: 0x4]
	bool bApplyRecursively;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	enum CookRule;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: PrimaryAssetRulesOverride
	PrimaryAssetId PrimaryAssetId;//[Offset: 0x0, Size: 0x10]
	PrimaryAssetRules Rules;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: PrimaryAssetId
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8]
	FName PrimaryAssetName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PrimaryAssetType
	FName Name;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PrimaryAssetRulesCustomOverride
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 0x8]
	DirectoryPath FilterDirectory;//[Offset: 0x8, Size: 0x10]
	FString FilterString;//[Offset: 0x18, Size: 0x10]
	PrimaryAssetRules Rules;//[Offset: 0x28, Size: 0xc]

--------------------------------
Class: AssetManagerRedirect
	FString Old;//[Offset: 0x0, Size: 0x10]
	FString New;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AssetMappingTable.Object
	AssetMapping[] MappedAssets;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AssetMapping
	AnimationAsset* SourceAsset;//[Offset: 0x0, Size: 0x8]
	AnimationAsset* TargetAsset;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0xec358eb6041

--------------------------------
Class: AsyncActionHandleSaveGame.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x30, Size: 0x10]
	SaveGame* SaveGameObject;//[Offset: 0x60, Size: 0x8]
	AsyncActionHandleSaveGame* AsyncSaveGameToSlot(Object* WorldContextObject, SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0x2c7f58eb6041
	AsyncActionHandleSaveGame* AsyncLoadGameFromSlot(Object* WorldContextObject, FString SlotName, const int UserIndex);// 0x2c7e58eb6041

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: AsyncActionLoadPrimaryAsset.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10]
	AsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0x2c8058eb6041

--------------------------------
Class: AsyncActionLoadPrimaryAssetClass.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10]
	AsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(Object* WorldContextObject, PrimaryAssetId PrimaryAsset, out const FName[] LoadBundles);// 0x2c8158eb6041

--------------------------------
Class: AsyncActionLoadPrimaryAssetList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10]
	AsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0x2c8258eb6041

--------------------------------
Class: AsyncActionLoadPrimaryAssetClassList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10]
	AsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] LoadBundles);// 0x2c8358eb6041

--------------------------------
Class: AsyncActionChangePrimaryAssetBundles.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x78, Size: 0x10]
	AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(Object* WorldContextObject, out const PrimaryAssetId[] PrimaryAssetList, out const FName[] AddBundles, out const FName[] RemoveBundles);// 0x2c8558eb6041
	AsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(Object* WorldContextObject, out const FName[] NewBundles, out const FName[] OldBundles);// 0x2c8458eb6041

--------------------------------
Class: AtmosphericFog.Info.Actor.Object
	AtmosphericFogComponent* AtmosphericFogComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: AtmosphericFogComponent.SkyAtmosphereComponent.SceneComponent.ActorComponent.Object
	void SetSunMultiplier(float NewSunMultiplier);// 0x2ca458eb6041
	void SetStartDistance(float NewStartDistance);// 0x2ca358eb6041
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);// 0x2ca258eb6041
	void SetFogMultiplier(float NewFogMultiplier);// 0x2ca158eb6041
	void SetDistanceScale(float NewDistanceScale);// 0x2ca058eb6041
	void SetDistanceOffset(float NewDistanceOffset);// 0x2c9f58eb6041
	void SetDensityOffset(float NewDensityOffset);// 0x2c9e58eb6041
	void SetDensityMultiplier(float NewDensityMultiplier);// 0x2c9d58eb6041
	void SetDefaultLightColor(LinearColor NewLightColor);// 0x2c9c58eb6041
	void SetDefaultBrightness(float NewBrightness);// 0x2c9b58eb6041
	void SetAltitudeScale(float NewAltitudeScale);// 0x2c9a58eb6041
	void DisableSunDisk(bool NewSunDisk);// 0x2c9958eb6041
	void DisableGroundScattering(bool NewGroundScattering);// 0x2c9858eb6041

--------------------------------
Class: SkyAtmosphereComponent.SceneComponent.ActorComponent.Object
	enum TransformMode;//[Offset: 0x2b0, Size: 0x1]
	float BottomRadius;//[Offset: 0x2b4, Size: 0x4]
	Color GroundAlbedo;//[Offset: 0x2b8, Size: 0x4]
	float AtmosphereHeight;//[Offset: 0x2bc, Size: 0x4]
	float MultiScatteringFactor;//[Offset: 0x2c0, Size: 0x4]
	float TraceSampleCountScale;//[Offset: 0x2c4, Size: 0x4]
	float RayleighScatteringScale;//[Offset: 0x2c8, Size: 0x4]
	LinearColor RayleighScattering;//[Offset: 0x2cc, Size: 0x10]
	float RayleighExponentialDistribution;//[Offset: 0x2dc, Size: 0x4]
	float MieScatteringScale;//[Offset: 0x2e0, Size: 0x4]
	LinearColor MieScattering;//[Offset: 0x2e4, Size: 0x10]
	float MieAbsorptionScale;//[Offset: 0x2f4, Size: 0x4]
	LinearColor MieAbsorption;//[Offset: 0x2f8, Size: 0x10]
	float MieAnisotropy;//[Offset: 0x308, Size: 0x4]
	float MieExponentialDistribution;//[Offset: 0x30c, Size: 0x4]
	float OtherAbsorptionScale;//[Offset: 0x310, Size: 0x4]
	LinearColor OtherAbsorption;//[Offset: 0x314, Size: 0x10]
	TentDistribution OtherTentDistribution;//[Offset: 0x324, Size: 0xc]
	LinearColor SkyLuminanceFactor;//[Offset: 0x330, Size: 0x10]
	float AerialPespectiveViewDistanceScale;//[Offset: 0x340, Size: 0x4]
	float HeightFogContribution;//[Offset: 0x344, Size: 0x4]
	float TransmittanceMinLightElevationAngle;//[Offset: 0x348, Size: 0x4]
	float AerialPerspectiveStartDepth;//[Offset: 0x34c, Size: 0x4]
	Guid bStaticLightingBuiltGUID;//[Offset: 0x390, Size: 0x10]
	void SetSkyLuminanceFactor(LinearColor NewValue);// 0x2c9758eb6041
	void SetRayleighScatteringScale(float NewValue);// 0x2cd858eb6041
	void SetRayleighScattering(LinearColor NewValue);// 0x2c9558eb6041
	void SetRayleighExponentialDistribution(float NewValue);// 0x2c9458eb6041
	void SetOtherAbsorptionScale(float NewValue);// 0x2c9358eb6041
	void SetOtherAbsorption(LinearColor NewValue);// 0x2c9258eb6041
	void SetMultiScatteringFactor(float NewValue);// 0x2c9158eb6041
	void SetMieScatteringScale(float NewValue);// 0x2c9058eb6041
	void SetMieScattering(LinearColor NewValue);// 0x2c8f58eb6041
	void SetMieExponentialDistribution(float NewValue);// 0x2c8e58eb6041
	void SetMieAnisotropy(float NewValue);// 0x2c8d58eb6041
	void SetMieAbsorptionScale(float NewValue);// 0x2c8c58eb6041
	void SetMieAbsorption(LinearColor NewValue);// 0x2c8b58eb6041
	void SetHeightFogContribution(float NewValue);// 0x2c8a58eb6041
	void SetAtmosphereHeight(float NewValue);// 0x2c8958eb6041
	void SetAerialPespectiveViewDistanceScale(float NewValue);// 0x2c8858eb6041
	void OverrideAtmosphereLightDirection(int AtmosphereLightIndex, out const Vector LightDirection);// 0x2c8758eb6041
	LinearColor GetAtmosphereTransmitanceOnGroundAtPlanetTop(DirectionalLightComponent* DirectionalLight);// 0x2c8658eb6041

--------------------------------
Class: TentDistribution
	float TipAltitude;//[Offset: 0x0, Size: 0x4]
	float TipValue;//[Offset: 0x4, Size: 0x4]
	float Width;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float ShadowCascadeBiasDistribution;//[Offset: 0x3dc, Size: 0x4]
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e0, Size: 0x1]
	float OcclusionMaskDarkness;//[Offset: 0x3e4, Size: 0x4]
	float OcclusionDepthRange;//[Offset: 0x3e8, Size: 0x4]
	Vector LightShaftOverrideDirection;//[Offset: 0x3f0, Size: 0x18]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x408, Size: 0x4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x40c, Size: 0x4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x410, Size: 0x4]
	int DynamicShadowCascades;//[Offset: 0x414, Size: 0x4]
	float CascadeDistributionExponent;//[Offset: 0x418, Size: 0x4]
	float CascadeTransitionFraction;//[Offset: 0x41c, Size: 0x4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x420, Size: 0x4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x424, Size: 0x1]
	int FarShadowCascadeCount;//[Offset: 0x428, Size: 0x4]
	float FarShadowDistance;//[Offset: 0x42c, Size: 0x4]
	float DistanceFieldShadowDistance;//[Offset: 0x430, Size: 0x4]
	float LightSourceAngle;//[Offset: 0x434, Size: 0x4]
	float LightSourceSoftAngle;//[Offset: 0x438, Size: 0x4]
	float ShadowSourceAngleFactor;//[Offset: 0x43c, Size: 0x4]
	float TraceDistance;//[Offset: 0x440, Size: 0x4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x444, Size: 0x1]
	bool bAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x444, Size: 0x1]
	int AtmosphereSunLightIndex;//[Offset: 0x448, Size: 0x4]
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x44c, Size: 0x10]
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45c, Size: 0x1]
	bool bCastShadowsOnClouds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x45c, Size: 0x1]
	bool bCastShadowsOnAtmosphere;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x45c, Size: 0x1]
	bool bCastCloudShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x45c, Size: 0x1]
	float CloudShadowStrength;//[Offset: 0x460, Size: 0x4]
	float CloudShadowOnAtmosphereStrength;//[Offset: 0x464, Size: 0x4]
	float CloudShadowOnSurfaceStrength;//[Offset: 0x468, Size: 0x4]
	float CloudShadowDepthBias;//[Offset: 0x46c, Size: 0x4]
	float CloudShadowExtent;//[Offset: 0x470, Size: 0x4]
	float CloudShadowMapResolutionScale;//[Offset: 0x474, Size: 0x4]
	float CloudShadowRaySampleCountScale;//[Offset: 0x478, Size: 0x4]
	LinearColor CloudScatteredLuminanceScale;//[Offset: 0x47c, Size: 0x10]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x48c, Size: 0x10]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49c, Size: 0x1]
	Color ModulatedShadowColor;//[Offset: 0x4a0, Size: 0x4]
	float ShadowAmount;//[Offset: 0x4a4, Size: 0x4]
	void SetShadowSourceAngleFactor(float NewValue);// 0x2e7858eb6041
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x2e7758eb6041
	void SetShadowCascadeBiasDistribution(float NewValue);// 0x2e7658eb6041
	void SetShadowAmount(float NewValue);// 0x2e7558eb6041
	void SetOcclusionMaskDarkness(float NewValue);// 0x2e7458eb6041
	void SetOcclusionDepthRange(float NewValue);// 0x2e7358eb6041
	void SetLightSourceSoftAngle(float NewValue);// 0x2e7258eb6041
	void SetLightSourceAngle(float NewValue);// 0x2e7158eb6041
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x2e7058eb6041
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x2e6f58eb6041
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x2e6e58eb6041
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x2e6d58eb6041
	void SetDynamicShadowCascades(int NewValue);// 0x2e6c58eb6041
	void SetCascadeTransitionFraction(float NewValue);// 0x2e6b58eb6041
	void SetCascadeDistributionExponent(float NewValue);// 0x2e6a58eb6041
	void SetAtmosphereSunLightIndex(int NewValue);// 0x2e6958eb6041
	void SetAtmosphereSunLight(bool bNewValue);// 0x2e6858eb6041

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x2e0, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0x2e4, Size: 0x4]
	float MaxDistanceFadeRange;//[Offset: 0x2e8, Size: 0x4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec, Size: 0x1]
	int ShadowMapChannel;//[Offset: 0x2f0, Size: 0x4]
	float MinRoughness;//[Offset: 0x2f8, Size: 0x4]
	float SpecularScale;//[Offset: 0x2fc, Size: 0x4]
	float ShadowResolutionScale;//[Offset: 0x300, Size: 0x4]
	float ShadowBias;//[Offset: 0x304, Size: 0x4]
	float ShadowSlopeBias;//[Offset: 0x308, Size: 0x4]
	float ShadowSharpen;//[Offset: 0x30c, Size: 0x4]
	float ContactShadowLength;//[Offset: 0x310, Size: 0x4]
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 0x1]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x314, Size: 0x1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x314, Size: 0x1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x314, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x314, Size: 0x1]
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x314, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x315, Size: 0x1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x318, Size: 0x8]
	Vector LightFunctionScale;//[Offset: 0x320, Size: 0x18]
	TextureLightProfile* IESTexture;//[Offset: 0x338, Size: 0x8]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 0x1]
	float IESBrightnessScale;//[Offset: 0x344, Size: 0x4]
	float LightFunctionFadeDistance;//[Offset: 0x348, Size: 0x4]
	float DisabledBrightness;//[Offset: 0x34c, Size: 0x4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 0x1]
	float BloomScale;//[Offset: 0x354, Size: 0x4]
	float BloomThreshold;//[Offset: 0x358, Size: 0x4]
	float BloomMaxBrightness;//[Offset: 0x35c, Size: 0x4]
	Color BloomTint;//[Offset: 0x360, Size: 0x4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 0x1]
	float RayStartOffsetDepthScale;//[Offset: 0x368, Size: 0x4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x2e6758eb6041
	void SetUseTemperature(bool bNewValue);// 0x2e6658eb6041
	void SetUseIESBrightness(bool bNewValue);// 0x2e6558eb6041
	void SetTransmission(bool bNewValue);// 0x2e6458eb6041
	void SetTemperature(float NewTemperature);// 0x2e6358eb6041
	void SetSpecularScale(float NewValue);// 0x2e6258eb6041
	void SetShadowSlopeBias(float NewValue);// 0x2e6158eb6041
	void SetShadowBias(float NewValue);// 0x2e6058eb6041
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x2e5f58eb6041
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x2e5e58eb6041
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x2e5d58eb6041
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x2e5c58eb6041
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x2e5b58eb6041
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x2e9c58eb6041
	void SetIntensity(float NewIntensity);// 0x2e5958eb6041
	void SetIndirectLightingIntensity(float NewIntensity);// 0x2e5858eb6041
	void SetIESTexture(TextureLightProfile* NewValue);// 0x2e5758eb6041
	void SetIESBrightnessScale(float NewValue);// 0x2e5658eb6041
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x2e5558eb6041
	void SetEnableLightShaftBloom(bool bNewValue);// 0x2e5458eb6041
	void SetBloomTint(Color NewValue);// 0x2e5358eb6041
	void SetBloomThreshold(float NewValue);// 0x2e5258eb6041
	void SetBloomScale(float NewValue);// 0x2e5158eb6041
	void SetBloomMaxBrightness(float NewValue);// 0x2e5058eb6041
	void SetAffectTranslucentLighting(bool bNewValue);// 0x2e4f58eb6041
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x2e4e58eb6041

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x2b0, Size: 0x10]
	float Brightness;//[Offset: 0x2c0, Size: 0x4]
	float Intensity;//[Offset: 0x2c4, Size: 0x4]
	Color LightColor;//[Offset: 0x2c8, Size: 0x4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc, Size: 0x1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cc, Size: 0x1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cc, Size: 0x1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2cc, Size: 0x1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2cc, Size: 0x1]
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2cc, Size: 0x1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2cc, Size: 0x1]
	bool bCastDeepShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2cc, Size: 0x1]
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cd, Size: 0x1]
	byte CastRaytracedShadow;//[Offset: 0x2ce, Size: 0x1]
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cf, Size: 0x1]
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cf, Size: 0x1]
	float DeepShadowLayerDistribution;//[Offset: 0x2d0, Size: 0x4]
	float IndirectLightingIntensity;//[Offset: 0x2d4, Size: 0x4]
	float VolumetricScatteringIntensity;//[Offset: 0x2d8, Size: 0x4]
	int SamplesPerPixel;//[Offset: 0x2dc, Size: 0x4]
	void SetSamplesPerPixel(int NewValue);// 0x2e4d58eb6041
	void SetCastVolumetricShadow(bool bNewValue);// 0x2e4c58eb6041
	void SetCastShadows(bool bNewValue);// 0x2e4b58eb6041
	void SetCastRaytracedShadows(byte bNewValue);// 0x2e4a58eb6041
	void SetCastRaytracedShadow(bool bNewValue);// 0x2e4958eb6041
	void SetCastDeepShadow(bool bNewValue);// 0x2e4858eb6041
	void SetAffectReflection(bool bNewValue);// 0x2e4758eb6041
	void SetAffectGlobalIllumination(bool bNewValue);// 0x2e4658eb6041
	LinearColor GetLightColor();// 0x2e4558eb6041

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4]
	float ShadowExponent;//[Offset: 0x4, Size: 0x4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object
	float Brightness;//[Offset: 0x2a8, Size: 0x4]
	float TextureMultiplier;//[Offset: 0x2ac, Size: 0x4]

--------------------------------
Class: AnimationAttributeIdentifierExtensions.BlueprintFunctionLibrary.Object
	bool IsValid(out AnimationAttributeIdentifier Identifier);// 0x2ca558eb6041

--------------------------------
Class: InitialActiveSoundParams.Object
	AudioParameter[] AudioParams;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AudioSubsystemCollectionRoot.Object

--------------------------------
Class: DynamicSubsystem.Subsystem.Object

--------------------------------
Class: AudioEngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: AudioPanelWidgetInterface.Interface.Object
	FName GetIconBrushName();// 0x2ca758eb6041
	FText GetEditorName();// 0x2ca658eb6041

--------------------------------
Class: AudioSettings.DeveloperSettings.Object
	SoftObjectPath DefaultSoundClassName;//[Offset: 0x38, Size: 0x18]
	SoftObjectPath DefaultMediaSoundClassName;//[Offset: 0x50, Size: 0x18]
	SoftObjectPath DefaultSoundConcurrencyName;//[Offset: 0x68, Size: 0x18]
	SoftObjectPath DefaultBaseSoundMix;//[Offset: 0x80, Size: 0x18]
	SoftObjectPath VoiPSoundClass;//[Offset: 0x98, Size: 0x18]
	SoftObjectPath MasterSubmix;//[Offset: 0xb0, Size: 0x18]
	SoftObjectPath BaseDefaultSubmix;//[Offset: 0xc8, Size: 0x18]
	SoftObjectPath ReverbSubmix;//[Offset: 0xe0, Size: 0x18]
	SoftObjectPath EQSubmix;//[Offset: 0xf8, Size: 0x18]
	enum VoiPSampleRate;//[Offset: 0x110, Size: 0x4]
	float DefaultReverbSendLevel;//[Offset: 0x114, Size: 0x4]
	int MaximumConcurrentStreams;//[Offset: 0x118, Size: 0x4]
	float GlobalMinPitchScale;//[Offset: 0x11c, Size: 0x4]
	float GlobalMaxPitchScale;//[Offset: 0x120, Size: 0x4]
	AudioQualitySettings[] QualityLevels;//[Offset: 0x128, Size: 0x10]
	bool bAllowPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1]
	bool bDisableMasterEQ;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x138, Size: 0x1]
	bool bAllowCenterChannel3DPanning;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x138, Size: 0x1]
	uint32 NumStoppingSources;//[Offset: 0x13c, Size: 0x4]
	enum PanningMethod;//[Offset: 0x140, Size: 0x1]
	enum MonoChannelUpmixMethod;//[Offset: 0x141, Size: 0x1]
	FString DialogueFilenameFormat;//[Offset: 0x148, Size: 0x10]
	SoundDebugEntry[] DebugSounds;//[Offset: 0x158, Size: 0x10]
	DefaultAudioBusSettings[] DefaultAudioBuses;//[Offset: 0x168, Size: 0x10]
	SoundClass* DefaultSoundClass;//[Offset: 0x178, Size: 0x8]
	SoundClass* DefaultMediaSoundClass;//[Offset: 0x180, Size: 0x8]
	SoundConcurrency* DefaultSoundConcurrency;//[Offset: 0x188, Size: 0x8]

--------------------------------
Class: AudioQualitySettings
	FText DisplayName;//[Offset: 0x0, Size: 0x18]
	int MaxChannels;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SoundDebugEntry
	FName DebugName;//[Offset: 0x0, Size: 0x8]
	SoftObjectPath Sound;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: DefaultAudioBusSettings
	SoftObjectPath AudioBus;//[Offset: 0x0, Size: 0x18]

--------------------------------
Class: AudioVolume.Volume.Brush.Actor.Object
	float Priority;//[Offset: 0x2b0, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4, Size: 0x1]
	ReverbSettings Settings;//[Offset: 0x2b8, Size: 0x20]
	InteriorSettings AmbientZoneSettings;//[Offset: 0x2d8, Size: 0x24]
	AudioVolumeSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x300, Size: 0x10]
	AudioVolumeSubmixOverrideSettings[] SubmixOverrideSettings;//[Offset: 0x310, Size: 0x10]
	void SetSubmixSendSettings(out const AudioVolumeSubmixSendSettings[] NewSubmixSendSettings);// 0x2cae58eb6041
	void SetSubmixOverrideSettings(out const AudioVolumeSubmixOverrideSettings[] NewSubmixOverrideSettings);// 0x2cad58eb6041
	void SetReverbSettings(out const ReverbSettings NewReverbSettings);// 0x2cac58eb6041
	void SetPriority(float NewPriority);// 0x2cab58eb6041
	void SetInteriorSettings(out const InteriorSettings NewInteriorSettings);// 0x2caa58eb6041
	void SetEnabled(bool bNewEnabled);// 0x2ca958eb6041
	void OnRep_bEnabled();// 0x2ca858eb6041

--------------------------------
Class: AudioVolumeSubmixSendSettings
	enum ListenerLocationState;//[Offset: 0x0, Size: 0x1]
	enum SourceLocationState;//[Offset: 0x1, Size: 0x1]
	SoundSubmixSendInfo[] SubmixSends;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AudioVolumeSubmixOverrideSettings
	SoundSubmix* Submix;//[Offset: 0x0, Size: 0x8]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x8, Size: 0x10]
	float CrossfadeTime;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: AudioWidgetSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: TickableWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: AutoDestroySubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	Actor*[] ActorsToPoll;//[Offset: 0x40, Size: 0x10]
	void OnActorEndPlay(Actor* Actor, byte EndPlayReason);// 0x2caf58eb6041

--------------------------------
Class: AutomationTestSettings.Object
	FString[] EngineTestModules;//[Offset: 0x28, Size: 0x10]
	FString[] EditorTestModules;//[Offset: 0x38, Size: 0x10]
	SoftObjectPath AutomationTestmap;//[Offset: 0x48, Size: 0x18]
	EditorMapPerformanceTestDefinition[] EditorPerformanceTestMaps;//[Offset: 0x60, Size: 0x10]
	FString[] AssetsToOpen;//[Offset: 0x70, Size: 0x10]
	FString[] MapsToPIETest;//[Offset: 0x80, Size: 0x10]
	bool bUseAllProjectMapsToPlayInPIE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	BuildPromotionTestSettings BuildPromotionTest;//[Offset: 0x98, Size: 0x1f0]
	MaterialEditorPromotionSettings MaterialEditorPromotionTest;//[Offset: 0x288, Size: 0x30]
	ParticleEditorPromotionSettings ParticleEditorPromotionTest;//[Offset: 0x2b8, Size: 0x10]
	BlueprintEditorPromotionSettings BlueprintEditorPromotionTest;//[Offset: 0x2c8, Size: 0x30]
	FString[] TestLevelFolders;//[Offset: 0x2f8, Size: 0x10]
	ExternalToolDefinition[] ExternalTools;//[Offset: 0x308, Size: 0x10]
	EditorImportExportTestDefinition[] ImportExportTestDefinitions;//[Offset: 0x318, Size: 0x10]
	LaunchOnTestSettings[] LaunchOnSettings;//[Offset: 0x328, Size: 0x10]
	IntPoint DefaultScreenshotResolution;//[Offset: 0x338, Size: 0x8]
	float PIETestDuration;//[Offset: 0x340, Size: 0x4]

--------------------------------
Class: EditorMapPerformanceTestDefinition
	SoftObjectPath PerformanceTestmap;//[Offset: 0x0, Size: 0x18]
	int TestTimer;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BuildPromotionTestSettings
	FilePath DefaultStaticMeshAsset;//[Offset: 0x0, Size: 0x10]
	BuildPromotionImportWorkflowSettings ImportWorkflow;//[Offset: 0x10, Size: 0x150]
	BuildPromotionOpenAssetSettings OpenAssets;//[Offset: 0x160, Size: 0x60]
	BuildPromotionNewProjectSettings NewProjectSettings;//[Offset: 0x1c0, Size: 0x20]
	FilePath SourceControlMaterial;//[Offset: 0x1e0, Size: 0x10]

--------------------------------
Class: FilePath
	FString FilePath;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BuildPromotionImportWorkflowSettings
	EditorImportWorkflowDefinition Diffuse;//[Offset: 0x0, Size: 0x20]
	EditorImportWorkflowDefinition Normal;//[Offset: 0x20, Size: 0x20]
	EditorImportWorkflowDefinition StaticMesh;//[Offset: 0x40, Size: 0x20]
	EditorImportWorkflowDefinition ReimportStaticMesh;//[Offset: 0x60, Size: 0x20]
	EditorImportWorkflowDefinition BlendShapeMesh;//[Offset: 0x80, Size: 0x20]
	EditorImportWorkflowDefinition MorphMesh;//[Offset: 0xa0, Size: 0x20]
	EditorImportWorkflowDefinition SkeletalMesh;//[Offset: 0xc0, Size: 0x20]
	EditorImportWorkflowDefinition Animation;//[Offset: 0xe0, Size: 0x20]
	EditorImportWorkflowDefinition Sound;//[Offset: 0x100, Size: 0x20]
	EditorImportWorkflowDefinition SurroundSound;//[Offset: 0x120, Size: 0x20]
	EditorImportWorkflowDefinition[] OtherAssetsToImport;//[Offset: 0x140, Size: 0x10]

--------------------------------
Class: EditorImportWorkflowDefinition
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0x10]
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ImportFactorySettingValues
	FString SettingName;//[Offset: 0x0, Size: 0x10]
	FString Value;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: BuildPromotionOpenAssetSettings
	FilePath BlueprintAsset;//[Offset: 0x0, Size: 0x10]
	FilePath MaterialAsset;//[Offset: 0x10, Size: 0x10]
	FilePath ParticleSystemAsset;//[Offset: 0x20, Size: 0x10]
	FilePath SkeletalMeshAsset;//[Offset: 0x30, Size: 0x10]
	FilePath StaticMeshAsset;//[Offset: 0x40, Size: 0x10]
	FilePath TextureAsset;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: BuildPromotionNewProjectSettings
	DirectoryPath NewProjectFolderOverride;//[Offset: 0x0, Size: 0x10]
	FString NewProjectNameOverride;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MaterialEditorPromotionSettings
	FilePath DefaultMaterialAsset;//[Offset: 0x0, Size: 0x10]
	FilePath DefaultDiffuseTexture;//[Offset: 0x10, Size: 0x10]
	FilePath DefaultNormalTexture;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ParticleEditorPromotionSettings
	FilePath DefaultParticleAsset;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BlueprintEditorPromotionSettings
	FilePath FirstMeshPath;//[Offset: 0x0, Size: 0x10]
	FilePath SecondMeshPath;//[Offset: 0x10, Size: 0x10]
	FilePath DefaultParticleAsset;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ExternalToolDefinition
	FString ToolName;//[Offset: 0x0, Size: 0x10]
	FilePath ExecutablePath;//[Offset: 0x10, Size: 0x10]
	FString CommandLineOptions;//[Offset: 0x20, Size: 0x10]
	DirectoryPath WorkingDirectory;//[Offset: 0x30, Size: 0x10]
	FString ScriptExtension;//[Offset: 0x40, Size: 0x10]
	DirectoryPath ScriptDirectory;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: EditorImportExportTestDefinition
	FilePath ImportFilePath;//[Offset: 0x0, Size: 0x10]
	FString ExportFileExtension;//[Offset: 0x10, Size: 0x10]
	bool bSkipExport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	ImportFactorySettingValues[] FactorySettings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LaunchOnTestSettings
	FilePath LaunchOnTestmap;//[Offset: 0x0, Size: 0x10]
	FString DeviceID;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: BandwidthTestActor.Actor.Object
	BandwidthTestGenerator BandwidthGenerator;//[Offset: 0x278, Size: 0x20]

--------------------------------
Class: BandwidthTestGenerator
	BandwidthTestItem[] ReplicatedBuffers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BandwidthTestItem
	byte[] Kilobyte;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BlendableInterface.Interface.Object

--------------------------------
Class: AnalysisProperties.Object
	FString Function;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: Breakpoint.Object

--------------------------------
Class: BlueprintExtension.Object

--------------------------------
Class: BlueprintMapLibrary.BlueprintFunctionLibrary.Object
	void SetMapPropertyByName(Object* Object, FName PropertyName, out const <int,int> Value);// 0x2cc258eb6041
	void Map_Values(out const <int,int> TargetMap, out int[] Values);// 0x2cc158eb6041
	bool Map_Remove(out const <int,int> TargetMap, out const int Key);// 0x2cc058eb6041
	int Map_Length(out const <int,int> TargetMap);// 0x2cbf58eb6041
	void Map_Keys(out const <int,int> TargetMap, out int[] Keys);// 0x2cbe58eb6041
	bool Map_IsNotEmpty(out const <int,int> TargetMap);// 0x2cbd58eb6041
	bool Map_IsEmpty(out const <int,int> TargetMap);// 0x2cbc58eb6041
	bool Map_Find(out const <int,int> TargetMap, out const int Key, out int Value);// 0x2cbb58eb6041
	bool Map_Contains(out const <int,int> TargetMap, out const int Key);// 0x2cba58eb6041
	void Map_Clear(out const <int,int> TargetMap);// 0x2cb958eb6041
	void Map_Add(out const <int,int> TargetMap, out const int Key, out const int Value);// 0x2cb858eb6041

--------------------------------
Class: BlueprintPathsLibrary.BlueprintFunctionLibrary.Object
	FString VideoCaptureDir();// 0x2d1458eb6041
	void ValidatePath(FString InPath, out bool bDidSucceed, out FText OutReason);// 0x2d1358eb6041
	void Split(FString InPath, out FString PathPart, out FString FilenamePart, out FString ExtensionPart);// 0x2d1258eb6041
	FString SourceConfigDir();// 0x2d1158eb6041
	bool ShouldSaveToUserDir();// 0x2d1058eb6041
	FString ShaderWorkingDir();// 0x2d0f58eb6041
	void SetProjectFilePath(FString NewGameProjectFilePath);// 0x2d0e58eb6041
	FString SetExtension(FString InPath, FString InNewExtension);// 0x2d0d58eb6041
	FString ScreenShotDir();// 0x2d0c58eb6041
	FString SandboxesDir();// 0x2d0b58eb6041
	FString RootDir();// 0x2d0a58eb6041
	void RemoveDuplicateSlashes(FString InPath, out FString OutPath);// 0x2d0958eb6041
	FString ProjectUserDir();// 0x2d0858eb6041
	FString ProjectSavedDir();// 0x2d0758eb6041
	FString ProjectPluginsDir();// 0x2d0658eb6041
	FString ProjectPersistentDownloadDir();// 0x2d0558eb6041
	FString ProjectModsDir();// 0x2d0458eb6041
	FString ProjectLogDir();// 0x2d0358eb6041
	FString ProjectIntermediateDir();// 0x2d0258eb6041
	FString ProjectDir();// 0x2d0158eb6041
	FString ProjectContentDir();// 0x2d0058eb6041
	FString ProjectConfigDir();// 0x2cff58eb6041
	FString ProfilingDir();// 0x2cfe58eb6041
	void NormalizeFilename(FString InPath, out FString OutPath);// 0x2cfd58eb6041
	void NormalizeDirectoryName(FString InPath, out FString OutPath);// 0x2cfc58eb6041
	FString MakeValidFileName(FString InString, FString InReplacementChar);// 0x2cfb58eb6041
	void MakeStandardFilename(FString InPath, out FString OutPath);// 0x2cfa58eb6041
	void MakePlatformFilename(FString InPath, out FString OutPath);// 0xffffff8158eb6000
	bool MakePathRelativeTo(FString InPath, FString InRelativeTo, out FString OutPath);// 0x2cf858eb6041
	FString LaunchDir();// 0x2cf758eb6041
	bool IsSamePath(FString PathA, FString PathB);// 0x2cf658eb6041
	bool IsRestrictedPath(FString InPath);// 0x2cf558eb6041
	bool IsRelative(FString InPath);// 0x2cf458eb6041
	bool IsProjectFilePathSet();// 0x2cf358eb6041
	bool IsDrive(FString InPath);// 0x2cf258eb6041
	bool HasProjectPersistentDownloadDir();// 0x2cf158eb6041
	FString[] GetToolTipLocalizationPaths();// 0x2cf058eb6041
	FString[] GetRestrictedFolderNames();// 0x2cef58eb6041
	FString GetRelativePathToRoot();// 0x2cee58eb6041
	FString[] GetPropertyNameLocalizationPaths();// 0x2ced58eb6041
	FString GetProjectFilePath();// 0x2cec58eb6041
	FString GetPath(FString InPath);// 0x2ceb58eb6041
	FString GetInvalidFileSystemChars();// 0x2cea58eb6041
	FString[] GetGameLocalizationPaths();// 0x2ce958eb6041
	FString GetExtension(FString InPath, bool bIncludeDot);// 0x2ce858eb6041
	FString[] GetEngineLocalizationPaths();// 0x2ce758eb6041
	FString[] GetEditorLocalizationPaths();// 0x2ce658eb6041
	FString GetCleanFilename(FString InPath);// 0x2ce558eb6041
	FString GetBaseFilename(FString InPath, bool bRemovePath);// 0x2ce458eb6041
	FString GeneratedConfigDir();// 0x2ce358eb6041
	FString GameUserDeveloperDir();// 0x2ce258eb6041
	FString GameSourceDir();// 0x2ce158eb6041
	FString GameDevelopersDir();// 0x2ce058eb6041
	FString GameAgnosticSavedDir();// 0x2cdf58eb6041
	bool FileExists(FString InPath);// 0x2cde58eb6041
	FString FeaturePackDir();// 0x2cdd58eb6041
	FString EnterprisePluginsDir();// 0x2cdc58eb6041
	FString EnterpriseFeaturePackDir();// 0x2cdb58eb6041
	FString EnterpriseDir();// 0x2cda58eb6041
	FString EngineVersionAgnosticUserDir();// 0x2cd958eb6041
	FString EngineUserDir();// 0x2d1558eb6041
	FString EngineSourceDir();// 0x2cd758eb6041
	FString EngineSavedDir();// 0x2cd658eb6041
	FString EnginePluginsDir();// 0x2cd558eb6041
	FString EngineIntermediateDir();// 0x2cd458eb6041
	FString EngineDir();// 0x2cd358eb6041
	FString EngineContentDir();// 0x2cd258eb6041
	FString EngineConfigDir();// 0x2cd158eb6041
	bool DirectoryExists(FString InPath);// 0x2cd058eb6041
	FString DiffDir();// 0x2ccf58eb6041
	FString CreateTempFilename(FString Path, FString Prefix, FString Extension);// 0x2cce58eb6041
	FString ConvertToSandboxPath(FString InPath, FString InSandboxName);// 0x2ccd58eb6041
	FString ConvertRelativePathToFull(FString InPath, FString InBasePath);// 0x2ccc58eb6041
	FString ConvertFromSandboxPath(FString InPath, FString InSandboxName);// 0x2ccb58eb6041
	FString Combine(out const FString[] InPaths);// 0x2cca58eb6041
	bool CollapseRelativeDirectories(FString InPath, out FString OutPath);// 0x2cc958eb6041
	FString CloudDir();// 0x2cc858eb6041
	FString ChangeExtension(FString InPath, FString InNewExtension);// 0x2cc758eb6041
	FString BugItDir();// 0x2cc658eb6041
	FString AutomationTransientDir();// 0x2cc558eb6041
	FString AutomationLogDir();// 0x2cc458eb6041
	FString AutomationDir();// 0x2cc358eb6041

--------------------------------
Class: PlatformGameInstance.GameInstance.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0x1a8, Size: 0x10]
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0x1b8, Size: 0x10]
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0x1c8, Size: 0x10]
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0x1d8, Size: 0x10]
	delegate ApplicationWillTerminateDelegate;//[Offset: 0x1e8, Size: 0x10]
	delegate ApplicationShouldUnloadResourcesDelegate;//[Offset: 0x1f8, Size: 0x10]
	delegate ApplicationReceivedStartupArgumentsDelegate;//[Offset: 0x208, Size: 0x10]
	delegate ApplicationRegisteredForRemoteNotificationsDelegate;//[Offset: 0x218, Size: 0x10]
	delegate ApplicationRegisteredForUserNotificationsDelegate;//[Offset: 0x228, Size: 0x10]
	delegate ApplicationFailedToRegisterForRemoteNotificationsDelegate;//[Offset: 0x238, Size: 0x10]
	delegate ApplicationReceivedRemoteNotificationDelegate;//[Offset: 0x248, Size: 0x10]
	delegate ApplicationReceivedLocalNotificationDelegate;//[Offset: 0x258, Size: 0x10]
	delegate ApplicationReceivedScreenOrientationChangedNotificationDelegate;//[Offset: 0x268, Size: 0x10]

--------------------------------
Class: BlueprintPlatformLibrary.BlueprintFunctionLibrary.Object
	int ScheduleLocalNotificationFromNow(int inSecondsFromNow, out const FText Title, out const FText Body, out const FText Action, FString ActivationEvent);// 0x2d1d58eb6041
	void ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, FString ActivationEvent);// 0x2d1c58eb6041
	int ScheduleLocalNotificationBadgeAtTime(out const DateTime FireDateTime, bool LocalTime, FString ActivationEvent);// 0x2d1b58eb6041
	int ScheduleLocalNotificationAtTime(out const DateTime FireDateTime, bool LocalTime, out const FText Title, out const FText Body, out const FText Action, FString ActivationEvent);// 0x2d1a58eb6041
	void GetLaunchNotification(out bool NotificationLaunchedApp, out FString ActivationEvent, out int FireDate);// 0x2d1958eb6041
	byte GetDeviceOrientation();// 0x2d1858eb6041
	void ClearAllLocalNotifications();// 0x2d1758eb6041
	void CancelLocalNotificationById(int NotificationId);// 0x2d1658eb6041
	void CancelLocalNotification(FString ActivationEvent);// 0x2d5758eb6041

--------------------------------
Class: DateTime

--------------------------------
Class: BlueprintSetLibrary.BlueprintFunctionLibrary.Object
	void SetSetPropertyByName(Object* Object, FName PropertyName, out const <int> Value);// 0x2d2b58eb6041
	void Set_Union(out const <int> A, out const <int> B, out <int> Result);// 0x2d2a58eb6041
	void Set_ToArray(out const <int> A, out int[] Result);// 0x2d2958eb6041
	void Set_RemoveItems(out const <int> TargetSet, out const int[] Items);// 0x2d2858eb6041
	bool Set_Remove(out const <int> TargetSet, out const int Item);// 0x2d2758eb6041
	int Set_Length(out const <int> TargetSet);// 0x2d2658eb6041
	bool Set_IsNotEmpty(out const <int> TargetSet);// 0x2d2558eb6041
	bool Set_IsEmpty(out const <int> TargetSet);// 0x2d2458eb6041
	void Set_Intersection(out const <int> A, out const <int> B, out <int> Result);// 0x2d2358eb6041
	void Set_Difference(out const <int> A, out const <int> B, out <int> Result);// 0x2d2258eb6041
	bool Set_Contains(out const <int> TargetSet, out const int ItemToFind);// 0x2d2158eb6041
	void Set_Clear(out const <int> TargetSet);// 0x2d2058eb6041
	void Set_AddItems(out const <int> TargetSet, out const int[] NewItems);// 0x2d1f58eb6041
	void Set_Add(out const <int> TargetSet, out const int NewItem);// 0x2d1e58eb6041

--------------------------------
Class: BoneMaskFilter.Object
	InputBlendPose[] BlendPoses;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: InputBlendPose
	BranchFilter[] BranchFilters;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: BranchFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	int BlendDepth;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BookMark.BookmarkBase.Object
	Vector Location;//[Offset: 0x28, Size: 0x18]
	Rotator Rotation;//[Offset: 0x40, Size: 0x18]
	FString[] HiddenLevels;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: BookMark2D.BookmarkBase.Object
	float Zoom2D;//[Offset: 0x28, Size: 0x4]
	IntPoint Location;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: BoundsCopyComponent.ActorComponent.Object
	Actor* BoundsSourceActor;//[Offset: 0xb0, Size: 0x28]
	bool bUseCollidingComponentsForSourceBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	bool bKeepOwnBoundsScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	bool bUseCollidingComponentsForOwnBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 0x1]
	Transform PostTransform;//[Offset: 0xe0, Size: 0x60]
	bool bCopyXBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	bool bCopyYBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 0x1]
	bool bCopyZBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142, Size: 0x1]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x550, Size: 0x18]
	float LineThickness;//[Offset: 0x568, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x2d2e58eb6041
	Vector GetUnscaledBoxExtent();// 0x2d2d58eb6041
	Vector GetScaledBoxExtent();// 0x2d2c58eb6041

--------------------------------
Class: ReflectionCapture.Actor.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x2b0, Size: 0x8]
	enum ReflectionSourceType;//[Offset: 0x2b8, Size: 0x1]
	enum MobileReflectionCompression;//[Offset: 0x2b9, Size: 0x1]
	TextureCube* Cubemap;//[Offset: 0x2c0, Size: 0x8]
	float SourceCubemapAngle;//[Offset: 0x2c8, Size: 0x4]
	float Brightness;//[Offset: 0x2cc, Size: 0x4]
	bool bModifyMaxValueRGBM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	float MaxValueRGBM;//[Offset: 0x2d4, Size: 0x4]
	Vector CaptureOffset;//[Offset: 0x2d8, Size: 0x18]
	Guid MapBuildDataId;//[Offset: 0x2f0, Size: 0x10]
	TextureCube* CachedEncodedHDRCubemap;//[Offset: 0x300, Size: 0x8]

--------------------------------
Class: BoxReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: BoxReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float BoxTransitionDistance;//[Offset: 0x328, Size: 0x4]
	BoxComponent* PreviewInfluenceBox;//[Offset: 0x330, Size: 0x8]
	BoxComponent* PreviewCaptureBox;//[Offset: 0x338, Size: 0x8]

--------------------------------
Class: BrushBuilder.Object
	FString BitmapFilename;//[Offset: 0x28, Size: 0x10]
	FString ToolTip;//[Offset: 0x38, Size: 0x10]
	bool NotifyBadParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	Vector[] Vertices;//[Offset: 0x50, Size: 0x10]
	BuilderPoly[] Polys;//[Offset: 0x60, Size: 0x10]
	FName Layer;//[Offset: 0x70, Size: 0x8]
	bool MergeCoplanars;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: BuilderPoly
	int[] VertexIndices;//[Offset: 0x0, Size: 0x10]
	int Direction;//[Offset: 0x10, Size: 0x4]
	FName ItemName;//[Offset: 0x14, Size: 0x8]
	int PolyFlags;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: BrushShape.Brush.Actor.Object

--------------------------------
Class: BuiltInAttributesExtensions.BlueprintFunctionLibrary.Object

--------------------------------
Class: ButtonStyleAsset.Object
	ButtonStyle ButtonStyle;//[Offset: 0x30, Size: 0x3b0]

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x10, Size: 0xc0]
	SlateBrush Hovered;//[Offset: 0xd0, Size: 0xc0]
	SlateBrush Pressed;//[Offset: 0x190, Size: 0xc0]
	SlateBrush Disabled;//[Offset: 0x250, Size: 0xc0]
	SlateColor NormalForeground;//[Offset: 0x310, Size: 0x14]
	SlateColor HoveredForeground;//[Offset: 0x324, Size: 0x14]
	SlateColor PressedForeground;//[Offset: 0x338, Size: 0x14]
	SlateColor DisabledForeground;//[Offset: 0x34c, Size: 0x14]
	Margin NormalPadding;//[Offset: 0x360, Size: 0x10]
	Margin PressedPadding;//[Offset: 0x370, Size: 0x10]
	SlateSound PressedSlateSound;//[Offset: 0x380, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x398, Size: 0x18]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: CachedAnimDataLibrary.BlueprintFunctionLibrary.Object
	bool StateMachine_IsStateRelevant(AnimInstance* InAnimInstance, out const CachedAnimStateData CachedAnimStateData);// 0x2d3158eb6041
	float StateMachine_GetLocalWeight(AnimInstance* InAnimInstance, out const CachedAnimStateData CachedAnimStateData);// 0x2d3058eb6041
	float StateMachine_GetGlobalWeight(AnimInstance* InAnimInstance, out const CachedAnimStateData CachedAnimStateData);// 0x2d2f58eb6041

--------------------------------
Class: CachedAnimStateData
	FName StateMachineName;//[Offset: 0x0, Size: 0x8]
	FName StateName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: CameraBlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: CameraLensEffectInterface.Interface.Object
	FXSystemComponent* GetPrimaryParticleComponent();// 0x2d7858eb6041
	FXSystemComponent*[] GetParticleComponents();// 0x2d3558eb6041

--------------------------------
Class: CameraLensEffectInterfaceClassSupportLibrary.BlueprintFunctionLibrary.Object
	void SetInterfaceClass(class Actor Class, out CameraLensInterfaceClassSupport Var, out enum Result);// 0x2d3a58eb6041
	void IsInterfaceValid(out const interface classNone CameraLens, out enum Result);// 0x2d3958eb6041
	void IsInterfaceClassValid(out const CameraLensInterfaceClassSupport CameraLens, out enum Result);// 0x2d3858eb6041
	class Actor GetInterfaceClass(out const CameraLensInterfaceClassSupport CameraLens);// 0x2d3758eb6041

--------------------------------
Class: CameraLensInterfaceClassSupport
	class Actor* Class;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: CameraShakeSourceActor.Actor.Object
	CameraShakeSourceComponent* CameraShakeSourceComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: CancellableAsyncAction.BlueprintAsyncActionBase.Object
	bool IsActive();// 0x2d4158eb6041
	void Cancel();// 0x2d4058eb6041

--------------------------------
Class: DeviceProfileManager.Object
	DeviceProfile*[] Profiles;//[Offset: 0x28, Size: 0x10]
	DeviceProfile*[] BackupProfiles;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: DeviceProfile.TextureLODSettings.Object
	FString DeviceType;//[Offset: 0x38, Size: 0x10]
	FString BaseProfileName;//[Offset: 0x48, Size: 0x10]
	DeviceProfile* Parent;//[Offset: 0x58, Size: 0x8]
	FString[] CVars;//[Offset: 0x88, Size: 0x10]
	DPMatchingRulestruct[] MatchingRules;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: TextureLODSettings.Object
	TextureLODGroup[] TextureLODGroups;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: TextureLODGroup
	byte Group;//[Offset: 0x0, Size: 0x1]
	int LODBias;//[Offset: 0x8, Size: 0x4]
	int LODBias_Smaller;//[Offset: 0xc, Size: 0x4]
	int LODBias_Smallest;//[Offset: 0x10, Size: 0x4]
	int NumStreamedMips;//[Offset: 0x18, Size: 0x4]
	byte MipGenSettings;//[Offset: 0x1c, Size: 0x1]
	int MinLODSize;//[Offset: 0x20, Size: 0x4]
	int MaxLODSize;//[Offset: 0x24, Size: 0x4]
	int MaxLODSize_Smaller;//[Offset: 0x28, Size: 0x4]
	int MaxLODSize_Smallest;//[Offset: 0x2c, Size: 0x4]
	int MaxLODSize_VT;//[Offset: 0x30, Size: 0x4]
	int OptionalLODBias;//[Offset: 0x34, Size: 0x4]
	int OptionalMaxLODSize;//[Offset: 0x38, Size: 0x4]
	FName MinMagFilter;//[Offset: 0x3c, Size: 0x8]
	FName MipFilter;//[Offset: 0x44, Size: 0x8]
	enum MipLoadOptions;//[Offset: 0x4c, Size: 0x1]
	bool HighPriorityLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool DuplicateNonOptionalMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	float Downscale;//[Offset: 0x50, Size: 0x4]
	enum DownscaleOptions;//[Offset: 0x54, Size: 0x1]
	int VirtualTextureTileCountBias;//[Offset: 0x58, Size: 0x4]
	int VirtualTextureTileSizeBias;//[Offset: 0x5c, Size: 0x4]
	byte LossyCompressionAmount;//[Offset: 0x60, Size: 0x1]

--------------------------------
Class: DPMatchingRulestruct.DPMatchingRulestructBase
	DPMatchingRulestructE[] OnTrue;//[Offset: 0x48, Size: 0x10]
	DPMatchingRulestructE[] OnFalse;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: DPMatchingRulestructBase
	FString RuleName;//[Offset: 0x8, Size: 0x10]
	DPMatchingIfCondition[] IfConditions;//[Offset: 0x18, Size: 0x10]
	FString AppendFragments;//[Offset: 0x28, Size: 0x10]
	FString SetUserVar;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: DPMatchingRulestructE.DPMatchingRulestructBase
	DPMatchingRulestructD[] OnTrue;//[Offset: 0x48, Size: 0x10]
	DPMatchingRulestructD[] OnFalse;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: DPMatchingRulestructD.DPMatchingRulestructBase
	DPMatchingRulestructC[] OnTrue;//[Offset: 0x48, Size: 0x10]
	DPMatchingRulestructC[] OnFalse;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: DPMatchingRulestructC.DPMatchingRulestructBase
	DPMatchingRulestructB[] OnTrue;//[Offset: 0x48, Size: 0x10]
	DPMatchingRulestructB[] OnFalse;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: DPMatchingRulestructB.DPMatchingRulestructBase
	DPMatchingRulestructA[] OnTrue;//[Offset: 0x48, Size: 0x10]
	DPMatchingRulestructA[] OnFalse;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: DPMatchingRulestructA.DPMatchingRulestructBase
	DPMatchingRulestructBase[] OnTrue;//[Offset: 0x48, Size: 0x10]
	DPMatchingRulestructBase[] OnFalse;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: DPMatchingIfCondition
	FName Operator;//[Offset: 0x0, Size: 0x8]
	FString Arg1;//[Offset: 0x8, Size: 0x10]
	FString Arg2;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0x1f0, Size: 0x4]

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x1f8, Size: 0x4]
	int SizeY;//[Offset: 0x1fc, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0x200, Size: 0x10]
	byte AddressX;//[Offset: 0x210, Size: 0x1]
	byte AddressY;//[Offset: 0x211, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x212, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x212, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x212, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0x213, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 0x1]
	byte MipsSamplerFilter;//[Offset: 0x215, Size: 0x1]
	byte MipsAddressU;//[Offset: 0x216, Size: 0x1]
	byte MipsAddressV;//[Offset: 0x217, Size: 0x1]
	byte OverrideFormat;//[Offset: 0x218, Size: 0x1]

--------------------------------
Class: CanvasRenderTarget2D.TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	delegate OnCanvasRenderTargetUpdate;//[Offset: 0x220, Size: 0x10]
	World* World;//[Offset: 0x230, Size: 0x8]
	bool bShouldClearRenderTargetOnReceiveUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 0x1]
	void UpdateResource();// 0x2d5258eb6041
	void ReceiveUpdate(Canvas* Canvas, int Width, int Height);// 0x2d5158eb6041
	void GetSize(out int Width, out int Height);// 0x2d5058eb6041
	CanvasRenderTarget2D* CreateCanvasRenderTarget2D(Object* WorldContextObject, class CanvasRenderTarget2D CanvasRenderTarget2DClass, int Width, int Height);// 0x2d4f58eb6041

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 0x8]
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 0x18]
	Font* SmallFont;//[Offset: 0x50, Size: 0x8]
	SoftObjectPath SmallFontName;//[Offset: 0x58, Size: 0x18]
	Font* MediumFont;//[Offset: 0x70, Size: 0x8]
	SoftObjectPath MediumFontName;//[Offset: 0x78, Size: 0x18]
	Font* LargeFont;//[Offset: 0x90, Size: 0x8]
	SoftObjectPath LargeFontName;//[Offset: 0x98, Size: 0x18]
	Font* SubtitleFont;//[Offset: 0xb0, Size: 0x8]
	SoftObjectPath SubtitleFontName;//[Offset: 0xb8, Size: 0x18]
	Font*[] AdditionalFonts;//[Offset: 0xd0, Size: 0x10]
	FString[] AdditionalFontNames;//[Offset: 0xe0, Size: 0x10]
	class Console* ConsoleClass;//[Offset: 0xf0, Size: 0x8]
	SoftClassPath ConsoleClassName;//[Offset: 0xf8, Size: 0x18]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x110, Size: 0x8]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x118, Size: 0x18]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x130, Size: 0x8]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x138, Size: 0x18]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x150, Size: 0x8]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x158, Size: 0x18]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x170, Size: 0x18]
	class NavigationSystemBase* NavigationSystemClass;//[Offset: 0x188, Size: 0x8]
	SoftClassPath NavigationSystemConfigClassName;//[Offset: 0x190, Size: 0x18]
	class NavigationSystemConfig* NavigationSystemConfigClass;//[Offset: 0x1a8, Size: 0x8]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b0, Size: 0x18]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1c8, Size: 0x8]
	SoftClassPath AIControllerClassName;//[Offset: 0x1d0, Size: 0x18]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1e8, Size: 0x8]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1f0, Size: 0x18]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x208, Size: 0x18]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x220, Size: 0x8]
	GameUserSettings* GameUserSettings;//[Offset: 0x228, Size: 0x8]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x230, Size: 0x8]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x238, Size: 0x18]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x250, Size: 0x18]
	SoftClassPath GameSingletonClassName;//[Offset: 0x268, Size: 0x18]
	Object* GameSingleton;//[Offset: 0x280, Size: 0x8]
	SoftClassPath AssetManagerClassName;//[Offset: 0x288, Size: 0x18]
	AssetManager* AssetManager;//[Offset: 0x2a0, Size: 0x8]
	Texture2D* DefaultTexture;//[Offset: 0x2a8, Size: 0x8]
	SoftObjectPath DefaultTextureName;//[Offset: 0x2b0, Size: 0x18]
	Texture* DefaultDiffuseTexture;//[Offset: 0x2c8, Size: 0x8]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2d0, Size: 0x18]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2e8, Size: 0x8]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2f0, Size: 0x18]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x308, Size: 0x8]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x310, Size: 0x18]
	Texture2D* DefaultBokehTexture;//[Offset: 0x328, Size: 0x8]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x330, Size: 0x18]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x348, Size: 0x8]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x350, Size: 0x18]
	Texture2D* DefaultFilmGrainTexture;//[Offset: 0x368, Size: 0x8]
	SoftObjectPath DefaultFilmGrainTextureName;//[Offset: 0x370, Size: 0x18]
	Material* WireframeMaterial;//[Offset: 0x388, Size: 0x8]
	FString WireframeMaterialName;//[Offset: 0x390, Size: 0x10]
	Material* DebugMeshMaterial;//[Offset: 0x3a0, Size: 0x8]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x3a8, Size: 0x18]
	Material* EmissiveMeshMaterial;//[Offset: 0x3c0, Size: 0x8]
	SoftObjectPath EmissiveMeshMaterialName;//[Offset: 0x3c8, Size: 0x18]
	Material* LevelColorationLitMaterial;//[Offset: 0x3e0, Size: 0x8]
	FString LevelColorationLitMaterialName;//[Offset: 0x3e8, Size: 0x10]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x3f8, Size: 0x8]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x400, Size: 0x10]
	Material* LightingTexelDensityMaterial;//[Offset: 0x410, Size: 0x8]
	FString LightingTexelDensityName;//[Offset: 0x418, Size: 0x10]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x428, Size: 0x8]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x430, Size: 0x10]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x440, Size: 0x8]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x448, Size: 0x10]
	Material* RemoveSurfaceMaterial;//[Offset: 0x458, Size: 0x8]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x460, Size: 0x18]
	Material* VertexColorMaterial;//[Offset: 0x478, Size: 0x8]
	FString VertexColorMaterialName;//[Offset: 0x480, Size: 0x10]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x490, Size: 0x8]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x498, Size: 0x10]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x4a8, Size: 0x8]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x4b0, Size: 0x10]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x4c0, Size: 0x8]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x4c8, Size: 0x10]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4d8, Size: 0x8]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4e0, Size: 0x10]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4f0, Size: 0x8]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x4f8, Size: 0x10]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x508, Size: 0x18]
	Material* ConstraintLimitMaterial;//[Offset: 0x520, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x528, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x530, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x538, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x540, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x548, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x550, Size: 0x8]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x558, Size: 0x8]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x560, Size: 0x8]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x568, Size: 0x18]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x580, Size: 0x8]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x588, Size: 0x18]
	Material* ArrowMaterial;//[Offset: 0x5a0, Size: 0x8]
	MaterialInstanceDynamic* ArrowMaterialYellow;//[Offset: 0x5a8, Size: 0x8]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x5b0, Size: 0x18]
	LinearColor LightingOnlyBrightness;//[Offset: 0x5c8, Size: 0x10]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x5d8, Size: 0x10]
	LinearColor[] QuadComplexityColors;//[Offset: 0x5e8, Size: 0x10]
	LinearColor[] LightComplexityColors;//[Offset: 0x5f8, Size: 0x10]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x608, Size: 0x10]
	LinearColor[] LODColorationColors;//[Offset: 0x618, Size: 0x10]
	LinearColor[] HLODColorationColors;//[Offset: 0x628, Size: 0x10]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x638, Size: 0x10]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x648, Size: 0x4]
	float MaxES3PixelShaderAdditiveComplexityCount;//[Offset: 0x64c, Size: 0x4]
	float MinLightMapDensity;//[Offset: 0x650, Size: 0x4]
	float IdealLightMapDensity;//[Offset: 0x654, Size: 0x4]
	float MaxLightMapDensity;//[Offset: 0x658, Size: 0x4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x65c, Size: 0x1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x660, Size: 0x4]
	float RenderLightMapDensityColorScale;//[Offset: 0x664, Size: 0x4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x668, Size: 0x10]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x678, Size: 0x10]
	StatColorMapping[] StatColorMappings;//[Offset: 0x688, Size: 0x10]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x698, Size: 0x8]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x6a0, Size: 0x18]
	PhysicalMaterial* DefaultDestructiblePhysMaterial;//[Offset: 0x6b8, Size: 0x8]
	SoftObjectPath DefaultDestructiblePhysMaterialName;//[Offset: 0x6c0, Size: 0x18]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x6d8, Size: 0x10]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x6e8, Size: 0x10]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x6f8, Size: 0x10]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x708, Size: 0x10]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x718, Size: 0x8]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x720, Size: 0x18]
	Texture2D* BlueNoiseTexture;//[Offset: 0x738, Size: 0x8]
	SoftObjectPath BlueNoiseTextureName;//[Offset: 0x740, Size: 0x18]
	Texture2D* MiniFontTexture;//[Offset: 0x758, Size: 0x8]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x760, Size: 0x18]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x778, Size: 0x8]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x780, Size: 0x18]
	Texture2D* LightMapDensityTexture;//[Offset: 0x798, Size: 0x8]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x7a0, Size: 0x18]
	GameViewportClient* GameViewport;//[Offset: 0x7c0, Size: 0x8]
	FString[] DeferredCommands;//[Offset: 0x7c8, Size: 0x10]
	float NearClipPlane;//[Offset: 0x7d8, Size: 0x4]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7dc, Size: 0x1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7dc, Size: 0x1]
	int MaximumLoopIterationCount;//[Offset: 0x7e0, Size: 0x4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e4, Size: 0x1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e4, Size: 0x1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e4, Size: 0x1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7e4, Size: 0x1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7e4, Size: 0x1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7e4, Size: 0x1]
	float FixedFrameRate;//[Offset: 0x7e8, Size: 0x4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x7ec, Size: 0x10]
	EngineCustomTimeStep* CustomTimeStep;//[Offset: 0x800, Size: 0x8]
	SoftClassPath CustomTimeStepClassName;//[Offset: 0x828, Size: 0x18]
	TimecodeProvider* TimecodeProvider;//[Offset: 0x840, Size: 0x8]
	SoftClassPath TimecodeProviderClassName;//[Offset: 0x868, Size: 0x18]
	bool bGenerateDefaultTimecode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 0x1]
	FrameRate GenerateDefaultTimecodeFrameRate;//[Offset: 0x884, Size: 0x8]
	float GenerateDefaultTimecodeFrameDelay;//[Offset: 0x88c, Size: 0x4]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x890, Size: 0x1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x894, Size: 0x4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x898, Size: 0x1]
	Color C_WorldBox;//[Offset: 0x89c, Size: 0x4]
	Color C_BrushWire;//[Offset: 0x8a0, Size: 0x4]
	Color C_AddWire;//[Offset: 0x8a4, Size: 0x4]
	Color C_SubtractWire;//[Offset: 0x8a8, Size: 0x4]
	Color C_SemiSolidWire;//[Offset: 0x8ac, Size: 0x4]
	Color C_NonSolidWire;//[Offset: 0x8b0, Size: 0x4]
	Color C_WireBackground;//[Offset: 0x8b4, Size: 0x4]
	Color C_ScaleBoxHi;//[Offset: 0x8b8, Size: 0x4]
	Color C_VolumeCollision;//[Offset: 0x8bc, Size: 0x4]
	Color C_BSPCollision;//[Offset: 0x8c0, Size: 0x4]
	Color C_OrthoBackground;//[Offset: 0x8c4, Size: 0x4]
	Color C_Volume;//[Offset: 0x8c8, Size: 0x4]
	Color C_BrushShape;//[Offset: 0x8cc, Size: 0x4]
	float StreamingDistanceFactor;//[Offset: 0x8d0, Size: 0x4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x8d8, Size: 0x10]
	bool UseStaticMeshMinLODPerQualityLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e8, Size: 0x1]
	enum TransitionType;//[Offset: 0x8e9, Size: 0x1]
	FString TransitionDescription;//[Offset: 0x8f0, Size: 0x10]
	FString TransitionGameMode;//[Offset: 0x900, Size: 0x10]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x910, Size: 0x1]
	float CameraRotationThreshold;//[Offset: 0x914, Size: 0x4]
	float CameraTranslationThreshold;//[Offset: 0x918, Size: 0x4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x91c, Size: 0x4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x920, Size: 0x4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x924, Size: 0x1]
	int MaxParticleResize;//[Offset: 0x928, Size: 0x4]
	int MaxParticleResizeWarn;//[Offset: 0x92c, Size: 0x4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x930, Size: 0x10]
	float NetClientTicksPerSecond;//[Offset: 0x940, Size: 0x4]
	float DisplayGamma;//[Offset: 0x944, Size: 0x4]
	float MinDesiredFrameRate;//[Offset: 0x948, Size: 0x4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x94c, Size: 0x10]
	LinearColor SelectedMaterialColor;//[Offset: 0x95c, Size: 0x10]
	LinearColor SelectionOutlineColor;//[Offset: 0x96c, Size: 0x10]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x97c, Size: 0x10]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x98c, Size: 0x10]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99c, Size: 0x1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x99d, Size: 0x1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x99d, Size: 0x1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x99d, Size: 0x1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x99d, Size: 0x1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x9a0, Size: 0x4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x9a4, Size: 0x4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a8, Size: 0x1]
	FString ParticleEventManagerClassPath;//[Offset: 0x9b0, Size: 0x10]
	float SelectionHighlightIntensity;//[Offset: 0x9c0, Size: 0x4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x9c4, Size: 0x4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x9c8, Size: 0x4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xc60, Size: 0x10]
	FString[] ServerActors;//[Offset: 0xc70, Size: 0x10]
	FString[] RuntimeServerActors;//[Offset: 0xc80, Size: 0x10]
	float NetErrorLogInterval;//[Offset: 0xc90, Size: 0x4]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc94, Size: 0x1]
	int NextWorldContextHandle;//[Offset: 0xca8, Size: 0x4]

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	uint32 ResolutionSizeX;//[Offset: 0x88, Size: 0x4]
	uint32 ResolutionSizeY;//[Offset: 0x8c, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x90, Size: 0x4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x94, Size: 0x4]
	int WindowPosX;//[Offset: 0x98, Size: 0x4]
	int WindowPosY;//[Offset: 0x9c, Size: 0x4]
	int FullscreenMode;//[Offset: 0xa0, Size: 0x4]
	int LastConfirmedFullscreenMode;//[Offset: 0xa4, Size: 0x4]
	int PreferredFullscreenMode;//[Offset: 0xa8, Size: 0x4]
	uint32 Version;//[Offset: 0xac, Size: 0x4]
	int AudioQualityLevel;//[Offset: 0xb0, Size: 0x4]
	int LastConfirmedAudioQualityLevel;//[Offset: 0xb4, Size: 0x4]
	float FrameRateLimit;//[Offset: 0xb8, Size: 0x4]
	int DesiredScreenWidth;//[Offset: 0xc0, Size: 0x4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 0x1]
	int DesiredScreenHeight;//[Offset: 0xc8, Size: 0x4]
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xcc, Size: 0x4]
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xd0, Size: 0x4]
	float LastRecommendedScreenWidth;//[Offset: 0xd4, Size: 0x4]
	float LastRecommendedScreenHeight;//[Offset: 0xd8, Size: 0x4]
	float LastCPUBenchmarkResult;//[Offset: 0xdc, Size: 0x4]
	float LastGPUBenchmarkResult;//[Offset: 0xe0, Size: 0x4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe8, Size: 0x10]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf8, Size: 0x10]
	float LastGPUBenchmarkMultiplier;//[Offset: 0x108, Size: 0x4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	int HDRDisplayOutputNits;//[Offset: 0x110, Size: 0x4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0x118, Size: 0x10]
	void ValidateSettings();// 0x2f7158eb6041
	bool SupportsHDRDisplayOutput();// 0x2f7058eb6041
	void SetVSyncEnabled(bool bEnable);// 0x2f6f58eb6041
	void SetVisualEffectQuality(int Value);// 0x2f6e58eb6041
	void SetViewDistanceQuality(int Value);// 0x2f6d58eb6041
	void SetToDefaults();// 0x2f6c58eb6041
	void SetTextureQuality(int Value);// 0x2f6b58eb6041
	void SetShadowQuality(int Value);// 0x2f6a58eb6041
	void SetShadingQuality(int Value);// 0x2f6958eb6041
	void SetScreenResolution(IntPoint Resolution);// 0x2f6858eb6041
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x2f6758eb6041
	void SetResolutionScaleValue(int NewScaleValue);// 0x2f6658eb6041
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x2f6558eb6041
	void SetReflectionQuality(int Value);// 0x2f6458eb6041
	void SetPostProcessingQuality(int Value);// 0x2f6358eb6041
	void SetOverallScalabilityLevel(int Value);// 0x2f6258eb6041
	void SetGlobalIlluminationQuality(int Value);// 0x2f6158eb6041
	void SetFullscreenMode(byte InFullscreenMode);// 0x2f6058eb6041
	void SetFrameRateLimit(float NewLimit);// 0x2f5f58eb6041
	void SetFoliageQuality(int Value);// 0x2f5e58eb6041
	void SetDynamicResolutionEnabled(bool bEnable);// 0x2f9f58eb6041
	void SetBenchmarkFallbackValues();// 0x2f5c58eb6041
	void SetAudioQualityLevel(int QualityLevel);// 0x2f5b58eb6041
	void SetAntiAliasingQuality(int Value);// 0x2f5a58eb6041
	void SaveSettings();// 0x2f5958eb6041
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x2f5858eb6041
	void RevertVideoMode();// 0x2f5758eb6041
	void ResetToCurrentSettings();// 0x2f5658eb6041
	void LoadSettings(bool bForceReload);// 0x2f5558eb6041
	bool IsVSyncEnabled();// 0x2f5458eb6041
	bool IsVSyncDirty();// 0x2f5358eb6041
	bool IsScreenResolutionDirty();// 0x2f5258eb6041
	bool IsHDREnabled();// 0x2f5158eb6041
	bool IsFullscreenModeDirty();// 0x2f5058eb6041
	bool IsDynamicResolutionEnabled();// 0x2f4f58eb6041
	bool IsDynamicResolutionDirty();// 0x2f4e58eb6041
	bool IsDirty();// 0x2f4d58eb6041
	int GetVisualEffectQuality();// 0x2f4c58eb6041
	int GetViewDistanceQuality();// 0x2f4b58eb6041
	int GetTextureQuality();// 0x2f4a58eb6041
	int GetSyncInterval();// 0x2f4958eb6041
	int GetShadowQuality();// 0x2f4858eb6041
	int GetShadingQuality();// 0x2f4758eb6041
	IntPoint GetScreenResolution();// 0x2f4658eb6041
	float GetResolutionScaleNormalized();// 0x2f4558eb6041
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x2f4458eb6041
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x2f4358eb6041
	int GetReflectionQuality();// 0x2f4258eb6041
	float GetRecommendedResolutionScale();// 0xffffff8158eb6000
	byte GetPreferredFullscreenMode();// 0x2f4058eb6041
	int GetPostProcessingQuality();// 0x2f3f58eb6041
	int GetOverallScalabilityLevel();// 0x2f3e58eb6041
	IntPoint GetLastConfirmedScreenResolution();// 0x2f3d58eb6041
	byte GetLastConfirmedFullscreenMode();// 0x2f3c58eb6041
	int GetGlobalIlluminationQuality();// 0x2f3b58eb6041
	GameUserSettings* GetGameUserSettings();// 0x2f3a58eb6041
	byte GetFullscreenMode();// 0x2f3958eb6041
	float GetFrameRateLimit();// 0x2f3858eb6041
	int GetFramePace();// 0x2f3758eb6041
	int GetFoliageQuality();// 0x2f3658eb6041
	IntPoint GetDesktopResolution();// 0x2f3558eb6041
	IntPoint GetDefaultWindowPosition();// 0x2f3458eb6041
	byte GetDefaultWindowMode();// 0x2f3358eb6041
	float GetDefaultResolutionScale();// 0x2f3258eb6041
	IntPoint GetDefaultResolution();// 0x2f3158eb6041
	int GetCurrentHDRDisplayNits();// 0x2f3058eb6041
	int GetAudioQualityLevel();// 0x2f2f58eb6041
	int GetAntiAliasingQuality();// 0x2f2e58eb6041
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x2f2d58eb6041
	void ConfirmVideoMode();// 0x2f2c58eb6041
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x2f2b58eb6041
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x2f2a58eb6041
	void ApplyNonResolutionSettings();// 0x2f2958eb6041
	void ApplyHardwareBenchmarkResults();// 0x2f2858eb6041

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 0x10]
	StatColorMapEntry[] ColorMap;//[Offset: 0x10, Size: 0x10]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 0x4]
	Color Out;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 0x8]
	FName NewGameName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	FName OldClassName;//[Offset: 0x8, Size: 0x8]
	FName NewClassName;//[Offset: 0x10, Size: 0x8]
	FName OldSubobjName;//[Offset: 0x18, Size: 0x8]
	FName NewSubobjName;//[Offset: 0x20, Size: 0x8]
	FName NewClassClass;//[Offset: 0x28, Size: 0x8]
	FName NewClassPackage;//[Offset: 0x30, Size: 0x8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 0x10]
	FString NewPluginName;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 0x8]
	FName NewStructName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	float Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: EngineCustomTimeStep.Object

--------------------------------
Class: TimecodeProvider.Object
	float FrameDelay;//[Offset: 0x28, Size: 0x4]
	Timecode GetTimecode();// 0x27c858eb6041
	enum GetSynchronizationState();// 0x27c758eb6041
	QualifiedFrameTime GetQualifiedFrameTime();// 0x27c658eb6041
	FrameRate GetFrameRate();// 0x27c558eb6041
	Timecode GetDelayedTimecode();// 0x280658eb6041
	QualifiedFrameTime GetDelayedQualifiedFrameTime();// 0x27c358eb6041
	bool FetchTimecode(out QualifiedFrameTime OutFrameTime);// 0x27c258eb6041
	void FetchAndUpdate();// 0x27c158eb6041

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 0x8]
	FrameRate Rate;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 0x18]
	Rotator Rotation;//[Offset: 0x18, Size: 0x18]
	FString Comment;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 0x8]
	FName DriverClassName;//[Offset: 0x8, Size: 0x8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: CheckBoxStyleAsset.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x30, Size: 0xa10]

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x8, Size: 0x1]
	SlateBrush UncheckedImage;//[Offset: 0x10, Size: 0xc0]
	SlateBrush UncheckedHoveredImage;//[Offset: 0xd0, Size: 0xc0]
	SlateBrush UncheckedPressedImage;//[Offset: 0x190, Size: 0xc0]
	SlateBrush CheckedImage;//[Offset: 0x250, Size: 0xc0]
	SlateBrush CheckedHoveredImage;//[Offset: 0x310, Size: 0xc0]
	SlateBrush CheckedPressedImage;//[Offset: 0x3d0, Size: 0xc0]
	SlateBrush UndeterminedImage;//[Offset: 0x490, Size: 0xc0]
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x550, Size: 0xc0]
	SlateBrush UndeterminedPressedImage;//[Offset: 0x610, Size: 0xc0]
	Margin Padding;//[Offset: 0x6d0, Size: 0x10]
	SlateBrush BackgroundImage;//[Offset: 0x6e0, Size: 0xc0]
	SlateBrush BackgroundHoveredImage;//[Offset: 0x7a0, Size: 0xc0]
	SlateBrush BackgroundPressedImage;//[Offset: 0x860, Size: 0xc0]
	SlateColor ForegroundColor;//[Offset: 0x920, Size: 0x14]
	SlateColor HoveredForeground;//[Offset: 0x934, Size: 0x14]
	SlateColor PressedForeground;//[Offset: 0x948, Size: 0x14]
	SlateColor CheckedForeground;//[Offset: 0x95c, Size: 0x14]
	SlateColor CheckedHoveredForeground;//[Offset: 0x970, Size: 0x14]
	SlateColor CheckedPressedForeground;//[Offset: 0x984, Size: 0x14]
	SlateColor UndeterminedForeground;//[Offset: 0x998, Size: 0x14]
	SlateColor BorderBackgroundColor;//[Offset: 0x9ac, Size: 0x14]
	SlateSound CheckedSlateSound;//[Offset: 0x9c0, Size: 0x18]
	SlateSound UncheckedSlateSound;//[Offset: 0x9d8, Size: 0x18]
	SlateSound HoveredSlateSound;//[Offset: 0x9f0, Size: 0x18]

--------------------------------
Class: GameMapsSettings.Object
	FString LocalMapOptions;//[Offset: 0x28, Size: 0x10]
	SoftObjectPath TransitionMap;//[Offset: 0x38, Size: 0x18]
	bool bUseSplitscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	byte TwoPlayerSplitscreenLayout;//[Offset: 0x51, Size: 0x1]
	byte ThreePlayerSplitscreenLayout;//[Offset: 0x52, Size: 0x1]
	enum FourPlayerSplitscreenLayout;//[Offset: 0x53, Size: 0x1]
	bool bOffsetPlayerGamepadIds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	SoftClassPath GameInstanceClass;//[Offset: 0x58, Size: 0x18]
	SoftObjectPath GameDefaultMap;//[Offset: 0x70, Size: 0x18]
	SoftObjectPath ServerDefaultMap;//[Offset: 0x88, Size: 0x18]
	SoftClassPath GlobalDefaultGameMode;//[Offset: 0xa0, Size: 0x18]
	SoftClassPath GlobalDefaultServerGameMode;//[Offset: 0xb8, Size: 0x18]
	GameModeName[] GameModeMapPrefixes;//[Offset: 0xd0, Size: 0x10]
	GameModeName[] GameModeClassAliases;//[Offset: 0xe0, Size: 0x10]
	void SetSkipAssigningGamepadToPlayer1(bool bSkipFirstPlayer);// 0x253e58eb6041
	bool GetSkipAssigningGamepadToPlayer1();// 0x253d58eb6041
	GameMapsSettings* GetGameMapsSettings();// 0x253c58eb6041

--------------------------------
Class: GameModeName
	FString Name;//[Offset: 0x0, Size: 0x10]
	SoftClassPath GameMode;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: PlatformInterfaceBase.Object
	DelegateArray[] AllDelegates;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: DelegateArray
	delegate[] Delegates;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: CloudStorageBase.PlatformInterfaceBase.Object
	FString[] LocalCloudFiles;//[Offset: 0x38, Size: 0x10]
	bool bSuppressDelegateCalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: Commandlet.Object
	FString HelpDescription;//[Offset: 0x28, Size: 0x10]
	FString HelpUsage;//[Offset: 0x38, Size: 0x10]
	FString HelpWebLink;//[Offset: 0x48, Size: 0x10]
	FString[] HelpParamNames;//[Offset: 0x58, Size: 0x10]
	FString[] HelpParamDescriptions;//[Offset: 0x68, Size: 0x10]
	bool IsServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	bool IsClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1]
	bool IsEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78, Size: 0x1]
	bool LogToConsole;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x78, Size: 0x1]
	bool ShowErrorCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 0x1]
	bool ShowProgress;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: ComponentDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintComponentDelegateBinding[] ComponentDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintComponentDelegateBinding
	FName ComponentPropertyName;//[Offset: 0x0, Size: 0x8]
	FName DelegatePropertyName;//[Offset: 0x8, Size: 0x8]
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ComponentElementCounterInterface.Object

--------------------------------
Class: ComponentElementHierarchyInterface.Object

--------------------------------
Class: ComponentElementObjectInterface.Object

--------------------------------
Class: ComponentElementSelectionInterface.Object

--------------------------------
Class: ComponentElementWorldInterface.Object

--------------------------------
Class: ActorComponentInstanceDataTransientOuter.Object

--------------------------------
Class: CompositeCurveTable.CurveTable.Object
	CurveTable*[] ParentTables;//[Offset: 0xa0, Size: 0x10]
	CurveTable*[] OldParentTables;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: CompositeDataTable.DataTable.Object
	DataTable*[] ParentTables;//[Offset: 0xb0, Size: 0x10]
	DataTable*[] OldParentTables;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: ConsoleSettings.Object
	int MaxScrollbackSize;//[Offset: 0x28, Size: 0x4]
	AutoCompleteCommand[] ManualAutoCompleteList;//[Offset: 0x30, Size: 0x10]
	FString[] AutoCompleteMapPaths;//[Offset: 0x40, Size: 0x10]
	float BackgroundOpacityPercentage;//[Offset: 0x50, Size: 0x4]
	bool bOrderTopToBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	bool bDisplayHelpInAutoComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 0x1]
	Color InputColor;//[Offset: 0x58, Size: 0x4]
	Color HistoryColor;//[Offset: 0x5c, Size: 0x4]
	Color AutoCompleteCommandColor;//[Offset: 0x60, Size: 0x4]
	Color AutoCompleteCVarColor;//[Offset: 0x64, Size: 0x4]
	Color AutoCompleteFadedColor;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: AutoCompleteCommand
	FString Command;//[Offset: 0x0, Size: 0x10]
	FString Desc;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ConstraintInstanceBlueprintLibrary.BlueprintFunctionLibrary.Object
	void SetProjectionParams(out ConstraintInstanceAccessor Accessor, bool bEnableProjection, float ProjectionLinearAlpha, float ProjectionAngularAlpha);// 0x2dd158eb6041
	void SetParentDominates(out ConstraintInstanceAccessor Accessor, bool bParentDominates);// 0x2dd058eb6041
	void SetOrientationDriveTwistAndSwing(out ConstraintInstanceAccessor Accessor, bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x2dcf58eb6041
	void SetOrientationDriveSLERP(out ConstraintInstanceAccessor Accessor, bool bEnableSLERP);// 0x2dce58eb6041
	void SetLinearVelocityTarget(out ConstraintInstanceAccessor Accessor, out const Vector InVelTarget);// 0x2dcd58eb6041
	void SetLinearVelocityDrive(out ConstraintInstanceAccessor Accessor, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x2dcc58eb6041
	void SetLinearSoftLimitParams(out ConstraintInstanceAccessor Accessor, bool bSoftLinearLimit, float LinearLimitStiffness, float LinearLimitDamping, float LinearLimitRestitution, float LinearLimitContactDistance);// 0x2dcb58eb6041
	void SetLinearPositionTarget(out ConstraintInstanceAccessor Accessor, out const Vector InPosTarget);// 0x2dca58eb6041
	void SetLinearPositionDrive(out ConstraintInstanceAccessor Accessor, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x2dc958eb6041
	void SetLinearPlasticity(out ConstraintInstanceAccessor Accessor, bool bLinearPlasticity, float LinearPlasticityThreshold, byte PlasticityType);// 0x2dc858eb6041
	void SetLinearLimits(out ConstraintInstanceAccessor Accessor, byte XMotion, byte YMotion, byte ZMotion, float Limit);// 0x2dc758eb6041
	void SetLinearDriveParams(out ConstraintInstanceAccessor Accessor, float PositionStrength, float VelocityStrength, float InForceLimit);// 0x2dc658eb6041
	void SetLinearBreakable(out ConstraintInstanceAccessor Accessor, bool bLinearBreakable, float LinearBreakThreshold);// 0x2dc558eb6041
	void SetDisableCollision(out ConstraintInstanceAccessor Accessor, bool bDisableCollision);// 0x2dc458eb6041
	void SetContactTransferScale(out ConstraintInstanceAccessor Accessor, float ContactTransferScale);// 0x2dc358eb6041
	void SetAngularVelocityTarget(out ConstraintInstanceAccessor Accessor, out const Vector InVelTarget);// 0x2dc258eb6041
	void SetAngularVelocityDriveTwistAndSwing(out ConstraintInstanceAccessor Accessor, bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x2dc158eb6041
	void SetAngularVelocityDriveSLERP(out ConstraintInstanceAccessor Accessor, bool bEnableSLERP);// 0x2dc058eb6041
	void SetAngularSoftTwistLimitParams(out ConstraintInstanceAccessor Accessor, bool bSoftTwistLimit, float TwistLimitStiffness, float TwistLimitDamping, float TwistLimitRestitution, float TwistLimitContactDistance);// 0x2dbf58eb6041
	void SetAngularSoftSwingLimitParams(out ConstraintInstanceAccessor Accessor, bool bSoftSwingLimit, float SwingLimitStiffness, float SwingLimitDamping, float SwingLimitRestitution, float SwingLimitContactDistance);// 0x2dbe58eb6041
	void SetAngularPlasticity(out ConstraintInstanceAccessor Accessor, bool bAngularPlasticity, float AngularPlasticityThreshold);// 0x2dbd58eb6041
	void SetAngularOrientationTarget(out ConstraintInstanceAccessor Accessor, out const Rotator InPosTarget);// 0x2dbc58eb6041
	void SetAngularLimits(out ConstraintInstanceAccessor Accessor, byte Swing1MotionType, float Swing1LimitAngle, byte Swing2MotionType, float Swing2LimitAngle, byte TwistMotionType, float TwistLimitAngle);// 0x2dbb58eb6041
	void SetAngularDriveParams(out ConstraintInstanceAccessor Accessor, float PositionStrength, float VelocityStrength, float InForceLimit);// 0x2dfc58eb6041
	void SetAngularDriveMode(out ConstraintInstanceAccessor Accessor, byte DriveMode);// 0x2db958eb6041
	void SetAngularBreakable(out ConstraintInstanceAccessor Accessor, bool bAngularBreakable, float AngularBreakThreshold);// 0x2db858eb6041
	void GetProjectionParams(out ConstraintInstanceAccessor Accessor, out bool bEnableProjection, out float ProjectionLinearAlpha, out float ProjectionAngularAlpha);// 0x2db758eb6041
	bool GetParentDominates(out ConstraintInstanceAccessor Accessor);// 0x2db658eb6041
	void GetOrientationDriveTwistAndSwing(out ConstraintInstanceAccessor Accessor, out bool bOutEnableTwistDrive, out bool bOutEnableSwingDrive);// 0x2db558eb6041
	void GetOrientationDriveSLERP(out ConstraintInstanceAccessor Accessor, out bool bOutEnableSLERP);// 0x2db458eb6041
	void GetLinearVelocityTarget(out ConstraintInstanceAccessor Accessor, out Vector OutVelTarget);// 0x2db358eb6041
	void GetLinearVelocityDrive(out ConstraintInstanceAccessor Accessor, out bool bOutEnableDriveX, out bool bOutEnableDriveY, out bool bOutEnableDriveZ);// 0x2db258eb6041
	void GetLinearSoftLimitParams(out ConstraintInstanceAccessor Accessor, out bool bSoftLinearLimit, out float LinearLimitStiffness, out float LinearLimitDamping, out float LinearLimitRestitution, out float LinearLimitContactDistance);// 0x2db158eb6041
	void GetLinearPositionTarget(out ConstraintInstanceAccessor Accessor, out Vector OutPosTarget);// 0x2db058eb6041
	void GetLinearPositionDrive(out ConstraintInstanceAccessor Accessor, out bool bOutEnableDriveX, out bool bOutEnableDriveY, out bool bOutEnableDriveZ);// 0x2daf58eb6041
	void GetLinearPlasticity(out ConstraintInstanceAccessor Accessor, out bool bLinearPlasticity, out float LinearPlasticityThreshold, out byte PlasticityType);// 0x2dae58eb6041
	void GetLinearLimits(out ConstraintInstanceAccessor Accessor, out byte XMotion, out byte YMotion, out byte ZMotion, out float Limit);// 0x2dad58eb6041
	void GetLinearDriveParams(out ConstraintInstanceAccessor Accessor, out float OutPositionStrength, out float OutVelocityStrength, out float OutForceLimit);// 0x2dac58eb6041
	void GetLinearBreakable(out ConstraintInstanceAccessor Accessor, out bool bLinearBreakable, out float LinearBreakThreshold);// 0x2dab58eb6041
	bool GetDisableCollsion(out ConstraintInstanceAccessor Accessor);// 0x2daa58eb6041
	void GetContactTransferScale(out ConstraintInstanceAccessor Accessor, out float ContactTransferScale);// 0x2da958eb6041
	void GetAttachedBodyNames(out ConstraintInstanceAccessor Accessor, out FName ParentBody, out FName ChildBody);// 0x2da858eb6041
	void GetAngularVelocityTarget(out ConstraintInstanceAccessor Accessor, out Vector OutVelTarget);// 0x2da758eb6041
	void GetAngularVelocityDriveTwistAndSwing(out ConstraintInstanceAccessor Accessor, out bool bOutEnableTwistDrive, out bool bOutEnableSwingDrive);// 0x2da658eb6041
	void GetAngularVelocityDriveSLERP(out ConstraintInstanceAccessor Accessor, out bool bOutEnableSLERP);// 0x2da558eb6041
	void GetAngularSoftTwistLimitParams(out ConstraintInstanceAccessor Accessor, out bool bSoftTwistLimit, out float TwistLimitStiffness, out float TwistLimitDamping, out float TwistLimitRestitution, out float TwistLimitContactDistance);// 0x2da458eb6041
	void GetAngularSoftSwingLimitParams(out ConstraintInstanceAccessor Accessor, out bool bSoftSwingLimit, out float SwingLimitStiffness, out float SwingLimitDamping, out float SwingLimitRestitution, out float SwingLimitContactDistance);// 0x2da358eb6041
	void GetAngularPlasticity(out ConstraintInstanceAccessor Accessor, out bool bAngularPlasticity, out float AngularPlasticityThreshold);// 0x2da258eb6041
	void GetAngularOrientationTarget(out ConstraintInstanceAccessor Accessor, out Rotator OutPosTarget);// 0x2da158eb6041
	void GetAngularLimits(out ConstraintInstanceAccessor Accessor, out byte Swing1MotionType, out float Swing1LimitAngle, out byte Swing2MotionType, out float Swing2LimitAngle, out byte TwistMotionType, out float TwistLimitAngle);// 0x2da058eb6041
	void GetAngularDriveParams(out ConstraintInstanceAccessor Accessor, out float OutPositionStrength, out float OutVelocityStrength, out float OutForceLimit);// 0x2d9f58eb6041
	void GetAngularDriveMode(out ConstraintInstanceAccessor Accessor, out byte OutDriveMode);// 0x2d9e58eb6041
	void GetAngularBreakable(out ConstraintInstanceAccessor Accessor, out bool bAngularBreakable, out float AngularBreakThreshold);// 0x2d9d58eb6041
	void CopyParams(out ConstraintInstanceAccessor Accessor, out ConstraintInstanceAccessor SourceAccessor, bool bKeepPosition, bool bKeepRotation);// 0x2d9c58eb6041

--------------------------------
Class: ControlChannel.Channel.Object

--------------------------------
Class: StreamingSettings.DeveloperSettings.Object
	bool AsyncLoadingThreadEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool WarnIfTimeLimitExceeded;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	float TimeLimitExceededMultiplier;//[Offset: 0x3c, Size: 0x4]
	float TimeLimitExceededMinTime;//[Offset: 0x40, Size: 0x4]
	int MinBulkDataSizeForAsyncLoading;//[Offset: 0x44, Size: 0x4]
	bool UseBackgroundLevelStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool AsyncLoadingUseFullTimeLimit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	float AsyncLoadingTimeLimit;//[Offset: 0x4c, Size: 0x4]
	float PriorityAsyncLoadingExtraTime;//[Offset: 0x50, Size: 0x4]
	float LevelStreamingActorsUpdateTimeLimit;//[Offset: 0x54, Size: 0x4]
	float PriorityLevelStreamingActorsUpdateExtraTime;//[Offset: 0x58, Size: 0x4]
	int LevelStreamingComponentsRegistrationGranularity;//[Offset: 0x5c, Size: 0x4]
	int LevelStreamingAddPrimitiveGranularity;//[Offset: 0x60, Size: 0x4]
	float LevelStreamingUnregisterComponentsTimeLimit;//[Offset: 0x64, Size: 0x4]
	int LevelStreamingComponentsUnregistrationGranularity;//[Offset: 0x68, Size: 0x4]
	bool FlushStreamingOnExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	bool EventDrivenLoaderEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1]

--------------------------------
Class: GarbageCollectionSettings.DeveloperSettings.Object
	float TimeBetweenPurgingPendingKillObjects;//[Offset: 0x38, Size: 0x4]
	bool FlushStreamingOnGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool AllowParallelGC;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool IncrementalBeginDestroyEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool MultithreadedDestructionEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool CreateGCClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool AssetClusteringEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	bool ActorClusteringEnabled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]
	bool BlueprintClusteringEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	bool UseDisregardForGCOnDedicatedServers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool VerifyGCObjectNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool VerifyUObjectsAreNotFGCObjects;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool PendingKillEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	int MinGCClusterSize;//[Offset: 0x40, Size: 0x4]
	int NumRetriesBeforeForcingGC;//[Offset: 0x44, Size: 0x4]
	int MaxObjectsNotConsideredByGC;//[Offset: 0x48, Size: 0x4]
	int SizeOfPermanentObjectPool;//[Offset: 0x4c, Size: 0x4]
	int MaxObjectsInGame;//[Offset: 0x50, Size: 0x4]
	int MaxObjectsInEditor;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: CullDistanceVolume.Volume.Brush.Actor.Object
	CullDistanceSizePair[] CullDistances;//[Offset: 0x2b0, Size: 0x10]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c0, Size: 0x1]

--------------------------------
Class: CullDistanceSizePair
	float Size;//[Offset: 0x0, Size: 0x4]
	float CullDistance;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: CurveEdPresetCurve.Object

--------------------------------
Class: AnimationCurveIdentifierExtensions.BlueprintFunctionLibrary.Object
	bool IsValid(out AnimationCurveIdentifier Identifier);// 0x2dd758eb6041
	enum GetType(out AnimationCurveIdentifier Identifier);// 0x2dd658eb6041
	FName GetName(out AnimationCurveIdentifier Identifier);// 0x2dd558eb6041

--------------------------------
Class: AnimationCurveIdentifier

--------------------------------
Class: CurveLinearColorAtlas.Texture2D.Texture.StreamableRenderAsset.Object
	uint32 TextureSize;//[Offset: 0x2a8, Size: 0x4]
	bool bSquareResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ac, Size: 0x1]
	uint32 TextureHeight;//[Offset: 0x2b0, Size: 0x4]
	CurveLinearColor*[] GradientCurves;//[Offset: 0x2b8, Size: 0x10]
	bool GetCurvePosition(CurveLinearColor* InCurve, out float Position);// 0x2ddd58eb6041

--------------------------------
Class: CurveSourceInterface.Interface.Object
	float GetCurveValue(FName CurveName);// 0x2de058eb6041
	void GetCurves(out NamedCurveValue[] OutValues);// 0x2ddf58eb6041
	FName GetBindingName();// 0x2dde58eb6041

--------------------------------
Class: NamedCurveValue
	FName Name;//[Offset: 0x0, Size: 0x8]
	float Value;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: DataDrivenCVarEngineSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	delegate OnDataDrivenCVarDelegate;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: DataDrivenConsoleVariableSettings.DeveloperSettings.Object
	DataDrivenConsoleVariable[] CVarsArray;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: DataDrivenConsoleVariable
	enum Type;//[Offset: 0x0, Size: 0x1]
	FString Name;//[Offset: 0x8, Size: 0x10]
	FString ToolTip;//[Offset: 0x18, Size: 0x10]
	float DefaultValueFloat;//[Offset: 0x28, Size: 0x4]
	int DefaultValueInt;//[Offset: 0x2c, Size: 0x4]
	bool DefaultValueBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: DataLayerSubsystem.WorldSubsystem.Subsystem.Object
	delegate OnDataLayerRuntimeStateChanged;//[Offset: 0x30, Size: 0x10]
	void SetDataLayerStateByLabel(out const FName InDataLayerLabel, enum InState);// 0x2dfb58eb6041
	void SetDataLayerState(out const ActorDataLayer InDataLayer, enum InState);// 0x2dfa58eb6041
	void SetDataLayerRuntimeStateByLabel(out const FName InDataLayerLabel, enum InState, bool bInIsRecursive);// 0x2df958eb6041
	void SetDataLayerRuntimeState(out const ActorDataLayer InDataLayer, enum InState, bool bInIsRecursive);// 0x2df858eb6041
	<FName> GetLoadedDataLayerNames();// 0x2df758eb6041
	enum GetDataLayerStateByLabel(out const FName InDataLayerLabel);// 0x2df658eb6041
	enum GetDataLayerState(out const ActorDataLayer InDataLayer);// 0x2df558eb6041
	enum GetDataLayerRuntimeStateByLabel(out const FName InDataLayerLabel);// 0x2df458eb6041
	enum GetDataLayerRuntimeState(out const ActorDataLayer InDataLayer);// 0x2df358eb6041
	DataLayer* GetDataLayerFromName(FName InDataLayerName);// 0x2df258eb6041
	DataLayer* GetDataLayerFromLabel(FName InDataLayerLabel);// 0x2df158eb6041
	enum GetDataLayerEffectiveRuntimeStateByLabel(out const FName InDataLayerLabel);// 0x2df058eb6041
	enum GetDataLayerEffectiveRuntimeState(out const ActorDataLayer InDataLayer);// 0x2def58eb6041
	DataLayer* GetDataLayer(out const ActorDataLayer InDataLayer);// 0x2dee58eb6041
	<FName> GetActiveDataLayerNames();// 0x2ded58eb6041

--------------------------------
Class: DataTableFunctionLibrary.BlueprintFunctionLibrary.Object
	void GetDataTableRowNames(DataTable* Table, out FName[] OutRowNames);// 0x2e0058eb6041
	bool GetDataTableRowFromName(DataTable* Table, FName RowName, out TableRowBase OutRow);// 0x2dff58eb6041
	FString[] GetDataTableColumnAsString(const DataTable* DataTable, FName PropertyName);// 0x2dfe58eb6041
	void EvaluateCurveTableRow(CurveTable* CurveTable, FName RowName, float InXY, out byte OutResult, out float OutXY, FString ContextString);// 0x2dfd58eb6041
	bool DoesDataTableRowExist(DataTable* Table, FName RowName);// 0x2e3958eb6041

--------------------------------
Class: TableRowBase

--------------------------------
Class: DebugCameraControllerSettings.DeveloperSettings.Object
	DebugCameraControllerSettingsViewModeIndex[] CycleViewModes;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: DebugCameraControllerSettingsViewModeIndex
	byte ViewModeIndex;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: DebugCameraHUD.HUD.Actor.Object

--------------------------------
Class: DebugDrawComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: DebugDrawService.BlueprintFunctionLibrary.Object

--------------------------------
Class: DecalActor.Actor.Object
	DecalComponent* Decal;//[Offset: 0x278, Size: 0x8]
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x2e2758eb6041
	MaterialInterface* GetDecalMaterial();// 0x2e2658eb6041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x2e2558eb6041

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x2b0, Size: 0x8]
	int SortOrder;//[Offset: 0x2b8, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x2bc, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x2c0, Size: 0x4]
	float FadeDuration;//[Offset: 0x2c4, Size: 0x4]
	float FadeInDuration;//[Offset: 0x2c8, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x2cc, Size: 0x4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1]
	Vector DecalSize;//[Offset: 0x2d8, Size: 0x18]
	void SetSortOrder(int Value);// 0x2e3258eb6041
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x2e3158eb6041
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x2e3058eb6041
	void SetFadeIn(float StartDelay, float Duaration);// 0x2e2f58eb6041
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x2e2e58eb6041
	float GetFadeStartDelay();// 0x2e2d58eb6041
	float GetFadeInStartDelay();// 0x2e2c58eb6041
	float GetFadeInDuration();// 0x2e2b58eb6041
	float GetFadeDuration();// 0x2e2a58eb6041
	MaterialInterface* GetDecalMaterial();// 0x2e2958eb6041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x2e2858eb6041

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x160, Size: 0x4]
	float Acceleration;//[Offset: 0x164, Size: 0x4]
	float Deceleration;//[Offset: 0x168, Size: 0x4]
	float TurningBoost;//[Offset: 0x16c, Size: 0x4]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1]

--------------------------------
Class: DemoNetConnection.NetConnection.Player.Object

--------------------------------
Class: PendingNetGame.Object
	NetDriver* NetDriver;//[Offset: 0x30, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: DemoPendingNetGame.PendingNetGame.Object

--------------------------------
Class: DestructibleInterface.Interface.Object

--------------------------------
Class: DeviceProfileFragment.Object
	FString[] CVars;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: DialogueSoundWaveProxy.SoundBase.Object

--------------------------------
Class: DialogueVoice.Object
	byte Gender;//[Offset: 0x28, Size: 0x1]
	byte Plurality;//[Offset: 0x29, Size: 0x1]
	Guid LocalizationGUID;//[Offset: 0x2c, Size: 0x10]

--------------------------------
Class: DialogueWave.Object
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bOverride_SubtitleOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	FString SpokenText;//[Offset: 0x30, Size: 0x10]
	FString SubtitleOverride;//[Offset: 0x40, Size: 0x10]
	DialogueContextMapping[] ContextMappings;//[Offset: 0x50, Size: 0x10]
	Guid LocalizationGUID;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: DialogueContextMapping
	DialogueContext Context;//[Offset: 0x0, Size: 0x18]
	SoundWave* SoundWave;//[Offset: 0x18, Size: 0x8]
	FString LocalizationKeyFormat;//[Offset: 0x20, Size: 0x10]
	DialogueSoundWaveProxy* Proxy;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: DialogueContext
	DialogueVoice* Speaker;//[Offset: 0x0, Size: 0x8]
	DialogueVoice*[] Targets;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x278, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	void ToggleEnabled();// 0x2e4458eb6041
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x2e4358eb6041
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x2e4258eb6041
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x2e4158eb6041
	void SetLightColor(LinearColor NewLightColor);// 0x2e4058eb6041
	void SetEnabled(bool bSetEnabled);// 0x2e3f58eb6041
	void SetCastShadows(bool bNewValue);// 0x2e3e58eb6041
	void SetBrightness(float NewBrightness);// 0x2e3d58eb6041
	void SetAffectTranslucentLighting(bool bNewValue);// 0x2e3c58eb6041
	void OnRep_bEnabled();// 0x2e3b58eb6041
	bool IsEnabled();// 0x2e3a58eb6041
	LinearColor GetLightColor();// 0x2e7b58eb6041
	float GetBrightness();// 0x2e3858eb6041

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: DistributionFloatConstant.DistributionFloat.Distribution.Object
	float Constant;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: DistributionFloatConstantCurve.DistributionFloat.Distribution.Object
	InterpCurveFloat ConstantCurve;//[Offset: 0x38, Size: 0x18]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object
	FName ParameterName;//[Offset: 0x38, Size: 0x8]
	float MinInput;//[Offset: 0x40, Size: 0x4]
	float MaxInput;//[Offset: 0x44, Size: 0x4]
	float MinOutput;//[Offset: 0x48, Size: 0x4]
	float MaxOutput;//[Offset: 0x4c, Size: 0x4]
	byte ParamMode;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: DistributionFloatParticleParameter.DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object

--------------------------------
Class: DistributionFloatUniform.DistributionFloat.Distribution.Object
	float Min;//[Offset: 0x34, Size: 0x4]
	float Max;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: DistributionFloatUniformCurve.DistributionFloat.Distribution.Object
	InterpCurveVector2D ConstantCurve;//[Offset: 0x38, Size: 0x18]

--------------------------------
Class: InterpCurveVector2D
	InterpCurvePointVector2D[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector2D
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector2D OutVal;//[Offset: 0x8, Size: 0x10]
	Vector2D ArriveTangent;//[Offset: 0x18, Size: 0x10]
	Vector2D LeaveTangent;//[Offset: 0x28, Size: 0x10]
	byte InterpMode;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: DistributionVectorConstant.DistributionVector.Distribution.Object
	Vector Constant;//[Offset: 0x38, Size: 0x18]
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	byte LockedAxes;//[Offset: 0x51, Size: 0x1]

--------------------------------
Class: DistributionVectorConstantCurve.DistributionVector.Distribution.Object
	InterpCurveVector ConstantCurve;//[Offset: 0x38, Size: 0x18]
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	byte LockedAxes;//[Offset: 0x51, Size: 0x1]

--------------------------------
Class: DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object
	FName ParameterName;//[Offset: 0x54, Size: 0x8]
	Vector MinInput;//[Offset: 0x60, Size: 0x18]
	Vector MaxInput;//[Offset: 0x78, Size: 0x18]
	Vector MinOutput;//[Offset: 0x90, Size: 0x18]
	Vector MaxOutput;//[Offset: 0xa8, Size: 0x18]
	byte ParamModes;//[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: DistributionVectorParticleParameter.DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object

--------------------------------
Class: DistributionVectorUniform.DistributionVector.Distribution.Object
	Vector Max;//[Offset: 0x38, Size: 0x18]
	Vector Min;//[Offset: 0x50, Size: 0x18]
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	byte LockedAxes;//[Offset: 0x69, Size: 0x1]
	byte MirrorFlags;//[Offset: 0x6a, Size: 0x1]
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 0x1]

--------------------------------
Class: DistributionVectorUniformCurve.DistributionVector.Distribution.Object
	InterpCurveTwoVectors ConstantCurve;//[Offset: 0x38, Size: 0x18]
	bool bLockAxes1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bLockAxes2;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	byte LockedAxes;//[Offset: 0x51, Size: 0x1]
	byte MirrorFlags;//[Offset: 0x53, Size: 0x1]
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56, Size: 0x1]

--------------------------------
Class: InterpCurveTwoVectors
	InterpCurvePointTwoVectors[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointTwoVectors
	float InVal;//[Offset: 0x0, Size: 0x4]
	TwoVectors OutVal;//[Offset: 0x8, Size: 0x30]
	TwoVectors ArriveTangent;//[Offset: 0x38, Size: 0x30]
	TwoVectors LeaveTangent;//[Offset: 0x68, Size: 0x30]
	byte InterpMode;//[Offset: 0x98, Size: 0x1]

--------------------------------
Class: TwoVectors
	Vector v1;//[Offset: 0x0, Size: 0x18]
	Vector v2;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: DocumentationActor.Actor.Object

--------------------------------
Class: DPICustomScalingRule.Object

--------------------------------
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: EdGraph.Object
	class EdGraphSchema* Schema;//[Offset: 0x28, Size: 0x8]
	EdGraphNode*[] Nodes;//[Offset: 0x30, Size: 0x10]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bAllowDeletion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	bool bAllowRenaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: EdGraphSchema.Object

--------------------------------
Class: EdGraphNode.Object
	EdGraphPin_Deprecated*[] DeprecatedPins;//[Offset: 0x38, Size: 0x10]
	int NodePosX;//[Offset: 0x48, Size: 0x4]
	int NodePosY;//[Offset: 0x4c, Size: 0x4]
	int NodeWidth;//[Offset: 0x50, Size: 0x4]
	int NodeHeight;//[Offset: 0x54, Size: 0x4]
	byte AdvancedPinDisplay;//[Offset: 0x58, Size: 0x1]
	enum EnabledState;//[Offset: 0x59, Size: 0x1]
	bool bDisplayAsDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 0x1]
	bool bUserSetEnabledState;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 0x1]
	bool bHasCompilerMessage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 0x1]
	FString NodeComment;//[Offset: 0x60, Size: 0x10]
	int ErrorType;//[Offset: 0x70, Size: 0x4]
	FString ErrorMsg;//[Offset: 0x78, Size: 0x10]
	Guid NodeGuid;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: EdGraphPin_Deprecated.Object
	FString PinName;//[Offset: 0x28, Size: 0x10]
	FString PinToolTip;//[Offset: 0x38, Size: 0x10]
	byte Direction;//[Offset: 0x48, Size: 0x1]
	EdGraphPinType PinType;//[Offset: 0x50, Size: 0x58]
	FString DefaultValue;//[Offset: 0xa8, Size: 0x10]
	FString AutogeneratedDefaultValue;//[Offset: 0xb8, Size: 0x10]
	Object* DefaultObject;//[Offset: 0xc8, Size: 0x8]
	FText DefaultTextValue;//[Offset: 0xd0, Size: 0x18]
	EdGraphPin_Deprecated*[] LinkedTo;//[Offset: 0xe8, Size: 0x10]
	EdGraphPin_Deprecated*[] SubPins;//[Offset: 0xf8, Size: 0x10]
	EdGraphPin_Deprecated* ParentPin;//[Offset: 0x108, Size: 0x8]
	EdGraphPin_Deprecated* ReferencePassThroughConnection;//[Offset: 0x110, Size: 0x8]

--------------------------------
Class: EdGraphPinType
	FName PinCategory;//[Offset: 0x0, Size: 0x8]
	FName PinSubCategory;//[Offset: 0x8, Size: 0x8]
	Object* PinSubCategoryObject;//[Offset: 0x10, Size: 0x8]
	SimpleMemberReference PinSubCategoryMemberReference;//[Offset: 0x18, Size: 0x20]
	EdGraphTerminalType PinValueType;//[Offset: 0x38, Size: 0x1c]
	enum ContainerType;//[Offset: 0x54, Size: 0x1]
	bool bIsArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 0x1]
	bool bIsReference;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 0x1]
	bool bIsConst;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 0x1]
	bool bIsWeakPointer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 0x1]
	bool bIsUObjectWrapper;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55, Size: 0x1]
	bool bSerializeAsSinglePrecisionFloat;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x55, Size: 0x1]

--------------------------------
Class: EdGraphTerminalType
	FName TerminalCategory;//[Offset: 0x0, Size: 0x8]
	FName TerminalSubCategory;//[Offset: 0x8, Size: 0x8]
	Object* TerminalSubCategoryObject;//[Offset: 0x10, Size: 0x8]
	bool bTerminalIsConst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bTerminalIsWeakPointer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	bool bTerminalIsUObjectWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: GraphNodeContextMenuContext.Object
	Blueprint* Blueprint;//[Offset: 0x28, Size: 0x8]
	EdGraph* Graph;//[Offset: 0x30, Size: 0x8]
	EdGraphNode* Node;//[Offset: 0x38, Size: 0x8]
	bool bIsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: EdGraphNode_Documentation.EdGraphNode.Object
	FString Link;//[Offset: 0x98, Size: 0x10]
	FString Excerpt;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: ViewModeUtils.Object

--------------------------------
Class: EngineBaseTypes.Object

--------------------------------
Class: EngineElementsLibrary.BlueprintFunctionLibrary.Object

--------------------------------
Class: HandlerComponentFactory.Object

--------------------------------
Class: EngineHandlerComponentFactory.HandlerComponentFactory.Object

--------------------------------
Class: EngineMessage.LocalMessage.Object
	FString FailedPlaceMessage;//[Offset: 0x28, Size: 0x10]
	FString MaxedOutMessage;//[Offset: 0x38, Size: 0x10]
	FString EnteredMessage;//[Offset: 0x48, Size: 0x10]
	FString LeftMessage;//[Offset: 0x58, Size: 0x10]
	FString GlobalNameChange;//[Offset: 0x68, Size: 0x10]
	FString SpecEnteredMessage;//[Offset: 0x78, Size: 0x10]
	FString NewPlayerMessage;//[Offset: 0x88, Size: 0x10]
	FString NewSpecMessage;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: EngineTypes.Object

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x278, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	void OnRep_bEnabled();// 0x2e8958eb6041

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x2b0, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x2b4, Size: 0x4]
	ExponentialHeightFogData SecondFogData;//[Offset: 0x2b8, Size: 0xc]
	LinearColor FogInscatteringColor;//[Offset: 0x2c4, Size: 0x10]
	LinearColor FogInscatteringLuminance;//[Offset: 0x2d4, Size: 0x10]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x2e8, Size: 0x8]
	float InscatteringColorCubemapAngle;//[Offset: 0x2f0, Size: 0x4]
	LinearColor InscatteringTextureTint;//[Offset: 0x2f4, Size: 0x10]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x304, Size: 0x4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x308, Size: 0x4]
	float DirectionalInscatteringExponent;//[Offset: 0x30c, Size: 0x4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x310, Size: 0x4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x314, Size: 0x10]
	LinearColor DirectionalInscatteringLuminance;//[Offset: 0x324, Size: 0x10]
	float FogMaxOpacity;//[Offset: 0x334, Size: 0x4]
	float StartDistance;//[Offset: 0x338, Size: 0x4]
	float FogCutoffDistance;//[Offset: 0x33c, Size: 0x4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x344, Size: 0x4]
	Color VolumetricFogAlbedo;//[Offset: 0x348, Size: 0x4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x34c, Size: 0x10]
	float VolumetricFogExtinctionScale;//[Offset: 0x35c, Size: 0x4]
	float VolumetricFogDistance;//[Offset: 0x360, Size: 0x4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x364, Size: 0x4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x2e9d58eb6041
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x2ede58eb6041
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x2e9b58eb6041
	void SetVolumetricFogDistance(float NewValue);// 0x2e9a58eb6041
	void SetVolumetricFogAlbedo(Color NewValue);// 0x2e9958eb6041
	void SetVolumetricFog(bool bNewValue);// 0x2e9858eb6041
	void SetStartDistance(float Value);// 0x2e9758eb6041
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x2e9658eb6041
	void SetInscatteringTextureTint(LinearColor Value);// 0x2e9558eb6041
	void SetInscatteringColorCubemapAngle(float Value);// 0x2e9458eb6041
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x2e9358eb6041
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x2e9258eb6041
	void SetFogMaxOpacity(float Value);// 0x2e9158eb6041
	void SetFogInscatteringColor(LinearColor Value);// 0x2e9058eb6041
	void SetFogHeightFalloff(float Value);// 0x2e8f58eb6041
	void SetFogDensity(float Value);// 0x2e8e58eb6041
	void SetFogCutoffDistance(float Value);// 0x2e8d58eb6041
	void SetDirectionalInscatteringStartDistance(float Value);// 0x2e8c58eb6041
	void SetDirectionalInscatteringExponent(float Value);// 0x2e8b58eb6041
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x2e8a58eb6041

--------------------------------
Class: ExponentialHeightFogData
	float FogDensity;//[Offset: 0x0, Size: 0x4]
	float FogHeightFalloff;//[Offset: 0x4, Size: 0x4]
	float FogHeightOffset;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: FontFace.Object
	FString SourceFilename;//[Offset: 0x30, Size: 0x10]
	enum Hinting;//[Offset: 0x40, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x41, Size: 0x1]
	enum LayoutMethod;//[Offset: 0x42, Size: 0x1]

--------------------------------
Class: FontImportOptions.Object
	FontImportOptionsData Data;//[Offset: 0x28, Size: 0xa8]

--------------------------------
Class: ForceFeedbackAttenuation.Object
	ForceFeedbackAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0xc8]

--------------------------------
Class: ForceFeedbackAttenuationSettings.BaseAttenuationSettings

--------------------------------
Class: ForceFeedbackComponent.SceneComponent.ActorComponent.Object
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x2b0, Size: 0x8]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8, Size: 0x1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b8, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b8, Size: 0x1]
	float IntensityMultiplier;//[Offset: 0x2bc, Size: 0x4]
	ForceFeedbackAttenuation* AttenuationSettings;//[Offset: 0x2c0, Size: 0x8]
	ForceFeedbackAttenuationSettings AttenuationOverrides;//[Offset: 0x2c8, Size: 0xc8]
	delegate OnForceFeedbackFinished;//[Offset: 0x390, Size: 0x10]
	void Stop();// 0x2ea658eb6041
	void SetIntensityMultiplier(float NewIntensityMultiplier);// 0x2ea558eb6041
	void SetForceFeedbackEffect(ForceFeedbackEffect* NewForceFeedbackEffect);// 0x2ea458eb6041
	void Play(float StartTime);// 0x2ea358eb6041
	bool BP_GetAttenuationSettingsToApply(out ForceFeedbackAttenuationSettings OutAttenuationSettings);// 0x2ea258eb6041
	void AdjustAttenuation(out const ForceFeedbackAttenuationSettings InAttenuationSettings);// 0x2ea158eb6041

--------------------------------
Class: GameEngine.Engine.Object
	float MaxDeltaTime;//[Offset: 0xd88, Size: 0x4]
	float ServerFlushLogInterval;//[Offset: 0xd8c, Size: 0x4]
	GameInstance* GameInstance;//[Offset: 0xd90, Size: 0x8]

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x318, Size: 0x8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 0x1]
	int NumSpectators;//[Offset: 0x324, Size: 0x4]
	int NumPlayers;//[Offset: 0x328, Size: 0x4]
	int NumBots;//[Offset: 0x32c, Size: 0x4]
	float MinRespawnDelay;//[Offset: 0x330, Size: 0x4]
	int NumTravellingPlayers;//[Offset: 0x334, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x338, Size: 0x8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x340, Size: 0x10]
	float InactivePlayerStateLifeSpan;//[Offset: 0x350, Size: 0x4]
	int MaxInactivePlayers;//[Offset: 0x354, Size: 0x4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	void StartMatch();// 0x261d58eb6041
	void Say(FString Msg);// 0x261c58eb6041
	void RestartGame();// 0x261b58eb6041
	bool ReadyToStartMatch();// 0x261a58eb6041
	bool ReadyToEndMatch();// 0x261958eb6041
	void K2_OnSetMatchState(FName NewState);// 0x261858eb6041
	bool IsMatchInProgress();// 0x261758eb6041
	FName GetMatchState();// 0x261658eb6041
	void EndMatch();// 0x261558eb6041
	void AbortMatch();// 0x261458eb6041

--------------------------------
Class: GameplayStatics.BlueprintFunctionLibrary.Object
	void UnRetainAllSoundsInSoundClass(SoundClass* InSoundClass);// 0x2f2758eb6041
	void UnloadStreamLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload);// 0x2f2658eb6041
	void UnloadStreamLevel(const Object* WorldContextObject, FName LevelName, LatentActionInfo LatentInfo, bool bShouldBlockOnUnload);// 0x2f2558eb6041
	bool SuggestProjectileVelocity_CustomArc(const Object* WorldContextObject, out Vector OutLaunchVelocity, Vector StartPos, Vector EndPos, float OverrideGravityZ, float ArcParam);// 0x2f2458eb6041
	AudioComponent* SpawnSoundAttached(SoundBase* Sound, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0x2f2358eb6041
	AudioComponent* SpawnSoundAtLocation(const Object* WorldContextObject, SoundBase* Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);// 0x2f2258eb6041
	AudioComponent* SpawnSound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0x2f2158eb6041
	Object* SpawnObject(class Object ObjectClass, Object* Outer);// 0x2f5d58eb6041
	ForceFeedbackComponent* SpawnForceFeedbackAttached(ForceFeedbackEffect* ForceFeedbackEffect, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x2f1f58eb6041
	ForceFeedbackComponent* SpawnForceFeedbackAtLocation(const Object* WorldContextObject, ForceFeedbackEffect* ForceFeedbackEffect, Vector Location, Rotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x2f1e58eb6041
	ParticleSystemComponent* SpawnEmitterAttached(ParticleSystem* EmitterTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, Vector Scale, byte LocationType, bool bAutoDestroy, enum PoolingMethod, bool bAutoActivate);// 0x2f1d58eb6041
	ParticleSystemComponent* SpawnEmitterAtLocation(const Object* WorldContextObject, ParticleSystem* EmitterTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy, enum PoolingMethod, bool bAutoActivateSystem);// 0x2f1c58eb6041
	AudioComponent* SpawnDialogueAttached(DialogueWave* Dialogue, out const DialogueContext Context, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x2f1b58eb6041
	AudioComponent* SpawnDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, bool bAutoDestroy);// 0x2f1a58eb6041
	AudioComponent* SpawnDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy);// 0x2f1958eb6041
	DecalComponent* SpawnDecalAttached(MaterialInterface* DecalMaterial, Vector DecalSize, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, float LifeSpan);// 0x2f1858eb6041
	DecalComponent* SpawnDecalAtLocation(const Object* WorldContextObject, MaterialInterface* DecalMaterial, Vector DecalSize, Vector Location, Rotator Rotation, float LifeSpan);// 0x2f1758eb6041
	void SetWorldOriginLocation(const Object* WorldContextObject, IntVector NewLocation);// 0x2f1658eb6041
	void SetViewportMouseCaptureMode(const Object* WorldContextObject, const enum MouseCaptureMode);// 0x2f1558eb6041
	void SetSubtitlesEnabled(bool bEnabled);// 0x2f1458eb6041
	void SetSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren);// 0x2f1358eb6041
	void SetSoundClassDistanceScale(const Object* WorldContextObject, SoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec);// 0x2f1258eb6041
	void SetPlayerControllerID(PlayerController* Player, int ControllerId);// 0x2f1158eb6041
	void SetMaxAudioChannelsScaled(const Object* WorldContextObject, float MaxChannelCountScale);// 0x2f1058eb6041
	void SetGlobalTimeDilation(const Object* WorldContextObject, float TimeDilation);// 0x2f0f58eb6041
	void SetGlobalPitchModulation(const Object* WorldContextObject, float PitchModulation, float TimeSec);// 0x2f0e58eb6041
	void SetGlobalListenerFocusParameters(const Object* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);// 0x2f0d58eb6041
	bool SetGamePaused(const Object* WorldContextObject, bool bPaused);// 0x2f0c58eb6041
	void SetForceDisableSplitscreen(const Object* WorldContextObject, bool bDisable);// 0x2f0b58eb6041
	void SetEnableWorldRendering(const Object* WorldContextObject, bool bEnable);// 0x2f0a58eb6041
	void SetBaseSoundMix(const Object* WorldContextObject, SoundMix* InSoundMix);// 0x2f0958eb6041
	bool SaveGameToSlot(SaveGame* SaveGameObject, FString SlotName, const int UserIndex);// 0x2f0858eb6041
	void RemovePlayer(PlayerController* Player, bool bDestroyPawn);// 0x2f0758eb6041
	Vector RebaseZeroOriginOntoLocal(Object* WorldContextObject, Vector WorldLocation);// 0x2f0658eb6041
	Vector RebaseLocalOriginOntoZero(Object* WorldContextObject, Vector WorldLocation);// 0x2f0558eb6041
	void PushSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0x2f0458eb6041
	bool ProjectWorldToScreen(PlayerController* Player, out const Vector WorldPosition, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0x2f0358eb6041
	void PrimeSound(SoundBase* InSound);// 0x2f0258eb6041
	void PrimeAllSoundsInSoundClass(SoundClass* InSoundClass);// 0x2f0158eb6041
	void PopSoundMixModifier(const Object* WorldContextObject, SoundMix* InSoundMixModifier);// 0x2f0058eb6041
	void PlayWorldCameraShake(const Object* WorldContextObject, class CameraShakeBase Shake, Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);// 0x2f4158eb6041
	void PlaySoundAtLocation(const Object* WorldContextObject, SoundBase* Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings, SoundConcurrency* ConcurrencySettings, const Actor* OwningActor, InitialActiveSoundParams* InitialParams);// 0x2efe58eb6041
	void PlaySound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, const Actor* OwningActor, bool bIsUISound);// 0x2efd58eb6041
	void PlayDialogueAtLocation(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation* AttenuationSettings);// 0x2efc58eb6041
	void PlayDialogue2D(const Object* WorldContextObject, DialogueWave* Dialogue, out const DialogueContext Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);// 0x2efb58eb6041
	FString ParseOption(FString Options, FString Key);// 0x2efa58eb6041
	void OpenLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, bool bAbsolute, FString Options);// 0x2ef958eb6041
	void OpenLevel(const Object* WorldContextObject, FName LevelName, bool bAbsolute, FString Options);// 0x2ef858eb6041
	HitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, Vector Location, Vector ImpactPoint, Vector Normal, Vector ImpactNormal, PhysicalMaterial* PhysMat, Actor* HitActor, PrimitiveComponent* HitComponent, FName HitBoneName, FName BoneName, int HitItem, int ElementIndex, int FaceIndex, Vector TraceStart, Vector TraceEnd);// 0x2ef758eb6041
	void LoadStreamLevelBySoftObjectPtr(const Object* WorldContextObject, const World* Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo);// 0x2ef658eb6041
	void LoadStreamLevel(const Object* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, LatentActionInfo LatentInfo);// 0x2ef558eb6041
	SaveGame* LoadGameFromSlot(FString SlotName, const int UserIndex);// 0x2ef458eb6041
	bool IsSplitscreenForceDisabled(const Object* WorldContextObject);// 0x2ef358eb6041
	bool IsGamePaused(const Object* WorldContextObject);// 0x2ef258eb6041
	bool HasOption(FString Options, FString InKey);// 0x2ef158eb6041
	bool HasLaunchOption(FString OptionToCheck);// 0x2ef058eb6041
	int GrassOverlappingSphereCount(const Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0x2eef58eb6041
	IntVector GetWorldOriginLocation(const Object* WorldContextObject);// 0x2eee58eb6041
	float GetWorldDeltaSeconds(const Object* WorldContextObject);// 0x2eed58eb6041
	void GetViewProjectionMatrix(MinimalViewInfo DesiredView, out Matrix ViewMatrix, out Matrix ProjectionMatrix, out Matrix ViewProjectionMatrix);// 0x2eec58eb6041
	enum GetViewportMouseCaptureMode(const Object* WorldContextObject);// 0x2eeb58eb6041
	float GetUnpausedTimeSeconds(const Object* WorldContextObject);// 0x2eea58eb6041
	float GetTimeSeconds(const Object* WorldContextObject);// 0x2ee958eb6041
	byte GetSurfaceType(out const HitResult Hit);// 0x2ee858eb6041
	LevelStreaming* GetStreamingLevel(const Object* WorldContextObject, FName PackageName);// 0x2ee758eb6041
	float GetRealTimeSeconds(const Object* WorldContextObject);// 0x2ee658eb6041
	PlayerState* GetPlayerStateFromUniqueNetId(const Object* WorldContextObject, out const UniqueNetIdRepl UniqueId);// 0x2ee558eb6041
	PlayerState* GetPlayerState(const Object* WorldContextObject, int PlayerStateIndex);// 0x2ee458eb6041
	Pawn* GetPlayerPawn(const Object* WorldContextObject, int PlayerIndex);// 0x2ee358eb6041
	int GetPlayerControllerID(PlayerController* Player);// 0x2ee258eb6041
	PlayerController* GetPlayerControllerFromID(const Object* WorldContextObject, int ControllerId);// 0x2ee158eb6041
	PlayerController* GetPlayerController(const Object* WorldContextObject, int PlayerIndex);// 0x2ee058eb6041
	Character* GetPlayerCharacter(const Object* WorldContextObject, int PlayerIndex);// 0x2edf58eb6041
	PlayerCameraManager* GetPlayerCameraManager(const Object* WorldContextObject, int PlayerIndex);// 0x2f2058eb6041
	FString GetPlatformName();// 0x2edd58eb6041
	class Object GetObjectClass(const Object* Object);// 0x2edc58eb6041
	int GetNumPlayerStates(const Object* WorldContextObject);// 0x2edb58eb6041
	int GetNumPlayerControllers(const Object* WorldContextObject);// 0x2eda58eb6041
	int GetNumLocalPlayerControllers(const Object* WorldContextObject);// 0x2ed958eb6041
	int GetMaxAudioChannelCount(const Object* WorldContextObject);// 0x2ed858eb6041
	void GetKeyValue(FString Pair, out FString Key, out FString Value);// 0x2ed758eb6041
	int GetIntOption(FString Options, FString Key, int DefaultValue);// 0x2ed658eb6041
	float GetGlobalTimeDilation(const Object* WorldContextObject);// 0x2ed558eb6041
	GameStateBase* GetGameState(const Object* WorldContextObject);// 0x2ed458eb6041
	GameModeBase* GetGameMode(const Object* WorldContextObject);// 0x2ed358eb6041
	GameInstance* GetGameInstance(const Object* WorldContextObject);// 0x2ed258eb6041
	bool GetEnableWorldRendering(const Object* WorldContextObject);// 0x2ed158eb6041
	ReverbEffect* GetCurrentReverbEffect(const Object* WorldContextObject);// 0x2ed058eb6041
	FString GetCurrentLevelName(const Object* WorldContextObject, bool bRemovePrefixString);// 0x2ecf58eb6041
	bool GetClosestListenerLocation(const Object* WorldContextObject, out const Vector Location, float MaximumRange, const bool bAllowAttenuationOverride, out Vector ListenerPosition);// 0x2ece58eb6041
	float GetAudioTimeSeconds(const Object* WorldContextObject);// 0x2ecd58eb6041
	void GetAllActorsWithTag(const Object* WorldContextObject, FName Tag, out Actor*[] OutActors);// 0x2ecc58eb6041
	void GetAllActorsWithInterface(const Object* WorldContextObject, class Interface Interface, out Actor*[] OutActors);// 0x2ecb58eb6041
	void GetAllActorsOfClassWithTag(const Object* WorldContextObject, class Actor ActorClass, FName Tag, out Actor*[] OutActors);// 0x2eca58eb6041
	void GetAllActorsOfClass(const Object* WorldContextObject, class Actor ActorClass, out Actor*[] OutActors);// 0x2ec958eb6041
	Actor* GetActorOfClass(const Object* WorldContextObject, class Actor ActorClass);// 0x2ec858eb6041
	void GetActorArrayBounds(out const Actor*[] Actors, bool bOnlyCollidingComponents, out Vector Center, out Vector BoxExtent);// 0x2ec758eb6041
	Vector GetActorArrayAverageLocation(out const Actor*[] Actors);// 0x2ec658eb6041
	void GetAccurateRealTime(out int Seconds, out float PartialSeconds);// 0x2ec558eb6041
	void FlushLevelStreaming(const Object* WorldContextObject);// 0x2ec458eb6041
	Actor* FinishSpawningActor(Actor* Actor, out const Transform SpawnTransform);// 0x2ec358eb6041
	Actor* FindNearestActor(Vector Origin, out const Actor*[] ActorsToCheck, out float Distance);// 0x2ec258eb6041
	bool FindCollisionUV(out const HitResult Hit, int UVChannel, out Vector2D UV);// 0x2ec158eb6041
	void EnableLiveStreaming(bool Enable);// 0x2ec058eb6041
	bool DoesSaveGameExist(FString SlotName, const int UserIndex);// 0x2ebf58eb6041
	bool DeprojectScreenToWorld(PlayerController* Player, out const Vector2D ScreenPosition, out Vector WorldPosition, out Vector WorldDirection);// 0x2ebe58eb6041
	bool DeleteGameInSlot(FString SlotName, const int UserIndex);// 0x2eff58eb6041
	void DeactivateReverbEffect(const Object* WorldContextObject, FName TagName);// 0x2ebc58eb6041
	AudioComponent* CreateSound2D(const Object* WorldContextObject, SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);// 0x2ebb58eb6041
	SaveGame* CreateSaveGameObject(class SaveGame SaveGameClass);// 0x2eba58eb6041
	PlayerController* CreatePlayer(const Object* WorldContextObject, int ControllerId, bool bSpawnPlayerController);// 0x2eb958eb6041
	void ClearSoundMixModifiers(const Object* WorldContextObject);// 0x2eb858eb6041
	void ClearSoundMixClassOverride(const Object* WorldContextObject, SoundMix* InSoundMixModifier, SoundClass* InSoundClass, float FadeOutTime);// 0x2eb758eb6041
	void CancelAsyncLoading();// 0x2eb658eb6041
	void BreakHitResult(out const HitResult Hit, out bool bBlockingHit, out bool bInitialOverlap, out float Time, out float Distance, out Vector Location, out Vector ImpactPoint, out Vector Normal, out Vector ImpactNormal, out PhysicalMaterial* PhysMat, out Actor* HitActor, out PrimitiveComponent* HitComponent, out FName HitBoneName, out FName BoneName, out int HitItem, out int ElementIndex, out int FaceIndex, out Vector TraceStart, out Vector TraceEnd);// 0x2eb558eb6041
	bool BlueprintSuggestProjectileVelocity(const Object* WorldContextObject, out Vector TossVelocity, Vector StartLocation, Vector EndLocation, float LaunchSpeed, float OverrideGravityZ, byte TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);// 0x2eb458eb6041
	bool Blueprint_PredictProjectilePath_ByTraceChannel(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0x2eb358eb6041
	bool Blueprint_PredictProjectilePath_ByObjectType(const Object* WorldContextObject, out HitResult OutHit, out Vector[] OutPathPositions, out Vector OutLastTraceDestination, Vector StartPos, Vector LaunchVelocity, bool bTracePath, float ProjectileRadius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);// 0x2eb258eb6041
	bool Blueprint_PredictProjectilePath_Advanced(const Object* WorldContextObject, out const PredictProjectilePathParams PredictParams, out PredictProjectilePathResult PredictResult);// 0x2eb158eb6041
	Actor* BeginSpawningActorFromBlueprint(const Object* WorldContextObject, const Blueprint* Blueprint, out const Transform SpawnTransform, bool bNoCollisionFail);// 0x2eb058eb6041
	Actor* BeginDeferredActorSpawnFromClass(const Object* WorldContextObject, class Actor ActorClass, out const Transform SpawnTransform, enum CollisionHandlingOverride, Actor* Owner);// 0x2eaf58eb6041
	bool AreSubtitlesEnabled();// 0x2eae58eb6041
	bool AreAnyListenersWithinRange(const Object* WorldContextObject, out const Vector Location, float MaximumRange);// 0x2ead58eb6041
	bool ApplyRadialDamageWithFalloff(const Object* WorldContextObject, float BaseDamage, float MinimumDamage, out const Vector Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, byte DamagePreventionChannel);// 0x2eac58eb6041
	bool ApplyRadialDamage(const Object* WorldContextObject, float BaseDamage, out const Vector Origin, float DamageRadius, class DamageType DamageTypeClass, out const Actor*[] IgnoreActors, Actor* DamageCauser, Controller* InstigatedByController, bool bDoFullDamage, byte DamagePreventionChannel);// 0x2eab58eb6041
	float ApplyPointDamage(Actor* DamagedActor, float BaseDamage, out const Vector HitFromDirection, out const HitResult HitInfo, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0x2eaa58eb6041
	float ApplyDamage(Actor* DamagedActor, float BaseDamage, Controller* EventInstigator, Actor* DamageCauser, class DamageType DamageTypeClass);// 0x2ea958eb6041
	void AnnounceAccessibleString(FString AnnouncementString);// 0x2ea858eb6041
	void ActivateReverbEffect(const Object* WorldContextObject, ReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime);// 0x2ea758eb6041

--------------------------------
Class: PredictProjectilePathParams
	Vector StartLocation;//[Offset: 0x0, Size: 0x18]
	Vector LaunchVelocity;//[Offset: 0x18, Size: 0x18]
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float ProjectileRadius;//[Offset: 0x34, Size: 0x4]
	float MaxSimTime;//[Offset: 0x38, Size: 0x4]
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	byte TraceChannel;//[Offset: 0x3d, Size: 0x1]
	byte[] ObjectTypes;//[Offset: 0x40, Size: 0x10]
	Actor*[] ActorsToIgnore;//[Offset: 0x50, Size: 0x10]
	float SimFrequency;//[Offset: 0x60, Size: 0x4]
	float OverrideGravityZ;//[Offset: 0x64, Size: 0x4]
	byte DrawDebugType;//[Offset: 0x68, Size: 0x1]
	float DrawDebugTime;//[Offset: 0x6c, Size: 0x4]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 0x10]
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0x10, Size: 0x38]
	HitResult HitResult;//[Offset: 0x48, Size: 0xe8]

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 0x18]
	Vector Velocity;//[Offset: 0x18, Size: 0x18]
	float Time;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2c4, Size: 0x8]
	FName PreviousMatchState;//[Offset: 0x2cc, Size: 0x8]
	int ElapsedTime;//[Offset: 0x2d4, Size: 0x4]
	void OnRep_MatchState();// 0x262d58eb6041
	void OnRep_ElapsedTime();// 0x262c58eb6041

--------------------------------
Class: SpotLight.Light.Actor.Object
	SpotLightComponent* SpotLightComponent;//[Offset: 0x288, Size: 0x8]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x2f7658eb6041
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x2f7558eb6041

--------------------------------
Class: SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x404, Size: 0x4]
	float OuterConeAngle;//[Offset: 0x408, Size: 0x4]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x358758eb6041
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x358658eb6041

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 0x1]
	float LightFalloffExponent;//[Offset: 0x3f4, Size: 0x4]
	float SourceRadius;//[Offset: 0x3f8, Size: 0x4]
	float SoftSourceRadius;//[Offset: 0x3fc, Size: 0x4]
	float SourceLength;//[Offset: 0x400, Size: 0x4]
	void SetSourceRadius(float bNewValue);// 0x346558eb6041
	void SetSourceLength(float NewValue);// 0x346458eb6041
	void SetSoftSourceRadius(float bNewValue);// 0x346358eb6041
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x346258eb6041

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	enum IntensityUnits;//[Offset: 0x3d9, Size: 0x1]
	float Radius;//[Offset: 0x3dc, Size: 0x4]
	float AttenuationRadius;//[Offset: 0x3e0, Size: 0x4]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x3e4, Size: 0xc]
	void SetIntensityUnits(enum NewIntensityUnits);// 0x339d58eb6041
	void SetAttenuationRadius(float NewRadius);// 0x339c58eb6041
	float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0x339b58eb6041

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: GeneratedMeshAreaLight.SpotLight.Light.Actor.Object

--------------------------------
Class: HapticFeedbackEffect_Buffer.HapticFeedbackEffect_Base.Object
	byte[] Amplitudes;//[Offset: 0x28, Size: 0x10]
	int SampleRate;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: HapticFeedbackEffect_Curve.HapticFeedbackEffect_Base.Object
	HapticFeedbackDetails_Curve HapticDetails;//[Offset: 0x28, Size: 0x110]

--------------------------------
Class: HapticFeedbackDetails_Curve
	RuntimeFloatCurve Frequency;//[Offset: 0x0, Size: 0x88]
	RuntimeFloatCurve Amplitude;//[Offset: 0x88, Size: 0x88]

--------------------------------
Class: HapticFeedbackEffect_SoundWave.HapticFeedbackEffect_Base.Object
	SoundWave* SoundWave;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: HealthSnapshotBlueprintLibrary.BlueprintFunctionLibrary.Object
	void StopPerformanceSnapshots();// 0x2f7958eb6041
	void StartPerformanceSnapshots();// 0x2f7858eb6041
	void LogPerformanceSnapshot(const FString SnapshotTitle, bool bResetStats);// 0x2f7758eb6041

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x5d0, Size: 0x10]
	Matrix[] PerInstancePrevTransform;//[Offset: 0x5e0, Size: 0x10]
	int NumCustomDataFloats;//[Offset: 0x5f0, Size: 0x4]
	float[] PerInstanceSMCustomData;//[Offset: 0x5f8, Size: 0x10]
	int InstancingRandomSeed;//[Offset: 0x608, Size: 0x4]
	InstancedStaticMeshRandomSeed[] AdditionalRandomSeeds;//[Offset: 0x610, Size: 0x10]
	int InstanceStartCullDistance;//[Offset: 0x620, Size: 0x4]
	int InstanceEndCullDistance;//[Offset: 0x624, Size: 0x4]
	int[] InstanceReorderTable;//[Offset: 0x628, Size: 0x10]
	int NumPendingLightmaps;//[Offset: 0x6f0, Size: 0x4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x6f8, Size: 0x10]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x27a058eb6041
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);// 0x279f58eb6041
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x279e58eb6041
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x279d58eb6041
	bool RemoveInstance(int InstanceIndex);// 0x279c58eb6041
	bool IsValidInstance(int InstanceIndex);// 0x279b58eb6041
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x279a58eb6041
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x279958eb6041
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x279858eb6041
	int GetInstanceCount();// 0x279758eb6041
	void ClearInstances();// 0x279658eb6041
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x279558eb6041
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x279458eb6041
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x279358eb6041
	int[] AddInstances(out const Transform[] InstanceTransforms, bool bShouldReturnIndices, bool bWorldSpace);// 0x279258eb6041
	int AddInstance(out const Transform InstanceTransform, bool bWorldSpace);// 0x279158eb6041

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x80]

--------------------------------
Class: InstancedStaticMeshRandomSeed
	int StartInstanceIndex;//[Offset: 0x0, Size: 0x4]
	int RandomSeed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bUseTranslatedInstanceSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x718, Size: 0x1]
	Vector TranslatedInstanceSpaceOrigin;//[Offset: 0x720, Size: 0x18]
	int[] SortedInstances;//[Offset: 0x738, Size: 0x10]
	int NumBuiltInstances;//[Offset: 0x748, Size: 0x4]
	Box BuiltInstanceBounds;//[Offset: 0x750, Size: 0x38]
	Box UnbuiltInstanceBounds;//[Offset: 0x788, Size: 0x38]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x7c0, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 0x1]
	int OcclusionLayerNumNodes;//[Offset: 0x7d8, Size: 0x4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x7e0, Size: 0x38]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 0x1]
	int InstanceCountToRender;//[Offset: 0x81c, Size: 0x4]

--------------------------------
Class: WorldPartitionHLOD.Actor.Object
	uint32 LODLevel;//[Offset: 0x278, Size: 0x4]
	bool bRequireWarmup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1]
	WorldPartitionRuntimeCell* SourceCell;//[Offset: 0x280, Size: 0x28]
	FName SourceCellName;//[Offset: 0x2a8, Size: 0x8]

--------------------------------
Class: WorldPartitionRuntimeCell.Object
	bool bIsAlwaysLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	FName[] DataLayers;//[Offset: 0x30, Size: 0x10]
	IntVector Coords;//[Offset: 0x40, Size: 0xc]
	FName GridName;//[Offset: 0x4c, Size: 0x8]
	FString DebugName;//[Offset: 0x58, Size: 0x10]
	int Priority;//[Offset: 0x68, Size: 0x4]
	bool bClientOnlyVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	bool bIsHLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 0x1]
	bool bBlockOnSlowLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e, Size: 0x1]

--------------------------------
Class: HLODBuilderSettings.Object

--------------------------------
Class: HLODBuilder.Object

--------------------------------
Class: HLODEngineSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object

--------------------------------
Class: HLODLayer.Object

--------------------------------
Class: HLODProxy.Object
	HLODProxyMesh[] ProxyMeshes;//[Offset: 0x28, Size: 0x10]
	<HLODProxyDesc*,HLODProxyMesh> HLODActors;//[Offset: 0x38, Size: 0x50]

--------------------------------
Class: HLODProxyMesh
	LODActor* LODActor;//[Offset: 0x0, Size: 0x1c]
	StaticMesh* StaticMesh;//[Offset: 0x20, Size: 0x8]
	FName Key;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: LODActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x278, Size: 0x8]
	<HLODInstancingKey,InstancedStaticMeshComponent*> InstancedStaticMeshComponents;//[Offset: 0x280, Size: 0x50]
	HLODProxy* Proxy;//[Offset: 0x2d0, Size: 0x8]
	FName Key;//[Offset: 0x2d8, Size: 0x8]
	float LODDrawDistance;//[Offset: 0x2e0, Size: 0x4]
	int LODLevel;//[Offset: 0x2e4, Size: 0x4]
	Actor*[] SubActors;//[Offset: 0x2e8, Size: 0x10]
	byte CachedNumHLODLevels;//[Offset: 0x2f8, Size: 0x1]

--------------------------------
Class: HLODInstancingKey
	StaticMesh* StaticMesh;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: HLODProxyDesc.Object

--------------------------------
Class: HLODSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: AnimationDataController.Interface.Object
	void UpdateCurveNamesFromSkeleton(const Skeleton* Skeleton, enum SupportedCurveType, bool bShouldTransact);// 0x2f9d58eb6041
	bool SetTransformCurveKeys(out const AnimationCurveIdentifier CurveId, out const Transform[] TransformValues, out const float[] TimeKeys, bool bShouldTransact);// 0x2f9c58eb6041
	bool SetTransformCurveKey(out const AnimationCurveIdentifier CurveId, float Time, out const Transform Value, bool bShouldTransact);// 0x2f9b58eb6041
	void SetPlayLength(float Length, bool bShouldTransact);// 0x2f9a58eb6041
	void SetModel(AnimDataModel* InModel);// 0x2f9958eb6041
	void SetFrameRate(FrameRate FrameRate, bool bShouldTransact);// 0x2f9858eb6041
	bool SetCurveKeys(out const AnimationCurveIdentifier CurveId, out const RichCurveKey[] CurveKeys, bool bShouldTransact);// 0x2f9758eb6041
	bool SetCurveKey(out const AnimationCurveIdentifier CurveId, out const RichCurveKey Key, bool bShouldTransact);// 0x2f9658eb6041
	bool SetCurveFlags(out const AnimationCurveIdentifier CurveId, int Flags, bool bShouldTransact);// 0x2f9558eb6041
	bool SetCurveFlag(out const AnimationCurveIdentifier CurveId, byte Flag, bool bState, bool bShouldTransact);// 0x2f9458eb6041
	bool SetCurveColor(out const AnimationCurveIdentifier CurveId, LinearColor Color, bool bShouldTransact);// 0x2f9358eb6041
	bool SetBoneTrackKeys(FName BoneName, out const Vector[] PositionalKeys, out const Quat[] RotationalKeys, out const Vector[] ScalingKeys, bool bShouldTransact);// 0x2f9258eb6041
	bool ScaleCurve(out const AnimationCurveIdentifier CurveId, float Origin, float Factor, bool bShouldTransact);// 0x2f9158eb6041
	void ResizePlayLength(float NewLength, float T0, float T1, bool bShouldTransact);// 0x2f9058eb6041
	void Resize(float Length, float T0, float T1, bool bShouldTransact);// 0x2f8f58eb6041
	bool RenameCurve(out const AnimationCurveIdentifier CurveToRenameId, out const AnimationCurveIdentifier NewCurveId, bool bShouldTransact);// 0x2f8e58eb6041
	bool RemoveTransformCurveKey(out const AnimationCurveIdentifier CurveId, float Time, bool bShouldTransact);// 0x2f8d58eb6041
	bool RemoveCurveKey(out const AnimationCurveIdentifier CurveId, float Time, bool bShouldTransact);// 0x2f8c58eb6041
	bool RemoveCurve(out const AnimationCurveIdentifier CurveId, bool bShouldTransact);// 0x2f8b58eb6041
	bool RemoveBoneTrack(FName BoneName, bool bShouldTransact);// 0x2f8a58eb6041
	bool RemoveAttributeKey(out const AnimationAttributeIdentifier AttributeIdentifier, float Time, bool bShouldTransact);// 0x2f8958eb6041
	bool RemoveAttribute(out const AnimationAttributeIdentifier AttributeIdentifier, bool bShouldTransact);// 0x2f8858eb6041
	void RemoveAllCurvesOfType(enum SupportedCurveType, bool bShouldTransact);// 0x2f8758eb6041
	void RemoveAllBoneTracks(bool bShouldTransact);// 0x2f8658eb6041
	int RemoveAllAttributesForBone(out const FName BoneName, bool bShouldTransact);// 0x2f8558eb6041
	int RemoveAllAttributes(bool bShouldTransact);// 0x2f8458eb6041
	void OpenBracket(out const FText InTitle, bool bShouldTransact);// 0x2f8358eb6041
	int InsertBoneTrack(FName BoneName, int DesiredIndex, bool bShouldTransact);// 0x2f8258eb6041
	AnimDataModel* GetModel();// 0x2f8158eb6041
	void FindOrAddCurveNamesOnSkeleton(Skeleton* Skeleton, enum SupportedCurveType, bool bShouldTransact);// 0x2f8058eb6041
	bool DuplicateCurve(out const AnimationCurveIdentifier CopyCurveId, out const AnimationCurveIdentifier NewCurveId, bool bShouldTransact);// 0x2f7f58eb6041
	bool DuplicateAttribute(out const AnimationAttributeIdentifier AttributeIdentifier, out const AnimationAttributeIdentifier NewAttributeIdentifier, bool bShouldTransact);// 0x2fc058eb6041
	void CloseBracket(bool bShouldTransact);// 0x2f7d58eb6041
	bool AddCurve(out const AnimationCurveIdentifier CurveId, int CurveFlags, bool bShouldTransact);// 0x2f7c58eb6041
	int AddBoneTrack(FName BoneName, bool bShouldTransact);// 0x2f7b58eb6041
	bool AddAttribute(out const AnimationAttributeIdentifier AttributeIdentifier, bool bShouldTransact);// 0x2f7a58eb6041

--------------------------------
Class: ImportanceSamplingLibrary.BlueprintFunctionLibrary.Object
	float RandomSobolFloat(int Index, int Dimension, float Seed);// 0x2fa658eb6041
	Vector RandomSobolCell3D(int Index, int NumCells, Vector Cell, Vector Seed);// 0x2fa558eb6041
	Vector2D RandomSobolCell2D(int Index, int NumCells, Vector2D Cell, Vector2D Seed);// 0x2fa458eb6041
	float NextSobolFloat(int Index, int Dimension, float PreviousValue);// 0x2fa358eb6041
	Vector NextSobolCell3D(int Index, int NumCells, Vector PreviousValue);// 0x2fa258eb6041
	Vector2D NextSobolCell2D(int Index, int NumCells, Vector2D PreviousValue);// 0x2fa158eb6041
	ImportanceTexture MakeImportanceTexture(Texture2D* Texture, byte WeightingFunc);// 0x2fa058eb6041
	void ImportanceSample(out const ImportanceTexture Texture, out const Vector2D Rand, int Samples, float Intensity, out Vector2D SamplePosition, out LinearColor SampleColor, out float SampleIntensity, out float SampleSize);// 0x2fe158eb6041
	void BreakImportanceTexture(out const ImportanceTexture ImportanceTexture, out Texture2D* Texture, out byte WeightingFunc);// 0x2f9e58eb6041

--------------------------------
Class: ImportanceTexture
	IntPoint Size;//[Offset: 0x0, Size: 0x8]
	int NumMips;//[Offset: 0x8, Size: 0x4]
	float[] MarginalCDF;//[Offset: 0x10, Size: 0x10]
	float[] ConditionalCDF;//[Offset: 0x20, Size: 0x10]
	Color[] TextureData;//[Offset: 0x30, Size: 0x10]
	Texture2D* Texture;//[Offset: 0x40, Size: 0x8]
	byte Weighting;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ImportantToggleSettingInterface.Interface.Object

--------------------------------
Class: InGameAdManager.PlatformInterfaceBase.Object
	bool bShouldPauseWhileAdOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	delegate[] ClickedBannerDelegates;//[Offset: 0x40, Size: 0x10]
	delegate[] ClosedAdDelegates;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: InputActionDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputActionDelegateBinding[] InputActionDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintInputActionDelegateBinding.BlueprintInputDelegateBinding
	FName InputActionName;//[Offset: 0x4, Size: 0x8]
	byte InputKeyEvent;//[Offset: 0xc, Size: 0x1]
	FName FunctionNameToBind;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: BlueprintInputDelegateBinding
	bool bConsumeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bExecuteWhenPaused;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverrideParentBinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: InputAxisDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisDelegateBinding[] InputAxisDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintInputAxisDelegateBinding.BlueprintInputDelegateBinding
	FName InputAxisName;//[Offset: 0x4, Size: 0x8]
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputAxisKeyDelegateBinding[] InputAxisKeyDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintInputAxisKeyDelegateBinding.BlueprintInputDelegateBinding
	Key AxisKey;//[Offset: 0x8, Size: 0x18]
	FName FunctionNameToBind;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: InputKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputKeyDelegateBinding[] InputKeyDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintInputKeyDelegateBinding.BlueprintInputDelegateBinding
	InputChord InputChord;//[Offset: 0x8, Size: 0x20]
	byte InputKeyEvent;//[Offset: 0x28, Size: 0x1]
	FName FunctionNameToBind;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: InputChord
	Key Key;//[Offset: 0x0, Size: 0x18]
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: InputSettings.Object
	InputAxisConfigEntry[] AxisConfig;//[Offset: 0x28, Size: 0x10]
	bool bAltEnterTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bF11TogglesFullscreen;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	bool bUseMouseForTouch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1]
	bool bEnableMouseSmoothing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1]
	bool bEnableFOVScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 0x1]
	bool bCaptureMouseOnLaunch;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 0x1]
	bool bDefaultViewportMouseLock;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 0x1]
	bool bEnableLegacyInputScales;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 0x1]
	bool bAlwaysShowTouchInterface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1]
	bool bShowConsoleOnFourFingerTap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1]
	bool bEnableGestureRecognizer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39, Size: 0x1]
	bool bUseAutocorrect;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39, Size: 0x1]
	FString[] ExcludedAutocorrectOS;//[Offset: 0x40, Size: 0x10]
	FString[] ExcludedAutocorrectCultures;//[Offset: 0x50, Size: 0x10]
	FString[] ExcludedAutocorrectDeviceModels;//[Offset: 0x60, Size: 0x10]
	enum DefaultViewportMouseCaptureMode;//[Offset: 0x70, Size: 0x1]
	enum DefaultViewportMouseLockMode;//[Offset: 0x71, Size: 0x1]
	float FOVScale;//[Offset: 0x74, Size: 0x4]
	float DoubleClickTime;//[Offset: 0x78, Size: 0x4]
	InputActionKeyMapping[] ActionMappings;//[Offset: 0x80, Size: 0x10]
	InputAxisKeyMapping[] AxisMappings;//[Offset: 0x90, Size: 0x10]
	InputActionSpeechMapping[] SpeechMappings;//[Offset: 0xa0, Size: 0x10]
	class PlayerInput* DefaultPlayerInputClass;//[Offset: 0xb0, Size: 0x28]
	class InputComponent* DefaultInputComponentClass;//[Offset: 0xd8, Size: 0x28]
	SoftObjectPath DefaultTouchInterface;//[Offset: 0x100, Size: 0x18]
	Key ConsoleKey;//[Offset: 0x118, Size: 0x18]
	Key[] ConsoleKeys;//[Offset: 0x130, Size: 0x10]
	void SaveKeyMappings();// 0x2fbb58eb6041
	void RemoveAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x2fba58eb6041
	void RemoveActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x2fb958eb6041
	InputSettings* GetInputSettings();// 0x2fb858eb6041
	void GetAxisNames(out FName[] AxisNames);// 0x2fb758eb6041
	void GetAxisMappingByName(const FName InAxisName, out InputAxisKeyMapping[] OutMappings);// 0x2fb658eb6041
	void GetActionNames(out FName[] ActionNames);// 0x2fb558eb6041
	void GetActionMappingByName(const FName InActionName, out InputActionKeyMapping[] OutMappings);// 0x2fb458eb6041
	void ForceRebuildKeymaps();// 0x2fb358eb6041
	void AddAxisMapping(out const InputAxisKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x2fb258eb6041
	void AddActionMapping(out const InputActionKeyMapping KeyMapping, bool bForceRebuildKeymaps);// 0x2fb158eb6041

--------------------------------
Class: InputAxisKeyMapping
	FName AxisName;//[Offset: 0x0, Size: 0x8]
	float Scale;//[Offset: 0x8, Size: 0x4]
	Key Key;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: InputActionKeyMapping
	FName ActionName;//[Offset: 0x0, Size: 0x8]
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	Key Key;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: InputAxisConfigEntry
	FName AxisKeyName;//[Offset: 0x0, Size: 0x8]
	InputAxisProperties AxisProperties;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: InputAxisProperties
	float DeadZone;//[Offset: 0x0, Size: 0x4]
	float Sensitivity;//[Offset: 0x4, Size: 0x4]
	float Exponent;//[Offset: 0x8, Size: 0x4]
	bool bInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: InputActionSpeechMapping
	FName ActionName;//[Offset: 0x0, Size: 0x8]
	FName SpeechKeyword;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: InputTouchDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintInputTouchDelegateBinding[] InputTouchDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintInputTouchDelegateBinding.BlueprintInputDelegateBinding
	byte InputKeyEvent;//[Offset: 0x1, Size: 0x1]
	FName FunctionNameToBind;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: InputVectorAxisDelegateBinding.InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: InstancedPlacemenClientSettings.Object

--------------------------------
Class: PartitionActor.Actor.Object

--------------------------------
Class: ISMPartitionActor.PartitionActor.Actor.Object

--------------------------------
Class: InstancedPlacementPartitionActor.ISMPartitionActor.PartitionActor.Actor.Object

--------------------------------
Class: Interface_ActorSubobject.Interface.Object

--------------------------------
Class: Interface_AssetUserData.Interface.Object

--------------------------------
Class: Interface_AsyncCompilation.Interface.Object

--------------------------------
Class: BoneReferenceSkeletonProvider.Interface.Object

--------------------------------
Class: Interface_CollisionDataProvider.Interface.Object

--------------------------------
Class: Interface_PostProcessVolume.Interface.Object

--------------------------------
Class: Interface_PreviewMeshProvider.Interface.Object

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpFilter.Object
	FString Caption;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: InterpFilter_Classes.InterpFilter.Object

--------------------------------
Class: InterpFilter_Custom.InterpFilter.Object

--------------------------------
Class: InterpGroupCamera.InterpGroup.Object
	CameraAnim* CameraAnimInst;//[Offset: 0x50, Size: 0x8]
	float CompressTolerance;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: InterpGroupInstCamera.InterpGroupInst.Object

--------------------------------
Class: InterpGroupInstDirector.InterpGroupInst.Object

--------------------------------
Class: InterpToMovementComponent.MovementComponent.ActorComponent.Object
	float Duration;//[Offset: 0x114, Size: 0x4]
	bool bPauseOnImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 0x1]
	bool bSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	enum TeleportType;//[Offset: 0x11a, Size: 0x1]
	enum BehaviourType;//[Offset: 0x11b, Size: 0x1]
	bool bCheckIfStillInWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11d, Size: 0x1]
	delegate OnInterpToReverse;//[Offset: 0x120, Size: 0x10]
	delegate OnInterpToStop;//[Offset: 0x130, Size: 0x10]
	delegate OnWaitBeginDelegate;//[Offset: 0x140, Size: 0x10]
	delegate OnWaitEndDelegate;//[Offset: 0x150, Size: 0x10]
	delegate OnResetDelegate;//[Offset: 0x160, Size: 0x10]
	float MaxSimulationTimeStep;//[Offset: 0x170, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x174, Size: 0x4]
	InterpControlPoint[] ControlPoints;//[Offset: 0x178, Size: 0x10]
	void StopSimulating(out const HitResult HitResult);// 0xb7758eb6041
	void RestartMovement(float InitialDirection);// 0xb7358eb6041
	void ResetControlPoints();// 0xb7258eb6041
	void OnInterpToWaitEndDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xb7158eb6041
	void OnInterpToWaitBeginDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xb7058eb6041
	void OnInterpToStopDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xb6f58eb6041
	void OnInterpToReverseDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xb6e58eb6041
	void OnInterpToResetDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0xb6d58eb6041
	void FinaliseControlPoints();// 0xb6c58eb6041
	void AddControlPointPosition(Vector Pos, bool bPositionIsRelative);// 0xb6b58eb6041

--------------------------------
Class: InterpControlPoint
	Vector PositionControlPoint;//[Offset: 0x0, Size: 0x18]
	bool bPositionIsRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: InterpTrackFloatBase.InterpTrack.Object
	InterpCurveFloat FloatTrack;//[Offset: 0x70, Size: 0x18]
	float CurveTension;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: InterpTrackAnimControl.InterpTrackFloatBase.InterpTrack.Object
	FName SlotName;//[Offset: 0x8c, Size: 0x8]
	AnimControlTrackKey[] AnimSeqs;//[Offset: 0x98, Size: 0x10]
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: AnimControlTrackKey
	float StartTime;//[Offset: 0x0, Size: 0x4]
	AnimSequence* AnimSeq;//[Offset: 0x8, Size: 0x8]
	float AnimStartOffset;//[Offset: 0x10, Size: 0x4]
	float AnimEndOffset;//[Offset: 0x14, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x18, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: InterpTrackVectorBase.InterpTrack.Object
	InterpCurveVector VectorTrack;//[Offset: 0x70, Size: 0x18]
	float CurveTension;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: InterpTrackAudioMaster.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackBoolProp.InterpTrack.Object
	BoolTrackKey[] BoolTrack;//[Offset: 0x70, Size: 0x10]
	FName PropertyName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: BoolTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: InterpTrackColorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8]

--------------------------------
Class: InterpTrackColorScale.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackDirector.InterpTrack.Object
	DirectorTrackCut[] CutTrack;//[Offset: 0x70, Size: 0x10]
	bool bSimulateCameraCutsOnClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: DirectorTrackCut
	float Time;//[Offset: 0x0, Size: 0x4]
	float TransitionTime;//[Offset: 0x4, Size: 0x4]
	FName TargetCamGroup;//[Offset: 0x8, Size: 0x8]
	int ShotNumber;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: InterpTrackEvent.InterpTrack.Object
	EventTrackKey[] EventTrack;//[Offset: 0x70, Size: 0x10]
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bUseCustomEventName;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: EventTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	FName EventName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: InterpTrackFade.InterpTrackFloatBase.InterpTrack.Object
	bool bPersistFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1]
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1]
	LinearColor FadeColor;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: InterpTrackFloatAnimBPParam.InterpTrackFloatBase.InterpTrack.Object
	ClassPtrProperty AnimBlueprintClass;//[Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x98, Size: 0x8]
	FName ParamName;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: InterpTrackFloatMaterialParam.InterpTrackFloatBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10]
	FName ParamName;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: InterpTrackFloatParticleParam.InterpTrackFloatBase.InterpTrack.Object
	FName ParamName;//[Offset: 0x8c, Size: 0x8]

--------------------------------
Class: InterpTrackFloatProp.InterpTrackFloatBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8]

--------------------------------
Class: InterpTrackInstAnimControl.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstAudioMaster.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstProperty.InterpTrackInst.Object
	FieldPathProperty InterpProperty;//[Size: 0x20]
	Object* PropertyOuterObjectInst;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: InterpTrackInstBoolProp.InterpTrackInstProperty.InterpTrackInst.Object
	bool ResetBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: InterpTrackInstColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Color ResetColor;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: InterpTrackInstColorScale.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstEvent.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstFade.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstFloatAnimBPParam.InterpTrackInst.Object
	AnimInstance* AnimScriptInstance;//[Offset: 0x28, Size: 0x8]
	float ResetFloat;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: InterpTrackInstFloatMaterialParam.InterpTrackInst.Object
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x28, Size: 0x10]
	float[] ResetFloats;//[Offset: 0x38, Size: 0x10]
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x48, Size: 0x10]
	InterpTrackFloatMaterialParam* InstancedTrack;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: PrimitiveMaterialRef
	PrimitiveComponent* Primitive;//[Offset: 0x0, Size: 0x8]
	DecalComponent* Decal;//[Offset: 0x8, Size: 0x8]
	int ElementIndex;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: InterpTrackInstFloatParticleParam.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstFloatProp.InterpTrackInstProperty.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: InterpTrackInstLinearColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	LinearColor ResetColor;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: InterpTrackInstParticleReplay.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstSlomo.InterpTrackInst.Object
	float OldTimeDilation;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: InterpTrackInstSound.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x28, Size: 0x4]
	AudioComponent* PlayAudioComp;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: InterpTrackInstToggle.InterpTrackInst.Object
	byte Action;//[Offset: 0x28, Size: 0x1]
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4]
	bool bSavedActiveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: InterpTrackInstVectorMaterialParam.InterpTrackInst.Object
	MaterialInstanceDynamic*[] MaterialInstances;//[Offset: 0x28, Size: 0x10]
	Vector[] ResetVectors;//[Offset: 0x38, Size: 0x10]
	PrimitiveMaterialRef[] PrimitiveMaterialRefs;//[Offset: 0x48, Size: 0x10]
	InterpTrackVectorMaterialParam* InstancedTrack;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: InterpTrackVectorMaterialParam.InterpTrackVectorBase.InterpTrack.Object
	MaterialInterface*[] TargetMaterials;//[Offset: 0x90, Size: 0x10]
	FName ParamName;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: InterpTrackInstVectorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Vector ResetVector;//[Offset: 0x58, Size: 0x18]

--------------------------------
Class: InterpTrackInstVisibility.InterpTrackInst.Object
	byte Action;//[Offset: 0x28, Size: 0x1]
	float LastUpdatePosition;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: InterpTrackLinearColorBase.InterpTrack.Object
	InterpCurveLinearColor LinearColorTrack;//[Offset: 0x70, Size: 0x18]
	float CurveTension;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: InterpCurveLinearColor
	InterpCurvePointLinearColor[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointLinearColor
	float InVal;//[Offset: 0x0, Size: 0x4]
	LinearColor OutVal;//[Offset: 0x4, Size: 0x10]
	LinearColor ArriveTangent;//[Offset: 0x14, Size: 0x10]
	LinearColor LeaveTangent;//[Offset: 0x24, Size: 0x10]
	byte InterpMode;//[Offset: 0x34, Size: 0x1]

--------------------------------
Class: InterpTrackLinearColorProp.InterpTrackLinearColorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8]

--------------------------------
Class: InterpTrackMoveAxis.InterpTrackFloatBase.InterpTrack.Object
	byte MoveAxis;//[Offset: 0x8c, Size: 0x1]
	InterpLookupTrack LookupTrack;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: InterpTrackParticleReplay.InterpTrack.Object
	ParticleReplayTrackKey[] TrackKeys;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: ParticleReplayTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	float Duration;//[Offset: 0x4, Size: 0x4]
	int ClipIDNumber;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackSlomo.InterpTrackFloatBase.InterpTrack.Object

--------------------------------
Class: InterpTrackSound.InterpTrackVectorBase.InterpTrack.Object
	SoundTrackKey[] Sounds;//[Offset: 0x90, Size: 0x10]
	bool bPlayOnReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bContinueSoundOnMatineeEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1]
	bool bTreatAsDialogue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1]
	bool bAttach;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: SoundTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	float Volume;//[Offset: 0x4, Size: 0x4]
	float Pitch;//[Offset: 0x8, Size: 0x4]
	SoundBase* Sound;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: InterpTrackToggle.InterpTrack.Object
	ToggleTrackKey[] ToggleTrack;//[Offset: 0x70, Size: 0x10]
	bool bActivateSystemEachUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bActivateWithJustAttachedFlag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: ToggleTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	byte ToggleAction;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: InterpTrackVectorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x8c, Size: 0x8]

--------------------------------
Class: InterpTrackVisibility.InterpTrack.Object
	VisibilityTrackKey[] VisibilityTrack;//[Offset: 0x70, Size: 0x10]
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: VisibilityTrackKey
	float Time;//[Offset: 0x0, Size: 0x4]
	byte Action;//[Offset: 0x4, Size: 0x1]
	byte ActiveCondition;//[Offset: 0x5, Size: 0x1]

--------------------------------
Class: IntSerialization.Object
	uint16 UnsignedInt16Variable;//[Offset: 0x28, Size: 0x2]
	uint32 UnsignedInt32Variable;//[Offset: 0x2c, Size: 0x4]
	uint64 UnsignedInt64Variable;//[Offset: 0x30, Size: 0x8]
	int8 SignedInt8Variable;//[Offset: 0x38, Size: 0x1]
	int16 SignedInt16Variable;//[Offset: 0x3a, Size: 0x2]
	int64 SignedInt64Variable;//[Offset: 0x40, Size: 0x8]
	byte UnsignedInt8Variable;//[Offset: 0x48, Size: 0x1]
	int SignedInt32Variable;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: ISMPartitionInstanceManager.Interface.Object

--------------------------------
Class: ISMPartitionInstanceManagerProvider.Interface.Object

--------------------------------
Class: KillZVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: KismetArrayLibrary.BlueprintFunctionLibrary.Object
	void SetArrayPropertyByName(Object* Object, FName PropertyName, out const int[] Value);// 0x2fd458eb6041
	void FilterArray(out const Actor*[] TargetArray, class Actor FilterClass, out Actor*[] FilteredArray);// 0x2fd358eb6041
	void Array_Swap(out const int[] TargetArray, int FirstIndex, int SecondIndex);// 0x2fd258eb6041
	void Array_Shuffle(out const int[] TargetArray);// 0x2fd158eb6041
	void Array_Set(out const int[] TargetArray, int Index, out const int Item, bool bSizeToFit);// 0x2fd058eb6041
	void Array_Reverse(out const int[] TargetArray);// 0x2fcf58eb6041
	void Array_Resize(out const int[] TargetArray, int Size);// 0x2fce58eb6041
	bool Array_RemoveItem(out const int[] TargetArray, out const int Item);// 0x2fcd58eb6041
	void Array_Remove(out const int[] TargetArray, int IndexToRemove);// 0x2fcc58eb6041
	void Array_RandomFromStream(out const int[] TargetArray, out RandomStream RandomStream, out int OutItem, out int OutIndex);// 0x2fcb58eb6041
	void Array_Random(out const int[] TargetArray, out int OutItem, out int OutIndex);// 0x2fca58eb6041
	int Array_Length(out const int[] TargetArray);// 0x2fc958eb6041
	int Array_LastIndex(out const int[] TargetArray);// 0x2fc858eb6041
	bool Array_IsValidIndex(out const int[] TargetArray, int IndexToTest);// 0x2fc758eb6041
	bool Array_IsNotEmpty(out const int[] TargetArray);// 0x2fc658eb6041
	bool Array_IsEmpty(out const int[] TargetArray);// 0x2fc558eb6041
	void Array_Insert(out const int[] TargetArray, out const int NewItem, int Index);// 0x2fc458eb6041
	bool Array_Identical(out const int[] ArrayA, out const int[] ArrayB);// 0x2fc358eb6041
	void Array_Get(out const int[] TargetArray, int Index, out int Item);// 0x2fc258eb6041
	int Array_Find(out const int[] TargetArray, out const int ItemToFind);// 0x2fc158eb6041
	bool Array_Contains(out const int[] TargetArray, out const int ItemToFind);// 0x300258eb6041
	void Array_Clear(out const int[] TargetArray);// 0x2fbf58eb6041
	void Array_Append(out const int[] TargetArray, out const int[] SourceArray);// 0x2fbe58eb6041
	int Array_AddUnique(out const int[] TargetArray, out const int NewItem);// 0x2fbd58eb6041
	int Array_Add(out const int[] TargetArray, out const int NewItem);// 0x2fbc58eb6041

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 0x4]
	int Seed;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: KismetGuidLibrary.BlueprintFunctionLibrary.Object
	void Parse_StringToGuid(FString GuidString, out Guid OutGuid, out bool Success);// 0x2fdb58eb6041
	bool NotEqual_GuidGuid(out const Guid A, out const Guid B);// 0x2fda58eb6041
	Guid NewGuid();// 0x2fd958eb6041
	bool IsValid_Guid(out const Guid InGuid);// 0x2fd858eb6041
	void Invalidate_Guid(out Guid InGuid);// 0x2fd758eb6041
	bool EqualEqual_GuidGuid(out const Guid A, out const Guid B);// 0x2fd658eb6041
	FString Conv_GuidToString(out const Guid InGuid);// 0x2fd558eb6041

--------------------------------
Class: KismetInputLibrary.BlueprintFunctionLibrary.Object
	bool PointerEvent_IsTouchEvent(out const PointerEvent Input);// 0x300c58eb6041
	bool PointerEvent_IsMouseButtonDown(out const PointerEvent Input, Key MouseButton);// 0x300b58eb6041
	float PointerEvent_GetWheelDelta(out const PointerEvent Input);// 0x300a58eb6041
	int PointerEvent_GetUserIndex(out const PointerEvent Input);// 0x300958eb6041
	int PointerEvent_GetTouchpadIndex(out const PointerEvent Input);// 0x300858eb6041
	Vector2D PointerEvent_GetScreenSpacePosition(out const PointerEvent Input);// 0x300758eb6041
	int PointerEvent_GetPointerIndex(out const PointerEvent Input);// 0x300658eb6041
	Vector2D PointerEvent_GetLastScreenSpacePosition(out const PointerEvent Input);// 0x300558eb6041
	enum PointerEvent_GetGestureType(out const PointerEvent Input);// 0x300458eb6041
	Vector2D PointerEvent_GetGestureDelta(out const PointerEvent Input);// 0x300358eb6041
	Key PointerEvent_GetEffectingButton(out const PointerEvent Input);// 0x304458eb6041
	Vector2D PointerEvent_GetCursorDelta(out const PointerEvent Input);// 0x300158eb6041
	bool Key_IsVectorAxis(out const Key Key);// 0x300058eb6041
	bool Key_IsValid(out const Key Key);// 0x2fff58eb6041
	bool Key_IsMouseButton(out const Key Key);// 0x2ffe58eb6041
	bool Key_IsModifierKey(out const Key Key);// 0x2ffd58eb6041
	bool Key_IsKeyboardKey(out const Key Key);// 0x2ffc58eb6041
	bool Key_IsGamepadKey(out const Key Key);// 0x2ffb58eb6041
	bool Key_IsDigital(out const Key Key);// 0x2ffa58eb6041
	bool Key_IsButtonAxis(out const Key Key);// 0x2ff958eb6041
	bool Key_IsAxis3D(out const Key Key);// 0x2ff858eb6041
	bool Key_IsAxis2D(out const Key Key);// 0x2ff758eb6041
	bool Key_IsAxis1D(out const Key Key);// 0x2ff658eb6041
	bool Key_IsAnalog(out const Key Key);// 0x2ff558eb6041
	enum Key_GetNavigationDirectionFromKey(out const KeyEvent InKeyEvent);// 0x2ff458eb6041
	enum Key_GetNavigationDirectionFromAnalog(out const AnalogInputEvent InAnalogEvent);// 0x2ff358eb6041
	enum Key_GetNavigationActionFromKey(out const KeyEvent InKeyEvent);// 0x2ff258eb6041
	enum Key_GetNavigationAction(out const Key InKey);// 0x2ff158eb6041
	FText Key_GetDisplayName(out const Key Key);// 0x2ff058eb6041
	bool InputEvent_IsShiftDown(out const InputEvent Input);// 0x2fef58eb6041
	bool InputEvent_IsRightShiftDown(out const InputEvent Input);// 0x2fee58eb6041
	bool InputEvent_IsRightControlDown(out const InputEvent Input);// 0x2fed58eb6041
	bool InputEvent_IsRightCommandDown(out const InputEvent Input);// 0x2fec58eb6041
	bool InputEvent_IsRightAltDown(out const InputEvent Input);// 0x2feb58eb6041
	bool InputEvent_IsRepeat(out const InputEvent Input);// 0x2fea58eb6041
	bool InputEvent_IsLeftShiftDown(out const InputEvent Input);// 0x2fe958eb6041
	bool InputEvent_IsLeftControlDown(out const InputEvent Input);// 0x2fe858eb6041
	bool InputEvent_IsLeftCommandDown(out const InputEvent Input);// 0x2fe758eb6041
	bool InputEvent_IsLeftAltDown(out const InputEvent Input);// 0x2fe658eb6041
	bool InputEvent_IsControlDown(out const InputEvent Input);// 0x2fe558eb6041
	bool InputEvent_IsCommandDown(out const InputEvent Input);// 0x2fe458eb6041
	bool InputEvent_IsAltDown(out const InputEvent Input);// 0x2fe358eb6041
	FText InputChord_GetDisplayName(out const InputChord Key);// 0x2fe258eb6041
	int GetUserIndex(out const KeyEvent Input);// 0x302358eb6041
	Key GetKey(out const KeyEvent Input);// 0x2fe058eb6041
	float GetAnalogValue(out const AnalogInputEvent Input);// 0x2fdf58eb6041
	bool EqualEqual_KeyKey(Key A, Key B);// 0x2fde58eb6041
	bool EqualEqual_InputChordInputChord(InputChord A, InputChord B);// 0x2fdd58eb6041
	void CalibrateTilt();// 0x2fdc58eb6041

--------------------------------
Class: KismetInternationalizationLibrary.BlueprintFunctionLibrary.Object
	bool SetCurrentLocale(FString Culture, const bool SaveToConfig);// 0x301a58eb6041
	bool SetCurrentLanguageAndLocale(FString Culture, const bool SaveToConfig);// 0x301958eb6041
	bool SetCurrentLanguage(FString Culture, const bool SaveToConfig);// 0x301858eb6041
	bool SetCurrentCulture(FString Culture, const bool SaveToConfig);// 0x301758eb6041
	bool SetCurrentAssetGroupCulture(const FName AssetGroup, FString Culture, const bool SaveToConfig);// 0x301658eb6041
	FString GetSuitableCulture(out const FString[] AvailableCultures, FString CultureToMatch, FString FallbackCulture);// 0x301558eb6041
	FString GetNativeCulture(const enum TextCategory);// 0x301458eb6041
	FString[] GetLocalizedCultures(const bool IncludeGame, const bool IncludeEngine, const bool IncludeEditor, const bool IncludeAdditional);// 0x301358eb6041
	FString GetCurrentLocale();// 0x301258eb6041
	FString GetCurrentLanguage();// 0x301158eb6041
	FString GetCurrentCulture();// 0x301058eb6041
	FString GetCurrentAssetGroupCulture(const FName AssetGroup);// 0x300f58eb6041
	FString GetCultureDisplayName(FString Culture, const bool Localized);// 0x300e58eb6041
	void ClearCurrentAssetGroupCulture(const FName AssetGroup, const bool SaveToConfig);// 0x300d58eb6041

--------------------------------
Class: KismetMaterialLibrary.BlueprintFunctionLibrary.Object
	void SetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, out const LinearColor ParameterValue);// 0x301f58eb6041
	void SetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName, float ParameterValue);// 0x301e58eb6041
	LinearColor GetVectorParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0x301d58eb6041
	float GetScalarParameterValue(Object* WorldContextObject, MaterialParameterCollection* Collection, FName ParameterName);// 0x301c58eb6041
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(Object* WorldContextObject, MaterialInterface* Parent, FName OptionalName, enum CreationFlags);// 0x301b58eb6041

--------------------------------
Class: KismetMathLibrary.BlueprintFunctionLibrary.Object
	int Xor_IntInt(int A, int B);// 0x32e058eb6041
	int64 Xor_Int64Int64(int64 A, int64 B);// 0x32df58eb6041
	int Wrap(int Value, int Min, int Max);// 0x32de58eb6041
	Vector WeightedMovingAverage_FVector(Vector CurrentSample, Vector PreviousSample, float Weight);// 0x32dd58eb6041
	Rotator WeightedMovingAverage_FRotator(Rotator CurrentSample, Rotator PreviousSample, float Weight);// 0x32dc58eb6041
	float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight);// 0x32db58eb6041
	double VSizeXYSquared(Vector A);// 0x32da58eb6041
	double VSizeXY(Vector A);// 0x32d958eb6041
	double VSizeSquared(Vector A);// 0x32d858eb6041
	double VSize2DSquared(Vector2D A);// 0x32d758eb6041
	double VSize2D(Vector2D A);// 0x32d658eb6041
	double VSize(Vector A);// 0x32d558eb6041
	Vector VLerp(Vector A, Vector B, float Alpha);// 0x32d458eb6041
	Vector VInterpTo_Constant(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0x32d358eb6041
	Vector VInterpTo(Vector Current, Vector Target, float DeltaTime, float InterpSpeed);// 0x32d258eb6041
	Vector VectorSpringInterp(Vector Current, Vector Target, out VectorSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, Vector MinValue, Vector MaxValue, bool bInitializeFromTarget);// 0x32d158eb6041
	Vector Vector_Zero();// 0x32d058eb6041
	Vector Vector_Up();// 0x32cf58eb6041
	void Vector_UnwindEuler(out Vector A);// 0x32ce58eb6041
	Vector2D Vector_UnitCartesianToSpherical(Vector A);// 0x32cd58eb6041
	Vector Vector_ToRadians(Vector A);// 0x32cc58eb6041
	Vector Vector_ToDegrees(Vector A);// 0x32cb58eb6041
	Vector Vector_SnappedToGrid(Vector InVect, float InGridSize);// 0x32ca58eb6041
	void Vector_Set(out Vector A, double X, double Y, double Z);// 0x330b58eb6041
	Vector Vector_Right();// 0x32c858eb6041
	Vector Vector_Reciprocal(out const Vector A);// 0x32c758eb6041
	Vector Vector_ProjectOnToNormal(Vector V, Vector InNormal);// 0x32c658eb6041
	Vector Vector_One();// 0x32c558eb6041
	Vector Vector_NormalUnsafe(out const Vector A);// 0x32c458eb6041
	void Vector_Normalize(out Vector A, float Tolerance);// 0x32c358eb6041
	Vector Vector_Normal2D(Vector A, float Tolerance);// 0x32c258eb6041
	Vector Vector_MirrorByPlane(Vector A, out const Plane InPlane);// 0x32c158eb6041
	Vector Vector_Left();// 0x32c058eb6041
	bool Vector_IsZero(out const Vector A);// 0x32bf58eb6041
	bool Vector_IsUnit(out const Vector A, float SquaredLenthTolerance);// 0x32be58eb6041
	bool Vector_IsUniform(out const Vector A, float Tolerance);// 0x32bd58eb6041
	bool Vector_IsNormal(out const Vector A);// 0x32bc58eb6041
	bool Vector_IsNearlyZero(out const Vector A, float Tolerance);// 0x32bb58eb6041
	bool Vector_IsNAN(out const Vector A);// 0x32ba58eb6041
	double Vector_HeadingAngle(Vector A);// 0x32b958eb6041
	Vector Vector_GetSignVector(Vector A);// 0x32b858eb6041
	Vector Vector_GetProjection(Vector A);// 0x32b758eb6041
	double Vector_GetAbsMin(Vector A);// 0x32b658eb6041
	double Vector_GetAbsMax(Vector A);// 0x32b558eb6041
	Vector Vector_GetAbs(Vector A);// 0x32b458eb6041
	Vector Vector_Forward();// 0x32b358eb6041
	Vector Vector_Down();// 0x32b258eb6041
	double Vector_DistanceSquared(Vector v1, Vector v2);// 0x32b158eb6041
	double Vector_Distance2DSquared(Vector v1, Vector v2);// 0x32b058eb6041
	double Vector_Distance2D(Vector v1, Vector v2);// 0x32af58eb6041
	double Vector_Distance(Vector v1, Vector v2);// 0x32ae58eb6041
	double Vector_CosineAngle2D(Vector A, Vector B);// 0xffffff8158eb6000
	Vector Vector_ComponentMin(Vector A, Vector B);// 0x32ac58eb6041
	Vector Vector_ComponentMax(Vector A, Vector B);// 0x32ab58eb6041
	Vector Vector_ClampSizeMax2D(Vector A, double Max);// 0x32aa58eb6041
	Vector Vector_ClampSizeMax(Vector A, double Max);// 0x32a958eb6041
	Vector Vector_ClampSize2D(Vector A, double Min, double Max);// 0x32a858eb6041
	Vector Vector_BoundedToCube(Vector InVect, float InRadius);// 0x32a758eb6041
	Vector Vector_BoundedToBox(Vector InVect, Vector InBoxMin, Vector InBoxMax);// 0x32a658eb6041
	Vector Vector_Backward();// 0x32a558eb6041
	void Vector_Assign(out Vector A, out const Vector InVector);// 0x32a458eb6041
	void Vector_AddBounded(out Vector A, Vector InAddVect, float InRadius);// 0x32a358eb6041
	Vector4 Vector4_Zero();// 0x32a258eb6041
	double Vector4_SizeSquared3(out const Vector4 A);// 0x32a158eb6041
	double Vector4_SizeSquared(out const Vector4 A);// 0x32a058eb6041
	double Vector4_Size3(out const Vector4 A);// 0x329f58eb6041
	double Vector4_Size(out const Vector4 A);// 0x329e58eb6041
	void Vector4_Set(out Vector4 A, double X, double Y, double Z, double W);// 0x329d58eb6041
	Vector4 Vector4_NormalUnsafe3(out const Vector4 A);// 0x329c58eb6041
	void Vector4_Normalize3(out Vector4 A, float Tolerance);// 0x329b58eb6041
	Vector4 Vector4_Normal3(out const Vector4 A, float Tolerance);// 0x329a58eb6041
	Vector4 Vector4_Negated(out const Vector4 A);// 0x329958eb6041
	Vector4 Vector4_MirrorByVector3(out const Vector4 Direction, out const Vector4 SurfaceNormal);// 0x329858eb6041
	bool Vector4_IsZero(out const Vector4 A);// 0x329758eb6041
	bool Vector4_IsUnit3(out const Vector4 A, float SquaredLenthTolerance);// 0x329658eb6041
	bool Vector4_IsNormal3(out const Vector4 A);// 0x329558eb6041
	bool Vector4_IsNearlyZero3(out const Vector4 A, float Tolerance);// 0x329458eb6041
	bool Vector4_IsNAN(out const Vector4 A);// 0x329358eb6041
	double Vector4_DotProduct3(out const Vector4 A, out const Vector4 B);// 0x329258eb6041
	double Vector4_DotProduct(out const Vector4 A, out const Vector4 B);// 0x329158eb6041
	Vector4 Vector4_CrossProduct3(out const Vector4 A, out const Vector4 B);// 0x329058eb6041
	void Vector4_Assign(out Vector4 A, out const Vector4 InVector);// 0x328f58eb6041
	Vector2D Vector2DInterpTo_Constant(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0x328e58eb6041
	Vector2D Vector2DInterpTo(Vector2D Current, Vector2D Target, float DeltaTime, float InterpSpeed);// 0x328d58eb6041
	Vector2D Vector2D_Zero();// 0x32c958eb6041
	Vector2D Vector2D_Unit45Deg();// 0x328b58eb6041
	Vector2D Vector2D_One();// 0x328a58eb6041
	Vector VEase(Vector A, Vector B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0x328958eb6041
	DateTime UtcNow();// 0x328858eb6041
	Vector4 TransformVector4(out const Matrix Matrix, out const Vector4 Vec4);// 0x328758eb6041
	Rotator TransformRotation(out const Transform T, Rotator Rotation);// 0x328658eb6041
	Vector TransformLocation(out const Transform T, Vector Location);// 0x328558eb6041
	Vector TransformDirection(out const Transform T, Vector Direction);// 0x328458eb6041
	float Transform_Determinant(out const Transform Transform);// 0x328358eb6041
	Vector2D ToSign2D(Vector2D A);// 0x328258eb6041
	Vector2D ToRounded2D(Vector2D A);// 0x328158eb6041
	void ToDirectionAndLength2D(Vector2D A, out Vector2D OutDir, out double OutLength);// 0x328058eb6041
	DateTime Today();// 0x327f58eb6041
	Transform TLerp(out const Transform A, out const Transform B, float Alpha, byte InterpMode);// 0x327e58eb6041
	Transform TInterpTo(out const Transform Current, out const Transform Target, float DeltaTime, float InterpSpeed);// 0x327d58eb6041
	Timespan TimespanZeroValue();// 0x327c58eb6041
	float TimespanRatio(Timespan A, Timespan B);// 0x327b58eb6041
	Timespan TimespanMinValue();// 0x327a58eb6041
	Timespan TimespanMaxValue();// 0x327958eb6041
	bool TimespanFromString(FString TimespanString, out Timespan Result);// 0x327858eb6041
	Transform TEase(out const Transform A, out const Transform B, float Alpha, byte EasingFunc, float BlendExp, int Steps);// 0x327758eb6041
	double Tan(double A);// 0x327658eb6041
	Vector Subtract_VectorVector(Vector A, Vector B);// 0x327558eb6041
	Vector Subtract_VectorInt(Vector A, int B);// 0x327458eb6041
	Vector Subtract_VectorFloat(Vector A, double B);// 0x327358eb6041
	Vector4 Subtract_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x327258eb6041
	Vector2D Subtract_Vector2DVector2D(Vector2D A, Vector2D B);// 0x327158eb6041
	Vector2D Subtract_Vector2DFloat(Vector2D A, double B);// 0x327058eb6041
	Timespan Subtract_TimespanTimespan(Timespan A, Timespan B);// 0x326f58eb6041
	Quat Subtract_QuatQuat(out const Quat A, out const Quat B);// 0x326e58eb6041
	LinearColor Subtract_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x326d58eb6041
	IntPoint Subtract_IntPointIntPoint(IntPoint A, IntPoint B);// 0x326c58eb6041
	IntPoint Subtract_IntPointInt(IntPoint A, int B);// 0x32ad58eb6041
	int Subtract_IntInt(int A, int B);// 0x326a58eb6041
	int64 Subtract_Int64Int64(int64 A, int64 B);// 0x326958eb6041
	double Subtract_DoubleDouble(double A, double B);// 0x326858eb6041
	DateTime Subtract_DateTimeTimespan(DateTime A, Timespan B);// 0x326758eb6041
	Timespan Subtract_DateTimeDateTime(DateTime A, DateTime B);// 0x326658eb6041
	byte Subtract_ByteByte(byte A, byte B);// 0x326558eb6041
	double Square(double A);// 0x326458eb6041
	double Sqrt(double A);// 0x326358eb6041
	Vector Spherical2DToUnitCartesian(Vector2D A);// 0x326258eb6041
	double Sin(double A);// 0x326158eb6041
	int64 SignOfInteger64(int64 A);// 0x326058eb6041
	int SignOfInteger(int A);// 0x325f58eb6041
	double SignOfFloat(double A);// 0x325e58eb6041
	void SetVectorSpringStateVelocity(out VectorSpringState SpringState, Vector Velocity);// 0x325d58eb6041
	void SetRandomStreamSeed(out RandomStream Stream, int NewSeed);// 0x325c58eb6041
	void SetQuaternionSpringStateAngularVelocity(out QuaternionSpringState SpringState, Vector AngularVelocity);// 0x325b58eb6041
	void SetFloatSpringStateVelocity(out FloatSpringState SpringState, float Velocity);// 0x325a58eb6041
	void Set2D(out Vector2D A, double X, double Y);// 0x325958eb6041
	Vector SelectVector(Vector A, Vector B, bool bPickA);// 0x325858eb6041
	Transform SelectTransform(out const Transform A, out const Transform B, bool bPickA);// 0x325758eb6041
	FString SelectString(FString A, FString B, bool bPickA);// 0x325658eb6041
	Rotator SelectRotator(Rotator A, Rotator B, bool bPickA);// 0x325558eb6041
	Object* SelectObject(Object* A, Object* B, bool bSelectA);// 0x325458eb6041
	int SelectInt(int A, int B, bool bPickA);// 0x325358eb6041
	double SelectFloat(double A, double B, bool bPickA);// 0x325258eb6041
	LinearColor SelectColor(LinearColor A, LinearColor B, bool bPickA);// 0x325158eb6041
	class Object SelectClass(class Object A, class Object B, bool bSelectA);// 0x325058eb6041
	void SeedRandomStream(out RandomStream Stream);// 0x324f58eb6041
	double SafeDivide(double A, double B);// 0x324e58eb6041
	int64 Round64(double A);// 0x324d58eb6041
	int Round(double A);// 0x324c58eb6041
	Rotator RotatorFromAxisAndAngle(Vector Axis, float Angle);// 0x324b58eb6041
	Vector RotateAngleAxis(Vector InVect, float AngleDeg, Vector Axis);// 0x328c58eb6041
	Rotator RLerp(Rotator A, Rotator B, float Alpha, bool bShortestPath);// 0x324958eb6041
	Rotator RInterpTo_Constant(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0x324858eb6041
	Rotator RInterpTo(Rotator Current, Rotator Target, float DeltaTime, float InterpSpeed);// 0x324758eb6041
	void RGBToHSV_Vector(LinearColor RGB, out LinearColor HSV);// 0x324658eb6041
	void RGBToHSV(LinearColor InColor, out float H, out float S, out float V, out float A);// 0x324558eb6041
	LinearColor RGBLinearToHSV(LinearColor RGB);// 0x324458eb6041
	void ResetVectorSpringState(out VectorSpringState SpringState);// 0x324358eb6041
	void ResetRandomStream(out const RandomStream Stream);// 0x324258eb6041
	void ResetQuaternionSpringState(out QuaternionSpringState SpringState);// 0x324158eb6041
	void ResetFloatSpringState(out FloatSpringState SpringState);// 0x324058eb6041
	Rotator REase(Rotator A, Rotator B, float Alpha, bool bShortestPath, byte EasingFunc, float BlendExp, int Steps);// 0x323f58eb6041
	Vector RandomUnitVectorInEllipticalConeInRadiansFromStream(out const Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians, out const RandomStream Stream);// 0x323e58eb6041
	Vector RandomUnitVectorInEllipticalConeInRadians(Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians);// 0x323d58eb6041
	Vector RandomUnitVectorInEllipticalConeInDegreesFromStream(out const Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, out const RandomStream Stream);// 0x323c58eb6041
	Vector RandomUnitVectorInEllipticalConeInDegrees(Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);// 0x323b58eb6041
	Vector RandomUnitVectorInConeInRadiansFromStream(out const Vector ConeDir, float ConeHalfAngleInRadians, out const RandomStream Stream);// 0x323a58eb6041
	Vector RandomUnitVectorInConeInRadians(Vector ConeDir, float ConeHalfAngleInRadians);// 0x323958eb6041
	Vector RandomUnitVectorInConeInDegreesFromStream(out const Vector ConeDir, float ConeHalfAngleInDegrees, out const RandomStream Stream);// 0x323858eb6041
	Vector RandomUnitVectorInConeInDegrees(Vector ConeDir, float ConeHalfAngleInDegrees);// 0x323758eb6041
	Vector RandomUnitVectorFromStream(out const RandomStream Stream);// 0x323658eb6041
	Vector RandomUnitVector();// 0x323558eb6041
	Rotator RandomRotatorFromStream(bool bRoll, out const RandomStream Stream);// 0x323458eb6041
	Rotator RandomRotator(bool bRoll);// 0x323358eb6041
	Vector RandomPointInBoundingBoxFromStream(const Vector Center, const Vector HalfSize, out const RandomStream Stream);// 0x323258eb6041
	Vector RandomPointInBoundingBox(const Vector Center, const Vector HalfSize);// 0x323158eb6041
	int RandomIntegerInRangeFromStream(int Min, int Max, out const RandomStream Stream);// 0x323058eb6041
	int RandomIntegerInRange(int Min, int Max);// 0x322f58eb6041
	int RandomIntegerFromStream(int Max, out const RandomStream Stream);// 0x322e58eb6041
	int64 RandomInteger64InRange(int64 Min, int64 Max);// 0x322d58eb6041
	int64 RandomInteger64(int64 Max);// 0x322c58eb6041
	int RandomInteger(int Max);// 0x322b58eb6041
	float RandomFloatInRangeFromStream(float Min, float Max, out const RandomStream Stream);// 0x322a58eb6041
	double RandomFloatInRange(double Min, double Max);// 0x326b58eb6041
	float RandomFloatFromStream(out const RandomStream Stream);// 0x322858eb6041
	double RandomFloat();// 0x322758eb6041
	bool RandomBoolWithWeightFromStream(float Weight, out const RandomStream RandomStream);// 0x322658eb6041
	bool RandomBoolWithWeight(float Weight);// 0x322558eb6041
	bool RandomBoolFromStream(out const RandomStream Stream);// 0x322458eb6041
	bool RandomBool();// 0x322358eb6041
	double RadiansToDegrees(double A);// 0x322258eb6041
	Quat QuaternionSpringInterp(Quat Current, Quat Target, out QuaternionSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bInitializeFromTarget);// 0x322158eb6041
	Vector Quat_VectorUp(out const Quat Q);// 0x322058eb6041
	Vector Quat_VectorRight(out const Quat Q);// 0x321f58eb6041
	Vector Quat_VectorForward(out const Quat Q);// 0x321e58eb6041
	Vector Quat_UnrotateVector(out const Quat Q, out const Vector V);// 0x321d58eb6041
	float Quat_SizeSquared(out const Quat Q);// 0x321c58eb6041
	float Quat_Size(out const Quat Q);// 0x321b58eb6041
	void Quat_SetFromEuler(out Quat Q, out const Vector Euler);// 0x321a58eb6041
	void Quat_SetComponents(out Quat Q, float X, float Y, float Z, float W);// 0x321958eb6041
	Rotator Quat_Rotator(out const Quat Q);// 0x321858eb6041
	Vector Quat_RotateVector(out const Quat Q, out const Vector V);// 0x321758eb6041
	Quat Quat_Normalized(out const Quat Q, float Tolerance);// 0x321658eb6041
	void Quat_Normalize(out Quat Q, float Tolerance);// 0x321558eb6041
	Quat Quat_MakeFromEuler(out const Vector Euler);// 0x321458eb6041
	Quat Quat_Log(out const Quat Q);// 0x321358eb6041
	bool Quat_IsNormalized(out const Quat Q);// 0x321258eb6041
	bool Quat_IsNonFinite(out const Quat Q);// 0x321158eb6041
	bool Quat_IsIdentity(out const Quat Q, float Tolerance);// 0x321058eb6041
	bool Quat_IsFinite(out const Quat Q);// 0x320f58eb6041
	Quat Quat_Inversed(out const Quat Q);// 0x320e58eb6041
	Quat Quat_Identity();// 0x320d58eb6041
	Vector Quat_GetRotationAxis(out const Quat Q);// 0x320c58eb6041
	Vector Quat_GetAxisZ(out const Quat Q);// 0x320b58eb6041
	Vector Quat_GetAxisY(out const Quat Q);// 0x320a58eb6041
	Vector Quat_GetAxisX(out const Quat Q);// 0x320958eb6041
	float Quat_GetAngle(out const Quat Q);// 0x324a58eb6041
	Quat Quat_Exp(out const Quat Q);// 0x320758eb6041
	Vector Quat_Euler(out const Quat Q);// 0x320658eb6041
	void Quat_EnforceShortestArcWith(out Quat A, out const Quat B);// 0x320558eb6041
	float Quat_AngularDistance(out const Quat A, out const Quat B);// 0x320458eb6041
	Vector ProjectVectorOnToVector(Vector V, Vector Target);// 0x320358eb6041
	Vector ProjectVectorOnToPlane(Vector V, Vector PlaneNormal);// 0x320258eb6041
	Vector ProjectPointOnToPlane(Vector Point, Vector PlaneBase, Vector PlaneNormal);// 0x320158eb6041
	bool PointsAreCoplanar(out const Vector[] Points, float Tolerance);// 0x320058eb6041
	float PerlinNoise1D(const float Value);// 0x31ff58eb6041
	int Percent_IntInt(int A, int B);// 0x31fe58eb6041
	double Percent_FloatFloat(double A, double B);// 0x31fd58eb6041
	byte Percent_ByteByte(byte A, byte B);// 0x31fc58eb6041
	int Or_IntInt(int A, int B);// 0x31fb58eb6041
	int64 Or_Int64Int64(int64 A, int64 B);// 0x31fa58eb6041
	DateTime Now();// 0x31f958eb6041
	bool NotEqualExactly_VectorVector(Vector A, Vector B);// 0x31f858eb6041
	bool NotEqualExactly_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x31f758eb6041
	bool NotEqualExactly_Vector2DVector2D(Vector2D A, Vector2D B);// 0x31f658eb6041
	bool NotEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0x31f558eb6041
	bool NotEqual_Vector4Vector4(out const Vector4 A, out const Vector4 B, float ErrorTolerance);// 0x31f458eb6041
	bool NotEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0x31f358eb6041
	bool NotEqual_TimespanTimespan(Timespan A, Timespan B);// 0x31f258eb6041
	bool NotEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0x31f158eb6041
	bool NotEqual_QuatQuat(out const Quat A, out const Quat B, float ErrorTolerance);// 0x31f058eb6041
	bool NotEqual_ObjectObject(Object* A, Object* B);// 0x31ef58eb6041
	bool NotEqual_NameName(FName A, FName B);// 0x31ee58eb6041
	bool NotEqual_MatrixMatrix(out const Matrix A, out const Matrix B, float Tolerance);// 0x31ed58eb6041
	bool NotEqual_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x31ec58eb6041
	bool NotEqual_IntPointIntPoint(IntPoint A, IntPoint B);// 0x31eb58eb6041
	bool NotEqual_IntInt(int A, int B);// 0x31ea58eb6041
	bool NotEqual_Int64Int64(int64 A, int64 B);// 0x31e958eb6041
	bool NotEqual_DoubleDouble(double A, double B);// 0x31e858eb6041
	bool NotEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x322958eb6041
	bool NotEqual_ClassClass(class Object A, class Object B);// 0x31e658eb6041
	bool NotEqual_ByteByte(byte A, byte B);// 0x31e558eb6041
	bool NotEqual_BoolBool(bool A, bool B);// 0x31e458eb6041
	bool Not_PreBool(bool A);// 0x31e358eb6041
	int64 Not_Int64(int64 A);// 0x31e258eb6041
	int Not_Int(int A);// 0x31e158eb6041
	Vector2D NormalSafe2D(Vector2D A, float Tolerance);// 0x31e058eb6041
	double NormalizeToRange(double Value, double RangeMin, double RangeMax);// 0x31df58eb6041
	Rotator NormalizedDeltaRotator(Rotator A, Rotator B);// 0x31de58eb6041
	float NormalizeAxis(float Angle);// 0x31dd58eb6041
	void Normalize2D(out Vector2D A, float Tolerance);// 0x31dc58eb6041
	Vector2D Normal2D(Vector2D A);// 0x31db58eb6041
	Vector Normal(Vector A, float Tolerance);// 0x31da58eb6041
	Vector NegateVector(Vector A);// 0x31d958eb6041
	Rotator NegateRotator(Rotator A);// 0x31d858eb6041
	Vector2D Negated2D(out const Vector2D A);// 0x31d758eb6041
	bool NearlyEqual_TransformTransform(out const Transform A, out const Transform B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);// 0x31d658eb6041
	bool NearlyEqual_FloatFloat(double A, double B, double ErrorTolerance);// 0x31d558eb6041
	double MultiplyMultiply_FloatFloat(double Base, double Exp);// 0x31d458eb6041
	double MultiplyByPi(double Value);// 0x31d358eb6041
	Vector Multiply_VectorVector(Vector A, Vector B);// 0x31d258eb6041
	Vector Multiply_VectorInt(Vector A, int B);// 0x31d158eb6041
	Vector Multiply_VectorFloat(Vector A, double B);// 0x31d058eb6041
	Vector4 Multiply_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x31cf58eb6041
	Vector2D Multiply_Vector2DVector2D(Vector2D A, Vector2D B);// 0x31ce58eb6041
	Vector2D Multiply_Vector2DFloat(Vector2D A, double B);// 0x31cd58eb6041
	Timespan Multiply_TimespanFloat(Timespan A, float Scalar);// 0x31cc58eb6041
	Rotator Multiply_RotatorInt(Rotator A, int B);// 0x31cb58eb6041
	Rotator Multiply_RotatorFloat(Rotator A, float B);// 0x31ca58eb6041
	Quat Multiply_QuatQuat(out const Quat A, out const Quat B);// 0x31c958eb6041
	Matrix Multiply_MatrixMatrix(out const Matrix A, out const Matrix B);// 0x31c858eb6041
	Matrix Multiply_MatrixFloat(out const Matrix A, double B);// 0x31c758eb6041
	LinearColor Multiply_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x320858eb6041
	LinearColor Multiply_LinearColorFloat(LinearColor A, float B);// 0x31c558eb6041
	IntPoint Multiply_IntPointIntPoint(IntPoint A, IntPoint B);// 0x31c458eb6041
	IntPoint Multiply_IntPointInt(IntPoint A, int B);// 0x31c358eb6041
	int Multiply_IntInt(int A, int B);// 0x31c258eb6041
	double Multiply_IntFloat(int A, double B);// 0x31c158eb6041
	int64 Multiply_Int64Int64(int64 A, int64 B);// 0x31c058eb6041
	double Multiply_DoubleDouble(double A, double B);// 0x31bf58eb6041
	byte Multiply_ByteByte(byte A, byte B);// 0x31be58eb6041
	Vector MirrorVectorByNormal(Vector InVect, Vector InNormal);// 0x31bd58eb6041
	void MinOfIntArray(out const int[] IntArray, out int IndexOfMinValue, out int MinValue);// 0x31bc58eb6041
	void MinOfFloatArray(out const float[] FloatArray, out int IndexOfMinValue, out float MinValue);// 0x31bb58eb6041
	void MinOfByteArray(out const byte[] ByteArray, out int IndexOfMinValue, out byte MinValue);// 0x31ba58eb6041
	int64 MinInt64(int64 A, int64 B);// 0x31b958eb6041
	void MinimumAreaRectangle(Object* WorldContextObject, out const Vector[] InVerts, out const Vector SampleSurfaceNormal, out Vector OutRectCenter, out Rotator OutRectRotation, out float OutSideLengthX, out float OutSideLengthY, bool bDebugDraw);// 0x31b858eb6041
	void MinAreaRectangle(Object* WorldContextObject, out const Vector[] InPoints, out const Vector SampleSurfaceNormal, out Vector OutRectCenter, out Rotator OutRectRotation, out float OutRectLengthX, out float OutRectLengthY, bool bDebugDraw);// 0x31b758eb6041
	int Min(int A, int B);// 0x31b658eb6041
	void MaxOfIntArray(out const int[] IntArray, out int IndexOfMaxValue, out int MaxValue);// 0x31b558eb6041
	void MaxOfFloatArray(out const float[] FloatArray, out int IndexOfMaxValue, out float MaxValue);// 0x31b458eb6041
	void MaxOfByteArray(out const byte[] ByteArray, out int IndexOfMaxValue, out byte MaxValue);// 0x31b358eb6041
	int64 MaxInt64(int64 A, int64 B);// 0x31b258eb6041
	int Max(int A, int B);// 0x31b158eb6041
	Vector4 Matrix_TransformVector4(out const Matrix M, Vector4 V);// 0x31b058eb6041
	Vector4 Matrix_TransformVector(out const Matrix M, Vector V);// 0x31af58eb6041
	Vector4 Matrix_TransformPosition(out const Matrix M, Vector V);// 0x31ae58eb6041
	Quat Matrix_ToQuat(out const Matrix M);// 0x31ad58eb6041
	void Matrix_SetOrigin(out Matrix M, Vector NewOrigin);// 0x31ac58eb6041
	void Matrix_SetColumn(out Matrix M, byte Column, Vector Value);// 0x31ab58eb6041
	void Matrix_SetAxis(out Matrix M, byte Axis, Vector AxisVector);// 0x31aa58eb6041
	Matrix Matrix_ScaleTranslation(out const Matrix M, Vector Scale3D);// 0x31a958eb6041
	Matrix Matrix_RemoveTranslation(out const Matrix M);// 0x31a858eb6041
	void Matrix_RemoveScaling(out Matrix M, float Tolerance);// 0x31a758eb6041
	Matrix Matrix_Mirror(out const Matrix M, byte MirrorAxis, byte FlipAxis);// 0x31a658eb6041
	Vector Matrix_InverseTransformVector(out const Matrix M, Vector V);// 0x31e758eb6041
	Vector Matrix_InverseTransformPosition(out const Matrix M, Vector V);// 0x31a458eb6041
	Matrix Matrix_Identity();// 0x31a358eb6041
	Vector Matrix_GetUnitAxis(out const Matrix M, byte Axis);// 0x31a258eb6041
	void Matrix_GetUnitAxes(out const Matrix M, out Vector X, out Vector Y, out Vector Z);// 0x31a158eb6041
	Matrix Matrix_GetTransposed(out const Matrix M);// 0x31a058eb6041
	Matrix Matrix_GetTransposeAdjoint(out const Matrix M);// 0x319f58eb6041
	Vector Matrix_GetScaleVector(out const Matrix M, float Tolerance);// 0x319e58eb6041
	Vector Matrix_GetScaledAxis(out const Matrix M, byte Axis);// 0x319d58eb6041
	void Matrix_GetScaledAxes(out const Matrix M, out Vector X, out Vector Y, out Vector Z);// 0x319c58eb6041
	float Matrix_GetRotDeterminant(out const Matrix M);// 0x319b58eb6041
	Rotator Matrix_GetRotator(out const Matrix M);// 0x319a58eb6041
	Vector Matrix_GetOrigin(out const Matrix InMatrix);// 0x319958eb6041
	float Matrix_GetMaximumAxisScale(out const Matrix M);// 0x319858eb6041
	Matrix Matrix_GetMatrixWithoutScale(out const Matrix M, float Tolerance);// 0x319758eb6041
	Matrix Matrix_GetInverse(out const Matrix M);// 0x319658eb6041
	bool Matrix_GetFrustumTopPlane(out const Matrix M, out Plane OutPlane);// 0x319558eb6041
	bool Matrix_GetFrustumRightPlane(out const Matrix M, out Plane OutPlane);// 0x319458eb6041
	bool Matrix_GetFrustumNearPlane(out const Matrix M, out Plane OutPlane);// 0x319358eb6041
	bool Matrix_GetFrustumLeftPlane(out const Matrix M, out Plane OutPlane);// 0x319258eb6041
	bool Matrix_GetFrustumFarPlane(out const Matrix M, out Plane OutPlane);// 0x319158eb6041
	bool Matrix_GetFrustumBottomPlane(out const Matrix M, out Plane OutPlane);// 0x319058eb6041
	float Matrix_GetDeterminant(out const Matrix M);// 0x318f58eb6041
	Vector Matrix_GetColumn(out const Matrix M, byte Column);// 0x318e58eb6041
	bool Matrix_ContainsNaN(out const Matrix M);// 0x318d58eb6041
	Matrix Matrix_ConcatenateTranslation(out const Matrix M, Vector Translation);// 0x318c58eb6041
	Matrix Matrix_ApplyScale(out const Matrix M, float Scale);// 0x318b58eb6041
	double MapRangeUnclamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB);// 0x318a58eb6041
	double MapRangeClamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB);// 0xffffff8158eb6000
	Vector_NetQuantizeNormal MakeVector_NetQuantizeNormal(double X, double Y, double Z);// 0x318858eb6041
	Vector_NetQuantize100 MakeVector_NetQuantize100(double X, double Y, double Z);// 0x318758eb6041
	Vector_NetQuantize10 MakeVector_NetQuantize10(double X, double Y, double Z);// 0x318658eb6041
	Vector_NetQuantize MakeVector_NetQuantize(double X, double Y, double Z);// 0x318558eb6041
	Vector4 MakeVector4(double X, double Y, double Z, double W);// 0x318458eb6041
	Vector2D MakeVector2D(double X, double Y);// 0x318358eb6041
	Vector MakeVector(double X, double Y, double Z);// 0x318258eb6041
	Transform MakeTransform(Vector Location, Rotator Rotation, Vector Scale);// 0x318158eb6041
	Timespan MakeTimespan2(int Days, int Hours, int Minutes, int Seconds, int FractionNano);// 0x318058eb6041
	Timespan MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds);// 0x317f58eb6041
	Rotator MakeRotFromZY(out const Vector Z, out const Vector Y);// 0x317e58eb6041
	Rotator MakeRotFromZX(out const Vector Z, out const Vector X);// 0x317d58eb6041
	Rotator MakeRotFromZ(out const Vector Z);// 0x317c58eb6041
	Rotator MakeRotFromYZ(out const Vector Y, out const Vector Z);// 0x317b58eb6041
	Rotator MakeRotFromYX(out const Vector Y, out const Vector X);// 0x317a58eb6041
	Rotator MakeRotFromY(out const Vector Y);// 0x317958eb6041
	Rotator MakeRotFromXZ(out const Vector X, out const Vector Z);// 0x317858eb6041
	Rotator MakeRotFromXY(out const Vector X, out const Vector Y);// 0x317758eb6041
	Rotator MakeRotFromX(out const Vector X);// 0x317658eb6041
	Rotator MakeRotator(float Roll, float Pitch, float Yaw);// 0x317558eb6041
	Rotator MakeRotationFromAxes(Vector Forward, Vector Right, Vector Up);// 0x317458eb6041
	Transform MakeRelativeTransform(out const Transform A, out const Transform RelativeTo);// 0x317358eb6041
	RandomStream MakeRandomStream(int InitialSeed);// 0x317258eb6041
	Quat MakeQuat(float X, float Y, float Z, float W);// 0x317158eb6041
	QualifiedFrameTime MakeQualifiedFrameTime(FrameNumber Frame, FrameRate FrameRate, float SubFrame);// 0x317058eb6041
	float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);// 0x316f58eb6041
	Plane MakePlaneFromPointAndNormal(Vector Point, Vector Normal);// 0x316e58eb6041
	FrameRate MakeFrameRate(int Numerator, int Denominator);// 0x316d58eb6041
	DateTime MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond);// 0x316c58eb6041
	LinearColor MakeColor(float R, float G, float B, float A);// 0x316b58eb6041
	BoxSphereBounds MakeBoxSphereBounds(Vector Origin, Vector BoxExtent, float SphereRadius);// 0x316a58eb6041
	Box2D MakeBox2D(Vector2D Min, Vector2D Max);// 0x316958eb6041
	Box MakeBox(Vector Min, Vector Max);// 0x31a558eb6041
	double Loge(double A);// 0x316758eb6041
	double Log(double A, double Base);// 0x316658eb6041
	bool LinePlaneIntersection_OriginNormal(out const Vector LineStart, out const Vector LineEnd, Vector PlaneOrigin, Vector PlaneNormal, out float T, out Vector Intersection);// 0x316558eb6041
	bool LinePlaneIntersection(out const Vector LineStart, out const Vector LineEnd, out const Plane APlane, out float T, out Vector Intersection);// 0x316458eb6041
	LinearColor LinearColorLerpUsingHSV(LinearColor A, LinearColor B, float Alpha);// 0x316358eb6041
	LinearColor LinearColorLerp(LinearColor A, LinearColor B, float Alpha);// 0x316258eb6041
	LinearColor LinearColor_Yellow();// 0x316158eb6041
	LinearColor LinearColor_White();// 0x316058eb6041
	LinearColor LinearColor_Transparent();// 0x315f58eb6041
	Color LinearColor_ToRGBE(LinearColor InLinearColor);// 0x315e58eb6041
	LinearColor LinearColor_ToNewOpacity(LinearColor InColor, float InOpacity);// 0x315d58eb6041
	void LinearColor_SetTemperature(out LinearColor InOutColor, float InTemperature);// 0x315c58eb6041
	void LinearColor_SetRGBA(out LinearColor InOutColor, float R, float G, float B, float A);// 0x315b58eb6041
	void LinearColor_SetRandomHue(out LinearColor InOutColor);// 0x315a58eb6041
	void LinearColor_SetFromSRGB(out LinearColor InOutColor, out const Color InSRGB);// 0x315958eb6041
	void LinearColor_SetFromPow22(out LinearColor InOutColor, out const Color InColor);// 0x315858eb6041
	void LinearColor_SetFromHSV(out LinearColor InOutColor, float H, float S, float V, float A);// 0x315758eb6041
	void LinearColor_Set(out LinearColor InOutColor, LinearColor InColor);// 0x315658eb6041
	LinearColor LinearColor_Red();// 0x315558eb6041
	Color LinearColor_QuantizeRound(LinearColor InColor);// 0x315458eb6041
	Color LinearColor_Quantize(LinearColor InColor);// 0x315358eb6041
	bool LinearColor_IsNearEqual(LinearColor A, LinearColor B, float Tolerance);// 0x315258eb6041
	LinearColor LinearColor_Green();// 0x315158eb6041
	LinearColor LinearColor_Gray();// 0x315058eb6041
	float LinearColor_GetMin(LinearColor InColor);// 0x314f58eb6041
	float LinearColor_GetMax(LinearColor InColor);// 0x314e58eb6041
	float LinearColor_GetLuminance(LinearColor InColor);// 0x314d58eb6041
	float LinearColor_Distance(LinearColor C1, LinearColor C2);// 0x314c58eb6041
	LinearColor LinearColor_Desaturated(LinearColor InColor, float InDesaturation);// 0x314b58eb6041
	LinearColor LinearColor_Blue();// 0x314a58eb6041
	LinearColor LinearColor_Black();// 0x314958eb6041
	Vector LessLess_VectorRotator(Vector A, Rotator B);// 0x314858eb6041
	bool LessEqual_TimespanTimespan(Timespan A, Timespan B);// 0x318958eb6041
	bool LessEqual_IntInt(int A, int B);// 0x314658eb6041
	bool LessEqual_Int64Int64(int64 A, int64 B);// 0x314558eb6041
	bool LessEqual_DoubleDouble(double A, double B);// 0x314458eb6041
	bool LessEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x314358eb6041
	bool LessEqual_ByteByte(byte A, byte B);// 0x314258eb6041
	bool Less_TimespanTimespan(Timespan A, Timespan B);// 0x314158eb6041
	bool Less_IntInt(int A, int B);// 0x314058eb6041
	bool Less_Int64Int64(int64 A, int64 B);// 0x313f58eb6041
	bool Less_DoubleDouble(double A, double B);// 0x313e58eb6041
	bool Less_DateTimeDateTime(DateTime A, DateTime B);// 0x313d58eb6041
	bool Less_ByteByte(byte A, byte B);// 0x313c58eb6041
	double Lerp(double A, double B, double Alpha);// 0x313b58eb6041
	bool IsZero2D(out const Vector2D A);// 0x313a58eb6041
	bool IsPointInBoxWithTransform(Vector Point, out const Transform BoxWorldTransform, Vector BoxExtent);// 0x313958eb6041
	bool IsPointInBox(Vector Point, Vector BoxOrigin, Vector BoxExtent);// 0x313858eb6041
	bool IsNearlyZero2D(out const Vector2D A, float Tolerance);// 0x313758eb6041
	bool IsMorning(DateTime A);// 0x313658eb6041
	bool IsLeapYear(int Year);// 0x313558eb6041
	bool IsAfternoon(DateTime A);// 0x313458eb6041
	Transform InvertTransform(out const Transform T);// 0x313358eb6041
	Rotator InverseTransformRotation(out const Transform T, Rotator Rotation);// 0x313258eb6041
	Vector InverseTransformLocation(out const Transform T, Vector Location);// 0x313158eb6041
	Vector InverseTransformDirection(out const Transform T, Vector Direction);// 0x313058eb6041
	IntPoint IntPoint_Zero();// 0x312f58eb6041
	IntPoint IntPoint_Up();// 0x312e58eb6041
	IntPoint IntPoint_Right();// 0x312d58eb6041
	IntPoint IntPoint_One();// 0x312c58eb6041
	IntPoint IntPoint_Left();// 0x312b58eb6041
	IntPoint IntPoint_Down();// 0x312a58eb6041
	bool InRange_IntInt(int Value, int Min, int Max, bool InclusiveMin, bool InclusiveMax);// 0x312958eb6041
	bool InRange_Int64Int64(int64 Value, int64 Min, int64 Max, bool InclusiveMin, bool InclusiveMax);// 0x312858eb6041
	bool InRange_FloatFloat(double Value, double Min, double Max, bool InclusiveMin, bool InclusiveMax);// 0x312758eb6041
	double Hypotenuse(double Width, double Height);// 0x316858eb6041
	LinearColor HSVToRGBLinear(LinearColor HSV);// 0x312558eb6041
	void HSVToRGB_Vector(LinearColor HSV, out LinearColor RGB);// 0x312458eb6041
	LinearColor HSVToRGB(float H, float S, float V, float A);// 0x312358eb6041
	double GridSnap_Float(double Location, double GridSize);// 0x312258eb6041
	Vector GreaterGreater_VectorRotator(Vector A, Rotator B);// 0x312158eb6041
	bool GreaterEqual_TimespanTimespan(Timespan A, Timespan B);// 0x312058eb6041
	bool GreaterEqual_IntInt(int A, int B);// 0x311f58eb6041
	bool GreaterEqual_Int64Int64(int64 A, int64 B);// 0x311e58eb6041
	bool GreaterEqual_DoubleDouble(double A, double B);// 0x311d58eb6041
	bool GreaterEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x311c58eb6041
	bool GreaterEqual_ByteByte(byte A, byte B);// 0x311b58eb6041
	bool Greater_TimespanTimespan(Timespan A, Timespan B);// 0x311a58eb6041
	bool Greater_IntInt(int A, int B);// 0x311958eb6041
	bool Greater_Int64Int64(int64 A, int64 B);// 0x311858eb6041
	bool Greater_DoubleDouble(double A, double B);// 0x311758eb6041
	bool Greater_DateTimeDateTime(DateTime A, DateTime B);// 0x311658eb6041
	bool Greater_ByteByte(byte A, byte B);// 0x311558eb6041
	int GetYear(DateTime A);// 0x311458eb6041
	void GetYawPitchFromVector(Vector InVec, out float Yaw, out float Pitch);// 0x311358eb6041
	Vector GetVectorArrayAverage(out const Vector[] Vectors);// 0x311258eb6041
	Vector GetUpVector(Rotator InRot);// 0x311158eb6041
	float GetTotalSeconds(Timespan A);// 0x311058eb6041
	float GetTotalMinutes(Timespan A);// 0x310f58eb6041
	float GetTotalMilliseconds(Timespan A);// 0x310e58eb6041
	float GetTotalHours(Timespan A);// 0x310d58eb6041
	float GetTotalDays(Timespan A);// 0x310c58eb6041
	Timespan GetTimeOfDay(DateTime A);// 0x310b58eb6041
	double GetTAU();// 0x310a58eb6041
	void GetSlopeDegreeAngles(out const Vector MyRightYAxis, out const Vector FloorNormal, out const Vector UpVector, out float OutSlopePitchDegreeAngle, out float OutSlopeRollDegreeAngle);// 0x310958eb6041
	int GetSeconds(Timespan A);// 0x310858eb6041
	int GetSecond(DateTime A);// 0x310758eb6041
	Vector2D GetRotated2D(Vector2D A, float AngleDeg);// 0x310658eb6041
	Vector GetRightVector(Rotator InRot);// 0x314758eb6041
	Vector GetReflectionVector(Vector Direction, Vector SurfaceNormal);// 0x310458eb6041
	float GetPointDistanceToSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0x310358eb6041
	float GetPointDistanceToLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0x310258eb6041
	double GetPI();// 0x310158eb6041
	int GetMonth(DateTime A);// 0x310058eb6041
	int GetMinutes(Timespan A);// 0x30ff58eb6041
	int GetMinute(DateTime A);// 0x30fe58eb6041
	double GetMinElement(Vector A);// 0x30fd58eb6041
	double GetMin2D(Vector2D A);// 0x30fc58eb6041
	int GetMilliseconds(Timespan A);// 0x30fb58eb6041
	int GetMillisecond(DateTime A);// 0x30fa58eb6041
	double GetMaxElement(Vector A);// 0x30f958eb6041
	double GetMax2D(Vector2D A);// 0x30f858eb6041
	int GetHours(Timespan A);// 0x30f758eb6041
	int GetHour12(DateTime A);// 0x30f658eb6041
	int GetHour(DateTime A);// 0x30f558eb6041
	Vector GetForwardVector(Rotator InRot);// 0x30f458eb6041
	Timespan GetDuration(Timespan A);// 0x30f358eb6041
	Vector GetDirectionUnitVector(Vector From, Vector To);// 0x30f258eb6041
	int GetDays(Timespan A);// 0x30f158eb6041
	int GetDayOfYear(DateTime A);// 0x30f058eb6041
	int GetDay(DateTime A);// 0x30ef58eb6041
	DateTime GetDate(DateTime A);// 0x30ee58eb6041
	void GetAzimuthAndElevation(Vector InDirection, out const Transform ReferenceFrame, out float Azimuth, out float Elevation);// 0x30ed58eb6041
	void GetAxes(Rotator A, out Vector X, out Vector Y, out Vector Z);// 0x30ec58eb6041
	double GetAbsMax2D(Vector2D A);// 0x30eb58eb6041
	Vector2D GetAbs2D(Vector2D A);// 0x30ea58eb6041
	double FWrap(double Value, double Min, double Max);// 0x30e958eb6041
	IntVector FTruncVector(out const Vector InVector);// 0x30e858eb6041
	int64 FTrunc64(double A);// 0x30e758eb6041
	int FTrunc(double A);// 0x30e658eb6041
	Timespan FromSeconds(float Seconds);// 0x30e558eb6041
	Timespan FromMinutes(float Minutes);// 0x312658eb6041
	Timespan FromMilliseconds(float Milliseconds);// 0x30e358eb6041
	Timespan FromHours(float Hours);// 0x30e258eb6041
	Timespan FromDays(float Days);// 0x30e158eb6041
	double Fraction(double A);// 0x30e058eb6041
	int64 FMod64(double Dividend, double Divisor, out double Remainder);// 0x30df58eb6041
	int FMod(double Dividend, double Divisor, out double Remainder);// 0x30de58eb6041
	double FMin(double A, double B);// 0x30dd58eb6041
	double FMax(double A, double B);// 0x30dc58eb6041
	float FloatSpringInterp(float Current, float Target, out FloatSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, float MinValue, float MaxValue, bool bInitializeFromTarget);// 0x30db58eb6041
	float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);// 0x30da58eb6041
	double FInterpTo_Constant(double Current, double Target, double DeltaTime, double InterpSpeed);// 0x30d958eb6041
	double FInterpTo(double Current, double Target, double DeltaTime, double InterpSpeed);// 0x30d858eb6041
	double FInterpEaseInOut(double A, double B, double Alpha, double Exponent);// 0x30d758eb6041
	Rotator FindRelativeLookAtRotation(out const Transform StartTransform, out const Vector TargetLocation);// 0x30d658eb6041
	void FindNearestPointsOnLineSegments(Vector Segment1Start, Vector Segment1End, Vector Segment2Start, Vector Segment2End, out Vector Segment1Point, out Vector Segment2Point);// 0x30d558eb6041
	Rotator FindLookAtRotation(out const Vector Start, out const Vector Target);// 0x30d458eb6041
	Vector FindClosestPointOnSegment(Vector Point, Vector SegmentStart, Vector SegmentEnd);// 0x30d358eb6041
	Vector FindClosestPointOnLine(Vector Point, Vector LineOrigin, Vector LineDirection);// 0x30d258eb6041
	int64 FFloor64(double A);// 0x30d158eb6041
	int FFloor(double A);// 0x30d058eb6041
	double FClamp(double Value, double Min, double Max);// 0x30cf58eb6041
	int64 FCeil64(double A);// 0x30ce58eb6041
	int FCeil(double A);// 0x30cd58eb6041
	double Exp(double A);// 0x30cc58eb6041
	bool EqualExactly_VectorVector(Vector A, Vector B);// 0x30cb58eb6041
	bool EqualExactly_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x30ca58eb6041
	bool EqualExactly_Vector2DVector2D(Vector2D A, Vector2D B);// 0x30c958eb6041
	bool EqualEqual_VectorVector(Vector A, Vector B, float ErrorTolerance);// 0x30c858eb6041
	bool EqualEqual_Vector4Vector4(out const Vector4 A, out const Vector4 B, float ErrorTolerance);// 0x30c758eb6041
	bool EqualEqual_Vector2DVector2D(Vector2D A, Vector2D B, float ErrorTolerance);// 0x30c658eb6041
	bool EqualEqual_TransformTransform(out const Transform A, out const Transform B);// 0x30c558eb6041
	bool EqualEqual_TimespanTimespan(Timespan A, Timespan B);// 0x30c458eb6041
	bool EqualEqual_RotatorRotator(Rotator A, Rotator B, float ErrorTolerance);// 0x310558eb6041
	bool EqualEqual_QuatQuat(out const Quat A, out const Quat B, float Tolerance);// 0x30c258eb6041
	bool EqualEqual_ObjectObject(Object* A, Object* B);// 0x30c158eb6041
	bool EqualEqual_NameName(FName A, FName B);// 0x30c058eb6041
	bool EqualEqual_MatrixMatrix(out const Matrix A, out const Matrix B, float Tolerance);// 0x30bf58eb6041
	bool EqualEqual_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x30be58eb6041
	bool EqualEqual_IntInt(int A, int B);// 0x30bd58eb6041
	bool EqualEqual_Int64Int64(int64 A, int64 B);// 0x30bc58eb6041
	bool EqualEqual_DoubleDouble(double A, double B);// 0x30bb58eb6041
	bool EqualEqual_DateTimeDateTime(DateTime A, DateTime B);// 0x30ba58eb6041
	bool EqualEqual_ClassClass(class Object A, class Object B);// 0x30b958eb6041
	bool EqualEqual_ByteByte(byte A, byte B);// 0x30b858eb6041
	bool EqualEqual_BoolBool(bool A, bool B);// 0x30b758eb6041
	bool Equal_IntPointIntPoint(IntPoint A, IntPoint B);// 0x30b658eb6041
	double Ease(double A, double B, double Alpha, byte EasingFunc, double BlendExp, int Steps);// 0x30b558eb6041
	Vector DynamicWeightedMovingAverage_FVector(Vector CurrentSample, Vector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0x30b458eb6041
	Rotator DynamicWeightedMovingAverage_FRotator(Rotator CurrentSample, Rotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0x30b358eb6041
	float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);// 0x30b258eb6041
	double DotProduct2D(Vector2D A, Vector2D B);// 0x30b158eb6041
	double Dot_VectorVector(Vector A, Vector B);// 0x30b058eb6041
	Vector Divide_VectorVector(Vector A, Vector B);// 0x30af58eb6041
	Vector Divide_VectorInt(Vector A, int B);// 0x30ae58eb6041
	Vector Divide_VectorFloat(Vector A, double B);// 0x30ad58eb6041
	Vector4 Divide_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x30ac58eb6041
	Vector2D Divide_Vector2DVector2D(Vector2D A, Vector2D B);// 0x30ab58eb6041
	Vector2D Divide_Vector2DFloat(Vector2D A, double B);// 0x30aa58eb6041
	Timespan Divide_TimespanFloat(Timespan A, float Scalar);// 0x30a958eb6041
	LinearColor Divide_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x30a858eb6041
	IntPoint Divide_IntPointIntPoint(IntPoint A, IntPoint B);// 0x30a758eb6041
	IntPoint Divide_IntPointInt(IntPoint A, int B);// 0x30a658eb6041
	int Divide_IntInt(int A, int B);// 0x30a558eb6041
	int64 Divide_Int64Int64(int64 A, int64 B);// 0x30a458eb6041
	double Divide_DoubleDouble(double A, double B);// 0x30a358eb6041
	byte Divide_ByteByte(byte A, byte B);// 0x30e458eb6041
	double DistanceSquared2D(Vector2D v1, Vector2D v2);// 0x30a158eb6041
	double Distance2D(Vector2D v1, Vector2D v2);// 0x30a058eb6041
	double DegTan(double A);// 0x309f58eb6041
	double DegSin(double A);// 0x309e58eb6041
	double DegreesToRadians(double A);// 0x309d58eb6041
	double DegCos(double A);// 0x309c58eb6041
	double DegAtan2(double Y, double X);// 0x309b58eb6041
	double DegAtan(double A);// 0x309a58eb6041
	double DegAsin(double A);// 0x309958eb6041
	double DegAcos(double A);// 0x309858eb6041
	int DaysInYear(int Year);// 0x309758eb6041
	int DaysInMonth(int Year, int Month);// 0x309658eb6041
	DateTime DateTimeMinValue();// 0x309558eb6041
	DateTime DateTimeMaxValue();// 0x309458eb6041
	bool DateTimeFromString(FString DateTimeString, out DateTime Result);// 0x309358eb6041
	bool DateTimeFromIsoString(FString IsoString, out DateTime Result);// 0x309258eb6041
	double CrossProduct2D(Vector2D A, Vector2D B);// 0x309158eb6041
	Vector Cross_VectorVector(Vector A, Vector B);// 0x309058eb6041
	Vector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);// 0x308f58eb6041
	double Cos(double A);// 0x308e58eb6041
	Transform ConvertTransformToRelative(out const Transform Transform, out const Transform ParentTransform);// 0x308d58eb6041
	Vector2D Conv_VectorToVector2D(Vector InVector);// 0x308c58eb6041
	Transform Conv_VectorToTransform(Vector InLocation);// 0x308b58eb6041
	Rotator Conv_VectorToRotator(Vector InVec);// 0x308a58eb6041
	Quat Conv_VectorToQuaternion(Vector InVec);// 0x308958eb6041
	LinearColor Conv_VectorToLinearColor(Vector InVec);// 0x308858eb6041
	Vector Conv_Vector4ToVector(out const Vector4 InVector4);// 0x308758eb6041
	Rotator Conv_Vector4ToRotator(out const Vector4 InVec);// 0x308658eb6041
	Quat Conv_Vector4ToQuaternion(out const Vector4 InVec);// 0x308558eb6041
	Vector Conv_Vector2DToVector(Vector2D InVector2D, float Z);// 0x308458eb6041
	IntPoint Conv_Vector2DToIntPoint(Vector2D InVector2D);// 0x308358eb6041
	Matrix Conv_TransformToMatrix(out const Transform Transform);// 0x308258eb6041
	Vector Conv_RotatorToVector(Rotator InRot);// 0x30c358eb6041
	Transform Conv_RotatorToTransform(out const Rotator InRotator);// 0x308058eb6041
	Quat Conv_RotatorToQuaternion(Rotator InRot);// 0x307f58eb6041
	Transform Conv_MatrixToTransform(out const Matrix InMatrix);// 0x307e58eb6041
	Rotator Conv_MatrixToRotator(out const Matrix InMatrix);// 0x307d58eb6041
	Vector Conv_LinearColorToVector(LinearColor InLinearColor);// 0x307c58eb6041
	Color Conv_LinearColorToColor(LinearColor InLinearColor, bool InUseSRGB);// 0x307b58eb6041
	Vector Conv_IntVectorToVector(out const IntVector InIntVector);// 0x307a58eb6041
	Vector Conv_IntToVector(int inInt);// 0x307958eb6041
	IntVector Conv_IntToIntVector(int inInt);// 0x307858eb6041
	int64 Conv_IntToInt64(int inInt);// 0x307758eb6041
	float Conv_IntToFloat(int inInt);// 0x307658eb6041
	double Conv_IntToDouble(int inInt);// 0x307558eb6041
	byte Conv_IntToByte(int inInt);// 0x307458eb6041
	bool Conv_IntToBool(int inInt);// 0x307358eb6041
	Vector2D Conv_IntPointToVector2D(IntPoint InIntPoint);// 0x307258eb6041
	int Conv_Int64ToInt(int64 inInt);// 0x307158eb6041
	double Conv_Int64ToDouble(int64 inInt);// 0x307058eb6041
	byte Conv_Int64ToByte(int64 inInt);// 0x306f58eb6041
	Vector Conv_FloatToVector(float InFloat);// 0x306e58eb6041
	LinearColor Conv_FloatToLinearColor(float InFloat);// 0x306d58eb6041
	double Conv_FloatToDouble(float InFloat);// 0x306c58eb6041
	Vector Conv_DoubleToVector(double InDouble);// 0x306b58eb6041
	LinearColor Conv_DoubleToLinearColor(double InDouble);// 0x306a58eb6041
	int64 Conv_DoubleToInt64(double InDouble);// 0x306958eb6041
	float Conv_DoubleToFloat(double InDouble);// 0x306858eb6041
	LinearColor Conv_ColorToLinearColor(Color InColor);// 0x306758eb6041
	int64 Conv_ByteToInt64(byte InByte);// 0x306658eb6041
	int Conv_ByteToInt(byte InByte);// 0xffffff8158eb6000
	float Conv_ByteToFloat(byte InByte);// 0x306458eb6041
	double Conv_ByteToDouble(byte InByte);// 0x306358eb6041
	int Conv_BoolToInt(bool InBool);// 0x306258eb6041
	float Conv_BoolToFloat(bool InBool);// 0x306158eb6041
	byte Conv_BoolToByte(bool InBool);// 0x306058eb6041
	Transform ComposeTransforms(out const Transform A, out const Transform B);// 0x305f58eb6041
	Rotator ComposeRotators(Rotator A, Rotator B);// 0x305e58eb6041
	bool ClassIsChildOf(class Object TestClass, class Object ParentClass);// 0x305d58eb6041
	Vector ClampVectorSize(Vector A, double Min, double Max);// 0x305c58eb6041
	int64 ClampInt64(int64 Value, int64 Min, int64 Max);// 0x305b58eb6041
	float ClampAxis(float Angle);// 0x305a58eb6041
	Vector2D ClampAxes2D(Vector2D A, double MinAxisVal, double MaxAxisVal);// 0x305958eb6041
	double ClampAngle(double AngleDegrees, double MinAngleDegrees, double MaxAngleDegrees);// 0x305858eb6041
	int Clamp(int Value, int Min, int Max);// 0x305758eb6041
	LinearColor CInterpTo(LinearColor Current, LinearColor Target, float DeltaTime, float InterpSpeed);// 0x305658eb6041
	void BreakVector_NetQuantizeNormal(Vector_NetQuantizeNormal InVec, out double X, out double Y, out double Z);// 0x305558eb6041
	void BreakVector_NetQuantize100(Vector_NetQuantize100 InVec, out double X, out double Y, out double Z);// 0x305458eb6041
	void BreakVector_NetQuantize10(Vector_NetQuantize10 InVec, out double X, out double Y, out double Z);// 0x305358eb6041
	void BreakVector_NetQuantize(Vector_NetQuantize InVec, out double X, out double Y, out double Z);// 0x305258eb6041
	void BreakVector4(out const Vector4 InVec, out double X, out double Y, out double Z, out double W);// 0x305158eb6041
	void BreakVector3f(Vector3f InVec, out float X, out float Y, out float Z);// 0x305058eb6041
	void BreakVector2D(Vector2D InVec, out double X, out double Y);// 0x304f58eb6041
	void BreakVector(Vector InVec, out double X, out double Y, out double Z);// 0x304e58eb6041
	void BreakTransform(out const Transform InTransform, out Vector Location, out Rotator Rotation, out Vector Scale);// 0x304d58eb6041
	void BreakTimespan2(Timespan InTimespan, out int Days, out int Hours, out int Minutes, out int Seconds, out int FractionNano);// 0x304c58eb6041
	void BreakTimespan(Timespan InTimespan, out int Days, out int Hours, out int Minutes, out int Seconds, out int Milliseconds);// 0x304b58eb6041
	void BreakRotIntoAxes(out const Rotator InRot, out Vector X, out Vector Y, out Vector Z);// 0x304a58eb6041
	void BreakRotator(Rotator InRot, out float Roll, out float Pitch, out float Yaw);// 0x304958eb6041
	void BreakRandomStream(out const RandomStream InRandomStream, out int InitialSeed);// 0x304858eb6041
	void BreakQuat(out const Quat InQuat, out float X, out float Y, out float Z, out float W);// 0x304758eb6041
	void BreakQualifiedFrameTime(out const QualifiedFrameTime InFrameTime, out FrameNumber Frame, out FrameRate FrameRate, out float SubFrame);// 0x304658eb6041
	void BreakFrameRate(out const FrameRate InFrameRate, out int Numerator, out int Denominator);// 0x304558eb6041
	void BreakDateTime(DateTime InDateTime, out int Year, out int Month, out int Day, out int Hour, out int Minute, out int Second, out int Millisecond);// 0x308158eb6041
	void BreakColor(LinearColor InColor, out float R, out float G, out float B, out float A);// 0x304358eb6041
	void BreakBoxSphereBounds(out const BoxSphereBounds InBoxSphereBounds, out Vector Origin, out Vector BoxExtent, out float SphereRadius);// 0x304258eb6041
	bool BooleanXOR(bool A, bool B);// 0x304158eb6041
	bool BooleanOR(bool A, bool B);// 0x304058eb6041
	bool BooleanNOR(bool A, bool B);// 0x303f58eb6041
	bool BooleanNAND(bool A, bool B);// 0x303e58eb6041
	bool BooleanAND(bool A, bool B);// 0x303d58eb6041
	byte BMin(byte A, byte B);// 0x303c58eb6041
	byte BMax(byte A, byte B);// 0x303b58eb6041
	double Atan2(double Y, double X);// 0x303a58eb6041
	double Atan(double A);// 0x303958eb6041
	double Asin(double A);// 0x303858eb6041
	int And_IntInt(int A, int B);// 0x303758eb6041
	int64 And_Int64Int64(int64 A, int64 B);// 0x303658eb6041
	Vector Add_VectorVector(Vector A, Vector B);// 0x303558eb6041
	Vector Add_VectorInt(Vector A, int B);// 0x303458eb6041
	Vector Add_VectorFloat(Vector A, double B);// 0x303358eb6041
	Vector4 Add_Vector4Vector4(out const Vector4 A, out const Vector4 B);// 0x303258eb6041
	Vector2D Add_Vector2DVector2D(Vector2D A, Vector2D B);// 0x303158eb6041
	Vector2D Add_Vector2DFloat(Vector2D A, double B);// 0x303058eb6041
	Timespan Add_TimespanTimespan(Timespan A, Timespan B);// 0x302f58eb6041
	Quat Add_QuatQuat(out const Quat A, out const Quat B);// 0x302e58eb6041
	Matrix Add_MatrixMatrix(out const Matrix A, out const Matrix B);// 0x302d58eb6041
	LinearColor Add_LinearColorLinearColor(LinearColor A, LinearColor B);// 0x302c58eb6041
	IntPoint Add_IntPointIntPoint(IntPoint A, IntPoint B);// 0x302b58eb6041
	IntPoint Add_IntPointInt(IntPoint A, int B);// 0x302a58eb6041
	int Add_IntInt(int A, int B);// 0x302958eb6041
	int64 Add_Int64Int64(int64 A, int64 B);// 0x302858eb6041
	double Add_DoubleDouble(double A, double B);// 0x302758eb6041
	DateTime Add_DateTimeTimespan(DateTime A, Timespan B);// 0x302658eb6041
	DateTime Add_DateTimeDateTime(DateTime A, DateTime B);// 0x302558eb6041
	byte Add_ByteByte(byte A, byte B);// 0x302458eb6041
	double Acos(double A);// 0x306558eb6041
	int64 Abs_Int64(int64 A);// 0x302258eb6041
	int Abs_Int(int A);// 0x302158eb6041
	double Abs(double A);// 0x302058eb6041

--------------------------------
Class: VectorSpringState

--------------------------------
Class: Timespan

--------------------------------
Class: QuaternionSpringState

--------------------------------
Class: FloatSpringState

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x10]
	Vector2D Max;//[Offset: 0x10, Size: 0x10]
	byte bIsValid;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: KismetNodeHelperLibrary.BlueprintFunctionLibrary.Object
	void MarkBit(out int Data, int Index);// 0x32ed58eb6041
	bool HasUnmarkedBit(int Data, int NumBits);// 0x32ec58eb6041
	bool HasMarkedBit(int Data, int NumBits);// 0x32eb58eb6041
	byte GetValidValue(const Enum* Enum, byte EnumeratorValue);// 0x332c58eb6041
	int GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom);// 0x32e958eb6041
	int GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits);// 0x32e858eb6041
	int GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits);// 0x32e758eb6041
	byte GetEnumeratorValueFromIndex(const Enum* Enum, byte EnumeratorIndex);// 0x32e658eb6041
	FString GetEnumeratorUserFriendlyName(const Enum* Enum, byte EnumeratorValue);// 0x32e558eb6041
	FName GetEnumeratorName(const Enum* Enum, byte EnumeratorValue);// 0x32e458eb6041
	void ClearBit(out int Data, int Index);// 0x32e358eb6041
	void ClearAllBits(out int Data);// 0x32e258eb6041
	bool BitIsMarked(int Data, int Index);// 0x32e158eb6041

--------------------------------
Class: KismetRenderingLibrary.BlueprintFunctionLibrary.Object
	void SetCastInsetShadowForAllAttachments(PrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup);// 0x330758eb6041
	Texture2D* RenderTargetCreateStaticTexture2DEditorOnly(TextureRenderTarget2D* RenderTarget, FString Name, byte CompressionSettings, byte MipSettings);// 0x330658eb6041
	void ReleaseRenderTarget2D(TextureRenderTarget2D* TextureRenderTarget);// 0x330558eb6041
	Color ReadRenderTargetUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V);// 0x330458eb6041
	LinearColor[] ReadRenderTargetRawUVArea(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, Box2D Area, bool bNormalize);// 0x330358eb6041
	LinearColor ReadRenderTargetRawUV(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, float U, float V, bool bNormalize);// 0x330258eb6041
	LinearColor[] ReadRenderTargetRawPixelArea(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int MinX, int MinY, int MaxX, int MaxY, bool bNormalize);// 0x330158eb6041
	LinearColor ReadRenderTargetRawPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y, bool bNormalize);// 0x330058eb6041
	bool ReadRenderTargetRaw(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, out LinearColor[] OutLinearSamples, bool bNormalize);// 0x32ff58eb6041
	Color ReadRenderTargetPixel(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, int X, int Y);// 0x32fe58eb6041
	bool ReadRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, out Color[] OutSamples, bool bNormalize);// 0x32fd58eb6041
	SkelMeshSkinWeightInfo MakeSkinWeightInfo(int Bone0, byte Weight0, int Bone1, byte Weight1, int Bone2, byte Weight2, int Bone3, byte Weight3);// 0x32fc58eb6041
	Texture2D* ImportFileAsTexture2D(Object* WorldContextObject, FString Filename);// 0x32fb58eb6041
	Texture2D* ImportBufferAsTexture2D(Object* WorldContextObject, out const byte[] Buffer);// 0x32fa58eb6041
	void ExportTexture2D(Object* WorldContextObject, Texture2D* Texture, FString FilePath, FString Filename);// 0x32f958eb6041
	void ExportRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename);// 0x32f858eb6041
	void EndDrawCanvasToRenderTarget(Object* WorldContextObject, out const DrawToRenderTargetContext Context);// 0x32f758eb6041
	void DrawMaterialToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, MaterialInterface* Material);// 0x32f658eb6041
	TextureRenderTargetVolume* CreateRenderTargetVolume(Object* WorldContextObject, int Width, int Height, int Depth, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0x32f558eb6041
	TextureRenderTarget2DArray* CreateRenderTarget2DArray(Object* WorldContextObject, int Width, int Height, int Slices, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0x32f458eb6041
	TextureRenderTarget2D* CreateRenderTarget2D(Object* WorldContextObject, int Width, int Height, byte Format, LinearColor ClearColor, bool bAutoGenerateMipMaps);// 0x32f358eb6041
	void ConvertRenderTargetToTexture2DEditorOnly(Object* WorldContextObject, TextureRenderTarget2D* RenderTarget, Texture2D* Texture);// 0x32f258eb6041
	void ClearRenderTarget2D(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, LinearColor ClearColor);// 0x32f158eb6041
	Matrix CalculateProjectionMatrix(out const MinimalViewInfo MinimalViewInfo);// 0x32f058eb6041
	void BreakSkinWeightInfo(SkelMeshSkinWeightInfo InWeight, out int Bone0, out byte Weight0, out int Bone1, out byte Weight1, out int Bone2, out byte Weight2, out int Bone3, out byte Weight3);// 0x32ef58eb6041
	void BeginDrawCanvasToRenderTarget(Object* WorldContextObject, TextureRenderTarget2D* TextureRenderTarget, out Canvas* Canvas, out Vector2D Size, out DrawToRenderTargetContext Context);// 0x32ee58eb6041

--------------------------------
Class: DrawToRenderTargetContext
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TextureRenderTargetVolume.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x1f8, Size: 0x4]
	int SizeY;//[Offset: 0x1fc, Size: 0x4]
	int SizeZ;//[Offset: 0x200, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0x204, Size: 0x10]
	byte OverrideFormat;//[Offset: 0x214, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 0x1]

--------------------------------
Class: TextureRenderTarget2DArray.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x1f8, Size: 0x4]
	int SizeY;//[Offset: 0x1fc, Size: 0x4]
	int Slices;//[Offset: 0x200, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0x204, Size: 0x10]
	byte OverrideFormat;//[Offset: 0x214, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x215, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x215, Size: 0x1]

--------------------------------
Class: KismetStringLibrary.BlueprintFunctionLibrary.Object
	FString TrimTrailing(FString SourceString);// 0x334c58eb6041
	FString Trim(FString SourceString);// 0x334b58eb6041
	FString ToUpper(FString SourceString);// 0x334a58eb6041
	FString ToLower(FString SourceString);// 0x334958eb6041
	FString TimeSecondsToString(float InSeconds);// 0x334858eb6041
	bool StartsWith(FString SourceString, FString InPrefix, byte SearchCase);// 0x334758eb6041
	bool Split(FString SourceString, FString InStr, out FString LeftS, out FString RightS, byte SearchCase, byte SearchDir);// 0x334658eb6041
	FString RightPad(FString SourceString, int ChCount);// 0x334558eb6041
	FString RightChop(FString SourceString, int Count);// 0x334458eb6041
	FString Right(FString SourceString, int Count);// 0x334358eb6041
	FString Reverse(FString SourceString);// 0x334258eb6041
	int ReplaceInline(out FString SourceString, FString SearchText, FString ReplacementText, byte SearchCase);// 0x334158eb6041
	FString Replace(FString SourceString, FString From, FString To, byte SearchCase);// 0x334058eb6041
	FString[] ParseIntoArray(FString SourceString, FString Delimiter, const bool CullEmptyStrings);// 0x333f58eb6041
	bool NotEqual_StrStr(FString A, FString B);// 0x333e58eb6041
	bool NotEqual_StriStri(FString A, FString B);// 0x333d58eb6041
	FString Mid(FString SourceString, int Start, int Count);// 0x333c58eb6041
	bool MatchesWildcard(FString SourceString, FString Wildcard, byte SearchCase);// 0x333b58eb6041
	int Len(FString S);// 0x333a58eb6041
	FString LeftPad(FString SourceString, int ChCount);// 0x333958eb6041
	FString LeftChop(FString SourceString, int Count);// 0x333858eb6041
	FString Left(FString SourceString, int Count);// 0x333758eb6041
	FString JoinStringArray(out const FString[] SourceArray, FString Separator);// 0x333658eb6041
	bool IsNumeric(FString SourceString);// 0x333558eb6041
	bool IsEmpty(FString InString);// 0x333458eb6041
	FString GetSubstring(FString SourceString, int StartIndex, int Length);// 0x333358eb6041
	int GetCharacterAsNumber(FString SourceString, int Index);// 0x333258eb6041
	FString[] GetCharacterArrayFromString(FString SourceString);// 0x333158eb6041
	int FindSubstring(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);// 0x333058eb6041
	bool EqualEqual_StrStr(FString A, FString B);// 0x332f58eb6041
	bool EqualEqual_StriStri(FString A, FString B);// 0x332e58eb6041
	bool EndsWith(FString SourceString, FString InSuffix, byte SearchCase);// 0x332d58eb6041
	int CullArray(FString SourceString, out FString[] inArray);// 0x336e58eb6041
	FString Conv_VectorToString(Vector InVec);// 0x332b58eb6041
	FString Conv_Vector3fToString(Vector3f InVec);// 0x332a58eb6041
	FString Conv_Vector2dToString(Vector2D InVec);// 0x332958eb6041
	FString Conv_TransformToString(out const Transform InTrans);// 0x332858eb6041
	void Conv_StringToVector3f(FString InString, out Vector3f OutConvertedVector, out bool OutIsValid);// 0x332758eb6041
	void Conv_StringToVector2D(FString InString, out Vector2D OutConvertedVector2D, out bool OutIsValid);// 0x332658eb6041
	void Conv_StringToVector(FString InString, out Vector OutConvertedVector, out bool OutIsValid);// 0x332558eb6041
	void Conv_StringToRotator(FString InString, out Rotator OutConvertedRotator, out bool OutIsValid);// 0x332458eb6041
	FName Conv_StringToName(FString InString);// 0x332358eb6041
	int Conv_StringToInt(FString InString);// 0x332258eb6041
	double Conv_StringToDouble(FString InString);// 0x332158eb6041
	void Conv_StringToColor(FString InString, out LinearColor OutConvertedColor, out bool OutIsValid);// 0x332058eb6041
	FString Conv_RotatorToString(Rotator InRot);// 0x331f58eb6041
	FString Conv_ObjectToString(Object* InObj);// 0x331e58eb6041
	FString Conv_NameToString(FName InName);// 0x331d58eb6041
	FString Conv_MatrixToString(out const Matrix InMatrix);// 0x331c58eb6041
	FString Conv_IntVectorToString(IntVector InIntVec);// 0x331b58eb6041
	FString Conv_IntToString(int inInt);// 0x331a58eb6041
	FString Conv_IntPointToString(IntPoint InIntPoint);// 0x331958eb6041
	FString Conv_Int64ToString(int64 inInt);// 0x331858eb6041
	FString Conv_DoubleToString(double InDouble);// 0x331758eb6041
	FString Conv_ColorToString(LinearColor InColor);// 0x331658eb6041
	FString Conv_ByteToString(byte InByte);// 0x331558eb6041
	FString Conv_BoolToString(bool InBool);// 0x331458eb6041
	bool Contains(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd);// 0x331358eb6041
	FString Concat_StrStr(FString A, FString B);// 0x331258eb6041
	FString BuildString_Vector2d(FString AppendTo, FString Prefix, Vector2D InVector2D, FString Suffix);// 0x331158eb6041
	FString BuildString_Vector(FString AppendTo, FString Prefix, Vector InVector, FString Suffix);// 0x331058eb6041
	FString BuildString_Rotator(FString AppendTo, FString Prefix, Rotator InRot, FString Suffix);// 0x330f58eb6041
	FString BuildString_Object(FString AppendTo, FString Prefix, Object* InObj, FString Suffix);// 0x330e58eb6041
	FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString Suffix);// 0x330d58eb6041
	FString BuildString_IntVector(FString AppendTo, FString Prefix, IntVector InIntVector, FString Suffix);// 0x330c58eb6041
	FString BuildString_Int(FString AppendTo, FString Prefix, int inInt, FString Suffix);// 0x334d58eb6041
	FString BuildString_Double(FString AppendTo, FString Prefix, double InDouble, FString Suffix);// 0x330a58eb6041
	FString BuildString_Color(FString AppendTo, FString Prefix, LinearColor InColor, FString Suffix);// 0x330958eb6041
	FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString Suffix);// 0x330858eb6041

--------------------------------
Class: KismetStringTableLibrary.BlueprintFunctionLibrary.Object
	bool IsRegisteredTableId(const FName TableId);// 0x335458eb6041
	bool IsRegisteredTableEntry(const FName TableId, FString Key);// 0x335358eb6041
	FString GetTableNamespace(const FName TableId);// 0x335258eb6041
	FString GetTableEntrySourceString(const FName TableId, FString Key);// 0x335158eb6041
	FString GetTableEntryMetaData(const FName TableId, FString Key, const FName MetaDataId);// 0x335058eb6041
	FName[] GetRegisteredStringTables();// 0x334f58eb6041
	FName[] GetMetaDataIdsFromStringTableEntry(const FName TableId, FString Key);// 0x334e58eb6041
	FString[] GetKeysFromStringTable(const FName TableId);// 0x338f58eb6041

--------------------------------
Class: KismetSystemLibrary.BlueprintFunctionLibrary.Object
	void UnregisterForRemoteNotifications();// 0xc8558eb6041
	void UnloadPrimaryAssetList(out const PrimaryAssetId[] PrimaryAssetIdList);// 0xc8458eb6041
	void UnloadPrimaryAsset(PrimaryAssetId PrimaryAssetId);// 0xc8358eb6041
	void TransactObject(Object* Object);// 0xc8258eb6041
	void StackTrace();// 0xc8158eb6041
	bool SphereTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc8058eb6041
	bool SphereTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc7f58eb6041
	bool SphereTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc7e58eb6041
	bool SphereTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc7d58eb6041
	bool SphereTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc7c58eb6041
	bool SphereTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc7b58eb6041
	bool SphereOverlapComponents(const Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xc7a58eb6041
	bool SphereOverlapActors(const Object* WorldContextObject, const Vector SpherePos, float SphereRadius, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xc7958eb6041
	void SnapshotObject(Object* Object);// 0xc7858eb6041
	void ShowPlatformSpecificLeaderboardScreen(FString CategoryName);// 0xc7758eb6041
	void ShowPlatformSpecificAchievementsScreen(const PlayerController* SpecificPlayer);// 0xc7658eb6041
	void ShowInterstitialAd();// 0xc7558eb6041
	void ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);// 0xc7458eb6041
	void SetWindowTitle(out const FText Title);// 0xc7358eb6041
	void SetVolumeButtonsHandledBySystem(bool bEnabled);// 0xc7258eb6041
	void SetVectorPropertyByName(Object* Object, FName PropertyName, out const Vector Value);// 0xc7158eb6041
	void SetVector3fPropertyByName(Object* Object, FName PropertyName, out const Vector3f Value);// 0xc6f58eb6041
	void SetUserActivity(out const UserActivity UserActivity);// 0xc6e58eb6041
	void SetTransformPropertyByName(Object* Object, FName PropertyName, out const Transform Value);// 0xc6d58eb6041
	void SetTextPropertyByName(Object* Object, FName PropertyName, out const FText Value);// 0xc6c58eb6041
	void SetSuppressViewportTransitionMessage(const Object* WorldContextObject, bool bState);// 0xd8e58eb6041
	void SetStructurePropertyByName(Object* Object, FName PropertyName, out const GenericStruct Value);// 0xc6958eb6041
	void SetStringPropertyByName(Object* Object, FName PropertyName, FString Value);// 0xc6858eb6041
	void SetSoftObjectPropertyByName(Object* Object, FName PropertyName, out const Object* Value);// 0xc6758eb6041
	void SetSoftClassPropertyByName(Object* Object, FName PropertyName, out const class Object Value);// 0xc6658eb6041
	void SetRotatorPropertyByName(Object* Object, FName PropertyName, out const Rotator Value);// 0xc6558eb6041
	void SetObjectPropertyByName(Object* Object, FName PropertyName, Object* Value);// 0xc6458eb6041
	void SetNamePropertyByName(Object* Object, FName PropertyName, out const FName Value);// 0xc6358eb6041
	void SetLinearColorPropertyByName(Object* Object, FName PropertyName, out const LinearColor Value);// 0xc6258eb6041
	void SetIntPropertyByName(Object* Object, FName PropertyName, int Value);// 0xc6158eb6041
	void SetInterfacePropertyByName(Object* Object, FName PropertyName, out const interface classNone Value);// 0xc6058eb6041
	void SetInt64PropertyByName(Object* Object, FName PropertyName, int64 Value);// 0xc5f58eb6041
	void SetGamepadsBlockDeviceFeedback(bool bBlock);// 0xc5e58eb6041
	void SetFieldPathPropertyByName(Object* Object, FName PropertyName, out const Value(FieldPathProperty) Value);// 0xc5d58eb6041
	void SetDoublePropertyByName(Object* Object, FName PropertyName, double Value);// 0xc5c58eb6041
	void SetColorPropertyByName(Object* Object, FName PropertyName, out const Color Value);// 0xc5a58eb6041
	void SetCollisionProfileNameProperty(Object* Object, FName PropertyName, out const CollisionProfileName Value);// 0xc5958eb6041
	void SetClassPropertyByName(Object* Object, FName PropertyName, class Object Value);// 0xc5858eb6041
	void SetBytePropertyByName(Object* Object, FName PropertyName, byte Value);// 0xc5758eb6041
	void SetBoolPropertyByName(Object* Object, FName PropertyName, bool Value);// 0xc5658eb6041
	void RetriggerableDelay(const Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0xc5558eb6041
	void ResetGamepadAssignmentToController(int ControllerId);// 0xc5458eb6041
	void ResetGamepadAssignments();// 0xc5358eb6041
	void RegisterForRemoteNotifications();// 0xc5158eb6041
	void QuitGame(const Object* WorldContextObject, PlayerController* SpecificPlayer, byte QuitPreference, bool bIgnorePlatformRestrictions);// 0xc5058eb6041
	void PrintWarning(FString InString);// 0xc4f58eb6041
	void PrintText(const Object* WorldContextObject, const FText InText, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration, const FName Key);// 0xc4e58eb6041
	void PrintString(const Object* WorldContextObject, FString InString, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration, const FName Key);// 0xc4d58eb6041
	bool ParseParamValue(FString InString, FString InParam, out FString OutValue);// 0xc4c58eb6041
	bool ParseParam(FString InString, FString InParam);// 0xc4b58eb6041
	void ParseCommandLine(FString InCmdLine, out FString[] OutTokens, out FString[] OutSwitches, out <FString,FString> OutParams);// 0xc4a58eb6041
	void OnAssetLoaded__DelegateSignature(Object* Loaded);// 0xc3158eb6041
	void OnAssetClassLoaded__DelegateSignature(class Object Loaded);// 0xc3458eb6041
	bool NotEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0xc4958eb6041
	bool NotEqual_SoftClassReference(out const class Object A, out const class Object B);// 0xc4858eb6041
	bool NotEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0xc8d58eb6041
	bool NotEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0xc4658eb6041
	FString NormalizeFilename(FString InFilename);// 0xc4458eb6041
	void MoveComponentTo(SceneComponent* Component, Vector TargetRelativeLocation, Rotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, byte MoveAction, LatentActionInfo LatentInfo);// 0xc4358eb6041
	SoftObjectPath MakeSoftObjectPath(FString PathString);// 0xc4258eb6041
	SoftClassPath MakeSoftClassPath(FString PathString);// 0xc4158eb6041
	FText MakeLiteralText(FText Value);// 0xc4058eb6041
	FString MakeLiteralString(FString Value);// 0xc3f58eb6041
	FName MakeLiteralName(FName Value);// 0xc3e58eb6041
	int64 MakeLiteralInt64(int64 Value);// 0xc3d58eb6041
	int MakeLiteralInt(int Value);// 0xc3c58eb6041
	float MakeLiteralFloat(float Value);// 0xc3b58eb6041
	double MakeLiteralDouble(double Value);// 0xc3a58eb6041
	byte MakeLiteralByte(byte Value);// 0xc3958eb6041
	bool MakeLiteralBool(bool Value);// 0xc3858eb6041
	void LogString(FString InString, bool bPrintToLog);// 0xc3758eb6041
	void LoadInterstitialAd(int AdIdIndex);// 0xc3658eb6041
	class Object LoadClassAsset_Blocking(class Object AssetClass);// 0xc3558eb6041
	void LoadAssetClass(const Object* WorldContextObject, class Object AssetClass, delegate OnLoaded, LatentActionInfo LatentInfo);// 0xc3358eb6041
	Object* LoadAsset_Blocking(Object* Asset);// 0xc3258eb6041
	void LoadAsset(const Object* WorldContextObject, Object* Asset, delegate OnLoaded, LatentActionInfo LatentInfo);// 0xc3058eb6041
	bool LineTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc2f58eb6041
	bool LineTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc2e58eb6041
	bool LineTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc2d58eb6041
	bool LineTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc2c58eb6041
	bool LineTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc2b58eb6041
	bool LineTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xc2a58eb6041
	void LaunchURL(FString URL);// 0xc2958eb6041
	void K2_UnPauseTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc2858eb6041
	void K2_UnPauseTimerDelegate(delegate Delegate);// 0xc2758eb6041
	void K2_UnPauseTimer(Object* Object, FString FunctionName);// 0xc2658eb6041
	bool K2_TimerExistsHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc6a58eb6041
	bool K2_TimerExistsDelegate(delegate Delegate);// 0xc2458eb6041
	bool K2_TimerExists(Object* Object, FString FunctionName);// 0xc2358eb6041
	TimerHandle K2_SetTimerForNextTickDelegate(delegate Delegate);// 0xc2258eb6041
	TimerHandle K2_SetTimerForNextTick(Object* Object, FString FunctionName);// 0xc2158eb6041
	TimerHandle K2_SetTimerDelegate(delegate Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);// 0xc2058eb6041
	TimerHandle K2_SetTimer(Object* Object, FName FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);// 0xc1f58eb6041
	void K2_PauseTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc1e58eb6041
	void K2_PauseTimerDelegate(delegate Delegate);// 0xc1d58eb6041
	void K2_PauseTimer(Object* Object, FString FunctionName);// 0xc1c58eb6041
	bool K2_IsValidTimerHandle(TimerHandle Handle);// 0xc1b58eb6041
	bool K2_IsTimerPausedHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc1a58eb6041
	bool K2_IsTimerPausedDelegate(delegate Delegate);// 0xc1958eb6041
	bool K2_IsTimerPaused(Object* Object, FString FunctionName);// 0xc1858eb6041
	bool K2_IsTimerActiveHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc1758eb6041
	bool K2_IsTimerActiveDelegate(delegate Delegate);// 0xc1658eb6041
	bool K2_IsTimerActive(Object* Object, FString FunctionName);// 0xc1558eb6041
	TimerHandle K2_InvalidateTimerHandle(out TimerHandle Handle);// 0xc1458eb6041
	float K2_GetTimerRemainingTimeHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc1358eb6041
	float K2_GetTimerRemainingTimeDelegate(delegate Delegate);// 0xc1258eb6041
	float K2_GetTimerRemainingTime(Object* Object, FString FunctionName);// 0xc1158eb6041
	float K2_GetTimerElapsedTimeHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc1058eb6041
	float K2_GetTimerElapsedTimeDelegate(delegate Delegate);// 0xc0f58eb6041
	float K2_GetTimerElapsedTime(Object* Object, FString FunctionName);// 0xc0e58eb6041
	void K2_ClearTimerHandle(const Object* WorldContextObject, TimerHandle Handle);// 0xc0d58eb6041
	void K2_ClearTimerDelegate(delegate Delegate);// 0xc0c58eb6041
	void K2_ClearTimer(Object* Object, FString FunctionName);// 0xc0a58eb6041
	void K2_ClearAndInvalidateTimerHandle(const Object* WorldContextObject, out TimerHandle Handle);// 0xc0958eb6041
	bool IsValidSoftObjectReference(out const Object* SoftObjectReference);// 0xc0858eb6041
	bool IsValidSoftClassReference(out const class Object SoftClassReference);// 0xc0758eb6041
	bool IsValidPrimaryAssetType(PrimaryAssetType PrimaryAssetType);// 0xc0658eb6041
	bool IsValidPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xc0558eb6041
	bool IsValidClass(class Object Class);// 0xc0458eb6041
	bool IsValid(const Object* Object);// 0xc4758eb6041
	bool IsUnattended();// 0xc0258eb6041
	bool IsStandalone(const Object* WorldContextObject);// 0xc0158eb6041
	bool IsSplitScreen(const Object* WorldContextObject);// 0xc0058eb6041
	bool IsServer(const Object* WorldContextObject);// 0xbff58eb6041
	bool IsScreensaverEnabled();// 0xbfe58eb6041
	bool IsPackagedForDistribution();// 0xbfd58eb6041
	bool IsLoggedIn(const PlayerController* SpecificPlayer);// 0xbfc58eb6041
	bool IsInterstitialAdRequested();// 0xbfb58eb6041
	bool IsInterstitialAdAvailable();// 0xbfa58eb6041
	bool IsDedicatedServer(const Object* WorldContextObject);// 0xbf958eb6041
	bool IsControllerAssignedToGamepad(int ControllerId);// 0xbf858eb6041
	void HideAdBanner();// 0xbf758eb6041
	bool HasMultipleLocalPlayers(const Object* WorldContextObject);// 0xbf658eb6041
	bool GetVolumeButtonsHandledBySystem();// 0xbf558eb6041
	FString GetUniqueDeviceId();// 0xbf458eb6041
	FString GetSystemPath(const Object* Object);// 0xbf358eb6041
	bool GetSupportedFullscreenResolutions(out IntPoint[] Resolutions);// 0xbf258eb6041
	Object* GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xbf158eb6041
	class Object GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xbf058eb6041
	int GetRenderingMaterialQualityLevel();// 0xbef58eb6041
	int GetRenderingDetailMode();// 0xbee58eb6041
	FString GetProjectSavedDirectory();// 0xbed58eb6041
	FString GetProjectDirectory();// 0xbec58eb6041
	FString GetProjectContentDirectory();// 0xbeb58eb6041
	void GetPrimaryAssetsWithBundleState(out const FName[] RequiredBundles, out const FName[] ExcludedBundles, out const PrimaryAssetType[] ValidTypes, bool bForceCurrentState, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0xbea58eb6041
	void GetPrimaryAssetIdList(PrimaryAssetType PrimaryAssetType, out PrimaryAssetId[] OutPrimaryAssetIdList);// 0xbe958eb6041
	PrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(Object* SoftObjectReference);// 0xbe858eb6041
	PrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(class Object SoftClassReference);// 0xbe758eb6041
	PrimaryAssetId GetPrimaryAssetIdFromObject(Object* Object);// 0xbe658eb6041
	PrimaryAssetId GetPrimaryAssetIdFromClass(class Object Class);// 0xbe558eb6041
	FString[] GetPreferredLanguages();// 0xbe458eb6041
	FString GetPlatformUserName();// 0xbe358eb6041
	FString GetPlatformUserDir();// 0xc2558eb6041
	FString GetPathName(const Object* Object);// 0xbe158eb6041
	Object* GetOuterObject(const Object* Object);// 0xbe058eb6041
	FString GetObjectName(const Object* Object);// 0xbdf58eb6041
	Object* GetObjectFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xbde58eb6041
	int GetMinYResolutionForUI();// 0xbdd58eb6041
	int GetMinYResolutionFor3DView();// 0xbdc58eb6041
	FString GetLocalCurrencySymbol();// 0xbdb58eb6041
	FString GetLocalCurrencyCode();// 0xbda58eb6041
	float GetGameTimeInSeconds(const Object* WorldContextObject);// 0xbd958eb6041
	FString GetGamepadControllerName(int ControllerId);// 0xbd858eb6041
	Texture2D* GetGamepadButtonGlyph(FString ButtonKey, int ControllerIndex);// 0xbd758eb6041
	FString GetGameName();// 0xbd658eb6041
	FString GetGameBundleId();// 0xbd558eb6041
	int64 GetFrameCount();// 0xbd458eb6041
	FString GetEngineVersion();// 0xbd358eb6041
	FString GetDisplayName(const Object* Object);// 0xbd258eb6041
	FString GetDeviceId();// 0xbd158eb6041
	FString GetDefaultLocale();// 0xbd058eb6041
	FString GetDefaultLanguage();// 0xbcf58eb6041
	bool GetCurrentBundleState(PrimaryAssetId PrimaryAssetId, bool bForceCurrentState, out FName[] OutBundles);// 0xbce58eb6041
	bool GetConvenientWindowedResolutions(out IntPoint[] Resolutions);// 0xbcd58eb6041
	int GetConsoleVariableIntValue(FString VariableName);// 0xbcc58eb6041
	float GetConsoleVariableFloatValue(FString VariableName);// 0xbcb58eb6041
	bool GetConsoleVariableBoolValue(FString VariableName);// 0xbca58eb6041
	void GetComponentBounds(const SceneComponent* Component, out Vector Origin, out Vector BoxExtent, out float SphereRadius);// 0xbc958eb6041
	FString GetCommandLine();// 0xbc858eb6041
	class Object GetClassFromPrimaryAssetId(PrimaryAssetId PrimaryAssetId);// 0xbc758eb6041
	FString GetClassDisplayName(class Object Class);// 0xbc658eb6041
	FString GetBuildVersion();// 0xbc558eb6041
	FString GetBuildConfiguration();// 0xbc458eb6041
	int GetAdIDCount();// 0xbc358eb6041
	void GetActorListFromComponentList(out const PrimitiveComponent*[] ComponentList, class Object ActorClassFilter, out Actor*[] OutActorList);// 0xbc258eb6041
	void GetActorBounds(const Actor* Actor, out Vector Origin, out Vector BoxExtent);// 0xc0358eb6041
	void ForceCloseAdBanner();// 0xbc058eb6041
	void FlushPersistentDebugLines(const Object* WorldContextObject);// 0xbbf58eb6041
	void FlushDebugStrings(const Object* WorldContextObject);// 0xbbe58eb6041
	void ExecuteConsoleCommand(const Object* WorldContextObject, FString Command, PlayerController* SpecificPlayer);// 0xbbd58eb6041
	bool EqualEqual_SoftObjectReference(out const Object* A, out const Object* B);// 0xbbc58eb6041
	bool EqualEqual_SoftClassReference(out const class Object A, out const class Object B);// 0xbbb58eb6041
	bool EqualEqual_PrimaryAssetType(PrimaryAssetType A, PrimaryAssetType B);// 0xbba58eb6041
	bool EqualEqual_PrimaryAssetId(PrimaryAssetId A, PrimaryAssetId B);// 0xbb958eb6041
	int EndTransaction();// 0xbb858eb6041
	void DrawDebugString(const Object* WorldContextObject, const Vector TextLocation, FString Text, Actor* TestBaseActor, LinearColor TextColor, float Duration);// 0xbb758eb6041
	void DrawDebugSphere(const Object* WorldContextObject, const Vector Center, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0xbb658eb6041
	void DrawDebugPoint(const Object* WorldContextObject, const Vector Position, float Size, LinearColor PointColor, float Duration);// 0xbb558eb6041
	void DrawDebugPlane(const Object* WorldContextObject, out const Plane PlaneCoordinates, const Vector Location, float Size, LinearColor PlaneColor, float Duration);// 0xbb458eb6041
	void DrawDebugLine(const Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, LinearColor LineColor, float Duration, float Thickness);// 0xbb358eb6041
	void DrawDebugFrustum(const Object* WorldContextObject, out const Transform FrustumTransform, LinearColor FrustumColor, float Duration, float Thickness);// 0xbb258eb6041
	void DrawDebugFloatHistoryTransform(const Object* WorldContextObject, out const DebugFloatHistory FloatHistory, out const Transform DrawTransform, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0xbb158eb6041
	void DrawDebugFloatHistoryLocation(const Object* WorldContextObject, out const DebugFloatHistory FloatHistory, Vector DrawLocation, Vector2D DrawSize, LinearColor DrawColor, float Duration);// 0xbb058eb6041
	void DrawDebugCylinder(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, int Segments, LinearColor LineColor, float Duration, float Thickness);// 0xbaf58eb6041
	void DrawDebugCoordinateSystem(const Object* WorldContextObject, const Vector AxisLoc, const Rotator AxisRot, float Scale, float Duration, float Thickness);// 0xbae58eb6041
	void DrawDebugConeInDegrees(const Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0xbad58eb6041
	void DrawDebugCone(const Object* WorldContextObject, const Vector Origin, const Vector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, LinearColor LineColor, float Duration, float Thickness);// 0xbac58eb6041
	void DrawDebugCircle(const Object* WorldContextObject, Vector Center, float Radius, int NumSegments, LinearColor LineColor, float Duration, float Thickness, Vector YAxis, Vector ZAxis, bool bDrawAxis);// 0xbab58eb6041
	void DrawDebugCapsule(const Object* WorldContextObject, const Vector Center, float HalfHeight, float Radius, const Rotator Rotation, LinearColor LineColor, float Duration, float Thickness);// 0xbaa58eb6041
	void DrawDebugCamera(const CameraActor* CameraActor, LinearColor CameraColor, float Duration);// 0xba958eb6041
	void DrawDebugBox(const Object* WorldContextObject, const Vector Center, Vector Extent, LinearColor LineColor, const Rotator Rotation, float Duration, float Thickness);// 0xba858eb6041
	void DrawDebugArrow(const Object* WorldContextObject, const Vector LineStart, const Vector LineEnd, float ArrowSize, LinearColor LineColor, float Duration, float Thickness);// 0xba758eb6041
	bool DoesImplementInterface(const Object* TestObject, class Interface Interface);// 0xba658eb6041
	void DelayUntilNextTick(const Object* WorldContextObject, LatentActionInfo LatentInfo);// 0xba458eb6041
	void Delay(const Object* WorldContextObject, float Duration, LatentActionInfo LatentInfo);// 0xba358eb6041
	void CreateCopyForUndoBuffer(Object* ObjectToModify);// 0xba258eb6041
	FString ConvertToRelativePath(FString Filename);// 0xba158eb6041
	FString ConvertToAbsolutePath(FString Filename);// 0xba058eb6041
	Object* Conv_SoftObjPathToSoftObjRef(out const SoftObjectPath SoftObjectPath);// 0xbe258eb6041
	FString Conv_SoftObjectReferenceToString(out const Object* SoftObjectReference);// 0xb9e58eb6041
	Object* Conv_SoftObjectReferenceToObject(out const Object* SoftObject);// 0xb9d58eb6041
	FString Conv_SoftClassReferenceToString(out const class Object SoftClassReference);// 0xb9c58eb6041
	class Object Conv_SoftClassReferenceToClass(out const class Object SoftClass);// 0xb9b58eb6041
	class Object Conv_SoftClassPathToSoftClassRef(out const SoftClassPath SoftClassPath);// 0xb9a58eb6041
	FString Conv_PrimaryAssetTypeToString(PrimaryAssetType PrimaryAssetType);// 0xb9958eb6041
	FString Conv_PrimaryAssetIdToString(PrimaryAssetId PrimaryAssetId);// 0xb9858eb6041
	Object* Conv_ObjectToSoftObjectReference(Object* Object);// 0xb9758eb6041
	class Object Conv_ObjectToClass(Object* Object, class Object Class);// 0xb9658eb6041
	Object* Conv_InterfaceToObject(out const interface classNone Interface);// 0xb9558eb6041
	class Object Conv_ClassToSoftClassReference(out const class Object Class);// 0xb9458eb6041
	void ControlScreensaver(bool bAllowScreenSaver);// 0xb9358eb6041
	bool ComponentOverlapComponents(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xb9258eb6041
	bool ComponentOverlapActors(PrimitiveComponent* Component, out const Transform ComponentTransform, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xb9158eb6041
	void CollectGarbage();// 0xb9058eb6041
	bool CapsuleTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb8f58eb6041
	bool CapsuleTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb8e58eb6041
	bool CapsuleTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb8d58eb6041
	bool CapsuleTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb8c58eb6041
	bool CapsuleTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb8b58eb6041
	bool CapsuleTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, float Radius, float HalfHeight, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb8a58eb6041
	bool CapsuleOverlapComponents(const Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xb8958eb6041
	bool CapsuleOverlapActors(const Object* WorldContextObject, const Vector CapsulePos, float Radius, float HalfHeight, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xb8858eb6041
	bool CanLaunchURL(FString URL);// 0xb8758eb6041
	void CancelTransaction(const int Index);// 0xb8658eb6041
	void BreakSoftObjectPath(SoftObjectPath InSoftObjectPath, out FString PathString);// 0xb8558eb6041
	void BreakSoftClassPath(SoftClassPath InSoftClassPath, out FString PathString);// 0xb8458eb6041
	bool BoxTraceSingleForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8158eb6000
	bool BoxTraceSingleByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xffffff8158eb6000
	bool BoxTraceSingle(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult OutHit, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb8358eb6041
	bool BoxTraceMultiForObjects(const Object* WorldContextObject, const Vector Start, const Vector End, const Vector HalfSize, const Rotator Orientation, out const byte[] ObjectTypes, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb8258eb6041
	bool BoxTraceMultiByProfile(const Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, FName ProfileName, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb2d58eb6041
	bool BoxTraceMulti(const Object* WorldContextObject, const Vector Start, const Vector End, Vector HalfSize, const Rotator Orientation, byte TraceChannel, bool bTraceComplex, out const Actor*[] ActorsToIgnore, byte DrawDebugType, out HitResult[] OutHits, bool bIgnoreSelf, LinearColor TraceColor, LinearColor TraceHitColor, float DrawTime);// 0xb8058eb6041
	bool BoxOverlapComponents(const Object* WorldContextObject, const Vector BoxPos, Vector Extent, out const byte[] ObjectTypes, class Object ComponentClassFilter, out const Actor*[] ActorsToIgnore, out PrimitiveComponent*[] OutComponents);// 0xb7d58eb6041
	bool BoxOverlapActors(const Object* WorldContextObject, const Vector BoxPos, Vector BoxExtent, out const byte[] ObjectTypes, class Object ActorClassFilter, out const Actor*[] ActorsToIgnore, out Actor*[] OutActors);// 0xb7c58eb6041
	int BeginTransaction(FString Context, FText Description, Object* PrimaryObject);// 0xb7a58eb6041
	DebugFloatHistory AddFloatHistorySample(float Value, out const DebugFloatHistory FloatHistory);// 0xb7958eb6041

--------------------------------
Class: UserActivity
	FString ActionName;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: GenericStruct
	int Data;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: CollisionProfileName
	FName Name;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: DebugFloatHistory
	float[] Samples;//[Offset: 0x0, Size: 0x10]
	int MaxSamples;//[Offset: 0x10, Size: 0x4]
	float MinValue;//[Offset: 0x14, Size: 0x4]
	float MaxValue;//[Offset: 0x18, Size: 0x4]
	bool bAutoAdjustMinMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: KismetTextLibrary.BlueprintFunctionLibrary.Object
	FText TextTrimTrailing(out const FText InText);// 0x338258eb6041
	FText TextTrimPrecedingAndTrailing(out const FText InText);// 0x338158eb6041
	FText TextTrimPreceding(out const FText InText);// 0x338058eb6041
	FText TextToUpper(out const FText InText);// 0x337f58eb6041
	FText TextToLower(out const FText InText);// 0x337e58eb6041
	bool TextIsTransient(out const FText InText);// 0x337d58eb6041
	bool TextIsFromStringTable(out const FText Text);// 0x337c58eb6041
	bool TextIsEmpty(out const FText InText);// 0x337b58eb6041
	bool TextIsCultureInvariant(out const FText InText);// 0x337a58eb6041
	FText TextFromStringTable(const FName TableId, FString Key);// 0x337958eb6041
	bool StringTableIdAndKeyFromText(FText Text, out FName OutTableId, out FString OutKey);// 0x337858eb6041
	FText PolyglotDataToText(out const PolyglotTextData PolyglotData);// 0x337758eb6041
	bool NotEqual_TextText(out const FText A, out const FText B);// 0x337658eb6041
	bool NotEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0x337558eb6041
	void IsPolyglotDataValid(out const PolyglotTextData PolyglotData, out bool IsValid, out FText ErrorMessage);// 0x337458eb6041
	FText GetEmptyText();// 0x337358eb6041
	FText Format(FText InPattern, FormatArgumentData[] InArgs);// 0x337258eb6041
	bool FindTextInLocalizationTable(FString Namespace, FString Key, out FText OutText);// 0x337158eb6041
	bool EqualEqual_TextText(out const FText A, out const FText B);// 0x337058eb6041
	bool EqualEqual_IgnoreCase_TextText(out const FText A, out const FText B);// 0x336f58eb6041
	FText Conv_VectorToText(Vector InVec);// 0x33b058eb6041
	FText Conv_Vector2dToText(Vector2D InVec);// 0x336d58eb6041
	FText Conv_TransformToText(out const Transform InTrans);// 0x336c58eb6041
	FString Conv_TextToString(out const FText InText);// 0x336b58eb6041
	FText Conv_StringToText(FString InString);// 0x336a58eb6041
	FText Conv_RotatorToText(Rotator InRot);// 0x336958eb6041
	FText Conv_ObjectToText(Object* InObj);// 0x336858eb6041
	FText Conv_NameToText(FName InName);// 0x336758eb6041
	FText Conv_IntToText(int Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);// 0x336658eb6041
	FText Conv_Int64ToText(int64 Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);// 0x336558eb6041
	FText Conv_FloatToText(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0x336458eb6041
	FText Conv_DoubleToText(double InDouble, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0x336358eb6041
	FText Conv_ColorToText(LinearColor InColor);// 0x336258eb6041
	FText Conv_ByteToText(byte Value);// 0x336158eb6041
	FText Conv_BoolToText(bool InBool);// 0x336058eb6041
	FText AsTimeZoneTime_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0x335f58eb6041
	FText AsTimeZoneDateTime_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0x335e58eb6041
	FText AsTimeZoneDate_DateTime(out const DateTime InDateTime, FString InTimeZone);// 0x335d58eb6041
	FText AsTimespan_Timespan(out const Timespan InTimespan);// 0x335c58eb6041
	FText AsTime_DateTime(out const DateTime In);// 0x335b58eb6041
	FText AsPercent_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);// 0x335a58eb6041
	FText AsDateTime_DateTime(out const DateTime In);// 0x335958eb6041
	FText AsDate_DateTime(out const DateTime InDateTime);// 0x335858eb6041
	FText AsCurrencyBase(int BaseValue, FString CurrencyCode);// 0x335758eb6041
	FText AsCurrency_Integer(int Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode);// 0x335658eb6041
	FText AsCurrency_Float(float Value, byte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, FString CurrencyCode);// 0x335558eb6041

--------------------------------
Class: PolyglotTextData
	enum Category;//[Offset: 0x0, Size: 0x1]
	FString NativeCulture;//[Offset: 0x8, Size: 0x10]
	FString Namespace;//[Offset: 0x18, Size: 0x10]
	FString Key;//[Offset: 0x28, Size: 0x10]
	FString NativeString;//[Offset: 0x38, Size: 0x10]
	<FString,FString> LocalizedStrings;//[Offset: 0x48, Size: 0x50]
	bool bIsMinimalPatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	FText CachedText;//[Offset: 0xa0, Size: 0x18]

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 0x10]
	byte ArgumentValueType;//[Offset: 0x10, Size: 0x1]
	FText ArgumentValue;//[Offset: 0x18, Size: 0x18]
	int64 ArgumentValueInt;//[Offset: 0x30, Size: 0x8]
	float ArgumentValueFloat;//[Offset: 0x38, Size: 0x4]
	double ArgumentValueDouble;//[Offset: 0x40, Size: 0x8]
	enum ArgumentValueGender;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: Layer.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	LayerActorStats[] ActorStats;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: LayerActorStats
	ClassPtrProperty Type;//[Size: 0x8]
	int Total;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LevelPartitionInterface.Interface.Object

--------------------------------
Class: ActorContainer.Object
	<FName,Actor*> Actors;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: LevelBounds.Actor.Object
	BoxComponent* BoxComponent;//[Offset: 0x278, Size: 0x8]
	bool bAutoUpdateBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]

--------------------------------
Class: LevelInstance.Actor.Object
	World* CookedWorldAsset;//[Offset: 0x278, Size: 0x28]

--------------------------------
Class: LevelInstanceComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelInstanceEditorInstanceActor.Actor.Object

--------------------------------
Class: LevelStreamingAlwaysLoaded.LevelStreaming.Object

--------------------------------
Class: LevelStreamingLevelInstanceEditor.LevelStreamingAlwaysLoaded.LevelStreaming.Object

--------------------------------
Class: LevelInstanceEditorObject.Object

--------------------------------
Class: LevelInstancePivot.Actor.Object

--------------------------------
Class: LevelStreamingDynamic.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x178, Size: 0x1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x178, Size: 0x1]
	LevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(Object* WorldContextObject, World* Level, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride, class LevelStreamingDynamic OptionalLevelStreamingClass, bool bLoadAsTempPackage);// 0x339258eb6041
	LevelStreamingDynamic* LoadLevelInstance(Object* WorldContextObject, FString LevelName, Vector Location, Rotator Rotation, out bool bOutSuccess, FString OptionalLevelNameOverride, class LevelStreamingDynamic OptionalLevelStreamingClass, bool bLoadAsTempPackage);// 0x339158eb6041

--------------------------------
Class: LevelStreamingLevelInstance.LevelStreamingDynamic.LevelStreaming.Object

--------------------------------
Class: LevelInstanceSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: LevelScriptBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: LevelStreamingPersistent.LevelStreaming.Object

--------------------------------
Class: LightmappedSurfaceCollection.Object
	Model* SourceModel;//[Offset: 0x28, Size: 0x8]
	int[] Surfaces;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: LightMapTexture2D.Texture2D.Texture.StreamableRenderAsset.Object

--------------------------------
Class: LightMapVirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	int8[] TypeToLayer;//[Offset: 0x2a8, Size: 0x10]

--------------------------------
Class: LightmassCharacterIndirectDetailVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassImportanceVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassPortal.Actor.Object
	LightmassPortalComponent* PortalComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: LightmassPortalComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x2b0, Size: 0x8]

--------------------------------
Class: LightmassPrimitiveSettingsObject.Object
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: LightWeightInstanceBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	ActorInstanceHandle CreateNewLightWeightInstance(class Object ActorClass, Transform Transform, DataLayer* Layer, World* World);// 0x339858eb6041
	ActorInstanceHandle ConvertActorToLightWeightInstance(Actor* Actor);// 0x339758eb6041

--------------------------------
Class: ActorInstanceHandleInterface.Object

--------------------------------
Class: LightWeightInstanceManager.Actor.Object
	class Actor* RepresentedClass;//[Offset: 0x288, Size: 0x8]
	class Actor* AcceptedClass;//[Offset: 0x290, Size: 0x8]
	Transform[] InstanceTransforms;//[Offset: 0x298, Size: 0x10]
	int[] FreeIndices;//[Offset: 0x2f8, Size: 0x10]
	bool[] ValidIndices;//[Offset: 0x308, Size: 0x10]
	void OnRep_Transforms();// 0x339958eb6041

--------------------------------
Class: LightWeightInstanceStaticMeshManager.LightWeightInstanceManager.Actor.Object
	StaticMesh* StaticMesh;//[Offset: 0x320, Size: 0x28]
	HierarchicalInstancedStaticMeshComponent* InstancedStaticMeshComponent;//[Offset: 0x348, Size: 0x8]
	int[] RenderingIndicesToDataIndices;//[Offset: 0x350, Size: 0x10]
	int[] DataIndicesToRenderingIndices;//[Offset: 0x360, Size: 0x10]
	void OnRep_StaticMesh();// 0x339a58eb6041

--------------------------------
Class: LocalPlayerSubsystem.Subsystem.Object

--------------------------------
Class: LODSyncComponent.ActorComponent.Object
	int NumLODs;//[Offset: 0xb0, Size: 0x4]
	int ForcedLOD;//[Offset: 0xb4, Size: 0x4]
	int MinLOD;//[Offset: 0xb8, Size: 0x4]
	ComponentSync[] ComponentsToSync;//[Offset: 0xc0, Size: 0x10]
	<FName,LODMappingData> CustomLODMapping;//[Offset: 0xd0, Size: 0x50]
	int CurrentLOD;//[Offset: 0x120, Size: 0x4]
	int CurrentNumLODs;//[Offset: 0x124, Size: 0x4]
	PrimitiveComponent*[] DriveComponents;//[Offset: 0x128, Size: 0x10]
	PrimitiveComponent*[] SubComponents;//[Offset: 0x138, Size: 0x10]
	FString GetLODSyncDebugText();// 0x339e58eb6041

--------------------------------
Class: ComponentSync
	FName Name;//[Offset: 0x0, Size: 0x8]
	enum SyncOption;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: LODMappingData
	int[] Mapping;//[Offset: 0x0, Size: 0x10]
	int[] InverseMapping;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: LODSyncInterface.Interface.Object

--------------------------------
Class: MaterialFunction.MaterialFunctionInterface.Object
	FString Description;//[Offset: 0x40, Size: 0x10]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bPrefixParameterNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: MaterialShaderQualitySettings.Object
	<FName,ShaderPlatformQualitySettings*> ForwardSettingMap;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: ShaderPlatformQualitySettings.Object
	MaterialQualityOverrides QualityOverrides;//[Offset: 0x28, Size: 0x9]

--------------------------------
Class: MaterialQualityOverrides
	bool bDiscardQualityDuringCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bEnableOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bForceFullyRough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bForceNonMetal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bForceDisableLMDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bForceLQReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bForceDisablePreintegratedGF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool bDisableMaterialNormalCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	enum MobileShadowQuality;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialSpriteElement[] Elements;//[Offset: 0x538, Size: 0x10]
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0x33a058eb6041
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0x339f58eb6041

--------------------------------
Class: MaterialSpriteElement
	MaterialInterface* Material;//[Offset: 0x0, Size: 0x8]
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x8, Size: 0x8]
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float BaseSizeX;//[Offset: 0x14, Size: 0x4]
	float BaseSizeY;//[Offset: 0x18, Size: 0x4]
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 0x8]
	MaterialFunction* Function;//[Offset: 0x30, Size: 0x8]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: MaterialExpressionAbs.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionCustomOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAbsorptionMediumMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput TransmittanceColor;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionActorPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAdd.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput B;//[Offset: 0x50, Size: 0x14]
	float ConstA;//[Offset: 0x64, Size: 0x4]
	float ConstB;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionTextureBase.MaterialExpression.Object
	Texture* Texture;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x48, Size: 0x14]

--------------------------------
Class: MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x5c, Size: 0x8]
	Guid ExpressionGuid;//[Offset: 0x64, Size: 0x10]
	FName Group;//[Offset: 0x74, Size: 0x8]

--------------------------------
Class: MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAntialiasedTextureMask.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	float Threshold;//[Offset: 0x7c, Size: 0x4]
	byte Channel;//[Offset: 0x80, Size: 0x1]

--------------------------------
Class: MaterialExpressionAppendVector.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput B;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionArccosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionArccosineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionArcsine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionArcsineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionArctangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionArctangent2.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput X;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionArctangent2Fast.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput X;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionArctangentFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionAtmosphericFogColor.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionAtmosphericLightColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAtmosphericLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionBentNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionBinaryOp.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput B;//[Offset: 0x50, Size: 0x14]
	float ConstA;//[Offset: 0x64, Size: 0x4]
	float ConstB;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionLess.MaterialExpressionBinaryOp.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionBlackBody.MaterialExpression.Object
	ExpressionInput Temp;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionBlendMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput A;//[Offset: 0x3c, Size: 0x18]
	MaterialAttributesInput B;//[Offset: 0x54, Size: 0x18]
	ExpressionInput Alpha;//[Offset: 0x6c, Size: 0x14]
	byte PixelAttributeBlendType;//[Offset: 0x80, Size: 0x1]
	byte VertexAttributeBlendType;//[Offset: 0x81, Size: 0x1]

--------------------------------
Class: MaterialExpressionBreakMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x3c, Size: 0x18]

--------------------------------
Class: MaterialExpressionBumpOffset.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Height;//[Offset: 0x50, Size: 0x14]
	ExpressionInput HeightRatioInput;//[Offset: 0x64, Size: 0x14]
	float HeightRatio;//[Offset: 0x78, Size: 0x4]
	float ReferencePlane;//[Offset: 0x7c, Size: 0x4]
	uint32 ConstCoordinate;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: MaterialExpressionCameraPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCameraVectorWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCeil.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionParameter.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8]
	Guid ExpressionGuid;//[Offset: 0x44, Size: 0x10]

--------------------------------
Class: MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	LinearColor DefaultValue;//[Offset: 0x54, Size: 0x10]
	bool bUseCustomPrimitiveData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	byte PrimitiveDataIndex;//[Offset: 0x65, Size: 0x1]

--------------------------------
Class: MaterialExpressionChannelMaskParameter.MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	byte MaskChannel;//[Offset: 0x66, Size: 0x1]

--------------------------------
Class: MaterialExpressionClamp.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Min;//[Offset: 0x50, Size: 0x14]
	ExpressionInput Max;//[Offset: 0x64, Size: 0x14]
	byte ClampMode;//[Offset: 0x78, Size: 0x1]
	float MinDefault;//[Offset: 0x7c, Size: 0x4]
	float MaxDefault;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: MaterialExpressionClearCoatNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionCloudSampleAttribute.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCollectionParameter.MaterialExpression.Object
	MaterialParameterCollection* Collection;//[Offset: 0x40, Size: 0x8]
	FName ParameterName;//[Offset: 0x48, Size: 0x8]
	Guid ParameterId;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: MaterialExpressionComment.MaterialExpression.Object
	int SizeX;//[Offset: 0x3c, Size: 0x4]
	int SizeY;//[Offset: 0x40, Size: 0x4]
	FString Text;//[Offset: 0x48, Size: 0x10]
	LinearColor CommentColor;//[Offset: 0x58, Size: 0x10]
	int FontSize;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionComponentMask.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: MaterialExpressionComposite.MaterialExpression.Object
	FString SubgraphName;//[Offset: 0x40, Size: 0x10]
	MaterialExpressionPinBase* InputExpressions;//[Offset: 0x50, Size: 0x8]
	MaterialExpressionPinBase* OutputExpressions;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: MaterialExpressionPinBase.MaterialExpression.Object
	CompositeReroute[] ReroutePins;//[Offset: 0x40, Size: 0x10]
	byte PinDirection;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: CompositeReroute
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialExpressionReroute* Expression;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: MaterialExpressionReroute.MaterialExpressionRerouteBase.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionRerouteBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionConstant.MaterialExpression.Object
	float R;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: MaterialExpressionConstant2Vector.MaterialExpression.Object
	float R;//[Offset: 0x3c, Size: 0x4]
	float G;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: MaterialExpressionConstant3Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: MaterialExpressionConstant4Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: MaterialExpressionConstantBiasScale.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]
	float Bias;//[Offset: 0x50, Size: 0x4]
	float Scale;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: MaterialExpressionCosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]
	float Period;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: MaterialExpressionCrossProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput B;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	float DefaultValue;//[Offset: 0x54, Size: 0x4]
	bool bUseCustomPrimitiveData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	byte PrimitiveDataIndex;//[Offset: 0x59, Size: 0x1]

--------------------------------
Class: MaterialExpressionCurveAtlasRowParameter.MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	CurveLinearColor* Curve;//[Offset: 0x60, Size: 0x8]
	CurveLinearColorAtlas* Atlas;//[Offset: 0x68, Size: 0x8]
	ExpressionInput InputTime;//[Offset: 0x70, Size: 0x14]

--------------------------------
Class: MaterialExpressionCustom.MaterialExpression.Object
	FString Code;//[Offset: 0x40, Size: 0x10]
	byte OutputType;//[Offset: 0x50, Size: 0x1]
	FString Description;//[Offset: 0x58, Size: 0x10]
	CustomInput[] Inputs;//[Offset: 0x68, Size: 0x10]
	CustomOutput[] AdditionalOutputs;//[Offset: 0x78, Size: 0x10]
	CustomDefine[] AdditionalDefines;//[Offset: 0x88, Size: 0x10]
	FString[] IncludeFilePaths;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: CustomInput
	FName InputName;//[Offset: 0x0, Size: 0x8]
	ExpressionInput Input;//[Offset: 0x8, Size: 0x14]

--------------------------------
Class: CustomOutput
	FName OutputName;//[Offset: 0x0, Size: 0x8]
	byte OutputType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: CustomDefine
	FString DefineName;//[Offset: 0x0, Size: 0x10]
	FString DefineValue;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MaterialExpressionDBufferTexture.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0x14]
	byte DBufferTextureId;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: MaterialExpressionDDX.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionDDY.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionDecalDerivative.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalLifetimeOpacity.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalMipmapLevel.MaterialExpression.Object
	ExpressionInput TextureSize;//[Offset: 0x3c, Size: 0x14]
	float ConstWidth;//[Offset: 0x50, Size: 0x4]
	float ConstHeight;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: MaterialExpressionDeltaTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDepthFade.MaterialExpression.Object
	ExpressionInput InOpacity;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput FadeDistance;//[Offset: 0x50, Size: 0x14]
	float OpacityDefault;//[Offset: 0x64, Size: 0x4]
	float FadeDistanceDefault;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionDepthOfFieldFunction.MaterialExpression.Object
	byte FunctionValue;//[Offset: 0x39, Size: 0x1]
	ExpressionInput Depth;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionDeriveNormalZ.MaterialExpression.Object
	ExpressionInput InXY;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionDesaturation.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Fraction;//[Offset: 0x50, Size: 0x14]
	LinearColor LuminanceFactors;//[Offset: 0x64, Size: 0x10]

--------------------------------
Class: MaterialExpressionDistance.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput B;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionDistanceCullFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDistanceFieldGradient.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionDistanceFieldsRenderingSwitch.MaterialExpression.Object
	ExpressionInput No;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Yes;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionDistanceToNearestSurface.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionDivide.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput B;//[Offset: 0x50, Size: 0x14]
	float ConstA;//[Offset: 0x64, Size: 0x4]
	float ConstB;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionDotProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput B;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionDoubleVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	Vector4d DefaultValue;//[Offset: 0x60, Size: 0x20]

--------------------------------
Class: MaterialExpressionDynamicParameter.MaterialExpression.Object
	FString[] ParamNames;//[Offset: 0x40, Size: 0x10]
	LinearColor DefaultValue;//[Offset: 0x50, Size: 0x10]
	uint32 ParameterIndex;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: MaterialExpressionExecBegin.MaterialExpression.Object
	ExpressionExecOutput Exec;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: ExpressionExecOutput
	MaterialExpression* Expression;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: MaterialExpressionExecEnd.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionEyeAdaptation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionEyeAdaptationInverse.MaterialExpression.Object
	ExpressionInput LightValueInput;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput AlphaInput;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionFeatureLevelSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionFloor.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionFmod.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput B;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionFontSample.MaterialExpression.Object
	Font* Font;//[Offset: 0x40, Size: 0x8]
	int FontTexturePage;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: MaterialExpressionFontSampleParameter.MaterialExpressionFontSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x4c, Size: 0x8]
	Guid ExpressionGuid;//[Offset: 0x54, Size: 0x10]
	FName Group;//[Offset: 0x64, Size: 0x8]

--------------------------------
Class: MaterialExpressionForLoop.MaterialExpression.Object
	ExpressionExecOutput LoopBody;//[Offset: 0x40, Size: 0x8]
	ExpressionExecOutput Completed;//[Offset: 0x48, Size: 0x8]
	ExpressionInput StartIndex;//[Offset: 0x50, Size: 0x14]
	ExpressionInput EndIndex;//[Offset: 0x64, Size: 0x14]
	ExpressionInput IndexStep;//[Offset: 0x78, Size: 0x14]

--------------------------------
Class: MaterialExpressionFrac.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionFresnel.MaterialExpression.Object
	ExpressionInput ExponentIn;//[Offset: 0x3c, Size: 0x14]
	float Exponent;//[Offset: 0x50, Size: 0x4]
	ExpressionInput BaseReflectFractionIn;//[Offset: 0x54, Size: 0x14]
	float BaseReflectFraction;//[Offset: 0x68, Size: 0x4]
	ExpressionInput Normal;//[Offset: 0x6c, Size: 0x14]

--------------------------------
Class: MaterialExpressionFunctionInput.MaterialExpression.Object
	ExpressionInput Preview;//[Offset: 0x3c, Size: 0x14]
	FName InputName;//[Offset: 0x50, Size: 0x8]
	FString Description;//[Offset: 0x58, Size: 0x10]
	Guid ID;//[Offset: 0x68, Size: 0x10]
	byte InputType;//[Offset: 0x78, Size: 0x1]
	Vector4 PreviewValue;//[Offset: 0x80, Size: 0x20]
	bool bUsePreviewValueAsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int SortPriority;//[Offset: 0xa4, Size: 0x4]
	bool bCompilingFunctionPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: MaterialExpressionFunctionOutput.MaterialExpression.Object
	FName OutputName;//[Offset: 0x3c, Size: 0x8]
	FString Description;//[Offset: 0x48, Size: 0x10]
	int SortPriority;//[Offset: 0x58, Size: 0x4]
	ExpressionInput A;//[Offset: 0x5c, Size: 0x14]
	bool bLastPreviewed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	Guid ID;//[Offset: 0x74, Size: 0x10]

--------------------------------
Class: MaterialExpressionGenericConstant.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionConstantDouble.MaterialExpressionGenericConstant.MaterialExpression.Object
	double Value;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: MaterialExpressionGetLocal.MaterialExpression.Object
	FName LocalName;//[Offset: 0x3c, Size: 0x8]

--------------------------------
Class: MaterialExpressionGetMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x3c, Size: 0x18]
	Guid[] AttributeGetTypes;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: MaterialExpressionGIReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput StaticIndirect;//[Offset: 0x50, Size: 0x14]
	ExpressionInput DynamicIndirect;//[Offset: 0x64, Size: 0x14]

--------------------------------
Class: MaterialExpressionHairAttributes.MaterialExpression.Object
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1]

--------------------------------
Class: MaterialExpressionHairColor.MaterialExpression.Object
	ExpressionInput Melanin;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Redness;//[Offset: 0x50, Size: 0x14]
	ExpressionInput DyeColor;//[Offset: 0x64, Size: 0x14]

--------------------------------
Class: MaterialExpressionIf.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput B;//[Offset: 0x50, Size: 0x14]
	ExpressionInput AGreaterThanB;//[Offset: 0x64, Size: 0x14]
	ExpressionInput AEqualsB;//[Offset: 0x78, Size: 0x14]
	ExpressionInput ALessThanB;//[Offset: 0x8c, Size: 0x14]
	float EqualsThreshold;//[Offset: 0xa0, Size: 0x4]
	float ConstB;//[Offset: 0xa4, Size: 0x4]
	float ConstAEqualsB;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: MaterialExpressionIfThenElse.MaterialExpression.Object
	ExpressionExecOutput Then;//[Offset: 0x40, Size: 0x8]
	ExpressionExecOutput Else;//[Offset: 0x48, Size: 0x8]
	ExpressionInput Condition;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionInverseLinearInterpolate.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput B;//[Offset: 0x50, Size: 0x14]
	ExpressionInput Value;//[Offset: 0x64, Size: 0x14]
	float ConstA;//[Offset: 0x78, Size: 0x4]
	float ConstB;//[Offset: 0x7c, Size: 0x4]
	float ConstValue;//[Offset: 0x80, Size: 0x4]
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]

--------------------------------
Class: MaterialExpressionLightmapUVs.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLightmassReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Lightmass;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLinearInterpolate.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput B;//[Offset: 0x50, Size: 0x14]
	ExpressionInput Alpha;//[Offset: 0x64, Size: 0x14]
	float ConstA;//[Offset: 0x78, Size: 0x4]
	float ConstB;//[Offset: 0x7c, Size: 0x4]
	float ConstAlpha;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: MaterialExpressionLogarithm10.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionLogarithm2.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionMakeMaterialAttributes.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Metallic;//[Offset: 0x50, Size: 0x14]
	ExpressionInput Specular;//[Offset: 0x64, Size: 0x14]
	ExpressionInput Roughness;//[Offset: 0x78, Size: 0x14]
	ExpressionInput Anisotropy;//[Offset: 0x8c, Size: 0x14]
	ExpressionInput EmissiveColor;//[Offset: 0xa0, Size: 0x14]
	ExpressionInput Opacity;//[Offset: 0xb4, Size: 0x14]
	ExpressionInput OpacityMask;//[Offset: 0xc8, Size: 0x14]
	ExpressionInput Normal;//[Offset: 0xdc, Size: 0x14]
	ExpressionInput Tangent;//[Offset: 0xf0, Size: 0x14]
	ExpressionInput WorldPositionOffset;//[Offset: 0x104, Size: 0x14]
	ExpressionInput SubsurfaceColor;//[Offset: 0x118, Size: 0x14]
	ExpressionInput ClearCoat;//[Offset: 0x12c, Size: 0x14]
	ExpressionInput ClearCoatRoughness;//[Offset: 0x140, Size: 0x14]
	ExpressionInput AmbientOcclusion;//[Offset: 0x154, Size: 0x14]
	ExpressionInput Refraction;//[Offset: 0x168, Size: 0x14]
	ExpressionInput CustomizedUVs;//[Offset: 0x17c, Size: 0x14]
	ExpressionInput PixelDepthOffset;//[Offset: 0x21c, Size: 0x14]
	ExpressionInput ShadingModel;//[Offset: 0x230, Size: 0x14]

--------------------------------
Class: MaterialExpressionMapARPassthroughCameraUV.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionMaterialAttributeLayers.MaterialExpression.Object
	MaterialAttributesInput Input;//[Offset: 0x3c, Size: 0x18]
	MaterialLayersFunctions DefaultLayers;//[Offset: 0x58, Size: 0x20]
	MaterialExpressionMaterialFunctionCall*[] LayerCallers;//[Offset: 0x78, Size: 0x10]
	int NumActiveLayerCallers;//[Offset: 0x88, Size: 0x4]
	MaterialExpressionMaterialFunctionCall*[] BlendCallers;//[Offset: 0x90, Size: 0x10]
	int NumActiveBlendCallers;//[Offset: 0xa0, Size: 0x4]
	bool bIsLayerGraphBuilt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]

--------------------------------
Class: MaterialExpressionMaterialFunctionCall.MaterialExpression.Object
	MaterialFunctionInterface* MaterialFunction;//[Offset: 0x40, Size: 0x8]
	MaterialParameterInfo FunctionParameterInfo;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: MaterialExpressionMaterialLayerOutput.MaterialExpressionFunctionOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionMaterialProxyReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput MaterialProxy;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionMax.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput B;//[Offset: 0x50, Size: 0x14]
	float ConstA;//[Offset: 0x64, Size: 0x4]
	float ConstB;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionMin.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput B;//[Offset: 0x50, Size: 0x14]
	float ConstA;//[Offset: 0x64, Size: 0x4]
	float ConstB;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionMultiply.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput B;//[Offset: 0x50, Size: 0x14]
	float ConstA;//[Offset: 0x64, Size: 0x4]
	float ConstB;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionNamedRerouteBase.MaterialExpressionRerouteBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionNamedRerouteDeclaration.MaterialExpressionNamedRerouteBase.MaterialExpressionRerouteBase.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]
	FName Name;//[Offset: 0x50, Size: 0x8]
	Guid VariableGuid;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: MaterialExpressionNamedRerouteUsage.MaterialExpressionNamedRerouteBase.MaterialExpressionRerouteBase.MaterialExpression.Object
	MaterialExpressionNamedRerouteDeclaration* Declaration;//[Offset: 0x40, Size: 0x8]
	Guid DeclarationGuid;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: MaterialExpressionNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput FilterWidth;//[Offset: 0x50, Size: 0x14]
	float Scale;//[Offset: 0x64, Size: 0x4]
	int Quality;//[Offset: 0x68, Size: 0x4]
	byte NoiseFunction;//[Offset: 0x6c, Size: 0x1]
	bool bTurbulence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d, Size: 0x1]
	int Levels;//[Offset: 0x70, Size: 0x4]
	float OutputMin;//[Offset: 0x74, Size: 0x4]
	float OutputMax;//[Offset: 0x78, Size: 0x4]
	float LevelScale;//[Offset: 0x7c, Size: 0x4]
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	uint32 RepeatSize;//[Offset: 0x84, Size: 0x4]

--------------------------------
Class: MaterialExpressionNormalize.MaterialExpression.Object
	ExpressionInput VectorInput;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionObjectBounds.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectOrientation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionOneMinus.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionPanner.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Time;//[Offset: 0x50, Size: 0x14]
	ExpressionInput Speed;//[Offset: 0x64, Size: 0x14]
	float SpeedX;//[Offset: 0x78, Size: 0x4]
	float SpeedY;//[Offset: 0x7c, Size: 0x4]
	uint32 ConstCoordinate;//[Offset: 0x80, Size: 0x4]
	bool bFractionalPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]

--------------------------------
Class: MaterialExpressionParticleColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleDirection.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMacroUV.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMotionBlurFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticlePositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRelativeTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSpeed.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSubUV.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]

--------------------------------
Class: MaterialExpressionParticleSubUVProperties.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPathTracingQualitySwitch.MaterialExpression.Object
	ExpressionInput Normal;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput PathTraced;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionPerInstanceCustomData.MaterialExpression.Object
	ExpressionInput DefaultValue;//[Offset: 0x3c, Size: 0x14]
	float ConstDefaultValue;//[Offset: 0x50, Size: 0x4]
	uint32 DataIndex;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: MaterialExpressionPerInstanceCustomData3Vector.MaterialExpression.Object
	ExpressionInput DefaultValue;//[Offset: 0x3c, Size: 0x14]
	LinearColor ConstDefaultValue;//[Offset: 0x50, Size: 0x10]
	uint32 DataIndex;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: MaterialExpressionPerInstanceFadeAmount.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPerInstanceRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelDepth.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPower.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Exponent;//[Offset: 0x50, Size: 0x14]
	float ConstExponent;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: MaterialExpressionPrecomputedAOMask.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedLocalBounds.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedNormal.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedPosition.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreviousFrameSwitch.MaterialExpression.Object
	ExpressionInput CurrentFrame;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput PreviousFrame;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionQualitySwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionRayTracingQualitySwitch.MaterialExpression.Object
	ExpressionInput Normal;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput RayTraced;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionReflectionCapturePassSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Reflection;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionReflectionVectorWS.MaterialExpression.Object
	ExpressionInput CustomWorldNormal;//[Offset: 0x3c, Size: 0x14]
	bool bNormalizeCustomWorldNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: MaterialExpressionRotateAboutAxis.MaterialExpression.Object
	ExpressionInput NormalizedRotationAxis;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput RotationAngle;//[Offset: 0x50, Size: 0x14]
	ExpressionInput PivotPoint;//[Offset: 0x64, Size: 0x14]
	ExpressionInput Position;//[Offset: 0x78, Size: 0x14]
	float Period;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: MaterialExpressionRotator.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Time;//[Offset: 0x50, Size: 0x14]
	float CenterX;//[Offset: 0x64, Size: 0x4]
	float CenterY;//[Offset: 0x68, Size: 0x4]
	float Speed;//[Offset: 0x6c, Size: 0x4]
	uint32 ConstCoordinate;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: MaterialExpressionRound.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Specular;//[Offset: 0x50, Size: 0x14]
	ExpressionInput Roughness;//[Offset: 0x64, Size: 0x14]
	ExpressionInput Normal;//[Offset: 0x78, Size: 0x14]
	ExpressionInput WorldHeight;//[Offset: 0x8c, Size: 0x14]
	ExpressionInput Opacity;//[Offset: 0xa0, Size: 0x14]
	ExpressionInput Mask;//[Offset: 0xb4, Size: 0x14]

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput VirtualTextureOutput;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput WorldPosition;//[Offset: 0x50, Size: 0x14]
	ExpressionInput MipValue;//[Offset: 0x64, Size: 0x14]
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x78, Size: 0x8]
	enum MaterialType;//[Offset: 0x80, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 0x1]
	bool bAdaptive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 0x1]
	byte MipValueMode;//[Offset: 0x83, Size: 0x1]
	byte TextureAddressMode;//[Offset: 0x84, Size: 0x1]

--------------------------------
Class: MaterialExpressionRuntimeVirtualTextureSampleParameter.MaterialExpressionRuntimeVirtualTextureSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x88, Size: 0x8]
	Guid ExpressionGuid;//[Offset: 0x90, Size: 0x10]
	FName Group;//[Offset: 0xa0, Size: 0x8]

--------------------------------
Class: MaterialExpressionSamplePhysicsVectorField.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0x14]
	byte FieldTarget;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: MaterialExpressionSamplePhysicsScalarField.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0x14]
	byte FieldTarget;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: MaterialExpressionSamplePhysicsIntegerField.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0x14]
	byte FieldTarget;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: MaterialExpressionSaturate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionSceneColor.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1]
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput OffsetFraction;//[Offset: 0x50, Size: 0x14]
	Vector2D ConstInput;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: MaterialExpressionSceneDepth.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1]
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Coordinates;//[Offset: 0x50, Size: 0x14]
	Vector2D ConstInput;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: MaterialExpressionSceneDepthWithoutWater.MaterialExpression.Object
	byte InputMode;//[Offset: 0x39, Size: 0x1]
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]
	Vector2D ConstInput;//[Offset: 0x50, Size: 0x10]
	float FallbackDepth;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: MaterialExpressionSceneTexelSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSceneTexture.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x3c, Size: 0x14]
	byte SceneTextureId;//[Offset: 0x50, Size: 0x1]
	bool bFiltered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]

--------------------------------
Class: MaterialExpressionScreenPosition.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSetLocal.MaterialExpression.Object
	ExpressionExecOutput Exec;//[Offset: 0x40, Size: 0x8]
	ExpressionInput Value;//[Offset: 0x48, Size: 0x14]
	FName LocalName;//[Offset: 0x5c, Size: 0x8]

--------------------------------
Class: MaterialExpressionSetMaterialAttributes.MaterialExpression.Object
	ExpressionInput[] Inputs;//[Offset: 0x40, Size: 0x10]
	Guid[] AttributeSetTypes;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: MaterialExpressionShaderStageSwitch.MaterialExpression.Object
	ExpressionInput PixelShader;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput VertexShader;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionShadingModel.MaterialExpression.Object
	byte ShadingModel;//[Offset: 0x39, Size: 0x1]

--------------------------------
Class: MaterialExpressionShadingPathSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Inputs;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionShadowReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Shadow;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionSign.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionSine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]
	float Period;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: MaterialExpressionSingleLayerWaterMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput ScatteringCoefficients;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput AbsorptionCoefficients;//[Offset: 0x50, Size: 0x14]
	ExpressionInput PhaseG;//[Offset: 0x64, Size: 0x14]
	ExpressionInput ColorScaleBehindWater;//[Offset: 0x78, Size: 0x14]

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightDirection.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightIlluminance.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4]
	ExpressionInput WorldPosition;//[Offset: 0x40, Size: 0x14]

--------------------------------
Class: MaterialExpressionSkyAtmosphereLightDiskLuminance.MaterialExpression.Object
	int LightIndex;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: MaterialExpressionSkyAtmosphereAerialPerspective.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSkyAtmosphereViewLuminance.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSkyLightEnvMapSample.MaterialExpression.Object
	ExpressionInput Direction;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Roughness;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionSmoothStep.MaterialExpression.Object
	ExpressionInput Min;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Max;//[Offset: 0x50, Size: 0x14]
	ExpressionInput Value;//[Offset: 0x64, Size: 0x14]
	float ConstMin;//[Offset: 0x78, Size: 0x4]
	float ConstMax;//[Offset: 0x7c, Size: 0x4]
	float ConstValue;//[Offset: 0x80, Size: 0x4]

--------------------------------
Class: MaterialExpressionSobol.MaterialExpression.Object
	ExpressionInput Cell;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Index;//[Offset: 0x50, Size: 0x14]
	ExpressionInput Seed;//[Offset: 0x64, Size: 0x14]
	uint32 ConstIndex;//[Offset: 0x78, Size: 0x4]
	Vector2D ConstSeed;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: MaterialExpressionSpeedTree.MaterialExpression.Object
	ExpressionInput GeometryInput;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput WindInput;//[Offset: 0x50, Size: 0x14]
	ExpressionInput LODInput;//[Offset: 0x64, Size: 0x14]
	ExpressionInput ExtraBendWS;//[Offset: 0x78, Size: 0x14]
	byte GeometryType;//[Offset: 0x8c, Size: 0x1]
	byte WindType;//[Offset: 0x8d, Size: 0x1]
	byte LODType;//[Offset: 0x8e, Size: 0x1]
	float BillboardThreshold;//[Offset: 0x90, Size: 0x4]
	bool bAccurateWindVelocities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]

--------------------------------
Class: MaterialExpressionSphereMask.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput B;//[Offset: 0x50, Size: 0x14]
	ExpressionInput Radius;//[Offset: 0x64, Size: 0x14]
	ExpressionInput Hardness;//[Offset: 0x78, Size: 0x14]
	float AttenuationRadius;//[Offset: 0x8c, Size: 0x4]
	float HardnessPercent;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: MaterialExpressionSphericalParticleOpacity.MaterialExpression.Object
	ExpressionInput Density;//[Offset: 0x3c, Size: 0x14]
	float ConstantDensity;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: MaterialExpressionSquareRoot.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionStaticBool.MaterialExpression.Object
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1]

--------------------------------
Class: MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: MaterialExpressionStaticComponentMaskParameter.MaterialExpressionParameter.MaterialExpression.Object
	bool DefaultR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool DefaultG;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	bool DefaultB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1]
	bool DefaultA;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: MaterialExpressionStaticSwitch.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1]
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput B;//[Offset: 0x50, Size: 0x14]
	ExpressionInput Value;//[Offset: 0x64, Size: 0x14]

--------------------------------
Class: MaterialExpressionStaticSwitchParameter.MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionStep.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput X;//[Offset: 0x50, Size: 0x14]
	float ConstY;//[Offset: 0x64, Size: 0x4]
	float ConstX;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionStrataBSDF.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionStrataLegacyConversion.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Metallic;//[Offset: 0x50, Size: 0x14]
	ExpressionInput Specular;//[Offset: 0x64, Size: 0x14]
	ExpressionInput Roughness;//[Offset: 0x78, Size: 0x14]
	ExpressionInput Anisotropy;//[Offset: 0x8c, Size: 0x14]
	ExpressionInput EmissiveColor;//[Offset: 0xa0, Size: 0x14]
	ExpressionInput Normal;//[Offset: 0xb4, Size: 0x14]
	ExpressionInput Tangent;//[Offset: 0xc8, Size: 0x14]
	ExpressionInput SubsurfaceColor;//[Offset: 0xdc, Size: 0x14]
	ExpressionInput ClearCoat;//[Offset: 0xf0, Size: 0x14]
	ExpressionInput ClearCoatRoughness;//[Offset: 0x104, Size: 0x14]
	ExpressionInput Opacity;//[Offset: 0x118, Size: 0x14]
	ExpressionInput TransmittanceColor;//[Offset: 0x12c, Size: 0x14]
	ExpressionInput WaterScatteringCoefficients;//[Offset: 0x140, Size: 0x14]
	ExpressionInput WaterAbsorptionCoefficients;//[Offset: 0x154, Size: 0x14]
	ExpressionInput WaterPhaseG;//[Offset: 0x168, Size: 0x14]
	ExpressionInput ColorScaleBehindWater;//[Offset: 0x17c, Size: 0x14]
	ExpressionInput ClearCoatNormal;//[Offset: 0x190, Size: 0x14]
	ExpressionInput ShadingModel;//[Offset: 0x1a4, Size: 0x14]
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x1b8, Size: 0x8]
	StrataMaterialInfo ConvertedStrataMaterialInfo;//[Offset: 0x1c0, Size: 0x18]

--------------------------------
Class: StrataMaterialInfo
	byte ShadingModelField;//[Offset: 0x0, Size: 0x1]
	byte bHasShadingModelFromExpression;//[Offset: 0x1, Size: 0x1]
	SubsurfaceProfile*[] SubsurfaceProfiles;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MaterialExpressionStrataSlabBSDF.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput EdgeColor;//[Offset: 0x50, Size: 0x14]
	ExpressionInput Metallic;//[Offset: 0x64, Size: 0x14]
	ExpressionInput Specular;//[Offset: 0x78, Size: 0x14]
	ExpressionInput DiffuseAlbedo;//[Offset: 0x8c, Size: 0x14]
	ExpressionInput F0;//[Offset: 0xa0, Size: 0x14]
	ExpressionInput F90;//[Offset: 0xb4, Size: 0x14]
	ExpressionInput Roughness;//[Offset: 0xc8, Size: 0x14]
	ExpressionInput Anisotropy;//[Offset: 0xdc, Size: 0x14]
	ExpressionInput Normal;//[Offset: 0xf0, Size: 0x14]
	ExpressionInput Tangent;//[Offset: 0x104, Size: 0x14]
	ExpressionInput SSSDMFP;//[Offset: 0x118, Size: 0x14]
	ExpressionInput SSSDMFPScale;//[Offset: 0x12c, Size: 0x14]
	ExpressionInput EmissiveColor;//[Offset: 0x140, Size: 0x14]
	ExpressionInput Haziness;//[Offset: 0x154, Size: 0x14]
	ExpressionInput ThinFilmThickness;//[Offset: 0x168, Size: 0x14]
	ExpressionInput Thickness;//[Offset: 0x17c, Size: 0x14]
	ExpressionInput FuzzAmount;//[Offset: 0x190, Size: 0x14]
	ExpressionInput FuzzColor;//[Offset: 0x1a4, Size: 0x14]
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x1b8, Size: 0x8]
	bool bUseMetalness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c0, Size: 0x1]

--------------------------------
Class: MaterialExpressionStrataVolumetricFogCloudBSDF.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput Albedo;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Extinction;//[Offset: 0x50, Size: 0x14]
	ExpressionInput EmissiveColor;//[Offset: 0x64, Size: 0x14]
	ExpressionInput AmbientOcclusion;//[Offset: 0x78, Size: 0x14]

--------------------------------
Class: MaterialExpressionStrataUnlitBSDF.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput EmissiveColor;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput TransmittanceColor;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionStrataHairBSDF.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Scatter;//[Offset: 0x50, Size: 0x14]
	ExpressionInput Specular;//[Offset: 0x64, Size: 0x14]
	ExpressionInput Roughness;//[Offset: 0x78, Size: 0x14]
	ExpressionInput Backlit;//[Offset: 0x8c, Size: 0x14]
	ExpressionInput Tangent;//[Offset: 0xa0, Size: 0x14]
	ExpressionInput EmissiveColor;//[Offset: 0xb4, Size: 0x14]

--------------------------------
Class: MaterialExpressionStrataSingleLayerWaterBSDF.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Metallic;//[Offset: 0x50, Size: 0x14]
	ExpressionInput Specular;//[Offset: 0x64, Size: 0x14]
	ExpressionInput Roughness;//[Offset: 0x78, Size: 0x14]
	ExpressionInput Normal;//[Offset: 0x8c, Size: 0x14]
	ExpressionInput EmissiveColor;//[Offset: 0xa0, Size: 0x14]
	ExpressionInput TopMaterialOpacity;//[Offset: 0xb4, Size: 0x14]
	ExpressionInput WaterAlbedo;//[Offset: 0xc8, Size: 0x14]
	ExpressionInput WaterExtinction;//[Offset: 0xdc, Size: 0x14]
	ExpressionInput WaterPhaseG;//[Offset: 0xf0, Size: 0x14]
	ExpressionInput ColorScaleBehindWater;//[Offset: 0x104, Size: 0x14]

--------------------------------
Class: MaterialExpressionStrataHorizontalMixing.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput Background;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Foreground;//[Offset: 0x50, Size: 0x14]
	ExpressionInput Mix;//[Offset: 0x64, Size: 0x14]
	bool bUseParameterBlending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]

--------------------------------
Class: MaterialExpressionStrataVerticalLayering.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput Top;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Base;//[Offset: 0x50, Size: 0x14]
	bool bUseParameterBlending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]

--------------------------------
Class: MaterialExpressionStrataAdd.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput B;//[Offset: 0x50, Size: 0x14]
	bool bUseParameterBlending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]

--------------------------------
Class: MaterialExpressionStrataWeight.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Weight;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionStrataTransmittanceToMFP.MaterialExpressionStrataBSDF.MaterialExpression.Object
	ExpressionInput TransmittanceColor;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Thickness;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionSubtract.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput B;//[Offset: 0x50, Size: 0x14]
	float ConstA;//[Offset: 0x64, Size: 0x4]
	float ConstB;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: MaterialExpressionTangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]
	float Period;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: MaterialExpressionTangentOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionTemporalSobol.MaterialExpression.Object
	ExpressionInput Index;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Seed;//[Offset: 0x50, Size: 0x14]
	uint32 ConstIndex;//[Offset: 0x64, Size: 0x4]
	Vector2D ConstSeed;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: MaterialExpressionTextureCoordinate.MaterialExpression.Object
	int CoordinateIndex;//[Offset: 0x3c, Size: 0x4]
	float UTiling;//[Offset: 0x40, Size: 0x4]
	float VTiling;//[Offset: 0x44, Size: 0x4]
	bool UnMirrorU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool UnMirrorV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: MaterialExpressionTextureObject.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureObjectParameter.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureProperty.MaterialExpression.Object
	ExpressionInput TextureObject;//[Offset: 0x3c, Size: 0x14]
	byte Property;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: MaterialExpressionTextureSampleParameter2DArray.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterCube.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterCubeArray.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterSubUV.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 0x1]

--------------------------------
Class: MaterialExpressionTextureSampleParameterVolume.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: VolumeTexture.Texture.StreamableRenderAsset.Object

--------------------------------
Class: MaterialExpressionThinTranslucentMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput TransmittanceColor;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionTime.MaterialExpression.Object
	bool bIgnorePause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1]
	bool bOverride_Period;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1]
	float Period;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: MaterialExpressionTransform.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]
	byte TransformSourceType;//[Offset: 0x50, Size: 0x1]
	byte TransformType;//[Offset: 0x51, Size: 0x1]

--------------------------------
Class: MaterialExpressionTransformPosition.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]
	byte TransformSourceType;//[Offset: 0x50, Size: 0x1]
	byte TransformType;//[Offset: 0x51, Size: 0x1]

--------------------------------
Class: MaterialExpressionTruncate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionTwoSidedSign.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVectorNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x3c, Size: 0x14]
	byte NoiseFunction;//[Offset: 0x50, Size: 0x1]
	int Quality;//[Offset: 0x54, Size: 0x4]
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	uint32 TileSize;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: MaterialExpressionVertexColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVertexInterpolator.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x3c, Size: 0x14]

--------------------------------
Class: MaterialExpressionVertexNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVertexTangentWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionViewProperty.MaterialExpression.Object
	byte Property;//[Offset: 0x39, Size: 0x1]

--------------------------------
Class: MaterialExpressionViewSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVirtualTextureFeatureSwitch.MaterialExpression.Object
	ExpressionInput No;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Yes;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionVolumetricAdvancedMaterialInput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVolumetricAdvancedMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput PhaseG;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput PhaseG2;//[Offset: 0x50, Size: 0x14]
	ExpressionInput PhaseBlend;//[Offset: 0x64, Size: 0x14]
	ExpressionInput MultiScatteringContribution;//[Offset: 0x78, Size: 0x14]
	ExpressionInput MultiScatteringOcclusion;//[Offset: 0x8c, Size: 0x14]
	ExpressionInput MultiScatteringEccentricity;//[Offset: 0xa0, Size: 0x14]
	ExpressionInput ConservativeDensity;//[Offset: 0xb4, Size: 0x14]
	float ConstPhaseG;//[Offset: 0xc8, Size: 0x4]
	float ConstPhaseG2;//[Offset: 0xcc, Size: 0x4]
	float ConstPhaseBlend;//[Offset: 0xd0, Size: 0x4]
	bool PerSamplePhaseEvaluation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	uint32 MultiScatteringApproximationOctaveCount;//[Offset: 0xd8, Size: 0x4]
	float ConstMultiScatteringContribution;//[Offset: 0xdc, Size: 0x4]
	float ConstMultiScatteringOcclusion;//[Offset: 0xe0, Size: 0x4]
	float ConstMultiScatteringEccentricity;//[Offset: 0xe4, Size: 0x4]
	bool bGroundContribution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bGrayScaleMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	bool bRayMarchVolumeShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 0x1]

--------------------------------
Class: MaterialExpressionWhileLoop.MaterialExpression.Object
	ExpressionExecOutput LoopBody;//[Offset: 0x40, Size: 0x8]
	ExpressionExecOutput Completed;//[Offset: 0x48, Size: 0x8]
	ExpressionInput Condition;//[Offset: 0x50, Size: 0x14]

--------------------------------
Class: MaterialExpressionWorldPosition.MaterialExpression.Object
	byte WorldPositionShaderOffset;//[Offset: 0x39, Size: 0x1]

--------------------------------
Class: MaterialFunctionInstance.MaterialFunctionInterface.Object
	MaterialFunctionInterface* Parent;//[Offset: 0x40, Size: 0x8]
	MaterialFunctionInterface* Base;//[Offset: 0x48, Size: 0x8]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x50, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x60, Size: 0x10]
	DoubleVectorParameterValue[] DoubleVectorParameterValues;//[Offset: 0x70, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x80, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0x90, Size: 0x10]
	StaticSwitchParameter[] StaticSwitchParameterValues;//[Offset: 0xa0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameterValues;//[Offset: 0xb0, Size: 0x10]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: MaterialFunctionMaterialLayer.MaterialFunction.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerBlend.MaterialFunction.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialFunctionMaterialLayerBlendInstance.MaterialFunctionInstance.MaterialFunctionInterface.Object

--------------------------------
Class: MaterialInstanceActor.Actor.Object
	Actor*[] TargetActors;//[Offset: 0x278, Size: 0x10]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x1f8, Size: 0x8]
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x27bf58eb6041
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x27be58eb6041
	float K2_GetScalarParameterValue(FName ParameterName);// 0x27bd58eb6041

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x278, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x280, Size: 0x8]
	float PlayRate;//[Offset: 0x288, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28c, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28c, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x290, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x294, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x294, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x294, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x294, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x294, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x294, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x294, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x298, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29c, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29c, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29c, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x2a0, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x2b8, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x2c8, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d8, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d8, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d8, Size: 0x1]
	float InterpPosition;//[Offset: 0x2dc, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x2e4, Size: 0x1]
	delegate OnPlay;//[Offset: 0x2e8, Size: 0x10]
	delegate OnStop;//[Offset: 0x2f8, Size: 0x10]
	delegate OnPause;//[Offset: 0x308, Size: 0x10]
	void Stop();// 0x33bf58eb6041
	void SetPosition(float NewPosition, bool bJump);// 0x33be58eb6041
	void SetLoopingState(bool bNewLooping);// 0x33bd58eb6041
	void Reverse();// 0x33bc58eb6041
	void Play();// 0x33bb58eb6041
	void Pause();// 0x33ba58eb6041
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x33b958eb6041
	void ChangePlaybackDirection();// 0x33b858eb6041

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0x18]
	float Timestamp;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: MatineeActorCameraAnim.MatineeActor.Actor.Object
	CameraAnim* CameraAnim;//[Offset: 0x320, Size: 0x8]

--------------------------------
Class: MatineeAnimInterface.Interface.Object

--------------------------------
Class: MatineeInterface.Interface.Object

--------------------------------
Class: MeshMergeCullingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: MeshSimplificationSettings.DeveloperSettings.Object
	FName MeshReductionModuleName;//[Offset: 0x38, Size: 0x8]
	bool bMeshReductionBackwardCompatible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: MeshVertexPainterKismetLibrary.BlueprintFunctionLibrary.Object
	void RemovePaintedVertices(StaticMeshComponent* StaticMeshComponent);// 0x33c258eb6041
	void PaintVerticesSingleColor(StaticMeshComponent* StaticMeshComponent, out const LinearColor FillColor, bool bConvertToSRGB);// 0x33c158eb6041
	void PaintVerticesLerpAlongAxis(StaticMeshComponent* StaticMeshComponent, out const LinearColor StartColor, out const LinearColor EndColor, enum Axis, bool bConvertToSRGB);// 0x33c058eb6041

--------------------------------
Class: MicroTransactionBase.PlatformInterfaceBase.Object
	PurchaseInfo[] AvailableProducts;//[Offset: 0x38, Size: 0x10]
	FString LastError;//[Offset: 0x48, Size: 0x10]
	FString LastErrorSolution;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: PurchaseInfo
	FString Identifier;//[Offset: 0x0, Size: 0x10]
	FString DisplayName;//[Offset: 0x10, Size: 0x10]
	FString DisplayDescription;//[Offset: 0x20, Size: 0x10]
	FString DisplayPrice;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: NavAgentInterface.Interface.Object

--------------------------------
Class: NavEdgeProviderInterface.Interface.Object

--------------------------------
Class: NavigationDataChunkActor.PartitionActor.Actor.Object
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x278, Size: 0x10]
	Box DataChunkActorBounds;//[Offset: 0x288, Size: 0x38]

--------------------------------
Class: NavigationDataInterface.Interface.Object

--------------------------------
Class: NullNavSysConfig.NavigationSystemConfig.Object

--------------------------------
Class: NavLinkDefinition.Object
	NavigationLink[] Links;//[Offset: 0x28, Size: 0x10]
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: NavigationLink.NavigationLinkBase
	Vector Left;//[Offset: 0x30, Size: 0x18]
	Vector Right;//[Offset: 0x48, Size: 0x18]

--------------------------------
Class: NavigationLinkBase
	float LeftProjectHeight;//[Offset: 0x0, Size: 0x4]
	float MaxFallDownLength;//[Offset: 0x4, Size: 0x4]
	float SnapRadius;//[Offset: 0xc, Size: 0x4]
	float SnapHeight;//[Offset: 0x10, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x14, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 0x1]
	byte Direction;//[Offset: 0x1c, Size: 0x1]
	bool bUseSnapHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bSnapToCheapestArea;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag0;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag3;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag4;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag5;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 0x1]
	bool bCustomFlag6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 0x1]
	bool bCustomFlag7;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e, Size: 0x1]
	class NavAreaBase* AreaClass;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: NavigationSegmentLink.NavigationLinkBase
	Vector LeftStart;//[Offset: 0x30, Size: 0x18]
	Vector LeftEnd;//[Offset: 0x48, Size: 0x18]
	Vector RightStart;//[Offset: 0x60, Size: 0x18]
	Vector RightEnd;//[Offset: 0x78, Size: 0x18]

--------------------------------
Class: NavPathObserverInterface.Interface.Object

--------------------------------
Class: NavRelevantInterface.Interface.Object

--------------------------------
Class: SimulatedClientNetConnection.NetConnection.Player.Object

--------------------------------
Class: StatePerObjectConfig.Object
	FString PerObjectConfigSection;//[Offset: 0x50, Size: 0x10]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: EscalationManagerConfig.StatePerObjectConfig.Object
	FString[] EscalationSeverity;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: NetFaultConfig.EscalationManagerConfig.StatePerObjectConfig.Object

--------------------------------
Class: NetPushModelHelpers.BlueprintFunctionLibrary.Object
	void MarkPropertyDirtyFromRepIndex(Object* Object, int RepIndex, FName PropertyName);// 0x33c458eb6041
	void MarkPropertyDirty(Object* Object, FName PropertyName);// 0x33c358eb6041

--------------------------------
Class: NetworkPredictionInterface.Interface.Object

--------------------------------
Class: NetworkSettings.DeveloperSettings.Object
	bool bVerifyPeer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bEnableMultiplayerWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	int MaxRepArraySize;//[Offset: 0x3c, Size: 0x4]
	int MaxRepArrayMemory;//[Offset: 0x40, Size: 0x4]
	NetworkEmulationProfileDescription[] NetworkEmulationProfiles;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: NetworkEmulationProfileDescription
	FString ProfileName;//[Offset: 0x0, Size: 0x10]
	FString ToolTip;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NodeMappingProviderInterface.Interface.Object

--------------------------------
Class: Note.Actor.Object

--------------------------------
Class: ObjectElementAssetDataInterface.Object

--------------------------------
Class: ObjectElementCounterInterface.Object

--------------------------------
Class: ObjectElementObjectInterface.Object

--------------------------------
Class: ObjectElementSelectionInterface.Object

--------------------------------
Class: ObjectLibrary.Object
	ClassPtrProperty ObjectBaseClass;//[Size: 0x8]
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	Object*[] Objects;//[Offset: 0x38, Size: 0x10]
	Object*[] WeakObjects;//[Offset: 0x48, Size: 0x10]
	bool bUseWeakReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bIsFullyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: ObjectReferencer.Object
	Object*[] ReferencedObjects;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ObjectTraceWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: OnlineEngineInterface.Object

--------------------------------
Class: PackageMapClient.PackageMap.Object

--------------------------------
Class: PackedLevelActor.LevelInstance.Actor.Object

--------------------------------
Class: PainCausingVolume.PhysicsVolume.Volume.Brush.Actor.Object
	bool bPainCausing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bd, Size: 0x1]
	float DamagePerSec;//[Offset: 0x2c0, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0x2c8, Size: 0x8]
	float PainInterval;//[Offset: 0x2d0, Size: 0x4]
	bool bEntryPain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 0x1]
	bool BACKUP_bPainCausing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4, Size: 0x1]
	Controller* DamageInstigator;//[Offset: 0x2d8, Size: 0x8]

--------------------------------
Class: ParticleModuleAccelerationBase.ParticleModule.Object
	bool bAlwaysInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ParticleModuleAcceleration.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector Acceleration;//[Offset: 0x30, Size: 0x60]
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: ParticleModuleAccelerationConstant.ParticleModuleAccelerationBase.ParticleModule.Object
	Vector Acceleration;//[Offset: 0x30, Size: 0x18]

--------------------------------
Class: ParticleModuleAccelerationDrag.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragCoefficient;//[Offset: 0x30, Size: 0x8]
	RawDistributionFloat DragCoefficientRaw;//[Offset: 0x38, Size: 0x30]

--------------------------------
Class: ParticleModuleAccelerationDragScaleOverLife.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragScale;//[Offset: 0x30, Size: 0x8]
	RawDistributionFloat DragScaleRaw;//[Offset: 0x38, Size: 0x30]

--------------------------------
Class: ParticleModuleAccelerationOverLifetime.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector AccelOverLife;//[Offset: 0x30, Size: 0x60]

--------------------------------
Class: ParticleModuleAttractorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleAttractorLine.ParticleModuleAttractorBase.ParticleModule.Object
	Vector EndPoint0;//[Offset: 0x30, Size: 0x18]
	Vector EndPoint1;//[Offset: 0x48, Size: 0x18]
	RawDistributionFloat Range;//[Offset: 0x60, Size: 0x30]
	RawDistributionFloat Strength;//[Offset: 0x90, Size: 0x30]

--------------------------------
Class: ParticleModuleAttractorParticle.ParticleModuleAttractorBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8]
	RawDistributionFloat Range;//[Offset: 0x38, Size: 0x30]
	bool bStrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	RawDistributionFloat Strength;//[Offset: 0x70, Size: 0x30]
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	byte SelectionMethod;//[Offset: 0xa1, Size: 0x1]
	bool bRenewSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa2, Size: 0x1]
	bool bInheritSourceVel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa2, Size: 0x1]
	int LastSelIndex;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: ParticleModuleAttractorPoint.ParticleModuleAttractorBase.ParticleModule.Object
	RawDistributionVector Position;//[Offset: 0x30, Size: 0x60]
	RawDistributionFloat Range;//[Offset: 0x90, Size: 0x30]
	RawDistributionFloat Strength;//[Offset: 0xc0, Size: 0x30]
	bool StrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bOverrideVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]
	bool bUseWorldSpacePosition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1]
	bool Positive_X;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf0, Size: 0x1]
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf0, Size: 0x1]
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf0, Size: 0x1]
	bool Negative_X;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf0, Size: 0x1]
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf1, Size: 0x1]
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf1, Size: 0x1]

--------------------------------
Class: ParticleModuleAttractorPointGravity.ParticleModuleAttractorBase.ParticleModule.Object
	Vector Position;//[Offset: 0x30, Size: 0x18]
	float Radius;//[Offset: 0x48, Size: 0x4]
	DistributionFloat* Strength;//[Offset: 0x50, Size: 0x8]
	RawDistributionFloat StrengthRaw;//[Offset: 0x58, Size: 0x30]

--------------------------------
Class: ParticleModuleBeamBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleBeamModifier.ParticleModuleBeamBase.ParticleModule.Object
	byte ModifierType;//[Offset: 0x2b, Size: 0x1]
	BeamModifierOptions PositionOptions;//[Offset: 0x2c, Size: 0x4]
	RawDistributionVector Position;//[Offset: 0x30, Size: 0x60]
	BeamModifierOptions TangentOptions;//[Offset: 0x90, Size: 0x4]
	RawDistributionVector Tangent;//[Offset: 0x98, Size: 0x60]
	bool bAbsoluteTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1]
	BeamModifierOptions StrengthOptions;//[Offset: 0xfc, Size: 0x4]
	RawDistributionFloat Strength;//[Offset: 0x100, Size: 0x30]

--------------------------------
Class: BeamModifierOptions
	bool bModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLock;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleBeamNoise.ParticleModuleBeamBase.ParticleModule.Object
	bool bLowFreq_Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	int Frequency;//[Offset: 0x2c, Size: 0x4]
	int Frequency_LowRange;//[Offset: 0x30, Size: 0x4]
	RawDistributionVector NoiseRange;//[Offset: 0x38, Size: 0x60]
	RawDistributionFloat NoiseRangeScale;//[Offset: 0x98, Size: 0x30]
	bool bNRScaleEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	RawDistributionVector NoiseSpeed;//[Offset: 0xd0, Size: 0x60]
	bool bSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1]
	float NoiseLockRadius;//[Offset: 0x134, Size: 0x4]
	bool bNoiseLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1]
	bool bOscillate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x138, Size: 0x1]
	float NoiseLockTime;//[Offset: 0x13c, Size: 0x4]
	float NoiseTension;//[Offset: 0x140, Size: 0x4]
	bool bUseNoiseTangents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x144, Size: 0x1]
	RawDistributionFloat NoiseTangentStrength;//[Offset: 0x148, Size: 0x30]
	int NoiseTessellation;//[Offset: 0x178, Size: 0x4]
	bool bTargetNoise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17c, Size: 0x1]
	float FrequencyDistance;//[Offset: 0x180, Size: 0x4]
	bool bApplyNoiseScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x184, Size: 0x1]
	RawDistributionFloat NoiseScale;//[Offset: 0x188, Size: 0x30]

--------------------------------
Class: ParticleModuleBeamSource.ParticleModuleBeamBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x2b, Size: 0x1]
	FName SourceName;//[Offset: 0x2c, Size: 0x8]
	bool bSourceAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	RawDistributionVector Source;//[Offset: 0x38, Size: 0x60]
	bool bLockSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	byte SourceTangentMethod;//[Offset: 0x99, Size: 0x1]
	RawDistributionVector SourceTangent;//[Offset: 0xa0, Size: 0x60]
	bool bLockSourceTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	RawDistributionFloat SourceStrength;//[Offset: 0x108, Size: 0x30]
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1]

--------------------------------
Class: ParticleModuleBeamTarget.ParticleModuleBeamBase.ParticleModule.Object
	byte TargetMethod;//[Offset: 0x2b, Size: 0x1]
	FName TargetName;//[Offset: 0x2c, Size: 0x8]
	RawDistributionVector Target;//[Offset: 0x38, Size: 0x60]
	bool bTargetAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	bool bLockTarget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x98, Size: 0x1]
	byte TargetTangentMethod;//[Offset: 0x99, Size: 0x1]
	RawDistributionVector TargetTangent;//[Offset: 0xa0, Size: 0x60]
	bool bLockTargetTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	RawDistributionFloat TargetStrength;//[Offset: 0x108, Size: 0x30]
	bool bLockTargetStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1]
	float LockRadius;//[Offset: 0x13c, Size: 0x4]

--------------------------------
Class: ParticleModuleCameraBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCameraOffset.ParticleModuleCameraBase.ParticleModule.Object
	RawDistributionFloat CameraOffset;//[Offset: 0x30, Size: 0x30]
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	byte UpdateMethod;//[Offset: 0x61, Size: 0x1]

--------------------------------
Class: ParticleModuleCollisionBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCollision.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionVector DampingFactor;//[Offset: 0x30, Size: 0x60]
	RawDistributionVector DampingFactorRotation;//[Offset: 0x90, Size: 0x60]
	RawDistributionFloat MaxCollisions;//[Offset: 0xf0, Size: 0x30]
	byte CollisionCompletionOption;//[Offset: 0x120, Size: 0x1]
	byte[] CollisionTypes;//[Offset: 0x128, Size: 0x10]
	bool bApplyPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 0x1]
	bool bIgnoreTriggerVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x140, Size: 0x1]
	RawDistributionFloat ParticleMass;//[Offset: 0x148, Size: 0x30]
	float DirScalar;//[Offset: 0x178, Size: 0x4]
	bool bPawnsDoNotDecrementCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17c, Size: 0x1]
	bool bOnlyVerticalNormalsDecrementCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17c, Size: 0x1]
	float VerticalFudgeFactor;//[Offset: 0x180, Size: 0x4]
	RawDistributionFloat DelayAmount;//[Offset: 0x188, Size: 0x30]
	bool bDropDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b8, Size: 0x1]
	bool bCollideOnlyIfVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b8, Size: 0x1]
	bool bIgnoreSourceActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1b8, Size: 0x1]
	float MaxCollisionDistance;//[Offset: 0x1bc, Size: 0x4]

--------------------------------
Class: ParticleModuleCollisionGPU.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionFloat Resilience;//[Offset: 0x30, Size: 0x30]
	RawDistributionFloat ResilienceScaleOverLife;//[Offset: 0x60, Size: 0x30]
	float Friction;//[Offset: 0x90, Size: 0x4]
	float RandomSpread;//[Offset: 0x94, Size: 0x4]
	float RandomDistribution;//[Offset: 0x98, Size: 0x4]
	float RadiusScale;//[Offset: 0x9c, Size: 0x4]
	float RadiusBias;//[Offset: 0xa0, Size: 0x4]
	byte Response;//[Offset: 0xa4, Size: 0x1]
	byte CollisionMode;//[Offset: 0xa5, Size: 0x1]

--------------------------------
Class: ParticleModuleColorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector StartColor;//[Offset: 0x30, Size: 0x60]
	RawDistributionFloat StartAlpha;//[Offset: 0x90, Size: 0x30]
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: ParticleModuleColorOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorOverLife;//[Offset: 0x30, Size: 0x60]
	RawDistributionFloat AlphaOverLife;//[Offset: 0x90, Size: 0x30]
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: ParticleModuleColorScaleOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x30, Size: 0x60]
	RawDistributionFloat AlphaScaleOverLife;//[Offset: 0x90, Size: 0x30]
	bool bEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: ParticleModuleColor_Seeded.ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xc8, Size: 0x20]

--------------------------------
Class: ParticleRandomSeedInfo
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	bool bGetSeedFromInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bInstanceSeedIsIndex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bResetSeedOnEmitterLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bRandomlySelectSeedArray;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	int[] RandomSeeds;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ParticleModuleEventReceiverKillParticles.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	bool bStopSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverSpawn.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	RawDistributionFloat SpawnCount;//[Offset: 0x38, Size: 0x30]
	bool bUseParticleTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bUsePSysLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bInheritVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	RawDistributionVector InheritVelocityScale;//[Offset: 0x70, Size: 0x60]
	PhysicalMaterial*[] PhysicalMaterials;//[Offset: 0xd0, Size: 0x10]
	bool bBanPhysicalMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1]

--------------------------------
Class: ParticleModuleKillBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleKillBox.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionVector LowerLeftCorner;//[Offset: 0x30, Size: 0x60]
	RawDistributionVector UpperRightCorner;//[Offset: 0x90, Size: 0x60]
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bKillInside;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bAxisAlignedAndFixedSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: ParticleModuleKillHeight.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionFloat Height;//[Offset: 0x30, Size: 0x30]
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	bool bApplyPSysScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: ParticleModuleLifetimeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	RawDistributionFloat LifeTime;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: ParticleModuleLifetime_Seeded.ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20]

--------------------------------
Class: ParticleModuleLightBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	bool bAffectsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]
	bool bPreviewLightRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float SpawnFraction;//[Offset: 0x30, Size: 0x4]
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x38, Size: 0x60]
	RawDistributionFloat BrightnessOverLife;//[Offset: 0x98, Size: 0x30]
	RawDistributionFloat RadiusScale;//[Offset: 0xc8, Size: 0x30]
	RawDistributionFloat LightExponent;//[Offset: 0xf8, Size: 0x30]
	LightingChannels LightingChannels;//[Offset: 0x128, Size: 0x1]
	float VolumetricScatteringIntensity;//[Offset: 0x12c, Size: 0x4]
	bool bHighQualityLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	bool bShadowCastingLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 0x1]

--------------------------------
Class: ParticleModuleLight_Seeded.ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x138, Size: 0x20]

--------------------------------
Class: ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartLocation;//[Offset: 0x30, Size: 0x60]
	float DistributeOverNPoints;//[Offset: 0x90, Size: 0x4]
	float DistributeThreshold;//[Offset: 0x94, Size: 0x4]

--------------------------------
Class: ParticleModuleLocationBoneSocket.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x2b, Size: 0x1]
	Vector UniversalOffset;//[Offset: 0x30, Size: 0x18]
	LocationBoneSocketInfo[] SourceLocations;//[Offset: 0x48, Size: 0x10]
	byte SelectionMethod;//[Offset: 0x58, Size: 0x1]
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 0x1]
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 0x1]
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 0x1]
	float InheritVelocityScale;//[Offset: 0x5c, Size: 0x4]
	FName SkelMeshActorParamName;//[Offset: 0x60, Size: 0x8]
	int NumPreSelectedIndices;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: LocationBoneSocketInfo
	FName BoneSocketName;//[Offset: 0x0, Size: 0x8]
	Vector Offset;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: ParticleModuleLocationDirect.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector Location;//[Offset: 0x30, Size: 0x60]
	RawDistributionVector LocationOffset;//[Offset: 0x90, Size: 0x60]
	RawDistributionVector ScaleFactor;//[Offset: 0xf0, Size: 0x60]
	RawDistributionVector Direction;//[Offset: 0x150, Size: 0x60]

--------------------------------
Class: ParticleModuleLocationEmitter.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8]
	byte SelectionMethod;//[Offset: 0x34, Size: 0x1]
	bool InheritSourceVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 0x1]
	float InheritSourceVelocityScale;//[Offset: 0x38, Size: 0x4]
	bool bInheritSourceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	float InheritSourceRotationScale;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: ParticleModuleLocationEmitterDirect.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool Positive_X;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1]
	bool Negative_X;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b, Size: 0x1]
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b, Size: 0x1]
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b, Size: 0x1]
	bool SurfaceOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b, Size: 0x1]
	bool Velocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2b, Size: 0x1]
	RawDistributionFloat VelocityScale;//[Offset: 0x30, Size: 0x30]
	RawDistributionVector StartLocation;//[Offset: 0x60, Size: 0x60]

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool RadialVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	RawDistributionFloat StartRadius;//[Offset: 0xc8, Size: 0x30]
	RawDistributionFloat StartHeight;//[Offset: 0xf8, Size: 0x30]
	byte HeightAxis;//[Offset: 0x128, Size: 0x1]

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder_Seeded.ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x130, Size: 0x20]

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionFloat StartRadius;//[Offset: 0xc0, Size: 0x30]

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere_Seeded.ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xf0, Size: 0x20]

--------------------------------
Class: ParticleModuleLocationPrimitiveTriangle.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartOffset;//[Offset: 0x30, Size: 0x60]
	RawDistributionFloat Height;//[Offset: 0x90, Size: 0x30]
	RawDistributionFloat Angle;//[Offset: 0xc0, Size: 0x30]
	RawDistributionFloat Thickness;//[Offset: 0xf0, Size: 0x30]

--------------------------------
Class: ParticleModuleLocationSkelVertSurface.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x2b, Size: 0x1]
	Vector UniversalOffset;//[Offset: 0x30, Size: 0x18]
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1]
	float InheritVelocityScale;//[Offset: 0x4c, Size: 0x4]
	FName SkelMeshActorParamName;//[Offset: 0x50, Size: 0x8]
	FName[] ValidAssociatedBones;//[Offset: 0x58, Size: 0x10]
	bool bEnforceNormalCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	Vector NormalToCompare;//[Offset: 0x70, Size: 0x18]
	float NormalCheckToleranceDegrees;//[Offset: 0x88, Size: 0x4]
	float NormalCheckTolerance;//[Offset: 0x8c, Size: 0x4]
	int[] ValidMaterialIndices;//[Offset: 0x90, Size: 0x10]
	bool bInheritVertexColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bInheritUV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
	uint32 InheritUVChannel;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocationWorldOffset_Seeded.ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x98, Size: 0x20]

--------------------------------
Class: ParticleModuleLocation_Seeded.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x98, Size: 0x20]

--------------------------------
Class: ParticleModuleMaterialBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshMaterial.ParticleModuleMaterialBase.ParticleModule.Object
	MaterialInterface*[] MeshMaterials;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleRotationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionVector StartRotation;//[Offset: 0x30, Size: 0x60]
	bool bInheritParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: ParticleModuleRotationRateBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector StartRotationRate;//[Offset: 0x30, Size: 0x60]

--------------------------------
Class: ParticleModuleMeshRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x60]

--------------------------------
Class: ParticleModuleMeshRotationRateOverLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector RotRate;//[Offset: 0x30, Size: 0x60]
	bool bScaleRotRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: ParticleModuleMeshRotationRate_Seeded.ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x90, Size: 0x20]

--------------------------------
Class: ParticleModuleMeshRotation_Seeded.ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x98, Size: 0x20]

--------------------------------
Class: ParticleModuleOrientationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleOrientationAxisLock.ParticleModuleOrientationBase.ParticleModule.Object
	byte LockAxisFlags;//[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ParticleModuleParameterBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	EmitterDynamicParameter[] DynamicParams;//[Offset: 0x30, Size: 0x10]
	int UpdateFlags;//[Offset: 0x40, Size: 0x4]
	bool bUsesVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: EmitterDynamicParameter
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	byte ValueMethod;//[Offset: 0x9, Size: 0x1]
	bool bScaleVelocityByParamValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	RawDistributionFloat ParamValue;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: ParticleModuleParameterDynamic_Seeded.ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x48, Size: 0x20]

--------------------------------
Class: ParticleModulePivotOffset.ParticleModuleLocationBase.ParticleModule.Object
	Vector2D PivotOffset;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat StartRotation;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: ParticleModuleRotationOverLifetime.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat RotationOverLife;//[Offset: 0x30, Size: 0x30]
	bool Scale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat StartRotationRate;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: ParticleModuleRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat LifeMultiplier;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: ParticleModuleRotationRate_Seeded.ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20]

--------------------------------
Class: ParticleModuleRotation_Seeded.ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60, Size: 0x20]

--------------------------------
Class: ParticleModuleSizeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector StartSize;//[Offset: 0x30, Size: 0x60]

--------------------------------
Class: ParticleModuleSizeMultiplyLife.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x30, Size: 0x60]
	bool MultiplyX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool MultiplyY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
	bool MultiplyZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: ParticleModuleSizeScale.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector SizeScale;//[Offset: 0x30, Size: 0x60]
	bool EnableX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool EnableY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
	bool EnableZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: ParticleModuleSizeScaleBySpeed.ParticleModuleSizeBase.ParticleModule.Object
	Vector2D SpeedScale;//[Offset: 0x30, Size: 0x10]
	Vector2D MaxScale;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: ParticleModuleSize_Seeded.ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x90, Size: 0x20]

--------------------------------
Class: ParticleModuleSourceMovement.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector SourceMovementScale;//[Offset: 0x30, Size: 0x60]

--------------------------------
Class: ParticleModuleSpawnPerUnit.ParticleModuleSpawnBase.ParticleModule.Object
	float UnitScalar;//[Offset: 0x2c, Size: 0x4]
	float MovementTolerance;//[Offset: 0x30, Size: 0x4]
	RawDistributionFloat SpawnPerUnit;//[Offset: 0x38, Size: 0x30]
	float MaxFrameDistance;//[Offset: 0x68, Size: 0x4]
	bool bIgnoreSpawnRateWhenMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	bool bIgnoreMovementAlongX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c, Size: 0x1]
	bool bIgnoreMovementAlongY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c, Size: 0x1]
	bool bIgnoreMovementAlongZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c, Size: 0x1]

--------------------------------
Class: ParticleModuleSubUVBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	SubUVAnimation* Animation;//[Offset: 0x30, Size: 0x8]
	RawDistributionFloat SubImageIndex;//[Offset: 0x38, Size: 0x30]
	bool bUseRealTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: SubUVAnimation.Object
	Texture2D* SubUVTexture;//[Offset: 0x28, Size: 0x8]
	int SubImages_Horizontal;//[Offset: 0x30, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0x34, Size: 0x4]
	byte BoundingMode;//[Offset: 0x38, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0x39, Size: 0x1]
	float AlphaThreshold;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: ParticleModuleSubUVMovie.ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1]
	RawDistributionFloat FrameRate;//[Offset: 0x70, Size: 0x30]
	int StartingFrame;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: ParticleModuleTrailBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleTrailSource.ParticleModuleTrailBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x2b, Size: 0x1]
	FName SourceName;//[Offset: 0x2c, Size: 0x8]
	RawDistributionFloat SourceStrength;//[Offset: 0x38, Size: 0x30]
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	int SourceOffsetCount;//[Offset: 0x6c, Size: 0x4]
	Vector[] SourceOffsetDefaults;//[Offset: 0x70, Size: 0x10]
	byte SelectionMethod;//[Offset: 0x80, Size: 0x1]
	bool bInheritRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 0x1]

--------------------------------
Class: ParticleModuleTypeDataAnimTrail.ParticleModuleTypeDataBase.ParticleModule.Object
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b, Size: 0x1]
	float TilingDistance;//[Offset: 0x2c, Size: 0x4]
	float DistanceTessellationStepSize;//[Offset: 0x30, Size: 0x4]
	float TangentTessellationStepSize;//[Offset: 0x34, Size: 0x4]
	float WidthTessellationStepSize;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBeam2.ParticleModuleTypeDataBase.ParticleModule.Object
	byte BeamMethod;//[Offset: 0x2b, Size: 0x1]
	int TextureTile;//[Offset: 0x2c, Size: 0x4]
	float TextureTileDistance;//[Offset: 0x30, Size: 0x4]
	int Sheets;//[Offset: 0x34, Size: 0x4]
	int MaxBeamCount;//[Offset: 0x38, Size: 0x4]
	float Speed;//[Offset: 0x3c, Size: 0x4]
	int InterpolationPoints;//[Offset: 0x40, Size: 0x4]
	bool bAlwaysOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	int UpVectorStepSize;//[Offset: 0x48, Size: 0x4]
	FName BranchParentName;//[Offset: 0x4c, Size: 0x8]
	RawDistributionFloat Distance;//[Offset: 0x58, Size: 0x30]
	byte TaperMethod;//[Offset: 0x88, Size: 0x1]
	RawDistributionFloat TaperFactor;//[Offset: 0x90, Size: 0x30]
	RawDistributionFloat TaperScale;//[Offset: 0xc0, Size: 0x30]
	bool RenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool RenderDirectLine;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool RenderLines;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 0x1]
	bool RenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: ParticleModuleTypeDataGpu.ParticleModuleTypeDataBase.ParticleModule.Object
	GPUSpriteEmitterInfo EmitterInfo;//[Offset: 0x30, Size: 0x340]
	GPUSpriteResourceData ResourceData;//[Offset: 0x370, Size: 0x240]
	float CameraMotionBlurAmount;//[Offset: 0x5b0, Size: 0x4]
	bool bClearExistingParticlesOnInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b4, Size: 0x1]

--------------------------------
Class: GPUSpriteEmitterInfo
	ParticleModuleRequired* RequiredModule;//[Offset: 0x0, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x8, Size: 0x8]
	ParticleModuleSpawnPerUnit* SpawnPerUnitModule;//[Offset: 0x10, Size: 0x8]
	ParticleModule*[] SpawnModules;//[Offset: 0x18, Size: 0x10]
	GPUSpriteLocalVectorFieldInfo LocalVectorField;//[Offset: 0x30, Size: 0xd0]
	FloatDistribution VectorFieldScale;//[Offset: 0x100, Size: 0x20]
	FloatDistribution DragCoefficient;//[Offset: 0x120, Size: 0x20]
	FloatDistribution PointAttractorStrength;//[Offset: 0x140, Size: 0x20]
	FloatDistribution Resilience;//[Offset: 0x160, Size: 0x20]
	Vector ConstantAcceleration;//[Offset: 0x180, Size: 0x18]
	Vector PointAttractorPosition;//[Offset: 0x198, Size: 0x18]
	float PointAttractorRadiusSq;//[Offset: 0x1b0, Size: 0x4]
	Vector OrbitOffsetBase;//[Offset: 0x1b8, Size: 0x18]
	Vector OrbitOffsetRange;//[Offset: 0x1d0, Size: 0x18]
	Vector2D InvMaxSize;//[Offset: 0x1e8, Size: 0x10]
	float InvRotationRateScale;//[Offset: 0x1f8, Size: 0x4]
	float MaxLifetime;//[Offset: 0x1fc, Size: 0x4]
	int MaxParticleCount;//[Offset: 0x200, Size: 0x4]
	byte ScreenAlignment;//[Offset: 0x204, Size: 0x1]
	byte LockAxisFlag;//[Offset: 0x205, Size: 0x1]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x206, Size: 0x1]
	byte CollisionMode;//[Offset: 0x207, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0x20c, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x210, Size: 0x4]
	RawDistributionVector DynamicColor;//[Offset: 0x218, Size: 0x60]
	RawDistributionFloat DynamicAlpha;//[Offset: 0x278, Size: 0x30]
	RawDistributionVector DynamicColorScale;//[Offset: 0x2a8, Size: 0x60]
	RawDistributionFloat DynamicAlphaScale;//[Offset: 0x308, Size: 0x30]

--------------------------------
Class: GPUSpriteLocalVectorFieldInfo
	VectorField* Field;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x60]
	Rotator MinInitialRotation;//[Offset: 0x70, Size: 0x18]
	Rotator MaxInitialRotation;//[Offset: 0x88, Size: 0x18]
	Rotator RotationRate;//[Offset: 0xa0, Size: 0x18]
	float Intensity;//[Offset: 0xb8, Size: 0x4]
	float Tightness;//[Offset: 0xbc, Size: 0x4]
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: VectorField.Object
	Box Bounds;//[Offset: 0x28, Size: 0x38]
	float Intensity;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: FloatDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: GPUSpriteResourceData
	Color[] QuantizedColorSamples;//[Offset: 0x0, Size: 0x10]
	Color[] QuantizedMiscSamples;//[Offset: 0x10, Size: 0x10]
	Color[] QuantizedSimulationAttrSamples;//[Offset: 0x20, Size: 0x10]
	Vector4 ColorScale;//[Offset: 0x30, Size: 0x20]
	Vector4 ColorBias;//[Offset: 0x50, Size: 0x20]
	Vector4 MiscScale;//[Offset: 0x70, Size: 0x20]
	Vector4 MiscBias;//[Offset: 0x90, Size: 0x20]
	Vector4 SimulationAttrCurveScale;//[Offset: 0xb0, Size: 0x20]
	Vector4 SimulationAttrCurveBias;//[Offset: 0xd0, Size: 0x20]
	Vector4 SubImageSize;//[Offset: 0xf0, Size: 0x20]
	Vector4 SizeBySpeed;//[Offset: 0x110, Size: 0x20]
	Vector ConstantAcceleration;//[Offset: 0x130, Size: 0x18]
	Vector OrbitOffsetBase;//[Offset: 0x148, Size: 0x18]
	Vector OrbitOffsetRange;//[Offset: 0x160, Size: 0x18]
	Vector OrbitFrequencyBase;//[Offset: 0x178, Size: 0x18]
	Vector OrbitFrequencyRange;//[Offset: 0x190, Size: 0x18]
	Vector OrbitPhaseBase;//[Offset: 0x1a8, Size: 0x18]
	Vector OrbitPhaseRange;//[Offset: 0x1c0, Size: 0x18]
	float GlobalVectorFieldScale;//[Offset: 0x1d8, Size: 0x4]
	float GlobalVectorFieldTightness;//[Offset: 0x1dc, Size: 0x4]
	float PerParticleVectorFieldScale;//[Offset: 0x1e0, Size: 0x4]
	float PerParticleVectorFieldBias;//[Offset: 0x1e4, Size: 0x4]
	float DragCoefficientScale;//[Offset: 0x1e8, Size: 0x4]
	float DragCoefficientBias;//[Offset: 0x1ec, Size: 0x4]
	float ResilienceScale;//[Offset: 0x1f0, Size: 0x4]
	float ResilienceBias;//[Offset: 0x1f4, Size: 0x4]
	float CollisionRadiusScale;//[Offset: 0x1f8, Size: 0x4]
	float CollisionRadiusBias;//[Offset: 0x1fc, Size: 0x4]
	float CollisionTimeBias;//[Offset: 0x200, Size: 0x4]
	float CollisionRandomSpread;//[Offset: 0x204, Size: 0x4]
	float CollisionRandomDistribution;//[Offset: 0x208, Size: 0x4]
	float OneMinusFriction;//[Offset: 0x20c, Size: 0x4]
	float RotationRateScale;//[Offset: 0x210, Size: 0x4]
	float CameraMotionBlurAmount;//[Offset: 0x214, Size: 0x4]
	byte ScreenAlignment;//[Offset: 0x218, Size: 0x1]
	byte LockAxisFlag;//[Offset: 0x219, Size: 0x1]
	Vector2D PivotOffset;//[Offset: 0x220, Size: 0x10]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0x234, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x238, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataMesh.ParticleModuleTypeDataBase.ParticleModule.Object
	StaticMesh* Mesh;//[Offset: 0x30, Size: 0x8]
	float LODSizeScale;//[Offset: 0x40, Size: 0x4]
	bool bUseStaticMeshLODs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	bool DoCollisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1]
	byte MeshAlignment;//[Offset: 0x45, Size: 0x1]
	bool bOverrideMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x46, Size: 0x1]
	bool bOverrideDefaultMotionBlurSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x46, Size: 0x1]
	bool bEnableMotionBlur;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x46, Size: 0x1]
	RawDistributionVector RollPitchYawRange;//[Offset: 0x48, Size: 0x60]
	byte AxisLockOption;//[Offset: 0xa8, Size: 0x1]
	bool bCameraFacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa9, Size: 0x1]
	byte CameraFacingUpAxisOption;//[Offset: 0xaa, Size: 0x1]
	byte CameraFacingOption;//[Offset: 0xab, Size: 0x1]
	bool bApplyParticleRotationAsSpin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bFaceCameraDirectionRatherThanPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	bool bCollisionsConsiderPartilceSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1]

--------------------------------
Class: ParticleModuleTypeDataRibbon.ParticleModuleTypeDataBase.ParticleModule.Object
	int MaxTessellationBetweenParticles;//[Offset: 0x2c, Size: 0x4]
	int SheetsPerTrail;//[Offset: 0x30, Size: 0x4]
	int MaxTrailCount;//[Offset: 0x34, Size: 0x4]
	int MaxParticleInTrailCount;//[Offset: 0x38, Size: 0x4]
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bDeadTrailsOnSourceLoss;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bClipSourceSegement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool bSpawnInitialParticle;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	byte RenderAxis;//[Offset: 0x3d, Size: 0x1]
	float TangentSpawningScalar;//[Offset: 0x40, Size: 0x4]
	bool bRenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	bool bRenderSpawnPoints;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 0x1]
	bool bRenderTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 0x1]
	bool bRenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 0x1]
	float TilingDistance;//[Offset: 0x48, Size: 0x4]
	float DistanceTessellationStepSize;//[Offset: 0x4c, Size: 0x4]
	bool bEnableTangentDiffInterpScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	float TangentTessellationScalar;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: ParticleModuleVectorFieldBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleVectorFieldGlobal.ParticleModuleVectorFieldBase.ParticleModule.Object
	bool bOverrideGlobalVectorFieldTightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	float GlobalVectorFieldScale;//[Offset: 0x2c, Size: 0x4]
	float GlobalVectorFieldTightness;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: ParticleModuleVectorFieldLocal.ParticleModuleVectorFieldBase.ParticleModule.Object
	VectorField* VectorField;//[Offset: 0x30, Size: 0x8]
	Vector RelativeTranslation;//[Offset: 0x38, Size: 0x18]
	Rotator RelativeRotation;//[Offset: 0x50, Size: 0x18]
	Vector RelativeScale3D;//[Offset: 0x68, Size: 0x18]
	float Intensity;//[Offset: 0x80, Size: 0x4]
	float Tightness;//[Offset: 0x84, Size: 0x4]
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1]
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x88, Size: 0x1]
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 0x1]
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: ParticleModuleVectorFieldRotation.ParticleModuleVectorFieldBase.ParticleModule.Object
	Vector MinInitialRotation;//[Offset: 0x30, Size: 0x18]
	Vector MaxInitialRotation;//[Offset: 0x48, Size: 0x18]

--------------------------------
Class: ParticleModuleVectorFieldRotationRate.ParticleModuleVectorFieldBase.ParticleModule.Object
	Vector RotationRate;//[Offset: 0x30, Size: 0x18]

--------------------------------
Class: ParticleModuleVectorFieldScale.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScale;//[Offset: 0x30, Size: 0x8]
	RawDistributionFloat VectorFieldScaleRaw;//[Offset: 0x38, Size: 0x30]

--------------------------------
Class: ParticleModuleVectorFieldScaleOverLife.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScaleOverLife;//[Offset: 0x30, Size: 0x8]
	RawDistributionFloat VectorFieldScaleOverLifeRaw;//[Offset: 0x38, Size: 0x30]

--------------------------------
Class: ParticleModuleVelocityBase.ParticleModule.Object
	bool bInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector StartVelocity;//[Offset: 0x30, Size: 0x60]
	RawDistributionFloat StartVelocityRadial;//[Offset: 0x90, Size: 0x30]

--------------------------------
Class: ParticleModuleVelocityCone.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionFloat Angle;//[Offset: 0x30, Size: 0x30]
	RawDistributionFloat Velocity;//[Offset: 0x60, Size: 0x30]
	Vector Direction;//[Offset: 0x90, Size: 0x18]

--------------------------------
Class: ParticleModuleVelocityInheritParent.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector Scale;//[Offset: 0x30, Size: 0x60]

--------------------------------
Class: ParticleModuleVelocityOverLifetime.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector VelOverLife;//[Offset: 0x30, Size: 0x60]
	bool Absolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: ParticleModuleVelocity_Seeded.ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xc0, Size: 0x20]

--------------------------------
Class: ParticleSpriteEmitter.ParticleEmitter.Object

--------------------------------
Class: PathFollowingAgentInterface.Interface.Object

--------------------------------
Class: PawnNoiseEmitterComponent.ActorComponent.Object
	bool bAIPerceptionSystemCompatibilityMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	Vector LastRemoteNoisePosition;//[Offset: 0xb8, Size: 0x18]
	float NoiseLifetime;//[Offset: 0xd0, Size: 0x4]
	float LastRemoteNoiseVolume;//[Offset: 0xd4, Size: 0x4]
	float LastRemoteNoiseTime;//[Offset: 0xd8, Size: 0x4]
	float LastLocalNoiseVolume;//[Offset: 0xdc, Size: 0x4]
	float LastLocalNoiseTime;//[Offset: 0xe0, Size: 0x4]
	void MakeNoise(Actor* NoiseMaker, float Loudness, out const Vector NoiseLocation);// 0x33de58eb6041

--------------------------------
Class: PhysicalAnimationComponent.ActorComponent.Object
	float StrengthMultiplyer;//[Offset: 0xb0, Size: 0x4]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0xb8, Size: 0x8]
	void SetStrengthMultiplyer(float InStrengthMultiplyer);// 0x33e458eb6041
	void SetSkeletalMeshComponent(SkeletalMeshComponent* InSkeletalMeshComponent);// 0x33e358eb6041
	Transform GetBodyTargetTransform(FName BodyName);// 0x33e258eb6041
	void ApplyPhysicalAnimationSettingsBelow(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData, bool bIncludeSelf);// 0x33e158eb6041
	void ApplyPhysicalAnimationSettings(FName BodyName, out const PhysicalAnimationData PhysicalAnimationData);// 0x33e058eb6041
	void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound);// 0x33df58eb6041

--------------------------------
Class: RigidBodyBase.Actor.Object

--------------------------------
Class: PhysicsConstraintActor.RigidBodyBase.Actor.Object
	PhysicsConstraintComponent* ConstraintComp;//[Offset: 0x278, Size: 0x8]
	Actor* ConstraintActor1;//[Offset: 0x280, Size: 0x8]
	Actor* ConstraintActor2;//[Offset: 0x288, Size: 0x8]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x2b0, Size: 0x8]
	ConstrainComponentPropName ComponentName1;//[Offset: 0x2b8, Size: 0x8]
	Actor* ConstraintActor2;//[Offset: 0x2c0, Size: 0x8]
	ConstrainComponentPropName ComponentName2;//[Offset: 0x2c8, Size: 0x8]
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x2e0, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x2e8, Size: 0x10]
	delegate OnPlasticDeformation;//[Offset: 0x2f8, Size: 0x10]
	ConstraintInstance ConstraintInstance;//[Offset: 0x308, Size: 0x270]
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x340b58eb6041
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x340a58eb6041
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x340958eb6041
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x340858eb6041
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x340758eb6041
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0x340658eb6041
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x340558eb6041
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0x340458eb6041
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x340358eb6041
	void SetLinearPlasticity(bool bLinearPlasticity, float LinearPlasticityThreshold, byte PlasticityType);// 0x340258eb6041
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x340158eb6041
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x340058eb6041
	void SetDisableCollision(bool bDisableCollision);// 0x33ff58eb6041
	void SetContactTransferScale(float ContactTransferScale);// 0x33fe58eb6041
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0x33fd58eb6041
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0x33fc58eb6041
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0x33fb58eb6041
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x33fa58eb6041
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0x33f958eb6041
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x33f858eb6041
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x33f758eb6041
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x33f658eb6041
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x33f558eb6041
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x33f458eb6041
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x33f358eb6041
	void SetAngularPlasticity(bool bAngularPlasticity, float AngularPlasticityThreshold);// 0x33f258eb6041
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0x33f158eb6041
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x33f058eb6041
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x33ef58eb6041
	void SetAngularDriveMode(byte DriveMode);// 0x33ee58eb6041
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x342f58eb6041
	bool IsBroken();// 0x33ec58eb6041
	float GetCurrentTwist();// 0x33eb58eb6041
	float GetCurrentSwing2();// 0x33ea58eb6041
	float GetCurrentSwing1();// 0x33e958eb6041
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0x33e858eb6041
	ConstraintInstanceAccessor GetConstraint();// 0x33e758eb6041
	void GetConstrainedComponents(out PrimitiveComponent* OutComponent1, out FName OutBoneName1, out PrimitiveComponent* OutComponent2, out FName OutBoneName2);// 0x33e658eb6041
	void BreakConstraint();// 0x33e558eb6041

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PhysicsHandleComponent.ActorComponent.Object
	PrimitiveComponent* GrabbedComponent;//[Offset: 0xb0, Size: 0x8]
	bool bSoftAngularConstraint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bSoftLinearConstraint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bInterpolateTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	float LinearDamping;//[Offset: 0xc4, Size: 0x4]
	float LinearStiffness;//[Offset: 0xc8, Size: 0x4]
	float AngularDamping;//[Offset: 0xcc, Size: 0x4]
	float AngularStiffness;//[Offset: 0xd0, Size: 0x4]
	float InterpolationSpeed;//[Offset: 0x1a0, Size: 0x4]
	void SetTargetRotation(Rotator NewRotation);// 0x341958eb6041
	void SetTargetLocationAndRotation(Vector NewLocation, Rotator NewRotation);// 0x341858eb6041
	void SetTargetLocation(Vector NewLocation);// 0x341758eb6041
	void SetLinearStiffness(float NewLinearStiffness);// 0x341658eb6041
	void SetLinearDamping(float NewLinearDamping);// 0x341558eb6041
	void SetInterpolationSpeed(float NewInterpolationSpeed);// 0x341458eb6041
	void SetAngularStiffness(float NewAngularStiffness);// 0x341358eb6041
	void SetAngularDamping(float NewAngularDamping);// 0x341258eb6041
	void ReleaseComponent();// 0x341158eb6041
	void GrabComponentAtLocationWithRotation(PrimitiveComponent* Component, FName InBoneName, Vector Location, Rotator Rotation);// 0x341058eb6041
	void GrabComponentAtLocation(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation);// 0x340f58eb6041
	void GrabComponent(PrimitiveComponent* Component, FName InBoneName, Vector GrabLocation, bool bConstrainRotation);// 0x345058eb6041
	void GetTargetLocationAndRotation(out Vector TargetLocation, out Rotator TargetRotation);// 0x340d58eb6041
	PrimitiveComponent* GetGrabbedComponent();// 0x340c58eb6041

--------------------------------
Class: PhysicsSpringComponent.SceneComponent.ActorComponent.Object
	float SpringStiffness;//[Offset: 0x2b0, Size: 0x4]
	float SpringDamping;//[Offset: 0x2b4, Size: 0x4]
	float SpringLengthAtRest;//[Offset: 0x2b8, Size: 0x4]
	float SpringRadius;//[Offset: 0x2bc, Size: 0x4]
	byte SpringChannel;//[Offset: 0x2c0, Size: 0x1]
	bool bIgnoreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1]
	float SpringCompression;//[Offset: 0x2c4, Size: 0x4]
	Vector GetSpringRestingPoint();// 0x341d58eb6041
	Vector GetSpringDirection();// 0x341c58eb6041
	Vector GetSpringCurrentEndPoint();// 0x341b58eb6041
	float GetNormalizedCompressionScalar();// 0x341a58eb6041

--------------------------------
Class: PhysicsThruster.RigidBodyBase.Actor.Object
	PhysicsThrusterComponent* ThrusterComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: PhysicsThrusterComponent.SceneComponent.ActorComponent.Object
	float ThrustStrength;//[Offset: 0x2b0, Size: 0x4]

--------------------------------
Class: SceneCapture.Actor.Object
	StaticMeshComponent* MeshComp;//[Offset: 0x278, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x280, Size: 0x8]

--------------------------------
Class: PlanarReflection.SceneCapture.Actor.Object
	PlanarReflectionComponent* PlanarReflectionComponent;//[Offset: 0x288, Size: 0x8]
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	void OnInterpToggle(bool bEnable);// 0x341e58eb6041

--------------------------------
Class: PlanarReflectionComponent.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x368, Size: 0x8]
	float NormalDistortionStrength;//[Offset: 0x370, Size: 0x4]
	float PrefilterRoughness;//[Offset: 0x374, Size: 0x4]
	float PrefilterRoughnessDistance;//[Offset: 0x378, Size: 0x4]
	int ScreenPercentage;//[Offset: 0x37c, Size: 0x4]
	float ExtraFOV;//[Offset: 0x380, Size: 0x4]
	float DistanceFromPlaneFadeStart;//[Offset: 0x384, Size: 0x4]
	float DistanceFromPlaneFadeEnd;//[Offset: 0x388, Size: 0x4]
	float DistanceFromPlaneFadeoutStart;//[Offset: 0x38c, Size: 0x4]
	float DistanceFromPlaneFadeoutEnd;//[Offset: 0x390, Size: 0x4]
	float AngleFromPlaneFadeStart;//[Offset: 0x394, Size: 0x4]
	float AngleFromPlaneFadeEnd;//[Offset: 0x398, Size: 0x4]
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 0x1]
	bool bRenderSceneTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 0x1]

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x2b0, Size: 0x1]
	byte CaptureSource;//[Offset: 0x2b1, Size: 0x1]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b2, Size: 0x1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b2, Size: 0x1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b3, Size: 0x1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x2b8, Size: 0x10]
	Actor*[] HiddenActors;//[Offset: 0x2c8, Size: 0x10]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x2d8, Size: 0x10]
	Actor*[] ShowOnlyActors;//[Offset: 0x2e8, Size: 0x10]
	float LODDistanceFactor;//[Offset: 0x2f8, Size: 0x4]
	float MaxViewDistanceOverride;//[Offset: 0x2fc, Size: 0x4]
	int CaptureSortPriority;//[Offset: 0x300, Size: 0x4]
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x308, Size: 0x10]
	FString ProfilingEventName;//[Offset: 0x348, Size: 0x10]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x342758eb6041
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x342658eb6041
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x342558eb6041
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x342458eb6041
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x342358eb6041
	void HideComponent(PrimitiveComponent* InComponent);// 0x342258eb6041
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x342158eb6041
	void ClearShowOnlyComponents();// 0x342058eb6041
	void ClearHiddenComponents();// 0x341f58eb6041

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: PlaneReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: PlaneReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadiusScale;//[Offset: 0x328, Size: 0x4]
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x330, Size: 0x8]
	BoxComponent* PreviewCaptureBox;//[Offset: 0x338, Size: 0x8]

--------------------------------
Class: PlatformEventsComponent.ActorComponent.Object
	delegate PlatformChangedToLaptopModeDelegate;//[Offset: 0xb0, Size: 0x10]
	delegate PlatformChangedToTabletModeDelegate;//[Offset: 0xc0, Size: 0x10]
	bool SupportsConvertibleLaptops();// 0xc8958eb6041
	void PlatformEventDelegate__DelegateSignature();// 0xc8858eb6041
	bool IsInTabletMode();// 0xc8758eb6041
	bool IsInLaptopMode();// 0xc8658eb6041

--------------------------------
Class: PlatformInterfaceWebResponse.Object
	FString OriginalURL;//[Offset: 0x28, Size: 0x10]
	int ResponseCode;//[Offset: 0x38, Size: 0x4]
	int Tag;//[Offset: 0x3c, Size: 0x4]
	FString StringResponse;//[Offset: 0x40, Size: 0x10]
	byte[] BinaryResponse;//[Offset: 0x50, Size: 0x10]
	int GetNumHeaders();// 0x342a58eb6041
	FString GetHeaderValue(FString HeaderName);// 0x342958eb6041
	void GetHeader(int HeaderIndex, out FString Header, out FString Value);// 0x342858eb6041

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x29c, Size: 0x8]

--------------------------------
Class: PlayerStartPIE.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: PluginCommandlet.Commandlet.Object

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x288, Size: 0x8]
	void SetRadius(float NewRadius);// 0x346158eb6041
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x346058eb6041

--------------------------------
Class: Polys.Object

--------------------------------
Class: PoseableMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetBoneTransformByName(FName BoneName, out const Transform InTransform, byte BoneSpace);// 0x349b58eb6041
	void SetBoneScaleByName(FName BoneName, Vector InScale3D, byte BoneSpace);// 0x349a58eb6041
	void SetBoneRotationByName(FName BoneName, Rotator InRotation, byte BoneSpace);// 0x349958eb6041
	void SetBoneLocationByName(FName BoneName, Vector InLocation, byte BoneSpace);// 0x349858eb6041
	void ResetBoneTransformByName(FName BoneName);// 0x349758eb6041
	Transform GetBoneTransformByName(FName BoneName, byte BoneSpace);// 0x349658eb6041
	Vector GetBoneScaleByName(FName BoneName, byte BoneSpace);// 0x349558eb6041
	Rotator GetBoneRotationByName(FName BoneName, byte BoneSpace);// 0x349458eb6041
	Vector GetBoneLocationByName(FName BoneName, byte BoneSpace);// 0x349358eb6041
	void CopyPoseFromSkeletalComponent(SkeletalMeshComponent* InComponentToCopy);// 0x34d458eb6041

--------------------------------
Class: PoseAsset.AnimationAsset.Object
	PoseDataContainer PoseContainer;//[Offset: 0x80, Size: 0x60]
	bool bAdditivePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	int BasePoseIndex;//[Offset: 0xe4, Size: 0x4]
	FName RetargetSource;//[Offset: 0xe8, Size: 0x8]
	Transform[] RetargetSourceAssetReferencePose;//[Offset: 0xf0, Size: 0x10]

--------------------------------
Class: PoseDataContainer
	SmartName[] PoseNames;//[Offset: 0x0, Size: 0x10]
	FName[] Tracks;//[Offset: 0x10, Size: 0x10]
	int[] TrackBoneIndices;//[Offset: 0x20, Size: 0x10]
	PoseAssetInfluences[] TrackPoseInfluenceIndices;//[Offset: 0x30, Size: 0x10]
	PoseData[] Poses;//[Offset: 0x40, Size: 0x10]
	AnimCurveBase[] Curves;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: PoseAssetInfluences
	PoseAssetInfluence[] Influences;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PoseAssetInfluence
	int PoseIndex;//[Offset: 0x0, Size: 0x4]
	int BoneTransformIndex;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: PoseData
	Transform[] LocalSpacePose;//[Offset: 0x0, Size: 0x10]
	float[] CurveData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: PoseWatchFolder.Object

--------------------------------
Class: PoseWatch.Object

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x2c0, Size: 0x6b0]
	float Priority;//[Offset: 0x970, Size: 0x4]
	float BlendRadius;//[Offset: 0x974, Size: 0x4]
	float BlendWeight;//[Offset: 0x978, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x97c, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x97c, Size: 0x1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x349c58eb6041

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x2c0, Size: 0x6b0]
	float Priority;//[Offset: 0x970, Size: 0x4]
	float BlendRadius;//[Offset: 0x974, Size: 0x4]
	float BlendWeight;//[Offset: 0x978, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x97c, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x97c, Size: 0x1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x349d58eb6041

--------------------------------
Class: PrecomputedVisibilityOverrideVolume.Volume.Brush.Actor.Object
	Actor*[] OverrideVisibleActors;//[Offset: 0x2b0, Size: 0x10]
	Actor*[] OverrideInvisibleActors;//[Offset: 0x2c0, Size: 0x10]
	FName[] OverrideInvisibleLevels;//[Offset: 0x2d0, Size: 0x10]

--------------------------------
Class: PrecomputedVisibilityVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PreviewCollectionInterface.Interface.Object

--------------------------------
Class: PreviewMeshCollection.DataAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	PreviewMeshCollectionEntry[] SkeletalMeshes;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: PreviewMeshCollectionEntry
	SkeletalMesh* SkeletalMesh;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: PrimaryAssetLabel.PrimaryDataAsset.DataAsset.Object
	PrimaryAssetRules Rules;//[Offset: 0x30, Size: 0xc]
	bool bLabelAssetsInMyDirectory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bIsRuntimeLabel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	Object*[] ExplicitAssets;//[Offset: 0x40, Size: 0x10]
	class Object[] ExplicitBlueprints;//[Offset: 0x50, Size: 0x10]
	CollectionReference AssetCollection;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: CollectionReference
	FName CollectionName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0x114, Size: 0x4]
	float MaxSpeed;//[Offset: 0x118, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11c, Size: 0x1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11c, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11c, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11c, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11c, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11c, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11c, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11c, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11d, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11d, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11d, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11d, Size: 0x1]
	float PreviousHitTime;//[Offset: 0x120, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0x128, Size: 0x18]
	float ProjectileGravityScale;//[Offset: 0x140, Size: 0x4]
	float Buoyancy;//[Offset: 0x144, Size: 0x4]
	float Bounciness;//[Offset: 0x148, Size: 0x4]
	float Friction;//[Offset: 0x14c, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x150, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x154, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x158, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x168, Size: 0x10]
	float HomingAccelerationMagnitude;//[Offset: 0x178, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x17c, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x184, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x188, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x18c, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x190, Size: 0x4]
	float InterpRotationTime;//[Offset: 0x194, Size: 0x4]
	float InterpLocationMaxLagDistance;//[Offset: 0x198, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x19c, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0xca558eb6041
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0xca458eb6041
	void SetInterpolatedComponent(SceneComponent* Component);// 0xca358eb6041
	void ResetInterpolation();// 0xca258eb6041
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0xca158eb6041
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0xca058eb6041
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0xc9f58eb6041
	Vector LimitVelocity(Vector NewVelocity);// 0xc9e58eb6041
	bool IsVelocityUnderSimulationThreshold();// 0xc9d58eb6041
	bool IsInterpolationComplete();// 0xc9c58eb6041

--------------------------------
Class: ProxyLODMeshSimplificationSettings.DeveloperSettings.Object
	FName ProxyLODMeshReductionModuleName;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: RadialForceActor.RigidBodyBase.Actor.Object
	RadialForceComponent* ForceComponent;//[Offset: 0x278, Size: 0x8]
	void ToggleForce();// 0x34a158eb6041
	void FireImpulse();// 0x34a058eb6041
	void EnableForce();// 0x349f58eb6041
	void DisableForce();// 0x349e58eb6041

--------------------------------
Class: RadialForceComponent.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x2b0, Size: 0x4]
	byte Falloff;//[Offset: 0x2b4, Size: 0x1]
	float ImpulseStrength;//[Offset: 0x2b8, Size: 0x4]
	bool bImpulseVelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bc, Size: 0x1]
	bool bIgnoreOwningActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2bc, Size: 0x1]
	float ForceStrength;//[Offset: 0x2c0, Size: 0x4]
	float DestructibleDamage;//[Offset: 0x2c4, Size: 0x4]
	byte[] ObjectTypesToAffect;//[Offset: 0x2c8, Size: 0x10]
	void RemoveObjectTypeToAffect(byte ObjectType);// 0x34a458eb6041
	void FireImpulse();// 0x34a358eb6041
	void AddObjectTypeToAffect(byte ObjectType);// 0x34a258eb6041

--------------------------------
Class: RectLight.Light.Actor.Object
	RectLightComponent* RectLightComponent;//[Offset: 0x288, Size: 0x8]

--------------------------------
Class: RectLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float SourceWidth;//[Offset: 0x3f0, Size: 0x4]
	float SourceHeight;//[Offset: 0x3f4, Size: 0x4]
	float BarnDoorAngle;//[Offset: 0x3f8, Size: 0x4]
	float BarnDoorLength;//[Offset: 0x3fc, Size: 0x4]
	Texture* SourceTexture;//[Offset: 0x400, Size: 0x8]
	void SetSourceWidth(float bNewValue);// 0x34a958eb6041
	void SetSourceTexture(Texture* bNewValue);// 0x34a858eb6041
	void SetSourceHeight(float NewValue);// 0x34a758eb6041
	void SetBarnDoorLength(float NewValue);// 0x34a658eb6041
	void SetBarnDoorAngle(float NewValue);// 0x34a558eb6041

--------------------------------
Class: RendererSettings.DeveloperSettings.Object
	bool bMobileDisableVertexFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	int MaxMobileCascades;//[Offset: 0x3c, Size: 0x4]
	byte MobileAntiAliasing;//[Offset: 0x40, Size: 0x1]
	byte MobileFloatPrecisionMode;//[Offset: 0x41, Size: 0x1]
	bool bMobileAllowDitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x42, Size: 0x1]
	bool bMobileVirtualTextures;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x42, Size: 0x1]
	bool bReflectionCaptureCompression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x42, Size: 0x1]
	bool bDiscardUnusedQualityLevels;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x42, Size: 0x1]
	byte ShaderCompressionFormat;//[Offset: 0x43, Size: 0x1]
	bool bOcclusionCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]
	float MinScreenRadiusForLights;//[Offset: 0x48, Size: 0x4]
	float MinScreenRadiusForEarlyZPass;//[Offset: 0x4c, Size: 0x4]
	float MinScreenRadiusForCSMdepth;//[Offset: 0x50, Size: 0x4]
	bool bPrecomputedVisibilityWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bTextureStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	bool bUseDXT5NormalMaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54, Size: 0x1]
	bool bVirtualTextures;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54, Size: 0x1]
	bool bVirtualTextureEnableAutoImport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54, Size: 0x1]
	bool bVirtualTexturedLightmaps;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x54, Size: 0x1]
	bool bVirtualTextureAnisotropicFiltering;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x54, Size: 0x1]
	uint32 VirtualTextureTileSize;//[Offset: 0x58, Size: 0x4]
	uint32 VirtualTextureTileBorderSize;//[Offset: 0x5c, Size: 0x4]
	uint32 VirtualTextureFeedbackFactor;//[Offset: 0x60, Size: 0x4]
	byte WorkingColorSpaceChoice;//[Offset: 0x64, Size: 0x1]
	Vector2D RedChromaticityCoordinate;//[Offset: 0x68, Size: 0x10]
	Vector2D GreenChromaticityCoordinate;//[Offset: 0x78, Size: 0x10]
	Vector2D BlueChromaticityCoordinate;//[Offset: 0x88, Size: 0x10]
	Vector2D WhiteChromaticityCoordinate;//[Offset: 0x98, Size: 0x10]
	bool bClearCoatEnableSecondNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	byte DynamicGlobalIllumination;//[Offset: 0xa9, Size: 0x1]
	byte Reflections;//[Offset: 0xaa, Size: 0x1]
	int ReflectionCaptureResolution;//[Offset: 0xac, Size: 0x4]
	bool ReflectionEnvironmentLightmapMixBasedOnRoughness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bUseHardwareRayTracingForLumen;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]
	enum LumenRayLightingMode;//[Offset: 0xb1, Size: 0x1]
	byte LumenSoftwareTracingMode;//[Offset: 0xb2, Size: 0x1]
	byte ShadowMapMethod;//[Offset: 0xb3, Size: 0x1]
	bool bEnableRayTracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bEnableRayTracingShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bEnableRayTracingSkylight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bEnableRayTracingTextureLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	bool bEnablePathTracing;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 0x1]
	bool bGenerateMeshDistanceFields;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 0x1]
	float DistanceFieldVoxelDensity;//[Offset: 0xb8, Size: 0x4]
	bool bAllowStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 0x1]
	bool bUseNormalMapsForStaticLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1]
	bool bForwardShading;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbc, Size: 0x1]
	bool bVertexFoggingForOpaque;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbc, Size: 0x1]
	bool bSeparateTranslucency;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xbc, Size: 0x1]
	byte TranslucentSortPolicy;//[Offset: 0xbd, Size: 0x1]
	Vector TranslucentSortAxis;//[Offset: 0xc0, Size: 0x18]
	byte HMDFixedFoveationLevel;//[Offset: 0xd8, Size: 0x1]
	bool bHMDFixedFoveationDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd9, Size: 0x1]
	byte CustomDepthStencil;//[Offset: 0xda, Size: 0x1]
	bool bCustomDepthTaaJitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdb, Size: 0x1]
	byte bEnableAlphaChannelInPostProcessing;//[Offset: 0xdc, Size: 0x1]
	bool bDefaultFeatureBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdd, Size: 0x1]
	bool bDefaultFeatureAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xdd, Size: 0x1]
	bool bDefaultFeatureAmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xdd, Size: 0x1]
	bool bDefaultFeatureAutoExposure;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xdd, Size: 0x1]
	byte DefaultFeatureAutoExposure;//[Offset: 0xde, Size: 0x1]
	float DefaultFeatureAutoExposureBias;//[Offset: 0xe0, Size: 0x4]
	bool bExtendDefaultLuminanceRangeInAutoExposureSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe4, Size: 0x1]
	bool bDefaultFeatureMotionBlur;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe4, Size: 0x1]
	bool bDefaultFeatureLensFlare;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe4, Size: 0x1]
	bool bTemporalUpsampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe4, Size: 0x1]
	byte DefaultFeatureAntiAliasing;//[Offset: 0xe5, Size: 0x1]
	byte MSAASampleCount;//[Offset: 0xe6, Size: 0x1]
	enum DefaultLightUnits;//[Offset: 0xe7, Size: 0x1]
	byte DefaultBackBufferPixelFormat;//[Offset: 0xe8, Size: 0x1]
	bool bRenderUnbuiltPreviewShadowsInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe9, Size: 0x1]
	bool bStencilForLODDither;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe9, Size: 0x1]
	byte EarlyZPass;//[Offset: 0xea, Size: 0x1]
	bool bEarlyZPassOnlyMaterialMasking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xeb, Size: 0x1]
	bool bEnableCSMCaching;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xeb, Size: 0x1]
	bool bDBuffer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xeb, Size: 0x1]
	byte ClearSceneMethod;//[Offset: 0xec, Size: 0x1]
	byte VelocityPass;//[Offset: 0xed, Size: 0x1]
	byte VertexDeformationOutputsVelocity;//[Offset: 0xee, Size: 0x1]
	bool bSelectiveBasePassOutputs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xef, Size: 0x1]
	bool bDefaultParticleCutouts;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xef, Size: 0x1]
	int GPUSimulationTextureSizeX;//[Offset: 0xf0, Size: 0x4]
	int GPUSimulationTextureSizeY;//[Offset: 0xf4, Size: 0x4]
	bool bGlobalClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1]
	byte GBufferFormat;//[Offset: 0xf9, Size: 0x1]
	bool bUseGPUMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfa, Size: 0x1]
	bool bNvidiaAftermathEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfa, Size: 0x1]
	bool bMultiView;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfa, Size: 0x1]
	bool bMobilePostProcessing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfa, Size: 0x1]
	bool bMobileMultiView;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xfa, Size: 0x1]
	bool bMobileUseHWsRGBEncoding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfa, Size: 0x1]
	bool bRoundRobinOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfa, Size: 0x1]
	bool bODSCapture;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xfa, Size: 0x1]
	bool bMeshStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfb, Size: 0x1]
	float WireframeCullThreshold;//[Offset: 0xfc, Size: 0x4]
	bool bSupportStationarySkylight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bSupportLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bSupportPointLightWholeSceneShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bSupportSkyAtmosphere;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bSupportSkyAtmosphereAffectsHeightFog;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]
	bool bSupportCloudShadowOnForwardLitTranslucent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x100, Size: 0x1]
	bool bMaterialRoughDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 0x1]
	bool bMaterialEnergyConservation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 0x1]
	bool bSupportSkinCacheShaders;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x108, Size: 0x1]
	enum DefaultSkinCacheBehavior;//[Offset: 0x109, Size: 0x1]
	float SkinCacheSceneMemoryLimitInMB;//[Offset: 0x10c, Size: 0x4]
	bool bMobileEnableStaticAndCSMShadowReceivers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 0x1]
	bool bMobileEnableMovableLightCSMShaderCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110, Size: 0x1]
	bool bMobileEnableNoPrecomputedLightingCSMShader;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110, Size: 0x1]
	bool bMobileAllowDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x110, Size: 0x1]
	bool bMobileAllowMovableDirectionalLights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x110, Size: 0x1]
	uint32 MobileNumDynamicPointLights;//[Offset: 0x114, Size: 0x4]
	bool bMobileAllowMovableSpotlights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118, Size: 0x1]
	bool bMobileAllowMovableSpotlightShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x118, Size: 0x1]
	bool bSupport16BitBoneIndex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x118, Size: 0x1]
	bool bGPUSkinLimit2BoneInfluences;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x118, Size: 0x1]
	bool bSupportDepthOnlyIndexBuffers;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x118, Size: 0x1]
	bool bSupportReversedIndexBuffers;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x118, Size: 0x1]
	bool bMobileAmbientOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x118, Size: 0x1]
	bool bUseUnlimitedBoneInfluences;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x118, Size: 0x1]
	int UnlimitedBonInfluencesThreshold;//[Offset: 0x11c, Size: 0x4]
	PerPlatformInt MaxSkinBones;//[Offset: 0x120, Size: 0x4]
	byte MobilePlanarReflectionMode;//[Offset: 0x124, Size: 0x1]
	bool bMobileSupportsGen4TAA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x125, Size: 0x1]
	PerPlatformBool bStreamSkeletalMeshLODs;//[Offset: 0x126, Size: 0x1]
	PerPlatformBool bDiscardSkeletalMeshOptionalLODs;//[Offset: 0x127, Size: 0x1]
	SoftObjectPath VisualizeCalibrationColorMaterialPath;//[Offset: 0x128, Size: 0x18]
	SoftObjectPath VisualizeCalibrationCustomMaterialPath;//[Offset: 0x140, Size: 0x18]
	SoftObjectPath VisualizeCalibrationGrayscaleMaterialPath;//[Offset: 0x158, Size: 0x18]

--------------------------------
Class: RendererOverrideSettings.DeveloperSettings.Object
	bool bSupportAllShaderPermutations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: ReplayNetConnection.NetConnection.Player.Object

--------------------------------
Class: ReplaySubsystem.GameInstanceSubsystem.Subsystem.Object
	bool bLoadDefaultMapOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	void RequestCheckpoint();// 0x34ae58eb6041
	bool IsRecording();// 0x34ad58eb6041
	bool IsPlaying();// 0x34ac58eb6041
	float GetReplayCurrentTime();// 0x34ab58eb6041
	FString GetActiveReplayName();// 0x34aa58eb6041

--------------------------------
Class: ReplicationConnectionDriver.Object

--------------------------------
Class: Rig.Object
	TransformBase[] TransformBases;//[Offset: 0x30, Size: 0x10]
	Node[] Nodes;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: TransformBase
	FName Node;//[Offset: 0x0, Size: 0x8]
	TransformBaseConstraint Constraints;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TransformBaseConstraint
	RigTransformConstraint[] TransformConstraints;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RigTransformConstraint
	byte TranformType;//[Offset: 0x0, Size: 0x1]
	FName ParentSpace;//[Offset: 0x4, Size: 0x8]
	float Weight;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: Node
	FName Name;//[Offset: 0x0, Size: 0x8]
	FName ParentName;//[Offset: 0x8, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x60]
	FString DisplayName;//[Offset: 0x70, Size: 0x10]
	bool bAdvanced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: RotatingMovementComponent.MovementComponent.ActorComponent.Object
	Rotator RotationRate;//[Offset: 0x118, Size: 0x18]
	Vector PivotTranslation;//[Offset: 0x130, Size: 0x18]
	bool bRotationInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]

--------------------------------
Class: RPCDoSDetectionConfig.Object
	bool bRPCDoSDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRPCDoSAnalytics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	int HitchTimeQuotaMS;//[Offset: 0x2c, Size: 0x4]
	int HitchSuspendDetectionTimeMS;//[Offset: 0x30, Size: 0x4]
	FString[] DetectionSeverity;//[Offset: 0x38, Size: 0x10]
	int InitialConnectToleranceMS;//[Offset: 0x48, Size: 0x4]
	FName[] RPCBlockWhitelist;//[Offset: 0x50, Size: 0x10]
	RPCAnalyticsThreshold[] RPCAnalyticsThresholds;//[Offset: 0x60, Size: 0x10]
	double RPCAnalyticsOverrideChance;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: RPCAnalyticsThreshold
	FName RPC;//[Offset: 0x0, Size: 0x8]
	int CountPerSec;//[Offset: 0x8, Size: 0x4]
	double TimePerSec;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: RuntimeOptionsBase.Object

--------------------------------
Class: RuntimeVirtualTextureComponent.SceneComponent.ActorComponent.Object
	Actor* BoundsAlignActor;//[Offset: 0x2b0, Size: 0x28]
	bool bSetBoundsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bSnapBoundsToLandscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	RuntimeVirtualTexture* VirtualTexture;//[Offset: 0x2e0, Size: 0x8]
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	uint32 ScalabilityGroup;//[Offset: 0x2ec, Size: 0x4]
	bool bHidePrimitives;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	VirtualTextureBuilder* StreamingTexture;//[Offset: 0x2f8, Size: 0x8]
	int StreamLowMips;//[Offset: 0x300, Size: 0x4]
	bool bBuildStreamingMipsButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 0x1]
	bool bUseStreamingLowMipsInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 0x1]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x306, Size: 0x1]
	bool bBuildDebugStreamingMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x307, Size: 0x1]
	void Invalidate(out const BoxSphereBounds WorldBounds);// 0x34b458eb6041

--------------------------------
Class: VirtualTextureBuilder.Object
	VirtualTexture2D* Texture;//[Offset: 0x28, Size: 0x8]
	uint64 BuildHash;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: VirtualTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0x2a8, Size: 0xc]
	bool bContinuousUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 0x1]

--------------------------------
Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 0x4]
	int TileBorderSize;//[Offset: 0x4, Size: 0x4]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: RuntimeVirtualTextureVolume.Actor.Object
	RuntimeVirtualTextureComponent* VirtualTextureComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: RVOAvoidanceInterface.Interface.Object

--------------------------------
Class: Scene.Object

--------------------------------
Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x288, Size: 0x8]
	void OnInterpToggle(bool bEnable);// 0x34b558eb6041

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x368, Size: 0x1]
	float FOVAngle;//[Offset: 0x36c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x370, Size: 0x4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x378, Size: 0x8]
	byte CompositeMode;//[Offset: 0x380, Size: 0x1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x390, Size: 0x6b0]
	float PostProcessBlendWeight;//[Offset: 0xa40, Size: 0x4]
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa44, Size: 0x1]
	float CustomNearClippingPlane;//[Offset: 0xa48, Size: 0x4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4c, Size: 0x1]
	Matrix CustomProjectionMatrix;//[Offset: 0xa50, Size: 0x80]
	bool bUseFauxOrthoViewPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad0, Size: 0x1]
	bool bEnableOrthographicTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad1, Size: 0x1]
	int NumXTiles;//[Offset: 0xad4, Size: 0x4]
	int NumYTiles;//[Offset: 0xad8, Size: 0x4]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadc, Size: 0x1]
	Vector ClipPlaneBase;//[Offset: 0xae0, Size: 0x18]
	Vector ClipPlaneNormal;//[Offset: 0xaf8, Size: 0x18]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb10, Size: 0x1]
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb10, Size: 0x1]
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb11, Size: 0x1]
	void RemoveBlendable(interface classNone InBlendableObject);// 0x34b858eb6041
	void CaptureScene();// 0x34b758eb6041
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x34b658eb6041

--------------------------------
Class: SceneCaptureComponentCube.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	TextureRenderTargetCube* TextureTarget;//[Offset: 0x368, Size: 0x8]
	bool bCaptureRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	TextureRenderTargetCube* TextureTargetLeft;//[Offset: 0x378, Size: 0x8]
	TextureRenderTargetCube* TextureTargetRight;//[Offset: 0x380, Size: 0x8]
	TextureRenderTarget2D* TextureTargetODS;//[Offset: 0x388, Size: 0x8]
	float IPD;//[Offset: 0x390, Size: 0x4]
	void CaptureScene();// 0x34b958eb6041

--------------------------------
Class: TextureRenderTargetCube.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0x1f8, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0x1fc, Size: 0x10]
	byte OverrideFormat;//[Offset: 0x20c, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20d, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20d, Size: 0x1]

--------------------------------
Class: SceneCaptureCube.SceneCapture.Actor.Object
	SceneCaptureComponentCube* CaptureComponentCube;//[Offset: 0x288, Size: 0x8]
	void OnInterpToggle(bool bEnable);// 0x34ba58eb6041

--------------------------------
Class: ShadowMapTexture2D.Texture2D.Texture.StreamableRenderAsset.Object
	byte ShadowmapFlags;//[Offset: 0x2a8, Size: 0x1]

--------------------------------
Class: SkeletalMeshActor.Actor.Object
	bool bShouldDoAnimNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1]
	bool bWakeOnLevelStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x278, Size: 0x1]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x280, Size: 0x8]
	SkeletalMesh* ReplicatedMesh;//[Offset: 0x288, Size: 0x8]
	PhysicsAsset* ReplicatedPhysAsset;//[Offset: 0x290, Size: 0x8]
	MaterialInterface* ReplicatedMaterial0;//[Offset: 0x298, Size: 0x8]
	MaterialInterface* ReplicatedMaterial1;//[Offset: 0x2a0, Size: 0x8]
	void OnRep_ReplicatedPhysAsset();// 0x34d758eb6041
	void OnRep_ReplicatedMesh();// 0x34d658eb6041
	void OnRep_ReplicatedMaterial1();// 0x34d558eb6041
	void OnRep_ReplicatedMaterial0();// 0x351158eb6041

--------------------------------
Class: SkeletalMeshEditorData.Object

--------------------------------
Class: SkeletalMeshSimplificationSettings.DeveloperSettings.Object
	FName SkeletalMeshReductionModuleName;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: SkyAtmosphere.Info.Actor.Object
	SkyAtmosphereComponent* SkyAtmosphereComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x278, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	void OnRep_bEnabled();// 0x26e658eb6041

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bRealTimeCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	byte SourceType;//[Offset: 0x2e1, Size: 0x1]
	TextureCube* Cubemap;//[Offset: 0x2e8, Size: 0x8]
	float SourceCubemapAngle;//[Offset: 0x2f0, Size: 0x4]
	int CubemapResolution;//[Offset: 0x2f4, Size: 0x4]
	float SkyDistanceThreshold;//[Offset: 0x2f8, Size: 0x4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 0x1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 0x1]
	LinearColor LowerHemisphereColor;//[Offset: 0x300, Size: 0x10]
	float OcclusionMaxDistance;//[Offset: 0x310, Size: 0x4]
	float Contrast;//[Offset: 0x314, Size: 0x4]
	float OcclusionExponent;//[Offset: 0x318, Size: 0x4]
	float MinOcclusion;//[Offset: 0x31c, Size: 0x4]
	Color OcclusionTint;//[Offset: 0x320, Size: 0x4]
	bool bCloudAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 0x1]
	float CloudAmbientOcclusionStrength;//[Offset: 0x328, Size: 0x4]
	float CloudAmbientOcclusionExtent;//[Offset: 0x32c, Size: 0x4]
	float CloudAmbientOcclusionMapResolutionScale;//[Offset: 0x330, Size: 0x4]
	float CloudAmbientOcclusionApertureScale;//[Offset: 0x334, Size: 0x4]
	byte OcclusionCombineMode;//[Offset: 0x338, Size: 0x1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x3e8, Size: 0x8]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x354d58eb6041
	void SetOcclusionTint(out const Color InTint);// 0x354c58eb6041
	void SetOcclusionExponent(float InOcclusionExponent);// 0x354b58eb6041
	void SetOcclusionContrast(float InOcclusionContrast);// 0x354a58eb6041
	void SetMinOcclusion(float InMinOcclusion);// 0x354958eb6041
	void SetLowerHemisphereColor(out const LinearColor InLowerHemisphereColor);// 0x354858eb6041
	void SetLightColor(LinearColor NewLightColor);// 0x354758eb6041
	void SetIntensity(float NewIntensity);// 0x354658eb6041
	void SetIndirectLightingIntensity(float NewIntensity);// 0x354558eb6041
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x354458eb6041
	void SetCubemap(TextureCube* NewCubemap);// 0x354358eb6041
	void RecaptureSky();// 0x354258eb6041

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x30, Size: 0xc0]

--------------------------------
Class: SlateTextureAtlasInterface.Interface.Object

--------------------------------
Class: SMInstanceElementAssetDataInterface.Object

--------------------------------
Class: SMInstanceElementHierarchyInterface.Object

--------------------------------
Class: SMInstanceElementIdMapTransactor.Object

--------------------------------
Class: SMInstanceElementSelectionInterface.Object

--------------------------------
Class: SMInstanceElementWorldInterface.Object

--------------------------------
Class: SMInstanceManager.Interface.Object

--------------------------------
Class: SMInstanceManagerProvider.Interface.Object

--------------------------------
Class: SmokeTestCommandlet.Commandlet.Object

--------------------------------
Class: SoundCue.SoundBase.Object
	bool bPrimeOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1]
	SoundNode* FirstNode;//[Offset: 0x178, Size: 0x8]
	float VolumeMultiplier;//[Offset: 0x180, Size: 0x4]
	float PitchMultiplier;//[Offset: 0x184, Size: 0x4]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x188, Size: 0x3c8]
	float SubtitlePriority;//[Offset: 0x550, Size: 0x4]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x558, Size: 0x1]
	bool bExcludeFromRandomNodeBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x558, Size: 0x1]
	int CookedQualityIndex;//[Offset: 0x55c, Size: 0x4]
	bool bHasPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x560, Size: 0x1]

--------------------------------
Class: SoundNode.Object
	SoundNode*[] ChildNodes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SoundEffectPresetWidgetInterface.AudioPanelWidgetInterface.Interface.Object
	void OnPropertyChanged(SoundEffectPreset* Preset, FName PropertyName);// 0x355058eb6041
	void OnConstructed(SoundEffectPreset* Preset);// 0x354f58eb6041
	class SoundEffectPreset GetClass();// 0x354e58eb6041

--------------------------------
Class: SoundGroups.Object
	SoundGroup[] SoundGroupProfiles;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SoundGroup
	byte SoundGroup;//[Offset: 0x0, Size: 0x1]
	FString DisplayName;//[Offset: 0x8, Size: 0x10]
	bool bAlwaysDecompressOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	float DecompressedDuration;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SoundNodeAssetReferencer.SoundNode.Object

--------------------------------
Class: SoundNodeAttenuation.SoundNode.Object
	SoundAttenuation* AttenuationSettings;//[Offset: 0x48, Size: 0x8]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x50, Size: 0x3c8]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x418, Size: 0x1]

--------------------------------
Class: SoundNodeBranch.SoundNode.Object
	FName BoolParameterName;//[Offset: 0x44, Size: 0x8]

--------------------------------
Class: SoundNodeConcatenator.SoundNode.Object
	float[] InputVolume;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SoundNodeDelay.SoundNode.Object
	float DelayMin;//[Offset: 0x44, Size: 0x4]
	float DelayMax;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: SoundNodeDialoguePlayer.SoundNode.Object
	DialogueWaveParameter DialogueWaveParameter;//[Offset: 0x48, Size: 0x20]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: DialogueWaveParameter
	DialogueWave* DialogueWave;//[Offset: 0x0, Size: 0x8]
	DialogueContext Context;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: SoundNodeDistanceCrossFade.SoundNode.Object
	DistanceDatum[] CrossFadeInput;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: DistanceDatum
	float FadeInDistanceStart;//[Offset: 0x0, Size: 0x4]
	float FadeInDistanceEnd;//[Offset: 0x4, Size: 0x4]
	float FadeOutDistanceStart;//[Offset: 0x8, Size: 0x4]
	float FadeOutDistanceEnd;//[Offset: 0xc, Size: 0x4]
	float Volume;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SoundNodeDoppler.SoundNode.Object
	float DopplerIntensity;//[Offset: 0x44, Size: 0x4]
	bool bUseSmoothing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	float SmoothingInterpSpeed;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: SoundNodeEnveloper.SoundNode.Object
	float LoopStart;//[Offset: 0x44, Size: 0x4]
	float LoopEnd;//[Offset: 0x48, Size: 0x4]
	float DurationAfterLoop;//[Offset: 0x4c, Size: 0x4]
	int LoopCount;//[Offset: 0x50, Size: 0x4]
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	DistributionFloatConstantCurve* VolumeInterpCurve;//[Offset: 0x58, Size: 0x8]
	DistributionFloatConstantCurve* PitchInterpCurve;//[Offset: 0x60, Size: 0x8]
	RuntimeFloatCurve VolumeCurve;//[Offset: 0x68, Size: 0x88]
	RuntimeFloatCurve PitchCurve;//[Offset: 0xf0, Size: 0x88]
	float PitchMin;//[Offset: 0x178, Size: 0x4]
	float PitchMax;//[Offset: 0x17c, Size: 0x4]
	float VolumeMin;//[Offset: 0x180, Size: 0x4]
	float VolumeMax;//[Offset: 0x184, Size: 0x4]

--------------------------------
Class: SoundNodeGroupControl.SoundNode.Object
	int[] GroupSizes;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SoundNodeLooping.SoundNode.Object
	int LoopCount;//[Offset: 0x44, Size: 0x4]
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: SoundNodeMature.SoundNode.Object

--------------------------------
Class: SoundNodeMixer.SoundNode.Object
	float[] InputVolume;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SoundNodeModulator.SoundNode.Object
	float PitchMin;//[Offset: 0x44, Size: 0x4]
	float PitchMax;//[Offset: 0x48, Size: 0x4]
	float VolumeMin;//[Offset: 0x4c, Size: 0x4]
	float VolumeMax;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: SoundNodeModulatorContinuous.SoundNode.Object
	ModulatorContinuousParams PitchModulationParams;//[Offset: 0x44, Size: 0x20]
	ModulatorContinuousParams VolumeModulationParams;//[Offset: 0x64, Size: 0x20]

--------------------------------
Class: ModulatorContinuousParams
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	float Default;//[Offset: 0x8, Size: 0x4]
	float MinInput;//[Offset: 0xc, Size: 0x4]
	float MaxInput;//[Offset: 0x10, Size: 0x4]
	float MinOutput;//[Offset: 0x14, Size: 0x4]
	float MaxOutput;//[Offset: 0x18, Size: 0x4]
	byte ParamMode;//[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: SoundNodeOscillator.SoundNode.Object
	bool bModulateVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1]
	bool bModulatePitch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1]
	float AmplitudeMin;//[Offset: 0x44, Size: 0x4]
	float AmplitudeMax;//[Offset: 0x48, Size: 0x4]
	float FrequencyMin;//[Offset: 0x4c, Size: 0x4]
	float FrequencyMax;//[Offset: 0x50, Size: 0x4]
	float OffsetMin;//[Offset: 0x54, Size: 0x4]
	float OffsetMax;//[Offset: 0x58, Size: 0x4]
	float CenterMin;//[Offset: 0x5c, Size: 0x4]
	float CenterMax;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: SoundNodeParamCrossFade.SoundNodeDistanceCrossFade.SoundNode.Object
	FName ParamName;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: SoundNodeQualityLevel.SoundNode.Object
	int CookedQualityLevelIndex;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: SoundNodeRandom.SoundNode.Object
	float[] Weights;//[Offset: 0x48, Size: 0x10]
	bool[] HasBeenUsed;//[Offset: 0x58, Size: 0x10]
	int NumRandomUsed;//[Offset: 0x68, Size: 0x4]
	int PreselectAtLevelLoad;//[Offset: 0x6c, Size: 0x4]
	bool bShouldExcludeFromBranchCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	bool bSoundCueExcludedFromBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1]
	bool bRandomizeWithoutReplacement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: SoundNodeSoundClass.SoundNode.Object
	SoundClass* SoundClassOverride;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SoundNodeSwitch.SoundNode.Object
	FName IntParameterName;//[Offset: 0x44, Size: 0x8]

--------------------------------
Class: SoundNodeWaveParam.SoundNode.Object
	FName WaveParameterName;//[Offset: 0x44, Size: 0x8]

--------------------------------
Class: SoundNodeWavePlayer.SoundNodeAssetReferencer.SoundNode.Object
	SoundWave* SoundWaveAssetPtr;//[Offset: 0x48, Size: 0x28]
	SoundWave* SoundWave;//[Offset: 0x70, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: AudioParameterControllerInterface.Interface.Object
	void SetTriggerParameter(FName InName);// 0x285758eb6041
	void SetStringParameter(FName InName, FString InValue);// 0x285658eb6041
	void SetStringArrayParameter(FName InName, out const FString[] InValue);// 0x285558eb6041
	void SetParameters_Blueprint(out const AudioParameter[] InParameters);// 0x285458eb6041
	void SetObjectParameter(FName InName, Object* InValue);// 0x285358eb6041
	void SetObjectArrayParameter(FName InName, out const Object*[] InValue);// 0x285258eb6041
	void SetIntParameter(FName InName, int inInt);// 0x285158eb6041
	void SetIntArrayParameter(FName InName, out const int[] InValue);// 0x285058eb6041
	void SetFloatParameter(FName InName, float InFloat);// 0x284f58eb6041
	void SetFloatArrayParameter(FName InName, out const float[] InValue);// 0x284e58eb6041
	void SetBoolParameter(FName InName, bool InBool);// 0x284d58eb6041
	void SetBoolArrayParameter(FName InName, out const bool[] InValue);// 0x284c58eb6041
	void ResetParameters();// 0x284b58eb6041

--------------------------------
Class: SoundParameterControllerInterface.AudioParameterControllerInterface.Interface.Object

--------------------------------
Class: AudioParameterConversionStatics.BlueprintFunctionLibrary.Object
	AudioParameter StringToAudioParameter(FName Name, FString String);// 0x355a58eb6041
	AudioParameter StringArrayToAudioParameter(FName Name, FString[] Strings);// 0x355958eb6041
	AudioParameter ObjectToAudioParameter(FName Name, Object* Object);// 0x355858eb6041
	AudioParameter ObjectArrayToAudioParameter(FName Name, Object*[] Objects);// 0x355758eb6041
	AudioParameter IntegerToAudioParameter(FName Name, int Integer);// 0x355658eb6041
	AudioParameter IntegerArrayToAudioParameter(FName Name, int[] Integers);// 0x355558eb6041
	AudioParameter FloatToAudioParameter(FName Name, float Float);// 0x355458eb6041
	AudioParameter FloatArrayToAudioParameter(FName Name, float[] Floats);// 0x359558eb6041
	AudioParameter BooleanToAudioParameter(FName Name, bool Bool);// 0x355258eb6041
	AudioParameter BooleanArrayToAudioParameter(FName Name, bool[] Bools);// 0x355158eb6041

--------------------------------
Class: SoundfieldSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	FName SoundfieldEncodingFormat;//[Offset: 0x48, Size: 0x8]
	SoundfieldEncodingSettingsBase* EncodingSettings;//[Offset: 0x50, Size: 0x8]
	SoundfieldEffectBase*[] SoundfieldEffectChain;//[Offset: 0x58, Size: 0x10]
	class SoundfieldEncodingSettingsBase* EncodingSettingsClass;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: SoundfieldEffectBase.Object
	SoundfieldEffectSettingsBase* Settings;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SoundfieldEffectSettingsBase.Object

--------------------------------
Class: EndpointSubmix.SoundSubmixBase.Object
	FName EndpointType;//[Offset: 0x40, Size: 0x8]
	class AudioEndpointSettingsBase* EndpointSettingsClass;//[Offset: 0x48, Size: 0x8]
	AudioEndpointSettingsBase* EndpointSettings;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: AudioEndpointSettingsBase.Object

--------------------------------
Class: SoundfieldEndpointSubmix.SoundSubmixBase.Object
	FName SoundfieldEndpointType;//[Offset: 0x40, Size: 0x8]
	class AudioEndpointSettingsBase* EndpointSettingsClass;//[Offset: 0x48, Size: 0x8]
	SoundfieldEndpointSettingsBase* EndpointSettings;//[Offset: 0x50, Size: 0x8]
	class SoundfieldEncodingSettingsBase* EncodingSettingsClass;//[Offset: 0x58, Size: 0x8]
	SoundfieldEncodingSettingsBase* EncodingSettings;//[Offset: 0x60, Size: 0x8]
	SoundfieldEffectBase*[] SoundfieldEffectChain;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: SoundfieldEndpointSettingsBase.Object

--------------------------------
Class: SoundSubmixWidgetInterface.Interface.Object
	void OnConstructed(SoundSubmixBase* SoundSubmix);// 0x356758eb6041

--------------------------------
Class: SoundWaveProcedural.SoundWave.SoundBase.Object

--------------------------------
Class: SpectatorPawnMovement.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x171, Size: 0x1]

--------------------------------
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x280, Size: 0x8]

--------------------------------
Class: SphereReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadius;//[Offset: 0x328, Size: 0x4]
	float CaptureDistanceScale;//[Offset: 0x32c, Size: 0x4]
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x330, Size: 0x8]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x538, Size: 0x70]
	InterpCurveVector SplineInfo;//[Offset: 0x5a8, Size: 0x18]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x5c0, Size: 0x18]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x5d8, Size: 0x18]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x5f0, Size: 0x18]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x60c, Size: 0x4]
	float Duration;//[Offset: 0x610, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x616, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x617, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x619, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61a, Size: 0x1]
	float LoopPosition;//[Offset: 0x61c, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x620, Size: 0x18]
	void UpdateSpline();// 0x1ea858eb6041
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x1ea758eb6041
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x1ea658eb6041
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x1ea558eb6041
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x1ee658eb6041
	void SetTangentColor(out const LinearColor TangentColor);// 0x1ea358eb6041
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x1ea258eb6041
	void SetSplineWorldPoints(out const Vector[] Points);// 0x1ea158eb6041
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x1ea058eb6041
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x1e9f58eb6041
	void SetSplineLocalPoints(out const Vector[] Points);// 0x1e9e58eb6041
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x1e9d58eb6041
	void SetScaleAtSplinePoint(int PointIndex, out const Vector InScaleVector, bool bUpdateSpline);// 0x1e9c58eb6041
	void SetRotationAtSplinePoint(int PointIndex, out const Rotator InRotation, byte CoordinateSpace, bool bUpdateSpline);// 0x1e9b58eb6041
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x1e9a58eb6041
	void SetDrawDebug(bool bShow);// 0x1e9958eb6041
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x1e9858eb6041
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x1e9758eb6041
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x1e9658eb6041
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x1e9558eb6041
	bool IsClosedLoop();// 0x1e9458eb6041
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x1e9358eb6041
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x1e9258eb6041
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x1e9158eb6041
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x1e9058eb6041
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x1e8f58eb6041
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x1e8e58eb6041
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x1e8d58eb6041
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x1e8c58eb6041
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x1e8b58eb6041
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x1e8a58eb6041
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x1e8958eb6041
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x1e8858eb6041
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x1e8758eb6041
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x1e8658eb6041
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x1e8558eb6041
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x1e8458eb6041
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x1ec558eb6041
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x1e8258eb6041
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x1e8158eb6041
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x1e8058eb6041
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x1e7f58eb6041
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x1e7e58eb6041
	byte GetSplinePointType(int PointIndex);// 0x1e7d58eb6041
	float GetSplineLength();// 0x1e7c58eb6041
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x1e7b58eb6041
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x1e7a58eb6041
	Vector GetScaleAtSplineInputKey(float InKey);// 0x1e7958eb6041
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x1e7858eb6041
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x1e7758eb6041
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x1e7658eb6041
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x1e7558eb6041
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x1e7458eb6041
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x1e7358eb6041
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x1e7258eb6041
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x1e7158eb6041
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x1e7058eb6041
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x1e6f58eb6041
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x1e6e58eb6041
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x1e6d58eb6041
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x1e6c58eb6041
	int GetNumberOfSplineSegments();// 0x1e6b58eb6041
	int GetNumberOfSplinePoints();// 0x1e6a58eb6041
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x1e6958eb6041
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x1e6858eb6041
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x1e6758eb6041
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x1e6658eb6041
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x1e6558eb6041
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x1e6458eb6041
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x1e6358eb6041
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x1ea458eb6041
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x1e6158eb6041
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x1e6058eb6041
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x1e5f58eb6041
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0x1e5e58eb6041
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x1e5d58eb6041
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x1e5c58eb6041
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x1e5b58eb6041
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x1e5a58eb6041
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x1e5958eb6041
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x1e5858eb6041
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x1e5758eb6041
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x1e5658eb6041
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x1e5558eb6041
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x1e5458eb6041
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x1e5358eb6041
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x1e5258eb6041
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x1e5158eb6041
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x1e5058eb6041
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x1e4f58eb6041
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x1e4e58eb6041
	bool DivideSplineIntoPolylineRecursive(float StartDistanceAlongSpline, float EndDistanceAlongSpline, byte CoordinateSpace, const float MaxSquareDistanceFromSpline, out Vector[] OutPoints);// 0x1e4d58eb6041
	bool ConvertSplineToPolyLine(byte CoordinateSpace, const float MaxSquareDistanceFromSpline, out Vector[] OutPoints);// 0x1e4c58eb6041
	bool ConvertSplineSegmentToPolyLine(int SplinePointStartIndex, byte CoordinateSpace, const float MaxSquareDistanceFromSpline, out Vector[] OutPoints);// 0x1e4b58eb6041
	void ClearSplinePoints(bool bUpdateSpline);// 0x1e4a58eb6041
	void AddSplineWorldPoint(out const Vector Position);// 0x1e4958eb6041
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x1e4858eb6041
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x1e4758eb6041
	void AddSplineLocalPoint(out const Vector Position);// 0x1e4658eb6041
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x1e4558eb6041
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x1e4458eb6041

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 0x8]
	uint32 Version;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x20]
	Quat ArriveTangent;//[Offset: 0x30, Size: 0x20]
	Quat LeaveTangent;//[Offset: 0x50, Size: 0x20]
	byte InterpMode;//[Offset: 0x70, Size: 0x1]

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector Position;//[Offset: 0x8, Size: 0x18]
	Vector ArriveTangent;//[Offset: 0x20, Size: 0x18]
	Vector LeaveTangent;//[Offset: 0x38, Size: 0x18]
	Rotator Rotation;//[Offset: 0x50, Size: 0x18]
	Vector Scale;//[Offset: 0x68, Size: 0x18]
	byte Type;//[Offset: 0x80, Size: 0x1]

--------------------------------
Class: SplineMeshActor.Actor.Object
	SplineMeshComponent* SplineMeshComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x5d0, Size: 0xb0]
	Vector SplineUpDir;//[Offset: 0x680, Size: 0x18]
	float SplineBoundaryMin;//[Offset: 0x698, Size: 0x4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x69c, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x6b0, Size: 0x8]
	float SplineBoundaryMax;//[Offset: 0x6b8, Size: 0x4]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6bc, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6bc, Size: 0x1]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6bc, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x6bd, Size: 0x1]
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x6c0, Size: 0x4]
	void UpdateMesh();// 0x358558eb6041
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x358458eb6041
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x358358eb6041
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x358258eb6041
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x358158eb6041
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x358058eb6041
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x357f58eb6041
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x357e58eb6041
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x357d58eb6041
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x357c58eb6041
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x357b58eb6041
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x357a58eb6041
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x357958eb6041
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x357858eb6041
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x357758eb6041
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x357658eb6041
	Vector GetStartTangent();// 0x357558eb6041
	Vector2D GetStartScale();// 0x35b658eb6041
	float GetStartRoll();// 0x357358eb6041
	Vector GetStartPosition();// 0x357258eb6041
	Vector2D GetStartOffset();// 0x357158eb6041
	Vector GetSplineUpDir();// 0x357058eb6041
	byte GetForwardAxis();// 0x356f58eb6041
	Vector GetEndTangent();// 0x356e58eb6041
	Vector2D GetEndScale();// 0x356d58eb6041
	float GetEndRoll();// 0x356c58eb6041
	Vector GetEndPosition();// 0x356b58eb6041
	Vector2D GetEndOffset();// 0x356a58eb6041
	float GetBoundaryMin();// 0x356958eb6041
	float GetBoundaryMax();// 0x356858eb6041

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0x18]
	Vector StartTangent;//[Offset: 0x18, Size: 0x18]
	Vector2D StartScale;//[Offset: 0x30, Size: 0x10]
	float StartRoll;//[Offset: 0x40, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x48, Size: 0x10]
	Vector EndPos;//[Offset: 0x58, Size: 0x18]
	Vector2D EndScale;//[Offset: 0x70, Size: 0x10]
	Vector EndTangent;//[Offset: 0x80, Size: 0x18]
	float EndRoll;//[Offset: 0x98, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x2b0, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x2b8, Size: 0x18]
	Vector TargetOffset;//[Offset: 0x2d0, Size: 0x18]
	float ProbeSize;//[Offset: 0x2e8, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x2ec, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ed, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ed, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ed, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ed, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ed, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ed, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ed, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2ed, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ee, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x2f0, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x2f4, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x2f8, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x2fc, Size: 0x4]
	bool bClampToMaxPhysicsDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 0x1]
	bool IsCollisionFixApplied();// 0x358a58eb6041
	Vector GetUnfixedCameraPosition();// 0x358958eb6041
	Rotator GetTargetRotation();// 0x358858eb6041

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x278, Size: 0x8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x281, Size: 0x1]
	void SetMobility(byte InMobility);// 0x27a458eb6041

--------------------------------
Class: MeshDescriptionBaseBulkData.Object

--------------------------------
Class: StaticMeshDescriptionBulkData.MeshDescriptionBaseBulkData.Object

--------------------------------
Class: StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeQuad.StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeCylinder.StereoLayerShape.Object
	float Radius;//[Offset: 0x28, Size: 0x4]
	float OverlayArc;//[Offset: 0x2c, Size: 0x4]
	int Height;//[Offset: 0x30, Size: 0x4]
	void SetRadius(float InRadius);// 0x35a258eb6041
	void SetOverlayArc(float InOverlayArc);// 0x35a158eb6041
	void SetHeight(int InHeight);// 0x35a058eb6041

--------------------------------
Class: StereoLayerShapeCubemap.StereoLayerShape.Object

--------------------------------
Class: StereoLayerShapeEquirect.StereoLayerShape.Object
	Box2D LeftUVRect;//[Offset: 0x28, Size: 0x28]
	Box2D RightUVRect;//[Offset: 0x50, Size: 0x28]
	Vector2D LeftScale;//[Offset: 0x78, Size: 0x10]
	Vector2D RightScale;//[Offset: 0x88, Size: 0x10]
	Vector2D LeftBias;//[Offset: 0x98, Size: 0x10]
	Vector2D RightBias;//[Offset: 0xa8, Size: 0x10]
	void SetEquirectProps(EquirectProps InScaleBiases);// 0x35a358eb6041

--------------------------------
Class: EquirectProps
	Box2D LeftUVRect;//[Offset: 0x0, Size: 0x28]
	Box2D RightUVRect;//[Offset: 0x28, Size: 0x28]
	Vector2D LeftScale;//[Offset: 0x50, Size: 0x10]
	Vector2D RightScale;//[Offset: 0x60, Size: 0x10]
	Vector2D LeftBias;//[Offset: 0x70, Size: 0x10]
	Vector2D RightBias;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: StereoLayerComponent.SceneComponent.ActorComponent.Object
	bool bLiveTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bSupportsDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bNoAlphaChannel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	Texture* Texture;//[Offset: 0x2b8, Size: 0x8]
	Texture* LeftTexture;//[Offset: 0x2c0, Size: 0x8]
	bool bQuadPreserveTextureRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 0x1]
	Vector2D QuadSize;//[Offset: 0x2d0, Size: 0x10]
	Box2D UVRect;//[Offset: 0x2e0, Size: 0x28]
	float CylinderRadius;//[Offset: 0x308, Size: 0x4]
	float CylinderOverlayArc;//[Offset: 0x30c, Size: 0x4]
	int CylinderHeight;//[Offset: 0x310, Size: 0x4]
	EquirectProps EquirectProps;//[Offset: 0x318, Size: 0x90]
	byte StereoLayerType;//[Offset: 0x3a8, Size: 0x1]
	byte StereoLayerShape;//[Offset: 0x3a9, Size: 0x1]
	StereoLayerShape* Shape;//[Offset: 0x3b0, Size: 0x8]
	int Priority;//[Offset: 0x3b8, Size: 0x4]
	void SetUVRect(Box2D InUVRect);// 0x35af58eb6041
	void SetTexture(Texture* InTexture);// 0x35ae58eb6041
	void SetQuadSize(Vector2D InQuadSize);// 0x35ad58eb6041
	void SetPriority(int InPriority);// 0x35ac58eb6041
	void SetLeftTexture(Texture* InTexture);// 0x35ab58eb6041
	void SetEquirectProps(EquirectProps InScaleBiases);// 0x35aa58eb6041
	void MarkTextureForUpdate();// 0x35a958eb6041
	Box2D GetUVRect();// 0x35a858eb6041
	Texture* GetTexture();// 0x35a758eb6041
	Vector2D GetQuadSize();// 0x35a658eb6041
	int GetPriority();// 0x35a558eb6041
	Texture* GetLeftTexture();// 0x35a458eb6041

--------------------------------
Class: StereoLayerFunctionLibrary.BlueprintFunctionLibrary.Object
	void ShowSplashScreen();// 0x35b358eb6041
	void SetSplashScreen(Texture* Texture, Vector2D Scale, Vector Offset, bool bShowLoadingMovie, bool bShowOnSet);// 0x35b258eb6041
	void HideSplashScreen();// 0x35b158eb6041
	void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);// 0x35b058eb6041

--------------------------------
Class: StringTable.Object

--------------------------------
Class: SubsystemBlueprintLibrary.BlueprintFunctionLibrary.Object
	WorldSubsystem* GetWorldSubsystem(Object* ContextObject, class WorldSubsystem Class);// 0x35b958eb6041
	LocalPlayerSubsystem* GetLocalPlayerSubsystemFromPlayerController(PlayerController* PlayerController, class LocalPlayerSubsystem Class);// 0x35b858eb6041
	LocalPlayerSubsystem* GetLocalPlayerSubsystem(Object* ContextObject, class LocalPlayerSubsystem Class);// 0x35b758eb6041
	GameInstanceSubsystem* GetGameInstanceSubsystem(Object* ContextObject, class GameInstanceSubsystem Class);// 0x35f858eb6041
	EngineSubsystem* GetEngineSubsystem(class EngineSubsystem Class);// 0x35b558eb6041
	AudioEngineSubsystem* GetAudioEngineSubsystem(Object* ContextObject, class AudioEngineSubsystem Class);// 0x35b458eb6041

--------------------------------
Class: SystemTimeTimecodeProvider.TimecodeProvider.Object
	FrameRate FrameRate;//[Offset: 0x2c, Size: 0x8]
	bool bGenerateFullFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bUseHighPerformanceClock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]

--------------------------------
Class: TargetPoint.Actor.Object

--------------------------------
Class: TextPropertyTestObject.Object
	FText DefaultedText;//[Offset: 0x28, Size: 0x18]
	FText UndefaultedText;//[Offset: 0x40, Size: 0x18]
	FText TransientText;//[Offset: 0x58, Size: 0x18]

--------------------------------
Class: TextRenderActor.Actor.Object
	TextRenderComponent* TextRender;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x538, Size: 0x18]
	MaterialInterface* TextMaterial;//[Offset: 0x550, Size: 0x8]
	Font* Font;//[Offset: 0x558, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x560, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x561, Size: 0x1]
	Color TextRenderColor;//[Offset: 0x564, Size: 0x4]
	float XScale;//[Offset: 0x568, Size: 0x4]
	float YScale;//[Offset: 0x56c, Size: 0x4]
	float WorldSize;//[Offset: 0x570, Size: 0x4]
	float InvDefaultSize;//[Offset: 0x574, Size: 0x4]
	float HorizSpacingAdjust;//[Offset: 0x578, Size: 0x4]
	float VertSpacingAdjust;//[Offset: 0x57c, Size: 0x4]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x580, Size: 0x1]
	void SetYScale(float Value);// 0x35c658eb6041
	void SetXScale(float Value);// 0x35c558eb6041
	void SetWorldSize(float Value);// 0x35c458eb6041
	void SetVertSpacingAdjust(float Value);// 0x35c358eb6041
	void SetVerticalAlignment(byte Value);// 0x35c258eb6041
	void SetTextRenderColor(Color Value);// 0x35c158eb6041
	void SetTextMaterial(MaterialInterface* Material);// 0x35c058eb6041
	void SetHorizSpacingAdjust(float Value);// 0x35bf58eb6041
	void SetHorizontalAlignment(byte Value);// 0x35be58eb6041
	void SetFont(Font* Value);// 0x35bd58eb6041
	void K2_SetText(out const FText Value);// 0x35bc58eb6041
	Vector GetTextWorldSize();// 0x35bb58eb6041
	Vector GetTextLocalSize();// 0x35ba58eb6041

--------------------------------
Class: Texture2DArray.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0x248, Size: 0x1]
	byte AddressY;//[Offset: 0x249, Size: 0x1]
	byte AddressZ;//[Offset: 0x24a, Size: 0x1]

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0x1f8, Size: 0x1]

--------------------------------
Class: TextureCubeArray.Texture.StreamableRenderAsset.Object

--------------------------------
Class: TextureEncodingProjectSettings.DeveloperSettings.Object
	bool bFinalUsesRDO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	int8 FinalRDOLambda;//[Offset: 0x39, Size: 0x1]
	enum FinalEffortLevel;//[Offset: 0x3a, Size: 0x1]
	enum FinalUniversalTiling;//[Offset: 0x3b, Size: 0x1]
	bool bFastUsesRDO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	int8 FastRDOLambda;//[Offset: 0x3d, Size: 0x1]
	enum FastEffortLevel;//[Offset: 0x3e, Size: 0x1]
	enum FastUniversalTiling;//[Offset: 0x3f, Size: 0x1]
	enum CookUsesSpeed;//[Offset: 0x40, Size: 0x1]
	enum EditorUsesSpeed;//[Offset: 0x41, Size: 0x1]

--------------------------------
Class: TextureEncodingUserSettings.DeveloperSettings.Object
	enum ForceEncodeSpeed;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: TextureMipDataProviderFactory.AssetUserData.Object

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb0, Size: 0x98]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 0x1]
	void Stop();// 0x35de58eb6041
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x35dd58eb6041
	void SetTimelineLengthMode(byte NewLengthMode);// 0x35dc58eb6041
	void SetTimelineLength(float NewLength);// 0x35db58eb6041
	void SetPlayRate(float NewRate);// 0x35da58eb6041
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x35d958eb6041
	void SetNewTime(float NewTime);// 0x35d858eb6041
	void SetLooping(bool bNewLooping);// 0x361958eb6041
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x35d658eb6041
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x35d558eb6041
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x35d458eb6041
	void ReverseFromEnd();// 0x35d358eb6041
	void Reverse();// 0x35d258eb6041
	void PlayFromStart();// 0x35d158eb6041
	void Play();// 0x35d058eb6041
	void OnRep_Timeline();// 0x35cf58eb6041
	bool IsReversing();// 0x35ce58eb6041
	bool IsPlaying();// 0x35cd58eb6041
	bool IsLooping();// 0x35cc58eb6041
	float GetTimelineLength();// 0x35cb58eb6041
	float GetScaledTimelineLength();// 0x35ca58eb6041
	float GetPlayRate();// 0x35c958eb6041
	float GetPlaybackPosition();// 0x35c858eb6041
	bool GetIgnoreTimeDilation();// 0x35c758eb6041

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x10]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: TriggerBase.Actor.Object
	ShapeComponent* CollisionComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: TriggerBox.TriggerBase.Actor.Object

--------------------------------
Class: TriggerCapsule.TriggerBase.Actor.Object

--------------------------------
Class: TriggerSphere.TriggerBase.Actor.Object

--------------------------------
Class: TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: TwitterIntegrationBase.PlatformInterfaceBase.Object
	bool TwitterRequest(FString URL, out const FString[] ParamKeysAndValues, byte RequestMethod, int AccountIndex);// 0x35e558eb6041
	bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture);// 0x35e458eb6041
	void Init();// 0x35e358eb6041
	int GetNumAccounts();// 0x35e258eb6041
	FString GetAccountName(int AccountIndex);// 0x35e158eb6041
	bool CanShowTweetUI();// 0x35e058eb6041
	bool AuthorizeAccounts();// 0x35df58eb6041

--------------------------------
Class: TypedElementCommonActions.Object
	ScriptTypedElementHandle[] K2_DuplicateSelectedElements(const TypedElementSelectionSet* SelectionSet, World* World, out const Vector LocationOffset);// 0x35e958eb6041
	ScriptTypedElementHandle[] DuplicateNormalizedElements(const ScriptTypedElementListProxy ElementList, World* World, out const Vector LocationOffset);// 0x35e858eb6041
	bool DeleteSelectedElements(TypedElementSelectionSet* SelectionSet, World* World, out const TypedElementDeletionOptions DeletionOptions);// 0x35e758eb6041
	bool DeleteNormalizedElements(const ScriptTypedElementListProxy ElementList, World* World, TypedElementSelectionSet* InSelectionSet, out const TypedElementDeletionOptions DeletionOptions);// 0x35e658eb6041

--------------------------------
Class: TypedElementSelectionSet.Object
	delegate OnPreSelectionChange;//[Offset: 0x828, Size: 0x10]
	delegate OnSelectionChange;//[Offset: 0x838, Size: 0x10]
	bool SetSelection(out const ScriptTypedElementHandle[] InElementHandles, const TypedElementSelectionOptions InSelectionOptions);// 0x117b58eb6041
	bool SelectElements(out const ScriptTypedElementHandle[] InElementHandles, const TypedElementSelectionOptions InSelectionOptions);// 0x117a58eb6041
	bool SelectElement(out const ScriptTypedElementHandle InElementHandle, const TypedElementSelectionOptions InSelectionOptions);// 0x117958eb6041
	void RestoreSelectionState(out const TypedElementSelectionSetState InSelectionState);// 0xffffff8158eb6000
	void OnPreChangeDynamic__DelegateSignature(const TypedElementSelectionSet* SelectionSet);// 0x117758eb6041
	void OnChangeDynamic__DelegateSignature(const TypedElementSelectionSet* SelectionSet);// 0x117658eb6041
	ScriptTypedElementHandle[] K2_GetSelectedElementHandles(const class Interface InBaseInterfaceType);// 0x117458eb6041
	bool IsElementSelected(out const ScriptTypedElementHandle InElementHandle, const TypedElementIsSelectedOptions InSelectionOptions);// 0x117358eb6041
	bool HasSelectedObjects(const class Object InRequiredClass);// 0x117258eb6041
	bool HasSelectedElements(const class Interface InBaseInterfaceType);// 0x117158eb6041
	Object* GetTopSelectedObject(const class Object InRequiredClass);// 0x116f58eb6041
	ScriptTypedElementHandle GetSelectionElement(out const ScriptTypedElementHandle InElementHandle, const enum InSelectionMethod);// 0x116e58eb6041
	Object*[] GetSelectedObjects(const class Object InRequiredClass);// 0x116d58eb6041
	int GetNumSelectedElements();// 0x116b58eb6041
	TypedElementSelectionSetState GetCurrentSelectionState();// 0x116a58eb6041
	Object* GetBottomSelectedObject(const class Object InRequiredClass);// 0x116958eb6041
	bool DeselectElements(out const ScriptTypedElementHandle[] InElementHandles, const TypedElementSelectionOptions InSelectionOptions);// 0x116858eb6041
	bool DeselectElement(out const ScriptTypedElementHandle InElementHandle, const TypedElementSelectionOptions InSelectionOptions);// 0x116758eb6041
	int CountSelectedObjects(const class Object InRequiredClass);// 0x116658eb6041
	int CountSelectedElements(const class Interface InBaseInterfaceType);// 0x116558eb6041
	bool ClearSelection(const TypedElementSelectionOptions InSelectionOptions);// 0x116458eb6041
	bool CanSelectElement(out const ScriptTypedElementHandle InElementHandle, const TypedElementSelectionOptions InSelectionOptions);// 0x116158eb6041
	bool CanDeselectElement(out const ScriptTypedElementHandle InElementHandle, const TypedElementSelectionOptions InSelectionOptions);// 0x115f58eb6041
	bool AllowSelectionModifiers(out const ScriptTypedElementHandle InElementHandle);// 0x114f58eb6041

--------------------------------
Class: ScriptTypedElementHandle

--------------------------------
Class: TypedElementSelectionOptions
	bool bAllowHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bAllowGroups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bAllowLegacyNotifications;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bWarnIfLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	enum ChildElementInclusionMethod;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: TypedElementSelectionSetState
	TypedElementSelectionSet* CreatedFromSelectionSet;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TypedElementIsSelectedOptions
	bool bAllowIndirect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ScriptTypedElementListProxy

--------------------------------
Class: TypedElementDeletionOptions
	bool bVerifyDeletionCanHappen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bWarnAboutReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bWarnAboutSoftReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]

--------------------------------
Class: TypedElementWorldInterface.Interface.Object
	bool SetWorldTransform(out const ScriptTypedElementHandle InElementHandle, out const Transform InTransform);// 0x35fc58eb6041
	bool SetRelativeTransform(out const ScriptTypedElementHandle InElementHandle, out const Transform InTransform);// 0x35fb58eb6041
	bool SetPivotOffset(out const ScriptTypedElementHandle InElementHandle, out const Vector InPivotOffset);// 0x35fa58eb6041
	void NotifyMovementStarted(out const ScriptTypedElementHandle InElementHandle);// 0x35f958eb6041
	void NotifyMovementOngoing(out const ScriptTypedElementHandle InElementHandle);// 0x363558eb6041
	void NotifyMovementEnded(out const ScriptTypedElementHandle InElementHandle);// 0x35f758eb6041
	bool IsTemplateElement(out const ScriptTypedElementHandle InElementHandle);// 0x35f658eb6041
	bool GetWorldTransform(out const ScriptTypedElementHandle InElementHandle, out Transform OutTransform);// 0x35f558eb6041
	bool GetRelativeTransform(out const ScriptTypedElementHandle InElementHandle, out Transform OutTransform);// 0x35f458eb6041
	bool GetPivotOffset(out const ScriptTypedElementHandle InElementHandle, out Vector OutPivotOffset);// 0x35f358eb6041
	World* GetOwnerWorld(out const ScriptTypedElementHandle InElementHandle);// 0x35f258eb6041
	Level* GetOwnerLevel(out const ScriptTypedElementHandle InElementHandle);// 0x35f158eb6041
	bool GetBounds(out const ScriptTypedElementHandle InElementHandle, out BoxSphereBounds OutBounds);// 0x35f058eb6041
	ScriptTypedElementHandle DuplicateElement(out const ScriptTypedElementHandle InElementHandle, World* InWorld, out const Vector InLocationOffset);// 0x35ef58eb6041
	bool DeleteElement(out const ScriptTypedElementHandle InElementHandle, World* InWorld, TypedElementSelectionSet* InSelectionSet, out const TypedElementDeletionOptions InDeletionOptions);// 0x35ee58eb6041
	bool CanMoveElement(out const ScriptTypedElementHandle InElementHandle, const enum InWorldType);// 0x35ed58eb6041
	bool CanEditElement(out const ScriptTypedElementHandle InElementHandle);// 0x35ec58eb6041
	bool CanDuplicateElement(out const ScriptTypedElementHandle InElementHandle);// 0x35eb58eb6041
	bool CanDeleteElement(out const ScriptTypedElementHandle InElementHandle);// 0x35ea58eb6041

--------------------------------
Class: UserDefinedEnum.Enum.Field.Object
	<FName,FText> DisplayNameMap;//[Offset: 0x60, Size: 0x50]

--------------------------------
Class: UserDefinedStruct.ScriptStruct.Struct.Field.Object
	byte Status;//[Offset: 0xc0, Size: 0x1]
	Guid Guid;//[Offset: 0xc4, Size: 0x10]

--------------------------------
Class: UserInterfaceSettings.DeveloperSettings.Object
	enum RenderFocusRule;//[Offset: 0x38, Size: 0x1]
	<byte,HardwareCursorReference> HardwareCursors;//[Offset: 0x40, Size: 0x50]
	<byte,SoftClassPath> SoftwareCursors;//[Offset: 0x90, Size: 0x50]
	SoftClassPath DefaultCursor;//[Offset: 0xe0, Size: 0x18]
	SoftClassPath TextEditBeamCursor;//[Offset: 0xf8, Size: 0x18]
	SoftClassPath CrosshairsCursor;//[Offset: 0x110, Size: 0x18]
	SoftClassPath HandCursor;//[Offset: 0x128, Size: 0x18]
	SoftClassPath GrabHandCursor;//[Offset: 0x140, Size: 0x18]
	SoftClassPath GrabHandClosedCursor;//[Offset: 0x158, Size: 0x18]
	SoftClassPath SlashedCircleCursor;//[Offset: 0x170, Size: 0x18]
	float ApplicationScale;//[Offset: 0x188, Size: 0x4]
	enum UIScaleRule;//[Offset: 0x18c, Size: 0x1]
	SoftClassPath CustomScalingRuleClass;//[Offset: 0x190, Size: 0x18]
	RuntimeFloatCurve UIScaleCurve;//[Offset: 0x1a8, Size: 0x88]
	bool bAllowHighDPIInGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 0x1]
	IntPoint DesignScreenSize;//[Offset: 0x234, Size: 0x8]
	bool bLoadWidgetsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 0x1]
	Object*[] CursorClasses;//[Offset: 0x240, Size: 0x10]
	ClassPtrProperty CustomScalingRuleClassInstance;//[Size: 0x8]
	DPICustomScalingRule* CustomScalingRule;//[Offset: 0x258, Size: 0x8]

--------------------------------
Class: HardwareCursorReference
	FName CursorPath;//[Offset: 0x0, Size: 0x8]
	Vector2D HotSpot;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: VectorFieldAnimated.VectorField.Object
	Texture2D* Texture;//[Offset: 0x68, Size: 0x8]
	byte ConstructionOp;//[Offset: 0x70, Size: 0x1]
	int VolumeSizeX;//[Offset: 0x74, Size: 0x4]
	int VolumeSizeY;//[Offset: 0x78, Size: 0x4]
	int VolumeSizeZ;//[Offset: 0x7c, Size: 0x4]
	int SubImagesX;//[Offset: 0x80, Size: 0x4]
	int SubImagesY;//[Offset: 0x84, Size: 0x4]
	int FrameCount;//[Offset: 0x88, Size: 0x4]
	float FramesPerSecond;//[Offset: 0x8c, Size: 0x4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	VectorFieldStatic* NoiseField;//[Offset: 0x98, Size: 0x8]
	float NoiseScale;//[Offset: 0xa0, Size: 0x4]
	float NoiseMax;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: VectorFieldStatic.VectorField.Object
	int SizeX;//[Offset: 0x64, Size: 0x4]
	int SizeY;//[Offset: 0x68, Size: 0x4]
	int SizeZ;//[Offset: 0x6c, Size: 0x4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: VectorFieldComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VectorField* VectorField;//[Offset: 0x538, Size: 0x8]
	float Intensity;//[Offset: 0x540, Size: 0x4]
	float Tightness;//[Offset: 0x544, Size: 0x4]
	bool bPreviewVectorField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x548, Size: 0x1]
	void SetIntensity(float NewIntensity);// 0x35fd58eb6041

--------------------------------
Class: VectorFieldVolume.Actor.Object
	VectorFieldComponent* VectorFieldComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: ViewportStatsSubsystem.WorldSubsystem.Subsystem.Object
	void RemoveDisplayDelegate(const int IndexToRemove);// 0x360058eb6041
	void AddTimedDisplay(FText Text, LinearColor Color, float Duration, out const Vector2D DisplayOffset);// 0x35ff58eb6041
	int AddDisplayDelegate(out const delegate Delegate);// 0x35fe58eb6041

--------------------------------
Class: VirtualTexture.Object

--------------------------------
Class: LightMapVirtualTexture.VirtualTexture.Object

--------------------------------
Class: VirtualTexturePoolConfig.Object
	int DefaultSizeInMegabyte;//[Offset: 0x28, Size: 0x4]
	VirtualTextureSpacePoolConfig[] Pools;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: VirtualTextureSpacePoolConfig
	int MinTileSize;//[Offset: 0x0, Size: 0x4]
	int MaxTileSize;//[Offset: 0x4, Size: 0x4]
	byte[] Formats;//[Offset: 0x8, Size: 0x10]
	int SizeInMegabyte;//[Offset: 0x18, Size: 0x4]
	bool bEnableResidencyMipMapBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool bAllowSizeScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	uint32 ScalabilityGroup;//[Offset: 0x20, Size: 0x4]
	int MinScaledSizeInMegabyte;//[Offset: 0x24, Size: 0x4]
	int MaxScaledSizeInMegabyte;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: VisualLoggerAutomationTests.Object

--------------------------------
Class: VisualLoggerDebugSnapshotInterface.Interface.Object

--------------------------------
Class: VisualLoggerFilterVolume.Volume.Brush.Actor.Object

--------------------------------
Class: VisualLoggerKismetLibrary.BlueprintFunctionLibrary.Object
	void RedirectVislog(Object* SourceOwner, Object* DestinationOwner);// 0x360658eb6041
	void LogText(Object* WorldContextObject, FString Text, FName LogCategory, bool bAddToMessageLog);// 0x360558eb6041
	void LogSegment(Object* WorldContextObject, const Vector SegmentStart, const Vector SegmentEnd, FString Text, LinearColor ObjectColor, const float Thickness, FName CategoryName, bool bAddToMessageLog);// 0x360458eb6041
	void LogLocation(Object* WorldContextObject, Vector Location, FString Text, LinearColor ObjectColor, float Radius, FName LogCategory, bool bAddToMessageLog);// 0x360358eb6041
	void LogBox(Object* WorldContextObject, Box BoxShape, FString Text, LinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog);// 0x360258eb6041
	void EnableRecording(bool bEnabled);// 0x360158eb6041

--------------------------------
Class: VoiceChannel.Channel.Object

--------------------------------
Class: VOIPTalker.ActorComponent.Object
	VoiceSettings Settings;//[Offset: 0xb0, Size: 0x18]
	void RegisterWithPlayerState(PlayerState* OwningState);// 0x360b58eb6041
	float GetVoiceLevel();// 0x360a58eb6041
	VOIPTalker* CreateTalkerForPlayer(PlayerState* OwningState);// 0x360958eb6041
	void BPOnTalkingEnd();// 0x360858eb6041
	void BPOnTalkingBegin(AudioComponent* AudioComponent);// 0x360758eb6041

--------------------------------
Class: VoiceSettings
	SceneComponent* ComponentToAttachTo;//[Offset: 0x0, Size: 0x8]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x8, Size: 0x8]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: VOIPStatics.BlueprintFunctionLibrary.Object
	void SetMicThreshold(float InThreshold);// 0x360c58eb6041

--------------------------------
Class: VolumetricCloudComponent.SceneComponent.ActorComponent.Object
	float LayerBottomAltitude;//[Offset: 0x2b0, Size: 0x4]
	float LayerHeight;//[Offset: 0x2b4, Size: 0x4]
	float TracingStartMaxDistance;//[Offset: 0x2b8, Size: 0x4]
	float TracingMaxDistance;//[Offset: 0x2bc, Size: 0x4]
	float PlanetRadius;//[Offset: 0x2c0, Size: 0x4]
	Color GroundAlbedo;//[Offset: 0x2c4, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x2c8, Size: 0x8]
	bool bUsePerSampleAtmosphericLightTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1]
	float SkyLightCloudBottomOcclusion;//[Offset: 0x2d4, Size: 0x4]
	float ViewSampleCountScale;//[Offset: 0x2d8, Size: 0x4]
	float ReflectionViewSampleCountScale;//[Offset: 0x2dc, Size: 0x4]
	float ReflectionSampleCountScale;//[Offset: 0x2e0, Size: 0x4]
	float ShadowViewSampleCountScale;//[Offset: 0x2e4, Size: 0x4]
	float ShadowReflectionViewSampleCountScale;//[Offset: 0x2e8, Size: 0x4]
	float ShadowReflectionSampleCountScale;//[Offset: 0x2ec, Size: 0x4]
	float ShadowTracingDistance;//[Offset: 0x2f0, Size: 0x4]
	float StopTracingTransmittanceThreshold;//[Offset: 0x2f4, Size: 0x4]
	void SetViewSampleCountScale(float NewValue);// 0x361d58eb6041
	void SetTracingStartMaxDistance(float NewValue);// 0x361c58eb6041
	void SetTracingMaxDistance(float NewValue);// 0x361b58eb6041
	void SetStopTracingTransmittanceThreshold(float NewValue);// 0x361a58eb6041
	void SetSkyLightCloudBottomOcclusion(float NewValue);// 0xffffff8158eb6000
	void SetShadowViewSampleCountScale(float NewValue);// 0x361858eb6041
	void SetShadowTracingDistance(float NewValue);// 0x361758eb6041
	void SetShadowReflectionViewSampleCountScale(float NewValue);// 0x361658eb6041
	void SetShadowReflectionSampleCountScale(float NewValue);// 0x361558eb6041
	void SetReflectionViewSampleCountScale(float NewValue);// 0x361458eb6041
	void SetReflectionSampleCountScale(float NewValue);// 0x361358eb6041
	void SetPlanetRadius(float NewValue);// 0x361258eb6041
	void SetMaterial(MaterialInterface* NewValue);// 0x361158eb6041
	void SetLayerHeight(float NewValue);// 0x361058eb6041
	void SetLayerBottomAltitude(float NewValue);// 0x360f58eb6041
	void SetGroundAlbedo(Color NewValue);// 0x360e58eb6041
	void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue);// 0x360d58eb6041

--------------------------------
Class: VolumetricCloud.Info.Actor.Object
	VolumetricCloudComponent* VolumetricCloudComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: VolumetricLightmapDensityVolume.Volume.Brush.Actor.Object
	Int32Interval AllowedMipLevelRange;//[Offset: 0x2b0, Size: 0x8]

--------------------------------
Class: Int32Interval
	int Min;//[Offset: 0x0, Size: 0x4]
	int Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: WindDirectionalSource.Info.Actor.Object
	WindDirectionalSourceComponent* Component;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: WindDirectionalSourceComponent.SceneComponent.ActorComponent.Object
	float Strength;//[Offset: 0x2b0, Size: 0x4]
	float Speed;//[Offset: 0x2b4, Size: 0x4]
	float MinGustAmount;//[Offset: 0x2b8, Size: 0x4]
	float MaxGustAmount;//[Offset: 0x2bc, Size: 0x4]
	float Radius;//[Offset: 0x2c0, Size: 0x4]
	bool bPointWind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 0x1]
	void SetWindType(enum InNewType);// 0x362358eb6041
	void SetStrength(float InNewStrength);// 0x362258eb6041
	void SetSpeed(float InNewSpeed);// 0x362158eb6041
	void SetRadius(float InNewRadius);// 0x362058eb6041
	void SetMinimumGustAmount(float InNewMinGust);// 0x361f58eb6041
	void SetMaximumGustAmount(float InNewMaxGust);// 0x361e58eb6041

--------------------------------
Class: LandscapeInfoMap.Object

--------------------------------
Class: WorldPartitionEditorCell.Object

--------------------------------
Class: WorldPartitionEditorHash.Object

--------------------------------
Class: WorldPartitionEditorPerProjectUserSettings.Object

--------------------------------
Class: WorldPartitionEditorSpatialHash.WorldPartitionEditorHash.Object

--------------------------------
Class: WorldPartitionLevelStreamingDynamic.LevelStreamingDynamic.LevelStreaming.Object
	bool bShouldBeAlwaysLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	WorldPartitionRuntimeLevelStreamingCell* StreamingCell;//[Offset: 0x17c, Size: 0x8]
	WorldPartition* OuterWorldPartition;//[Offset: 0x184, Size: 0x8]

--------------------------------
Class: WorldPartitionRuntimeLevelStreamingCell.WorldPartitionRuntimeSpatialHashCell.WorldPartitionRuntimeCell.Object
	WorldPartitionLevelStreamingDynamic* LevelStreaming;//[Offset: 0xc8, Size: 0x8]
	void OnLevelShown();// 0x362c58eb6041
	void OnLevelHidden();// 0x362b58eb6041

--------------------------------
Class: WorldPartitionRuntimeSpatialHashCell.WorldPartitionRuntimeCell.Object
	Vector Position;//[Offset: 0x88, Size: 0x18]
	float Extent;//[Offset: 0xa0, Size: 0x4]
	int Level;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: WorldPartitionLevelStreamingPolicy.WorldPartitionStreamingPolicy.Object
	<FName,FName> SubObjectsToCellRemapping;//[Offset: 0x9f0, Size: 0x50]

--------------------------------
Class: WorldPartitionMiniMap.Info.Actor.Object
	Box MiniMapWorldBounds;//[Offset: 0x278, Size: 0x38]
	Box2D UVOffset;//[Offset: 0x2b0, Size: 0x28]
	Texture2D* MiniMapTexture;//[Offset: 0x2d8, Size: 0x8]
	<ActorDataLayer> ExcludedDataLayers;//[Offset: 0x2e0, Size: 0x50]
	int MiniMapTileSize;//[Offset: 0x330, Size: 0x4]

--------------------------------
Class: WorldPartitionReplay.Actor.Object
	FName[] StreamingSourceNames;//[Offset: 0x278, Size: 0x10]

--------------------------------
Class: SpatialHashRuntimeGridInfo.Info.Actor.Object
	SpatialHashRuntimeGrid GridSettings;//[Offset: 0x278, Size: 0x1]

--------------------------------
Class: SpatialHashRuntimeGrid

--------------------------------
Class: WorldPartitionRuntimeSpatialHash.WorldPartitionRuntimeHash.Object
	SpatialHashStreamingGrid[] StreamingGrids;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: SpatialHashStreamingGrid
	FName GridName;//[Offset: 0x0, Size: 0x8]
	Vector Origin;//[Offset: 0x8, Size: 0x18]
	int CellSize;//[Offset: 0x20, Size: 0x4]
	float LoadingRange;//[Offset: 0x24, Size: 0x4]
	bool bBlockOnSlowStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	LinearColor DebugColor;//[Offset: 0x2c, Size: 0x10]
	SpatialHashStreamingGridLevel[] GridLevels;//[Offset: 0x40, Size: 0x10]
	Box WorldBounds;//[Offset: 0x50, Size: 0x38]
	bool bClientOnlyVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	HLODLayer* HLODLayer;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: SpatialHashStreamingGridLevel
	SpatialHashStreamingGridLayerCell[] LayerCells;//[Offset: 0x0, Size: 0x10]
	<int,int> LayerCellsMapping;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: SpatialHashStreamingGridLayerCell
	WorldPartitionRuntimeSpatialHashCell*[] GridCells;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WorldPartitionStreamingSourceComponent.ActorComponent.Object
	FName TargetGrid;//[Offset: 0xb8, Size: 0x8]
	Color DebugColor;//[Offset: 0xc0, Size: 0x4]
	HLODLayer* TargetHLODLayer;//[Offset: 0xc8, Size: 0x8]
	StreamingSourceShape[] Shapes;//[Offset: 0xd0, Size: 0x10]
	enum Priority;//[Offset: 0xe0, Size: 0x1]
	bool bStreamingSourceEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	enum TargetState;//[Offset: 0xe2, Size: 0x1]
	bool IsStreamingSourceEnabled();// 0x363058eb6041
	bool IsStreamingCompleted();// 0x362f58eb6041
	void EnableStreamingSource();// 0x362e58eb6041
	void DisableStreamingSource();// 0x362d58eb6041

--------------------------------
Class: StreamingSourceShape
	bool bUseGridLoadingRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float Radius;//[Offset: 0x4, Size: 0x4]
	bool bIsSector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float SectorAngle;//[Offset: 0xc, Size: 0x4]
	Vector Location;//[Offset: 0x10, Size: 0x18]
	Rotator Rotation;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: WorldPartitionSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool IsStreamingCompleted(enum QueryState, out const WorldPartitionStreamingQuerySource[] QuerySources, bool bExactState);// 0x363158eb6041

--------------------------------
Class: WorldPartitionStreamingQuerySource
	Vector Location;//[Offset: 0x0, Size: 0x18]
	float Radius;//[Offset: 0x18, Size: 0x4]
	bool bUseGridLoadingRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	FName[] DataLayers;//[Offset: 0x20, Size: 0x10]
	bool bDataLayersOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bSpatialQuery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]

--------------------------------
Class: WorldPartitionVolume.Volume.Brush.Actor.Object

--------------------------------
Class: HierarchicalLODSetup.Object
	HierarchicalSimplification[] HierarchicalLODSetup;//[Offset: 0x28, Size: 0x10]
	MaterialInterface* OverrideBaseMaterial;//[Offset: 0x38, Size: 0x28]

--------------------------------
Class: HierarchicalSimplification
	float TransitionScreenSize;//[Offset: 0x0, Size: 0x4]
	float OverrideDrawDistance;//[Offset: 0x4, Size: 0x4]
	bool bUseOverrideDrawDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bAllowSpecificExclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bSimplifyMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOnlyGenerateClustersForVolumes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bReusePreviousLevelClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	MeshProxySettings ProxySetting;//[Offset: 0xc, Size: 0xb8]
	MeshMergingSettings MergeSetting;//[Offset: 0xc4, Size: 0xb4]
	float DesiredBoundRadius;//[Offset: 0x178, Size: 0x4]
	float DesiredFillingPercentage;//[Offset: 0x17c, Size: 0x4]
	int MinNumberOfActorsToBuild;//[Offset: 0x180, Size: 0x4]

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 0x4]
	float VoxelSize;//[Offset: 0x4, Size: 0x4]
	MaterialProxySettings MaterialSettings;//[Offset: 0x8, Size: 0x94]
	float MergeDistance;//[Offset: 0x9c, Size: 0x4]
	Color UnresolvedGeometryColor;//[Offset: 0xa0, Size: 0x4]
	float MaxRayCastDist;//[Offset: 0xa4, Size: 0x4]
	float HardAngleThreshold;//[Offset: 0xa8, Size: 0x4]
	int LightMapResolution;//[Offset: 0xac, Size: 0x4]
	byte NormalCalculationMethod;//[Offset: 0xb0, Size: 0x1]
	byte LandscapeCullingPrecision;//[Offset: 0xb1, Size: 0x1]
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb2, Size: 0x1]
	bool bOverrideVoxelSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb2, Size: 0x1]
	bool bOverrideTransferDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb2, Size: 0x1]
	bool bUseHardAngleThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb2, Size: 0x1]
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb2, Size: 0x1]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb2, Size: 0x1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb2, Size: 0x1]
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb2, Size: 0x1]
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb3, Size: 0x1]
	bool bGroupIdenticalMeshesForBaking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb3, Size: 0x1]
	bool bCreateCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb3, Size: 0x1]
	bool bAllowVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb3, Size: 0x1]
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb3, Size: 0x1]
	bool bGenerateNaniteEnabledMesh;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb3, Size: 0x1]
	float NaniteProxyTrianglePercent;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: MaterialProxySettings
	byte TextureSizingType;//[Offset: 0x0, Size: 0x1]
	IntPoint TextureSize;//[Offset: 0x4, Size: 0x8]
	float TargetTexelDensityPerMeter;//[Offset: 0xc, Size: 0x4]
	float MeshMaxScreenSizePercent;//[Offset: 0x10, Size: 0x4]
	float MeshMinDrawDistance;//[Offset: 0x14, Size: 0x4]
	float GutterSpace;//[Offset: 0x18, Size: 0x4]
	float MetallicConstant;//[Offset: 0x1c, Size: 0x4]
	float RoughnessConstant;//[Offset: 0x20, Size: 0x4]
	float AnisotropyConstant;//[Offset: 0x24, Size: 0x4]
	float SpecularConstant;//[Offset: 0x28, Size: 0x4]
	float OpacityConstant;//[Offset: 0x2c, Size: 0x4]
	float OpacityMaskConstant;//[Offset: 0x30, Size: 0x4]
	float AmbientOcclusionConstant;//[Offset: 0x34, Size: 0x4]
	byte MaterialMergeType;//[Offset: 0x38, Size: 0x1]
	byte BlendMode;//[Offset: 0x39, Size: 0x1]
	bool bAllowTwoSidedMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a, Size: 0x1]
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a, Size: 0x1]
	bool bTangentMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3a, Size: 0x1]
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3a, Size: 0x1]
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3a, Size: 0x1]
	bool bAnisotropyMap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3a, Size: 0x1]
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3a, Size: 0x1]
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3a, Size: 0x1]
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b, Size: 0x1]
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b, Size: 0x1]
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b, Size: 0x1]
	IntPoint DiffuseTextureSize;//[Offset: 0x3c, Size: 0x8]
	IntPoint NormalTextureSize;//[Offset: 0x44, Size: 0x8]
	IntPoint TangentTextureSize;//[Offset: 0x4c, Size: 0x8]
	IntPoint MetallicTextureSize;//[Offset: 0x54, Size: 0x8]
	IntPoint RoughnessTextureSize;//[Offset: 0x5c, Size: 0x8]
	IntPoint AnisotropyTextureSize;//[Offset: 0x64, Size: 0x8]
	IntPoint SpecularTextureSize;//[Offset: 0x6c, Size: 0x8]
	IntPoint EmissiveTextureSize;//[Offset: 0x74, Size: 0x8]
	IntPoint OpacityTextureSize;//[Offset: 0x7c, Size: 0x8]
	IntPoint OpacityMaskTextureSize;//[Offset: 0x84, Size: 0x8]
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x8c, Size: 0x8]

--------------------------------
Class: MeshMergingSettings
	int TargetLightMapResolution;//[Offset: 0x0, Size: 0x4]
	enum OutputUVs;//[Offset: 0x4, Size: 0x1]
	MaterialProxySettings MaterialSettings;//[Offset: 0xc, Size: 0x94]
	int GutterSize;//[Offset: 0xa0, Size: 0x4]
	int SpecificLOD;//[Offset: 0xa4, Size: 0x4]
	enum LODSelectionType;//[Offset: 0xa8, Size: 0x1]
	bool bGenerateLightMapUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa9, Size: 0x1]
	bool bComputedLightMapResolution;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa9, Size: 0x1]
	bool bPivotPointAtZero;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa9, Size: 0x1]
	bool bMergePhysicsData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa9, Size: 0x1]
	bool bMergeMaterials;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa9, Size: 0x1]
	bool bCreateMergedMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa9, Size: 0x1]
	bool bBakeVertexDataToMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa9, Size: 0x1]
	bool bUseVertexDataForBakingMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa9, Size: 0x1]
	bool bUseTextureBinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1]
	bool bReuseMeshLightmapUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1]
	bool bMergeEquivalentMaterials;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xaa, Size: 0x1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xaa, Size: 0x1]
	bool bIncludeImposters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xaa, Size: 0x1]
	bool bAllowDistanceField;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xaa, Size: 0x1]
	bool bGenerateNaniteEnabledMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xaa, Size: 0x1]
	float NaniteFallbackTrianglePercent;//[Offset: 0xac, Size: 0x4]

--------------------------------
Class: DmgTypeBP_Environmental_C.DamageType.Object

--------------------------------
Class: MaterialExpressionSpriteTextureSampler.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bSampleAdditionalTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	int AdditionalSlotIndex;//[Offset: 0x80, Size: 0x4]
	FText SlotDisplayName;//[Offset: 0x88, Size: 0x18]

--------------------------------
Class: PaperCharacter.Character.Pawn.Actor.Object
	PaperFlipbookComponent* Sprite;//[Offset: 0x5f8, Size: 0x8]

--------------------------------
Class: PaperFlipbookComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperFlipbook* SourceFlipbook;//[Offset: 0x560, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x568, Size: 0x8]
	float PlayRate;//[Offset: 0x570, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x574, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x574, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x574, Size: 0x1]
	float AccumulatedTime;//[Offset: 0x578, Size: 0x4]
	int CachedFrameIndex;//[Offset: 0x57c, Size: 0x4]
	LinearColor SpriteColor;//[Offset: 0x580, Size: 0x10]
	BodySetup* CachedBodySetup;//[Offset: 0x590, Size: 0x8]
	delegate OnFinishedPlaying;//[Offset: 0x598, Size: 0x10]
	void Stop();// 0x1e3658eb6041
	void SetSpriteColor(LinearColor NewColor);// 0x1e3558eb6041
	void SetPlayRate(float NewRate);// 0x1e3458eb6041
	void SetPlaybackPositionInFrames(int NewFramePosition, bool bFireEvents);// 0x1e3358eb6041
	void SetPlaybackPosition(float NewPosition, bool bFireEvents);// 0x1e3258eb6041
	void SetNewTime(float NewTime);// 0x1e3158eb6041
	void SetLooping(bool bNewLooping);// 0x1e3058eb6041
	bool SetFlipbook(PaperFlipbook* NewFlipbook);// 0x1e2f58eb6041
	void ReverseFromEnd();// 0x1e2e58eb6041
	void Reverse();// 0x1e2d58eb6041
	void PlayFromStart();// 0x1e2c58eb6041
	void Play();// 0x1e2b58eb6041
	void OnRep_SourceFlipbook(PaperFlipbook* OldFlipbook);// 0x1e2a58eb6041
	bool IsReversing();// 0x1e2958eb6041
	bool IsPlaying();// 0x1e2858eb6041
	bool IsLooping();// 0x1e2758eb6041
	LinearColor GetSpriteColor();// 0x1e2658eb6041
	float GetPlayRate();// 0xffffff8158eb6000
	int GetPlaybackPositionInFrames();// 0x1e2458eb6041
	float GetPlaybackPosition();// 0x1e2358eb6041
	int GetFlipbookLengthInFrames();// 0x1e2258eb6041
	float GetFlipbookLength();// 0x1e2158eb6041
	float GetFlipbookFramerate();// 0x1e2058eb6041
	PaperFlipbook* GetFlipbook();// 0x1e1f58eb6041

--------------------------------
Class: PaperFlipbook.Object
	float FramesPerSecond;//[Offset: 0x28, Size: 0x4]
	PaperFlipbookKeyFrame[] KeyFrames;//[Offset: 0x30, Size: 0x10]
	MaterialInterface* DefaultMaterial;//[Offset: 0x40, Size: 0x8]
	byte CollisionSource;//[Offset: 0x48, Size: 0x1]
	bool IsValidKeyFrameIndex(int Index);// 0x1e1e58eb6041
	float GetTotalDuration();// 0x1e1d58eb6041
	PaperSprite* GetSpriteAtTime(float Time, bool bClampToEnds);// 0x1e1c58eb6041
	PaperSprite* GetSpriteAtFrame(int FrameIndex);// 0x1e1b58eb6041
	int GetNumKeyFrames();// 0x1e1a58eb6041
	int GetNumFrames();// 0x1e1958eb6041
	int GetKeyFrameIndexAtTime(float Time, bool bClampToEnds);// 0x1e1858eb6041

--------------------------------
Class: PaperFlipbookKeyFrame
	PaperSprite* Sprite;//[Offset: 0x0, Size: 0x8]
	int FrameRun;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PaperSprite.Object
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10]
	Vector2D BakedSourceUV;//[Offset: 0x48, Size: 0x10]
	Vector2D BakedSourceDimension;//[Offset: 0x58, Size: 0x10]
	Texture2D* BakedSourceTexture;//[Offset: 0x68, Size: 0x8]
	MaterialInterface* DefaultMaterial;//[Offset: 0x70, Size: 0x8]
	MaterialInterface* AlternateMaterial;//[Offset: 0x78, Size: 0x8]
	PaperSpriteSocket[] Sockets;//[Offset: 0x80, Size: 0x10]
	byte SpriteCollisionDomain;//[Offset: 0x90, Size: 0x1]
	float PixelsPerUnrealUnit;//[Offset: 0x94, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x98, Size: 0x8]
	int AlternateMaterialSplitIndex;//[Offset: 0xa0, Size: 0x4]
	Vector4[] BakedRenderData;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 0x60]
	FName SocketName;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: PaperFlipbookActor.Actor.Object
	PaperFlipbookComponent* RenderComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: PaperGroupedSpriteActor.Actor.Object
	PaperGroupedSpriteComponent* RenderComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: PaperGroupedSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] InstanceMaterials;//[Offset: 0x560, Size: 0x10]
	SpriteInstanceData[] PerInstanceSpriteData;//[Offset: 0x570, Size: 0x10]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x1e3e58eb6041
	bool UpdateInstanceColor(int InstanceIndex, LinearColor NewInstanceColor, bool bMarkRenderStateDirty);// 0x1e3d58eb6041
	void SortInstancesAlongAxis(Vector WorldSpaceSortAxis);// 0x1e3c58eb6041
	bool RemoveInstance(int InstanceIndex);// 0x1e3b58eb6041
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x1e3a58eb6041
	int GetInstanceCount();// 0x1e3958eb6041
	void ClearInstances();// 0x1e3858eb6041
	int AddInstance(out const Transform Transform, PaperSprite* Sprite, bool bWorldSpace, LinearColor Color);// 0x1e3758eb6041

--------------------------------
Class: SpriteInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x80]
	PaperSprite* SourceSprite;//[Offset: 0x80, Size: 0x8]
	Color VertexColor;//[Offset: 0x88, Size: 0x4]
	int MaterialIndex;//[Offset: 0x8c, Size: 0x4]

--------------------------------
Class: PaperRuntimeSettings.Object
	bool bEnableSpriteAtlasGroups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bEnableTerrainSplineEditing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bResizeSpriteDataToMatchTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: PaperSpriteActor.Actor.Object
	PaperSpriteComponent* RenderComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: PaperSpriteComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperSprite* SourceSprite;//[Offset: 0x560, Size: 0x8]
	MaterialInterface* MaterialOverride;//[Offset: 0x568, Size: 0x8]
	LinearColor SpriteColor;//[Offset: 0x570, Size: 0x10]
	void SetSpriteColor(LinearColor NewColor);// 0x1e4258eb6041
	bool SetSprite(PaperSprite* NewSprite);// 0x1e8358eb6041
	PaperSprite* GetSprite();// 0x1e4058eb6041

--------------------------------
Class: PaperSpriteAtlas.Object

--------------------------------
Class: PaperSpriteBlueprintLibrary.BlueprintFunctionLibrary.Object
	SlateBrush MakeBrushFromSprite(PaperSprite* Sprite, int Width, int Height);// 0x1e3f58eb6041

--------------------------------
Class: PaperTerrainActor.Actor.Object
	SceneComponent* DummyRoot;//[Offset: 0x278, Size: 0x8]
	PaperTerrainSplineComponent* SplineComponent;//[Offset: 0x280, Size: 0x8]
	PaperTerrainComponent* RenderComponent;//[Offset: 0x288, Size: 0x8]

--------------------------------
Class: PaperTerrainSplineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: PaperTerrainComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PaperTerrainMaterial* TerrainMaterial;//[Offset: 0x538, Size: 0x8]
	bool bClosedSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	bool bFilledSpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x541, Size: 0x1]
	PaperTerrainSplineComponent* AssociatedSpline;//[Offset: 0x548, Size: 0x8]
	int RandomSeed;//[Offset: 0x550, Size: 0x4]
	float SegmentOverlapAmount;//[Offset: 0x554, Size: 0x4]
	LinearColor TerrainColor;//[Offset: 0x558, Size: 0x10]
	int ReparamStepsPerSegment;//[Offset: 0x568, Size: 0x4]
	byte SpriteCollisionDomain;//[Offset: 0x56c, Size: 0x1]
	float CollisionThickness;//[Offset: 0x570, Size: 0x4]
	BodySetup* CachedBodySetup;//[Offset: 0x578, Size: 0x8]
	void SetTerrainColor(LinearColor NewColor);// 0x1e4358eb6041

--------------------------------
Class: PaperTerrainMaterial.DataAsset.Object
	PaperTerrainMaterialRule[] Rules;//[Offset: 0x30, Size: 0x10]
	PaperSprite* InteriorFill;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: PaperTerrainMaterialRule
	PaperSprite* StartCap;//[Offset: 0x0, Size: 0x8]
	PaperSprite*[] Body;//[Offset: 0x8, Size: 0x10]
	PaperSprite* EndCap;//[Offset: 0x18, Size: 0x8]
	float MinimumAngle;//[Offset: 0x20, Size: 0x4]
	float MaximumAngle;//[Offset: 0x24, Size: 0x4]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float CollisionOffset;//[Offset: 0x2c, Size: 0x4]
	int DrawOrder;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: PaperTileLayer.Object
	FText LayerName;//[Offset: 0x28, Size: 0x18]
	int LayerWidth;//[Offset: 0x40, Size: 0x4]
	int LayerHeight;//[Offset: 0x44, Size: 0x4]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
	bool bLayerCollides;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 0x1]
	bool bOverrideCollisionThickness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 0x1]
	bool bOverrideCollisionOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 0x1]
	float CollisionThicknessOverride;//[Offset: 0x4c, Size: 0x4]
	float CollisionOffsetOverride;//[Offset: 0x50, Size: 0x4]
	LinearColor LayerColor;//[Offset: 0x54, Size: 0x10]
	int AllocatedWidth;//[Offset: 0x64, Size: 0x4]
	int AllocatedHeight;//[Offset: 0x68, Size: 0x4]
	PaperTileInfo[] AllocatedCells;//[Offset: 0x70, Size: 0x10]
	PaperTileSet* TileSet;//[Offset: 0x80, Size: 0x8]
	int[] AllocatedGrid;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: PaperTileInfo
	PaperTileSet* TileSet;//[Offset: 0x0, Size: 0x8]
	int PackedTileIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: PaperTileSet.Object
	IntPoint TileSize;//[Offset: 0x28, Size: 0x8]
	Texture2D* TileSheet;//[Offset: 0x30, Size: 0x8]
	Texture*[] AdditionalSourceTextures;//[Offset: 0x38, Size: 0x10]
	IntMargin BorderMargin;//[Offset: 0x48, Size: 0x10]
	IntPoint PerTileSpacing;//[Offset: 0x58, Size: 0x8]
	IntPoint DrawingOffset;//[Offset: 0x60, Size: 0x8]
	int WidthInTiles;//[Offset: 0x68, Size: 0x4]
	int HeightInTiles;//[Offset: 0x6c, Size: 0x4]
	int AllocatedWidth;//[Offset: 0x70, Size: 0x4]
	int AllocatedHeight;//[Offset: 0x74, Size: 0x4]
	PaperTileMetadata[] PerTileData;//[Offset: 0x78, Size: 0x10]
	PaperTileSetTerrain[] Terrains;//[Offset: 0x88, Size: 0x10]
	int TileWidth;//[Offset: 0x98, Size: 0x4]
	int TileHeight;//[Offset: 0x9c, Size: 0x4]
	int Margin;//[Offset: 0xa0, Size: 0x4]
	int Spacing;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: IntMargin
	int Left;//[Offset: 0x0, Size: 0x4]
	int Top;//[Offset: 0x4, Size: 0x4]
	int Right;//[Offset: 0x8, Size: 0x4]
	int Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PaperTileMetadata
	FName UserDataName;//[Offset: 0x0, Size: 0x8]
	SpriteGeometryCollection CollisionData;//[Offset: 0x8, Size: 0x30]
	byte TerrainMembership;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: SpriteGeometryCollection
	SpriteGeometryShape[] Shapes;//[Offset: 0x0, Size: 0x10]
	byte GeometryType;//[Offset: 0x10, Size: 0x1]
	int PixelsPerSubdivisionX;//[Offset: 0x14, Size: 0x4]
	int PixelsPerSubdivisionY;//[Offset: 0x18, Size: 0x4]
	bool bAvoidVertexMerging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float AlphaThreshold;//[Offset: 0x20, Size: 0x4]
	float DetailAmount;//[Offset: 0x24, Size: 0x4]
	float SimplifyEpsilon;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: SpriteGeometryShape
	enum ShapeType;//[Offset: 0x0, Size: 0x1]
	Vector2D[] Vertices;//[Offset: 0x8, Size: 0x10]
	Vector2D BoxSize;//[Offset: 0x18, Size: 0x10]
	Vector2D BoxPosition;//[Offset: 0x28, Size: 0x10]
	float Rotation;//[Offset: 0x38, Size: 0x4]
	bool bNegativeWinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: PaperTileSetTerrain
	FString TerrainName;//[Offset: 0x0, Size: 0x10]
	int CenterTileIndex;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: PaperTileMap.Object
	int MapWidth;//[Offset: 0x28, Size: 0x4]
	int MapHeight;//[Offset: 0x2c, Size: 0x4]
	int TileWidth;//[Offset: 0x30, Size: 0x4]
	int TileHeight;//[Offset: 0x34, Size: 0x4]
	float PixelsPerUnrealUnit;//[Offset: 0x38, Size: 0x4]
	float SeparationPerTileX;//[Offset: 0x3c, Size: 0x4]
	float SeparationPerTileY;//[Offset: 0x40, Size: 0x4]
	float SeparationPerLayer;//[Offset: 0x44, Size: 0x4]
	PaperTileSet* SelectedTileSet;//[Offset: 0x48, Size: 0x28]
	MaterialInterface* Material;//[Offset: 0x70, Size: 0x8]
	PaperTileLayer*[] TileLayers;//[Offset: 0x78, Size: 0x10]
	float CollisionThickness;//[Offset: 0x88, Size: 0x4]
	byte SpriteCollisionDomain;//[Offset: 0x8c, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x8d, Size: 0x1]
	int HexSideLength;//[Offset: 0x90, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x98, Size: 0x8]
	int LayerNameIndex;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: PaperTileMapActor.Actor.Object
	PaperTileMapComponent* RenderComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: PaperTileMapComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int MapWidth;//[Offset: 0x55c, Size: 0x4]
	int MapHeight;//[Offset: 0x560, Size: 0x4]
	int TileWidth;//[Offset: 0x564, Size: 0x4]
	int TileHeight;//[Offset: 0x568, Size: 0x4]
	PaperTileSet* DefaultLayerTileSet;//[Offset: 0x570, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x578, Size: 0x8]
	PaperTileLayer*[] TileLayers;//[Offset: 0x580, Size: 0x10]
	LinearColor TileMapColor;//[Offset: 0x590, Size: 0x10]
	int UseSingleLayerIndex;//[Offset: 0x5a0, Size: 0x4]
	bool bUseSingleLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 0x1]
	PaperTileMap* TileMap;//[Offset: 0x5a8, Size: 0x8]
	void SetTileMapColor(LinearColor NewColor);// 0x1ebb58eb6041
	bool SetTileMap(PaperTileMap* NewTileMap);// 0x1eba58eb6041
	void SetTile(int X, int Y, int Layer, PaperTileInfo NewValue);// 0x1eb958eb6041
	void SetLayerColor(LinearColor NewColor, int Layer);// 0x1eb858eb6041
	void SetLayerCollision(int Layer, bool bHasCollision, bool bOverrideThickness, float CustomThickness, bool bOverrideOffset, float CustomOffset, bool bRebuildCollision);// 0x1eb758eb6041
	void SetDefaultCollisionThickness(float Thickness, bool bRebuildCollision);// 0x1eb658eb6041
	void ResizeMap(int NewWidthInTiles, int NewHeightInTiles);// 0x1eb558eb6041
	void RebuildCollision();// 0x1eb458eb6041
	bool OwnsTileMap();// 0x1eb358eb6041
	void MakeTileMapEditable();// 0x1eb258eb6041
	void GetTilePolygon(int TileX, int TileY, out Vector[] Points, int LayerIndex, bool bWorldSpace);// 0x1eb158eb6041
	LinearColor GetTileMapColor();// 0x1eb058eb6041
	Vector GetTileCornerPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0x1eaf58eb6041
	Vector GetTileCenterPosition(int TileX, int TileY, int LayerIndex, bool bWorldSpace);// 0x1eae58eb6041
	PaperTileInfo GetTile(int X, int Y, int Layer);// 0x1ead58eb6041
	void GetMapSize(out int MapWidth, out int MapHeight, out int NumLayers);// 0x1eac58eb6041
	LinearColor GetLayerColor(int Layer);// 0x1eab58eb6041
	void CreateNewTileMap(int MapWidth, int MapHeight, int TileWidth, int TileHeight, float PixelsPerUnrealUnit, bool bCreateLayer);// 0x1eaa58eb6041
	PaperTileLayer* AddNewLayer();// 0x1ea958eb6041

--------------------------------
Class: TileMapBlueprintLibrary.BlueprintFunctionLibrary.Object
	PaperTileInfo MakeTile(int TileIndex, PaperTileSet* TileSet, bool bFlipH, bool bFlipV, bool bFlipD);// 0x1ebf58eb6041
	FName GetTileUserData(PaperTileInfo Tile);// 0x1ebe58eb6041
	Transform GetTileTransform(PaperTileInfo Tile);// 0x1ebd58eb6041
	void BreakTile(PaperTileInfo Tile, out int TileIndex, out PaperTileSet* TileSet, out bool bFlipH, out bool bFlipV, out bool bFlipD);// 0x1ebc58eb6041

--------------------------------
Class: AngelscriptAllScriptRootsCommandlet.Commandlet.Object

--------------------------------
Class: AngelscriptSettings.Object
	FString[] PreprocessorFlags;//[Offset: 0x28, Size: 0x10]
	bool bAllowScriptAssetReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bAutomaticImports;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bWarnOnManualImportStatements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	enum MathNamespace;//[Offset: 0x3b, Size: 0x1]
	enum DefaultPropertyEditSpecifier;//[Offset: 0x3c, Size: 0x1]
	enum DefaultPropertyEditSpecifierForStructs;//[Offset: 0x3d, Size: 0x1]
	enum DefaultPropertyBlueprintSpecifier;//[Offset: 0x3e, Size: 0x1]
	bool bMarkNonUpropertyPropertiesAsTransient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 0x1]
	bool bStripBlueprintLibraryNamespaceSuffix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	float EditorMaximumScriptExecutionTime;//[Offset: 0x44, Size: 0x4]
	bool bScriptFloatIsFloat64;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bDeprecateDoubleType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool bWarnOnFloatConstantsForDoubleValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool bWarnIntegerDivision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]

--------------------------------
Class: AngelscriptTestCommandlet.Commandlet.Object

--------------------------------
Class: AngelscriptTestSettings.DeveloperSettings.Object
	FString IntegrationTestMapRoot;//[Offset: 0x38, Size: 0x10]
	bool bRunUnitTestsOnHotReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	int LimitNModulesToTestOnHotReload;//[Offset: 0x4c, Size: 0x4]
	int GarbageCollectEveryNTests;//[Offset: 0x50, Size: 0x4]
	class GameInstance* UnitTestGameInstanceClass;//[Offset: 0x58, Size: 0x28]
	bool bEnableCodeCoverage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	FString[] CoverageExcludePatterns;//[Offset: 0x88, Size: 0x10]
	bool bEnableDebugBreaksInTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	FString IntegrationTestNamingConvention;//[Offset: 0xa0, Size: 0x10]
	FString UnitTestNamingConvention;//[Offset: 0xb0, Size: 0x10]
	bool bEnableNetworkEmulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
	int InPacketsMinLatency;//[Offset: 0xd4, Size: 0x4]
	int InPacketsMaxLatency;//[Offset: 0xd8, Size: 0x4]
	int InPacketsPacketLossPercentage;//[Offset: 0xdc, Size: 0x4]
	int OutPacketsMinLatency;//[Offset: 0xe0, Size: 0x4]
	int OutPacketsMaxLatency;//[Offset: 0xe4, Size: 0x4]
	int OutPacketsPacketLossPercentage;//[Offset: 0xe8, Size: 0x4]

--------------------------------
Class: ASClass.Class.Struct.Field.Object

--------------------------------
Class: ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_NotThreadSafe.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_NoParams.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_DWordArg.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_QWordArg.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_FloatArg.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_FloatExtendedToDoubleArg.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_FloatExtendedToDoubleReturn.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_DoubleArg.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_ByteArg.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_ReferenceArg.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_ObjectReturn.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_DWordReturn.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_FloatReturn.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASFunction_ByteReturn.ASFunction.Function.Struct.Field.Object

--------------------------------
Class: ASStruct.ScriptStruct.Struct.Field.Object

--------------------------------
Class: FakeNetDriver.NetDriver.Object

--------------------------------
Class: GameplayLibrary.Object
	void AsyncSaveGameToSlot(SaveGame* SaveGameObject, FString SlotName, const int UserIndex, delegate Delegate);// 0x1ec158eb6041
	void AsyncLoadGameFromSlot(FString SlotName, const int UserIndex, delegate Delegate);// 0x1ec058eb6041

--------------------------------
Class: GameplayTagContainerMixinLibrary.Object
	void RemoveTags(out GameplayTagContainer GameplayTagContainer, GameplayTagContainer TagsToRemove);// 0x1ed558eb6041
	bool RemoveTag(out GameplayTagContainer GameplayTagContainer, out const GameplayTag TagToRemove);// 0x1ed458eb6041
	int Num(out const GameplayTagContainer GameplayTagContainer);// 0x1ed358eb6041
	bool MatchesQuery(out const GameplayTagContainer GameplayTagContainer, out const GameplayTagQuery Query);// 0x1ed258eb6041
	GameplayTag Last(out const GameplayTagContainer GameplayTagContainer);// 0x1ed158eb6041
	bool IsValid(out const GameplayTagContainer GameplayTagContainer);// 0x1ed058eb6041
	bool IsEmpty(out const GameplayTagContainer GameplayTagContainer);// 0x1ecf58eb6041
	bool HasTagExact(out const GameplayTagContainer GameplayTagContainer, out const GameplayTag TagToCheck);// 0x1ece58eb6041
	bool HasTag(out const GameplayTagContainer GameplayTagContainer, out const GameplayTag TagToCheck);// 0x1ecd58eb6041
	bool HasAnyExact(out const GameplayTagContainer GameplayTagContainer, out const GameplayTagContainer ContainerToCheck);// 0x1ecc58eb6041
	bool HasAny(out const GameplayTagContainer GameplayTagContainer, out const GameplayTagContainer ContainerToCheck);// 0x1ecb58eb6041
	bool HasAllExact(out const GameplayTagContainer GameplayTagContainer, out const GameplayTagContainer ContainerToCheck);// 0x1eca58eb6041
	bool HasAll(out const GameplayTagContainer GameplayTagContainer, out const GameplayTagContainer ContainerToCheck);// 0x1ec958eb6041
	GameplayTagContainer GetGameplayTagParents(out const GameplayTagContainer GameplayTagContainer);// 0x1ec858eb6041
	GameplayTag First(out const GameplayTagContainer GameplayTagContainer);// 0x1ec758eb6041
	GameplayTagContainer FilterExact(out const GameplayTagContainer GameplayTagContainer, out const GameplayTagContainer OtherContainer);// 0x1ec658eb6041
	GameplayTagContainer Filter(out const GameplayTagContainer GameplayTagContainer, out const GameplayTagContainer OtherContainer);// 0x1f0758eb6041
	void AddTagFast(out GameplayTagContainer GameplayTagContainer, out const GameplayTag TagToAdd);// 0x1ec458eb6041
	void AddTag(out GameplayTagContainer GameplayTagContainer, out const GameplayTag TagToAdd);// 0x1ec358eb6041
	void AddLeafTag(out GameplayTagContainer GameplayTagContainer, out const GameplayTag TagToAdd);// 0x1ec258eb6041

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 0x10]
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 0x4]
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 0x10]
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 0x10]
	FString UserDescription;//[Offset: 0x28, Size: 0x10]
	FString AutoDescription;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: GameplayTagMixinLibrary.Object
	GameplayTag RequestDirectParent(out const GameplayTag GameplayTag);// 0x1ede58eb6041
	bool MatchesTagExact(out const GameplayTag GameplayTag, out const GameplayTag TagToCheck);// 0x1edd58eb6041
	int MatchesTagDepth(out const GameplayTag GameplayTag, out const GameplayTag TagToCheck);// 0x1edc58eb6041
	bool MatchesTag(out const GameplayTag GameplayTag, out const GameplayTag TagToCheck);// 0x1edb58eb6041
	bool MatchesAnyExact(out const GameplayTag GameplayTag, out const GameplayTagContainer ContainerToCheck);// 0x1eda58eb6041
	bool MatchesAny(out const GameplayTag GameplayTag, out const GameplayTagContainer ContainerToCheck);// 0x1ed958eb6041
	bool IsValid(out const GameplayTag GameplayTag);// 0x1ed858eb6041
	GameplayTagContainer GetSingleTagContainer(out const GameplayTag GameplayTag);// 0x1ed758eb6041
	GameplayTagContainer GetGameplayTagParents(out const GameplayTag GameplayTag);// 0x1ed658eb6041

--------------------------------
Class: GameplayTagQueryMixinLibrary.Object
	bool Matches(out const GameplayTagQuery GameplayTagQuery, out const GameplayTagContainer Tags);// 0x1ee158eb6041
	bool IsEmpty(out const GameplayTagQuery GameplayTagQuery);// 0x1ee058eb6041
	FString GetDescription(out const GameplayTagQuery GameplayTagQuery);// 0x1edf58eb6041

--------------------------------
Class: InputComponentScriptMixinLibrary.Object
	void BindVectorAxis(InputComponent* Component, out const Key AxisKey, out const delegate Delegate);// 0x1ee758eb6041
	void BindKey(InputComponent* Component, out const Key Key, byte KeyEvent, out const delegate Delegate, bool bConsumeInput);// 0x1f2858eb6041
	void BindChord(InputComponent* Component, out const InputChord Chord, byte KeyEvent, out const delegate Delegate);// 0x1ee558eb6041
	void BindAxisKey(InputComponent* Component, out const FName AxisKey, out const delegate Delegate);// 0x1ee458eb6041
	void BindAxis(InputComponent* Component, out const FName AxisName, out const delegate Delegate);// 0x1ee358eb6041
	void BindAction(InputComponent* Component, out const FName ActionName, byte KeyEvent, out const delegate Delegate);// 0x1ee258eb6041

--------------------------------
Class: PlayerControllerInputScriptMixinLibrary.Object
	void PushInputComponent(PlayerController* PlayerController, InputComponent* Component);// 0x1eea58eb6041
	void PopInputComponent(PlayerController* PlayerController, InputComponent* Component);// 0x1ee958eb6041
	PlayerInput* GetPlayerInput(PlayerController* PlayerController);// 0x1ee858eb6041

--------------------------------
Class: PlayerInputScriptMixinLibrary.Object
	void SetMouseSensitivity(PlayerInput* PlayerInput, const float Sensitivity);// 0x1ef758eb6041
	void RemoveAxisMapping(PlayerInput* PlayerInput, out const InputAxisKeyMapping KeyMapping);// 0x1ef658eb6041
	void RemoveActionMapping(PlayerInput* PlayerInput, out const InputActionKeyMapping KeyMapping);// 0x1ef558eb6041
	void InvertAxis(PlayerInput* PlayerInput, const FName AxisName);// 0x1ef458eb6041
	float GetMouseSensitivityY(PlayerInput* PlayerInput);// 0x1ef358eb6041
	float GetMouseSensitivityX(PlayerInput* PlayerInput);// 0x1ef258eb6041
	InputAxisKeyMapping[] GetKeysForAxis(PlayerInput* PlayerInput, const FName AxisName);// 0x1ef158eb6041
	InputActionKeyMapping[] GetKeysForAction(PlayerInput* PlayerInput, const FName ActionName);// 0x1ef058eb6041
	InputAxisKeyMapping[] GetEngineDefinedAxisMappings(PlayerInput* PlayerInput, const FName AxisName);// 0x1eef58eb6041
	InputActionKeyMapping[] GetEngineDefinedActionMappings(PlayerInput* PlayerInput, const FName ActionName);// 0x1eee58eb6041
	void ForceRebuildingKeyMaps(PlayerInput* PlayerInput, const bool bRestoreDefaults);// 0x1eed58eb6041
	void AddAxisMapping(PlayerInput* PlayerInput, out const InputAxisKeyMapping KeyMapping);// 0x1eec58eb6041
	void AddActionMapping(PlayerInput* PlayerInput, out const InputActionKeyMapping KeyMapping);// 0x1eeb58eb6041

--------------------------------
Class: TestTerminatorComponent.ActorComponent.Object
	void ServerTerminatorReplicated();// 0x1ef858eb6041

--------------------------------
Class: TestTerminator.Actor.Object

--------------------------------
Class: LatentAutomationCommand.Object
	World* World;//[Offset: 0x28, Size: 0x8]
	bool bAllowTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bAlsoRunOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool UpdateOnClient();// 0x1f0158eb6041
	bool Update();// 0x1f0058eb6041
	bool HasAuthority();// 0x1eff58eb6041
	FString DescribeOnClient();// 0x1efe58eb6041
	FString Describe();// 0x1efd58eb6041
	bool BeforeOnClient();// 0x1efc58eb6041
	void Before();// 0x1efb58eb6041
	bool AfterOnClient();// 0x1efa58eb6041
	void After();// 0x1ef958eb6041

--------------------------------
Class: LatentAutomationCommandClientExecutor.Actor.Object
	LatentAutomationCommand* LatentCommand;//[Offset: 0x290, Size: 0x8]
	bool bCanStartBefore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	bool bCanStartUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1]
	bool bCanStartAfter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 0x1]
	void ServerLatentCommandDescribeOnClient(FString NewDescription);// 0x1f1358eb6041
	void ServerLatentCommandClientReady();// 0x1f1258eb6041
	void ServerLatentCommandClientDone();// 0x1f1158eb6041
	void ServerLatentCommandClientChecked();// 0x1f1058eb6041
	void ServerFail(FString Message);// 0x1f0f58eb6041
	void ServerAssertTrue(bool bExpression, FString Message);// 0x1f0e58eb6041
	void ServerAssertSame(const Object* Expected, const Object* Actual, FString Message);// 0x1f0d58eb6041
	void ServerAssertNull(const Object* Object, FString Message);// 0x1f0c58eb6041
	void ServerAssertNotSame(const Object* Expected, const Object* Actual, FString Message);// 0x1f0b58eb6041
	void ServerAssertNotNull(const Object* Object, FString Message);// 0x1f0a58eb6041
	void ServerAssertFalse(bool bExpression, FString Message);// 0x1f0958eb6041
	void Fail(FString Message);// 0x1f0858eb6041
	void AssertTrue(bool bExpression, FString Message);// 0x1f4958eb6041
	void AssertSame(const Object* Expected, const Object* Actual, FString Message);// 0x1f0658eb6041
	void AssertNull(const Object* Object, FString Message);// 0x1f0558eb6041
	void AssertNotSame(const Object* Expected, const Object* Actual, FString Message);// 0x1f0458eb6041
	void AssertNotNull(const Object* Object, FString Message);// 0x1f0358eb6041
	void AssertFalse(bool bExpression, FString Message);// 0x1f0258eb6041

--------------------------------
Class: RuntimeFloatCurveMixinLibrary.Object
	void GetValueRange_Double(out const RuntimeFloatCurve Target, out double MinValue, out double MaxValue);// 0x1f1b58eb6041
	void GetValueRange(out const RuntimeFloatCurve Target, out float MinValue, out float MaxValue);// 0x1f1a58eb6041
	void GetTimeRange_Double(out const RuntimeFloatCurve Target, out double MinTime, out double MaxTime);// 0x1f1958eb6041
	void GetTimeRange(out const RuntimeFloatCurve Target, out float MinTime, out float MaxTime);// 0x1f1858eb6041
	int GetNumKeys(out const RuntimeFloatCurve Target);// 0x1f1758eb6041
	float GetFloatValue(out const RuntimeFloatCurve Target, const float InTime, const float DefaultValue);// 0x1f1658eb6041
	bool Equals(out const RuntimeFloatCurve Target, out const RuntimeFloatCurve Other);// 0x1f1558eb6041
	void AddDefaultKey(out RuntimeFloatCurve Target, float InTime, float InValue);// 0x1f1458eb6041

--------------------------------
Class: ScriptEngineSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	bool bIsTickableWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bIsTickableInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	void BP_Tick(float DeltaTime);// 0x1f1f58eb6041
	bool BP_ShouldCreateSubsystem(Object* Outer);// 0x1f1e58eb6041
	void BP_Initialize();// 0x1f1d58eb6041
	void BP_Deinitialize();// 0x1f1c58eb6041

--------------------------------
Class: ScriptGameInstanceSubsystem.GameInstanceSubsystem.Subsystem.Object
	bool BP_ShouldCreateSubsystem(Object* Outer);// 0x1f2358eb6041
	void BP_Initialize();// 0x1f2258eb6041
	GameInstance* BP_GetGameInstance();// 0x1f2158eb6041
	void BP_Deinitialize();// 0x1f2058eb6041

--------------------------------
Class: ScriptLocalPlayerSubsystem.LocalPlayerSubsystem.Subsystem.Object
	bool BP_ShouldCreateSubsystem(Object* Outer);// 0x1f2758eb6041
	void BP_Initialize();// 0x1f2658eb6041
	LocalPlayer* BP_GetLocalPlayer();// 0x1f2558eb6041
	void BP_Deinitialize();// 0x1f2458eb6041

--------------------------------
Class: ScriptWorldSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool bCreateForLevelEditorWorlds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bCreateForGameWorlds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	void BP_UpdateStreamingState();// 0x1f2f58eb6041
	void BP_Tick(float DeltaTime);// 0x1f2e58eb6041
	bool BP_ShouldCreateSubsystem(Object* Outer);// 0x1f2d58eb6041
	void BP_PostInitialize();// 0x1f2c58eb6041
	void BP_OnWorldComponentsUpdated();// 0x1f2b58eb6041
	void BP_OnWorldBeginPlay();// 0x1f2a58eb6041
	void BP_Initialize();// 0x1f2958eb6041
	void BP_Deinitialize();// 0x1f6558eb6041

--------------------------------
Class: SoftReferenceStatics.Object

--------------------------------
Class: SubsystemLibrary.Object
	WorldSubsystem* GetWorldSubsystem(Object* WorldContextObject, class WorldSubsystem Class);// 0x1f3558eb6041
	LocalPlayerSubsystem* GetLocalPlayerSubsystemFromPlayerController(PlayerController* PlayerController, class LocalPlayerSubsystem Class);// 0x1f3458eb6041
	LocalPlayerSubsystem* GetLocalPlayerSubsystemFromLocalPlayer(Object* WorldContextObject, LocalPlayer* LocalPlayer, class LocalPlayerSubsystem Class);// 0x1f3358eb6041
	LocalPlayerSubsystem* GetLocalPlayerSubsystem(Object* WorldContextObject, class LocalPlayerSubsystem Class);// 0x1f3258eb6041
	GameInstanceSubsystem* GetGameInstanceSubsystem(Object* WorldContextObject, class GameInstanceSubsystem Class);// 0x1f3158eb6041
	EngineSubsystem* GetEngineSubsystem(class EngineSubsystem Class);// 0x1f3058eb6041

--------------------------------
Class: TimelineComponentMixinLibrary.Object
	void SetTimelineFinishedFunc(TimelineComponent* Component, delegate NewTimelineFinishedFunc);// 0x1f3a58eb6041
	void AddInterpVector(TimelineComponent* Component, CurveVector* VectorCurve, delegate InterpFunc, FName PropertyName, FName TrackName);// 0x1f3958eb6041
	void AddInterpLinearColor(TimelineComponent* Component, CurveLinearColor* LinearColorCurve, delegate InterpFunc, FName PropertyName, FName TrackName);// 0x1f3858eb6041
	void AddInterpFloat(TimelineComponent* Component, CurveFloat* FloatCurve, delegate InterpFunc, FName PropertyName, FName TrackName);// 0x1f3758eb6041
	void AddEvent(TimelineComponent* Component, float Time, delegate EventFunc);// 0x1f3658eb6041

--------------------------------
Class: AssetManagerMixinLibrary.Object
	void GetPrimaryAssetTypeInfoList(AssetManager* AssetManager, out PrimaryAssetTypeInfo[] AssetTypeInfoList);// 0x1f4158eb6041
	bool GetPrimaryAssetTypeInfo(AssetManager* AssetManager, PrimaryAssetType PrimaryAssetType, out PrimaryAssetTypeInfo AssetTypeInfo);// 0x1f4058eb6041
	Object* GetPrimaryAssetObject(AssetManager* AssetManager, out const PrimaryAssetId PrimaryAssetId);// 0x1f3f58eb6041
	bool GetPrimaryAssetIdList(AssetManager* AssetManager, PrimaryAssetType PrimaryAssetType, out PrimaryAssetId[] PrimaryAssetIdList);// 0x1f3e58eb6041
	PrimaryAssetId GetPrimaryAssetIdForObject(AssetManager* AssetManager, Object* Object);// 0x1f3d58eb6041
	bool GetPrimaryAssetDataList(AssetManager* AssetManager, PrimaryAssetType PrimaryAssetType, out AssetData[] AssetDataList);// 0x1f3c58eb6041
	bool GetPrimaryAssetData(AssetManager* AssetManager, out PrimaryAssetId PrimaryAssetId, out AssetData AssetData);// 0x1f3b58eb6041

--------------------------------
Class: AssetData
	FName ObjectPath;//[Offset: 0x0, Size: 0x8]
	FName PackageName;//[Offset: 0x8, Size: 0x8]
	FName PackagePath;//[Offset: 0x10, Size: 0x8]
	FName AssetName;//[Offset: 0x18, Size: 0x8]
	FName AssetClass;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: ObjectInWorld.Object
	World* World;//[Offset: 0x28, Size: 0x8]
	void SetWorldContext(Object* WorldContext);// 0x1f4458eb6041
	void SetWorld(World* InWorld);// 0x1f4358eb6041
	void DestroyObject();// 0x1f4258eb6041

--------------------------------
Class: ObjectTickable.Object
	World* World;//[Offset: 0x30, Size: 0x8]
	bool bTickWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	void SetWorldContext(Object* WorldContext);// 0x1f4858eb6041
	void SetWorld(World* InWorld);// 0x1f4758eb6041
	void DestroyObject();// 0x1f4658eb6041
	void BP_Tick(float DeltaTime);// 0x1f4558eb6041

--------------------------------
Class: WidgetBlueprintStatics.Object
	UserWidget* CreateWidget(Object* WorldContextObject, class UserWidget WidgetType, PlayerController* OwningPlayer);// 0xffffff8158eb6000

--------------------------------
Class: WorldCollisionStatics.Object

--------------------------------
Class: ControlRig.Object
	enum ExecutionType;//[Offset: 0x46, Size: 0x1]
	RigVMRuntimeSettings VMRuntimeSettings;//[Offset: 0x50, Size: 0x50]
	<RigElementKey,RigControlElementCustomization> ControlCustomizations;//[Offset: 0xa0, Size: 0x50]
	RigVM* VM;//[Offset: 0xf0, Size: 0x8]
	RigHierarchy* DynamicHierarchy;//[Offset: 0xf8, Size: 0x8]
	ControlRigShapeLibrary* GizmoLibrary;//[Offset: 0x100, Size: 0x28]
	ControlRigShapeLibrary*[] ShapeLibraries;//[Offset: 0x128, Size: 0x10]
	<FName,CachedPropertyPath> InputProperties;//[Offset: 0x148, Size: 0x50]
	<FName,CachedPropertyPath> OutputProperties;//[Offset: 0x198, Size: 0x50]
	ControlRigDrawContainer DrawContainer;//[Offset: 0x288, Size: 0x18]
	AnimationDataSourceRegistry* DataSourceRegistry;//[Offset: 0x2b8, Size: 0x8]
	FName[] EventQueue;//[Offset: 0x2c0, Size: 0x10]
	RigInfluenceMapPerEvent Influences;//[Offset: 0x378, Size: 0x60]
	ControlRig* InteractionRig;//[Offset: 0x3d8, Size: 0x8]
	class ControlRig* InteractionRigClass;//[Offset: 0x3e0, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x3e8, Size: 0x10]
	bool SupportsEvent(out const FName InEventName);// 0x1f6458eb6041
	bool SetVariableFromString(out const FName InVariableName, FString InValue);// 0x1f6358eb6041
	void SetInteractionRigClass(class ControlRig InInteractionRigClass);// 0x1f6258eb6041
	void SetInteractionRig(ControlRig* InInteractionRig);// 0x1f6158eb6041
	void SetFramesPerSecond(float InFramesPerSecond);// 0x1f6058eb6041
	void SetDeltaTime(float InDeltaTime);// 0x1f5f58eb6041
	void SetAbsoluteTime(float InAbsoluteTime, bool InSetDeltaTimeZero);// 0x1f5e58eb6041
	void SetAbsoluteAndDeltaTime(float InAbsoluteTime, float InDeltaTime);// 0x1f5d58eb6041
	void SelectControl(out const FName InControlName, bool bSelect);// 0x1f5c58eb6041
	void RequestSetup();// 0x1f5b58eb6041
	void RequestInit();// 0x1f5a58eb6041
	bool IsControlSelected(out const FName InControlName);// 0x1f5958eb6041
	RigVM* GetVM();// 0x1f5858eb6041
	FName GetVariableType(out const FName InVariableName);// 0x1f5758eb6041
	FString GetVariableAsString(out const FName InVariableName);// 0x1f5658eb6041
	FName[] GetSupportedEvents();// 0x1f5558eb6041
	FName[] GetScriptAccessibleVariables();// 0x1f5458eb6041
	class ControlRig GetInteractionRigClass();// 0x1f5358eb6041
	ControlRig* GetInteractionRig();// 0x1f5258eb6041
	RigHierarchy* GetHierarchy();// 0x1f5158eb6041
	float GetCurrentFramesPerSecond();// 0x1f5058eb6041
	float GetAbsoluteTime();// 0x1f4f58eb6041
	ControlRig*[] FindControlRigs(Object* Outer, class ControlRig OptionalClass);// 0x1f4e58eb6041
	void Execute(const enum State, out const FName InEventName);// 0x1f4d58eb6041
	FName[] CurrentControlSelection();// 0x1f4c58eb6041
	bool ClearControlSelection();// 0x1f4b58eb6041
	bool CanExecute();// 0x1f4a58eb6041

--------------------------------
Class: RigVMRuntimeSettings
	int MaximumArraySize;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: RigElementKey
	enum Type;//[Offset: 0x0, Size: 0x1]
	FName Name;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: RigControlElementCustomization
	RigElementKey[] AvailableSpaces;//[Offset: 0x0, Size: 0x10]
	RigElementKey[] RemovedSpaces;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: RigVM.Object
	RigVMMemoryStorage* WorkMemoryStorageObject;//[Offset: 0x28, Size: 0x8]
	RigVMMemoryStorage* LiteralMemoryStorageObject;//[Offset: 0x30, Size: 0x8]
	RigVMMemoryStorage* DebugMemoryStorageObject;//[Offset: 0x38, Size: 0x8]
	RigVMByteCode ByteCodeStorage;//[Offset: 0x60, Size: 0x30]
	RigVMInstructionArray Instructions;//[Offset: 0x98, Size: 0x10]
	RigVMExecuteContext Context;//[Offset: 0xb0, Size: 0xc0]
	uint32 NumExecutions;//[Offset: 0x170, Size: 0x4]
	FName[] FunctionNamesStorage;//[Offset: 0x178, Size: 0x10]
	RigVMParameter[] Parameters;//[Offset: 0x1a8, Size: 0x10]
	<FName,int> ParametersNameMap;//[Offset: 0x1b8, Size: 0x50]
	RigVM* DeferredVMToCopy;//[Offset: 0x2a0, Size: 0x8]
	void SetParameterValueVector2D(out const FName InParameterName, out const Vector2D InValue, int InArrayIndex);// 0x374358eb6041
	void SetParameterValueVector(out const FName InParameterName, out const Vector InValue, int InArrayIndex);// 0x374258eb6041
	void SetParameterValueTransform(out const FName InParameterName, out const Transform InValue, int InArrayIndex);// 0x374158eb6041
	void SetParameterValueString(out const FName InParameterName, FString InValue, int InArrayIndex);// 0x374058eb6041
	void SetParameterValueQuat(out const FName InParameterName, out const Quat InValue, int InArrayIndex);// 0x373f58eb6041
	void SetParameterValueName(out const FName InParameterName, out const FName InValue, int InArrayIndex);// 0x373e58eb6041
	void SetParameterValueInt(out const FName InParameterName, int InValue, int InArrayIndex);// 0xffffff8158eb6000
	void SetParameterValueFloat(out const FName InParameterName, float InValue, int InArrayIndex);// 0x373c58eb6041
	void SetParameterValueDouble(out const FName InParameterName, double InValue, int InArrayIndex);// 0x373b58eb6041
	void SetParameterValueBool(out const FName InParameterName, bool InValue, int InArrayIndex);// 0x373a58eb6041
	RigVMStatistics GetStatistics();// 0x373958eb6041
	FString GetRigVMFunctionName(int InFunctionIndex);// 0x373858eb6041
	Vector2D GetParameterValueVector2D(out const FName InParameterName, int InArrayIndex);// 0x373758eb6041
	Vector GetParameterValueVector(out const FName InParameterName, int InArrayIndex);// 0x373658eb6041
	Transform GetParameterValueTransform(out const FName InParameterName, int InArrayIndex);// 0x373558eb6041
	FString GetParameterValueString(out const FName InParameterName, int InArrayIndex);// 0x373458eb6041
	Quat GetParameterValueQuat(out const FName InParameterName, int InArrayIndex);// 0x373358eb6041
	FName GetParameterValueName(out const FName InParameterName, int InArrayIndex);// 0x373258eb6041
	int GetParameterValueInt(out const FName InParameterName, int InArrayIndex);// 0x373158eb6041
	float GetParameterValueFloat(out const FName InParameterName, int InArrayIndex);// 0x373058eb6041
	double GetParameterValueDouble(out const FName InParameterName, int InArrayIndex);// 0x372f58eb6041
	bool GetParameterValueBool(out const FName InParameterName, int InArrayIndex);// 0x372e58eb6041
	bool Execute(out const FName InEntryName);// 0x372d58eb6041
	int AddRigVMFunction(ScriptStruct* InRigVMStruct, out const FName InMethodName);// 0x372c58eb6041

--------------------------------
Class: RigVMMemoryStorage.Object

--------------------------------
Class: RigVMByteCode
	byte[] ByteCode;//[Offset: 0x0, Size: 0x10]
	int NumInstructions;//[Offset: 0x10, Size: 0x4]
	RigVMByteCodeEntry[] Entries;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: RigVMByteCodeEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	int InstructionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: RigVMInstructionArray
	RigVMInstruction[] Instructions;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RigVMInstruction
	uint64 ByteCodeIndex;//[Offset: 0x0, Size: 0x8]
	enum OpCode;//[Offset: 0x8, Size: 0x1]
	byte OperandAlignment;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: RigVMStatistics
	int BytesForCDO;//[Offset: 0x0, Size: 0x4]
	int BytesPerInstance;//[Offset: 0x4, Size: 0x4]
	RigVMMemoryStatistics LiteralMemory;//[Offset: 0x8, Size: 0xc]
	RigVMMemoryStatistics WorkMemory;//[Offset: 0x14, Size: 0xc]
	RigVMMemoryStatistics DebugMemory;//[Offset: 0x20, Size: 0xc]
	int BytesForCaching;//[Offset: 0x2c, Size: 0x4]
	RigVMByteCodeStatistics ByteCode;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: RigVMMemoryStatistics
	int RegisterCount;//[Offset: 0x0, Size: 0x4]
	int DataBytes;//[Offset: 0x4, Size: 0x4]
	int TotalBytes;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: RigVMByteCodeStatistics
	int InstructionCount;//[Offset: 0x0, Size: 0x4]
	int DataBytes;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: RigVMExecuteContext

--------------------------------
Class: RigVMParameter
	enum Type;//[Offset: 0x0, Size: 0x1]
	FName Name;//[Offset: 0x4, Size: 0x8]
	int RegisterIndex;//[Offset: 0xc, Size: 0x4]
	FString CPPType;//[Offset: 0x10, Size: 0x10]
	ScriptStruct* ScriptStruct;//[Offset: 0x20, Size: 0x8]
	FName ScriptStructPath;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: RigHierarchy.Object
	uint16 TopologyVersion;//[Offset: 0x58, Size: 0x2]
	bool bEnableDirtyPropagation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 0x1]
	int TransformStackIndex;//[Offset: 0xd0, Size: 0x4]
	RigHierarchyController* HierarchyController;//[Offset: 0x130, Size: 0x8]
	<RigElementKey,RigElementKey> PreviousNameMap;//[Offset: 0x188, Size: 0x50]
	RigHierarchy* HierarchyForCacheValidation;//[Offset: 0x1f8, Size: 0x8]
	bool SwitchToWorldSpace(RigElementKey InChild, bool bInitial, bool bAffectChildren);// 0x208858eb6041
	bool SwitchToParent(RigElementKey InChild, RigElementKey InParent, bool bInitial, bool bAffectChildren);// 0x208758eb6041
	bool SwitchToDefaultParent(RigElementKey InChild, bool bInitial, bool bAffectChildren);// 0x208658eb6041
	RigElementKey[] SortKeys(out const RigElementKey[] InKeys);// 0x208558eb6041
	void SetPose_ForBlueprint(RigPose InPose);// 0x208458eb6041
	bool SetParentWeightArray(RigElementKey InChild, RigElementWeight[] InWeights, bool bInitial, bool bAffectChildren);// 0x208358eb6041
	bool SetParentWeight(RigElementKey InChild, RigElementKey InParent, RigElementWeight InWeight, bool bInitial, bool bAffectChildren);// 0x208258eb6041
	void SetLocalTransformByIndex(int InElementIndex, Transform InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);// 0x208158eb6041
	void SetLocalTransform(RigElementKey InKey, Transform InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);// 0x208058eb6041
	void SetGlobalTransformByIndex(int InElementIndex, Transform InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo);// 0x207f58eb6041
	void SetGlobalTransform(RigElementKey InKey, Transform InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo);// 0x207e58eb6041
	void SetCurveValueByIndex(int InElementIndex, float InValue, bool bSetupUndo);// 0x207d58eb6041
	void SetCurveValue(RigElementKey InKey, float InValue, bool bSetupUndo);// 0x207c58eb6041
	void SetControlVisibilityByIndex(int InElementIndex, bool bVisibility);// 0x207b58eb6041
	void SetControlVisibility(RigElementKey InKey, bool bVisibility);// 0x207a58eb6041
	void SetControlValueByIndex(int InElementIndex, RigControlValue InValue, enum InValueType, bool bSetupUndo, bool bPrintPythonCommands);// 0x207958eb6041
	void SetControlValue(RigElementKey InKey, RigControlValue InValue, enum InValueType, bool bSetupUndo, bool bPrintPythonCommands);// 0x207858eb6041
	void SetControlShapeTransformByIndex(int InElementIndex, Transform InTransform, bool bInitial, bool bSetupUndo);// 0x207758eb6041
	void SetControlShapeTransform(RigElementKey InKey, Transform InTransform, bool bInitial, bool bSetupUndo);// 0x207658eb6041
	void SetControlSettingsByIndex(int InElementIndex, RigControlSettings InSettings, bool bSetupUndo, bool bForce, bool bPrintPythonCommands);// 0x207558eb6041
	void SetControlSettings(RigElementKey InKey, RigControlSettings InSettings, bool bSetupUndo, bool bForce, bool bPrintPythonCommands);// 0x207458eb6041
	void SetControlOffsetTransformByIndex(int InElementIndex, Transform InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);// 0x207358eb6041
	void SetControlOffsetTransform(RigElementKey InKey, Transform InTransform, bool bInitial, bool bAffectChildren, bool bSetupUndo, bool bPrintPythonCommands);// 0x207258eb6041
	void SendAutoKeyEvent(RigElementKey InElement, float InOffsetInSeconds, bool bAsynchronous);// 0x207158eb6041
	void ResetPoseToInitial(enum InTypeFilter);// 0x207058eb6041
	void ResetCurveValues();// 0x206f58eb6041
	void Reset();// 0x206e58eb6041
	int Num();// 0xffffff8158eb6000
	RigControlValue MakeControlValueFromVector2D(Vector2D InValue);// 0x206c58eb6041
	RigControlValue MakeControlValueFromVector(Vector InValue);// 0x206b58eb6041
	RigControlValue MakeControlValueFromTransformNoScale(TransformNoScale InValue);// 0x206a58eb6041
	RigControlValue MakeControlValueFromTransform(Transform InValue);// 0x206958eb6041
	RigControlValue MakeControlValueFromRotator(Rotator InValue);// 0x206858eb6041
	RigControlValue MakeControlValueFromInt(int InValue);// 0x206758eb6041
	RigControlValue MakeControlValueFromFloat(float InValue);// 0x206658eb6041
	RigControlValue MakeControlValueFromEulerTransform(EulerTransform InValue);// 0x206558eb6041
	RigControlValue MakeControlValueFromBool(bool InValue);// 0x206458eb6041
	bool IsValidIndex(int InElementIndex);// 0x206358eb6041
	bool IsSelectedByIndex(int InIndex);// 0x206258eb6041
	bool IsSelected(RigElementKey InKey);// 0x206158eb6041
	bool IsParentedTo(RigElementKey InChild, RigElementKey InParent);// 0x206058eb6041
	Vector GetVectorFromControlValue(RigControlValue InValue);// 0x205f58eb6041
	Vector2D GetVector2DFromControlValue(RigControlValue InValue);// 0x205e58eb6041
	TransformNoScale GetTransformNoScaleFromControlValue(RigControlValue InValue);// 0x205d58eb6041
	Transform GetTransformFromControlValue(RigControlValue InValue);// 0x205c58eb6041
	RigElementKey[] GetSelectedKeys(enum InTypeFilter);// 0x205b58eb6041
	Rotator GetRotatorFromControlValue(RigControlValue InValue);// 0x205a58eb6041
	RigElementKey[] GetRigidBodyKeys(bool bTraverse);// 0x205958eb6041
	RigElementKey[] GetReferenceKeys(bool bTraverse);// 0x205858eb6041
	RigElementKey GetPreviousParent(out const RigElementKey InKey);// 0x205758eb6041
	FName GetPreviousName(out const RigElementKey InKey);// 0x205658eb6041
	RigPose GetPose(bool bInitial);// 0x205558eb6041
	RigElementWeight[] GetParentWeightArray(RigElementKey InChild, bool bInitial);// 0x205458eb6041
	RigElementWeight GetParentWeight(RigElementKey InChild, RigElementKey InParent, bool bInitial);// 0x205358eb6041
	Transform GetParentTransformByIndex(int InElementIndex, bool bInitial);// 0x205258eb6041
	Transform GetParentTransform(RigElementKey InKey, bool bInitial);// 0x205158eb6041
	RigElementKey[] GetParents(RigElementKey InKey, bool bRecursive);// 0x205058eb6041
	int GetNumberOfParents(RigElementKey InKey);// 0x204f58eb6041
	RigElementKey[] GetNullKeys(bool bTraverse);// 0x204e58eb6041
	Transform GetLocalTransformByIndex(int InElementIndex, bool bInitial);// 0x204d58eb6041
	Transform GetLocalTransform(RigElementKey InKey, bool bInitial);// 0x208958eb6041
	RigElementKey GetKey(int InElementIndex);// 0x204b58eb6041
	int GetIntFromControlValue(RigControlValue InValue);// 0x204a58eb6041
	int GetIndex_ForBlueprint(RigElementKey InKey);// 0x204958eb6041
	Transform GetGlobalTransformByIndex(int InElementIndex, bool bInitial);// 0x204858eb6041
	Transform GetGlobalTransform(RigElementKey InKey, bool bInitial);// 0x204758eb6041
	Transform GetGlobalControlShapeTransformByIndex(int InElementIndex, bool bInitial);// 0x204658eb6041
	Transform GetGlobalControlShapeTransform(RigElementKey InKey, bool bInitial);// 0x204558eb6041
	Transform GetGlobalControlOffsetTransformByIndex(int InElementIndex, bool bInitial);// 0x204458eb6041
	Transform GetGlobalControlOffsetTransform(RigElementKey InKey, bool bInitial);// 0x204358eb6041
	float GetFloatFromControlValue(RigControlValue InValue);// 0x204258eb6041
	RigElementKey GetFirstParent(RigElementKey InKey);// 0x204158eb6041
	EulerTransform GetEulerTransformFromControlValue(RigControlValue InValue);// 0x204058eb6041
	float GetCurveValueByIndex(int InElementIndex);// 0x203f58eb6041
	float GetCurveValue(RigElementKey InKey);// 0x203e58eb6041
	RigElementKey[] GetCurveKeys();// 0x203d58eb6041
	RigControlValue GetControlValueByIndex(int InElementIndex, enum InValueType);// 0x203c58eb6041
	RigControlValue GetControlValue(RigElementKey InKey, enum InValueType);// 0x203b58eb6041
	RigHierarchyController* GetController(bool bCreateIfNeeded);// 0x203a58eb6041
	RigElementKey[] GetControlKeys(bool bTraverse);// 0x203958eb6041
	RigElementKey[] GetChildren(RigElementKey InKey, bool bRecursive);// 0x203858eb6041
	RigElementKey[] GetBoneKeys(bool bTraverse);// 0x203758eb6041
	RigElementKey[] GetAllKeys_ForBlueprint(bool bTraverse);// 0x203658eb6041
	RigNullElement FindNull_ForBlueprintOnly(out const RigElementKey InKey);// 0x203558eb6041
	RigControlElement FindControl_ForBlueprintOnly(out const RigElementKey InKey);// 0x203458eb6041
	RigBoneElement FindBone_ForBlueprintOnly(out const RigElementKey InKey);// 0x203358eb6041
	void CopyPose(RigHierarchy* InHierarchy, bool bCurrent, bool bInitial);// 0x203258eb6041
	void CopyHierarchy(RigHierarchy* InHierarchy);// 0x203158eb6041
	bool Contains_ForBlueprint(RigElementKey InKey);// 0x203058eb6041

--------------------------------
Class: RigPose
	RigPoseElement[] Elements;//[Offset: 0x0, Size: 0x10]
	int HierarchyTopologyVersion;//[Offset: 0x10, Size: 0x4]
	int PoseHash;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: RigPoseElement
	CachedRigElement Index;//[Offset: 0x0, Size: 0x20]
	Transform GlobalTransform;//[Offset: 0x20, Size: 0x60]
	Transform LocalTransform;//[Offset: 0x80, Size: 0x60]
	float CurveValue;//[Offset: 0xe0, Size: 0x4]

--------------------------------
Class: CachedRigElement
	RigElementKey Key;//[Offset: 0x0, Size: 0xc]
	uint16 Index;//[Offset: 0xc, Size: 0x2]
	int ContainerVersion;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: RigElementWeight
	float Location;//[Offset: 0x0, Size: 0x4]
	float Rotation;//[Offset: 0x4, Size: 0x4]
	float Scale;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: RigControlValue
	RigControlValueStorage FloatStorage;//[Offset: 0x0, Size: 0x84]
	Transform Storage;//[Offset: 0x90, Size: 0x60]

--------------------------------
Class: RigControlValueStorage
	float Float00;//[Offset: 0x0, Size: 0x4]
	float Float01;//[Offset: 0x4, Size: 0x4]
	float Float02;//[Offset: 0x8, Size: 0x4]
	float Float03;//[Offset: 0xc, Size: 0x4]
	float Float10;//[Offset: 0x10, Size: 0x4]
	float Float11;//[Offset: 0x14, Size: 0x4]
	float Float12;//[Offset: 0x18, Size: 0x4]
	float Float13;//[Offset: 0x1c, Size: 0x4]
	float Float20;//[Offset: 0x20, Size: 0x4]
	float Float21;//[Offset: 0x24, Size: 0x4]
	float Float22;//[Offset: 0x28, Size: 0x4]
	float Float23;//[Offset: 0x2c, Size: 0x4]
	float Float30;//[Offset: 0x30, Size: 0x4]
	float Float31;//[Offset: 0x34, Size: 0x4]
	float Float32;//[Offset: 0x38, Size: 0x4]
	float Float33;//[Offset: 0x3c, Size: 0x4]
	float Float00;//[Offset: 0x40, Size: 0x4]
	float Float01;//[Offset: 0x44, Size: 0x4]
	float Float02;//[Offset: 0x48, Size: 0x4]
	float Float03;//[Offset: 0x4c, Size: 0x4]
	float Float10;//[Offset: 0x50, Size: 0x4]
	float Float11;//[Offset: 0x54, Size: 0x4]
	float Float12;//[Offset: 0x58, Size: 0x4]
	float Float13;//[Offset: 0x5c, Size: 0x4]
	float Float20;//[Offset: 0x60, Size: 0x4]
	float Float21;//[Offset: 0x64, Size: 0x4]
	float Float22;//[Offset: 0x68, Size: 0x4]
	float Float23;//[Offset: 0x6c, Size: 0x4]
	float Float30;//[Offset: 0x70, Size: 0x4]
	float Float31;//[Offset: 0x74, Size: 0x4]
	float Float32;//[Offset: 0x78, Size: 0x4]
	float Float33;//[Offset: 0x7c, Size: 0x4]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: RigControlSettings
	enum ControlType;//[Offset: 0x0, Size: 0x1]
	FName DisplayName;//[Offset: 0x4, Size: 0x8]
	enum PrimaryAxis;//[Offset: 0xc, Size: 0x1]
	bool bIsCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool bAnimatable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	RigControlLimitEnabled[] LimitEnabled;//[Offset: 0x10, Size: 0x10]
	bool bDrawLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	RigControlValue MinimumValue;//[Offset: 0x30, Size: 0xf0]
	RigControlValue MaximumValue;//[Offset: 0x120, Size: 0xf0]
	bool bShapeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	bool bShapeVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 0x1]
	FName ShapeName;//[Offset: 0x214, Size: 0x8]
	LinearColor ShapeColor;//[Offset: 0x21c, Size: 0x10]
	bool bIsTransientControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 0x1]
	Enum* ControlEnum;//[Offset: 0x230, Size: 0x8]
	RigControlElementCustomization Customization;//[Offset: 0x238, Size: 0x20]

--------------------------------
Class: RigControlLimitEnabled
	bool bMinimum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bMaximum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: TransformNoScale
	Vector Location;//[Offset: 0x0, Size: 0x18]
	Quat Rotation;//[Offset: 0x20, Size: 0x20]

--------------------------------
Class: EulerTransform
	Vector Location;//[Offset: 0x0, Size: 0x18]
	Rotator Rotation;//[Offset: 0x18, Size: 0x18]
	Vector Scale;//[Offset: 0x30, Size: 0x18]

--------------------------------
Class: RigHierarchyController.Object
	bool bReportWarningsAndErrors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	RigHierarchy* Hierarchy;//[Offset: 0x2c, Size: 0x8]
	bool SetSelection(out const RigElementKey[] InKeys, bool bPrintPythonCommand);// 0x20a258eb6041
	bool SetParent(RigElementKey InChild, RigElementKey InParent, bool bMaintainGlobalTransform, bool bSetupUndo, bool bPrintPythonCommand);// 0x20a158eb6041
	void SetHierarchy(RigHierarchy* InHierarchy);// 0x20a058eb6041
	bool SetControlSettings(RigElementKey InKey, RigControlSettings InSettings, bool bSetupUndo);// 0x209f58eb6041
	bool SelectElement(RigElementKey InKey, bool bSelect, bool bClearSelection);// 0x209e58eb6041
	RigElementKey RenameElement(RigElementKey InElement, FName InName, bool bSetupUndo, bool bPrintPythonCommand, bool bClearSelection);// 0x209d58eb6041
	bool RemoveParent(RigElementKey InChild, RigElementKey InParent, bool bMaintainGlobalTransform, bool bSetupUndo, bool bPrintPythonCommand);// 0x209c58eb6041
	bool RemoveElement(RigElementKey InElement, bool bSetupUndo, bool bPrintPythonCommand);// 0x209b58eb6041
	bool RemoveAllParents(RigElementKey InChild, bool bMaintainGlobalTransform, bool bSetupUndo, bool bPrintPythonCommand);// 0x209a58eb6041
	RigElementKey[] MirrorElements(RigElementKey[] InKeys, RigMirrorSettings InSettings, bool bSelectNewElements, bool bSetupUndo, bool bPrintPythonCommands);// 0x209958eb6041
	RigElementKey[] ImportFromText(FString InContent, bool bReplaceExistingElements, bool bSelectNewElements, bool bSetupUndo, bool bPrintPythonCommands);// 0x209858eb6041
	RigElementKey[] ImportCurves(Skeleton* InSkeleton, FName InNameSpace, bool bSelectCurves, bool bSetupUndo, bool bPrintPythonCommand);// 0x209758eb6041
	RigElementKey[] ImportBones(Skeleton* InSkeleton, FName InNameSpace, bool bReplaceExistingBones, bool bRemoveObsoleteBones, bool bSelectBones, bool bSetupUndo, bool bPrintPythonCommand);// 0x209658eb6041
	RigHierarchy* GetHierarchy();// 0x209558eb6041
	RigControlSettings GetControlSettings(RigElementKey InKey);// 0x209458eb6041
	FString ExportToText(RigElementKey[] InKeys);// 0x209358eb6041
	FString ExportSelectionToText();// 0x209258eb6041
	RigElementKey[] DuplicateElements(RigElementKey[] InKeys, bool bSelectNewElements, bool bSetupUndo, bool bPrintPythonCommands);// 0x209158eb6041
	bool DeselectElement(RigElementKey InKey);// 0x209058eb6041
	bool ClearSelection();// 0x208f58eb6041
	RigElementKey AddRigidBody(FName InName, RigElementKey InParent, RigRigidBodySettings InSettings, Transform InLocalTransform, bool bSetupUndo, bool bPrintPythonCommand);// 0x208e58eb6041
	bool AddParent(RigElementKey InChild, RigElementKey InParent, float InWeight, bool bMaintainGlobalTransform, bool bSetupUndo);// 0x208d58eb6041
	RigElementKey AddNull(FName InName, RigElementKey InParent, Transform InTransform, bool bTransformInGlobal, bool bSetupUndo, bool bPrintPythonCommand);// 0x208c58eb6041
	RigElementKey AddCurve(FName InName, float InValue, bool bSetupUndo, bool bPrintPythonCommand);// 0x208b58eb6041
	RigElementKey AddControl_ForBlueprint(FName InName, RigElementKey InParent, RigControlSettings InSettings, RigControlValue InValue, bool bSetupUndo);// 0x208a58eb6041
	RigElementKey AddBone(FName InName, RigElementKey InParent, Transform InTransform, bool bTransformInGlobal, enum InBoneType, bool bSetupUndo, bool bPrintPythonCommand);// 0x20cb58eb6041

--------------------------------
Class: RigMirrorSettings
	byte MirrorAxis;//[Offset: 0x0, Size: 0x1]
	byte AxisToFlip;//[Offset: 0x1, Size: 0x1]
	FString SearchString;//[Offset: 0x8, Size: 0x10]
	FString ReplaceString;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: RigRigidBodySettings
	float Mass;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: RigNullElement.RigMultiParentElement.RigTransformElement.RigBaseElement

--------------------------------
Class: RigMultiParentElement.RigTransformElement.RigBaseElement
	RigCurrentAndInitialTransform Parent;//[Offset: 0x250, Size: 0x1c0]

--------------------------------
Class: RigTransformElement.RigBaseElement
	RigCurrentAndInitialTransform Pose;//[Offset: 0x50, Size: 0x1c0]

--------------------------------
Class: RigBaseElement
	RigElementKey Key;//[Offset: 0x8, Size: 0xc]
	int Index;//[Offset: 0x14, Size: 0x4]
	int SubIndex;//[Offset: 0x18, Size: 0x4]
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: RigCurrentAndInitialTransform
	RigLocalAndGlobalTransform Current;//[Offset: 0x0, Size: 0xe0]
	RigLocalAndGlobalTransform Initial;//[Offset: 0xe0, Size: 0xe0]

--------------------------------
Class: RigLocalAndGlobalTransform
	RigComputedTransform Local;//[Offset: 0x0, Size: 0x70]
	RigComputedTransform Global;//[Offset: 0x70, Size: 0x70]

--------------------------------
Class: RigComputedTransform
	Transform Transform;//[Offset: 0x0, Size: 0x60]

--------------------------------
Class: RigControlElement.RigMultiParentElement.RigTransformElement.RigBaseElement
	RigControlSettings Settings;//[Offset: 0x510, Size: 0x260]
	RigCurrentAndInitialTransform Offset;//[Offset: 0x770, Size: 0x1c0]
	RigCurrentAndInitialTransform Shape;//[Offset: 0x930, Size: 0x1c0]

--------------------------------
Class: RigBoneElement.RigSingleParentElement.RigTransformElement.RigBaseElement
	enum BoneType;//[Offset: 0x258, Size: 0x1]

--------------------------------
Class: RigSingleParentElement.RigTransformElement.RigBaseElement

--------------------------------
Class: ControlRigShapeLibrary.Object
	ControlRigShapeDefinition DefaultShape;//[Offset: 0x30, Size: 0xa0]
	Material* DefaultMaterial;//[Offset: 0xd0, Size: 0x28]
	FName MaterialColorParameter;//[Offset: 0xf8, Size: 0x8]
	ControlRigShapeDefinition[] Shapes;//[Offset: 0x100, Size: 0x10]

--------------------------------
Class: ControlRigShapeDefinition
	FName ShapeName;//[Offset: 0x0, Size: 0x8]
	StaticMesh* StaticMesh;//[Offset: 0x8, Size: 0x28]
	Transform Transform;//[Offset: 0x30, Size: 0x60]

--------------------------------
Class: ControlRigDrawContainer
	ControlRigDrawInstruction[] Instructions;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ControlRigDrawInstruction
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte PrimitiveType;//[Offset: 0x8, Size: 0x1]
	Vector[] Positions;//[Offset: 0x10, Size: 0x10]
	LinearColor Color;//[Offset: 0x20, Size: 0x10]
	float Thickness;//[Offset: 0x30, Size: 0x4]
	Transform Transform;//[Offset: 0x40, Size: 0x60]

--------------------------------
Class: AnimationDataSourceRegistry.Object
	<FName,Object*> DataSources;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: RigInfluenceMapPerEvent
	RigInfluenceMap[] Maps;//[Offset: 0x0, Size: 0x10]
	<FName,int> EventToIndex;//[Offset: 0x10, Size: 0x50]

--------------------------------
Class: RigInfluenceMap
	FName EventName;//[Offset: 0x0, Size: 0x8]
	RigInfluenceEntry[] Entries;//[Offset: 0x8, Size: 0x10]
	<RigElementKey,int> KeyToIndex;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: RigInfluenceEntry
	RigElementKey Source;//[Offset: 0x0, Size: 0xc]
	RigElementKey[] AffectedList;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AdditiveControlRig.ControlRig.Object

--------------------------------
Class: ControlRigAnimInstance.AnimInstance.Object

--------------------------------
Class: ControlRigBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object

--------------------------------
Class: ControlRigComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class ControlRig* ControlRigClass;//[Offset: 0x538, Size: 0x8]
	delegate OnPreInitializeDelegate;//[Offset: 0x540, Size: 0x10]
	delegate OnPostInitializeDelegate;//[Offset: 0x550, Size: 0x10]
	delegate OnPreSetupDelegate;//[Offset: 0x560, Size: 0x10]
	delegate OnPostSetupDelegate;//[Offset: 0x570, Size: 0x10]
	delegate OnPreForwardsSolveDelegate;//[Offset: 0x580, Size: 0x10]
	delegate OnPostForwardsSolveDelegate;//[Offset: 0x590, Size: 0x10]
	ControlRigComponentMappedElement[] MappedElements;//[Offset: 0x5a0, Size: 0x10]
	bool bEnableLazyEvaluation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 0x1]
	float LazyEvaluationPositionThreshold;//[Offset: 0x5b4, Size: 0x4]
	float LazyEvaluationRotationThreshold;//[Offset: 0x5b8, Size: 0x4]
	float LazyEvaluationScaleThreshold;//[Offset: 0x5bc, Size: 0x4]
	bool bResetTransformBeforeTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 0x1]
	bool bResetInitialsBeforeSetup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c1, Size: 0x1]
	bool bUpdateRigOnTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c2, Size: 0x1]
	bool bUpdateInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c3, Size: 0x1]
	bool bDrawBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 0x1]
	bool bShowDebugDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c5, Size: 0x1]
	ControlRig* ControlRig;//[Offset: 0x5c8, Size: 0x8]
	void Update(float DeltaTime);// 0x1ff458eb6041
	void SetMappedElements(ControlRigComponentMappedElement[] NewMappedElements);// 0x1ff358eb6041
	void SetInitialSpaceTransform(FName SpaceName, Transform InitialTransform, enum Space);// 0x1ff258eb6041
	void SetInitialBoneTransform(FName BoneName, Transform InitialTransform, enum Space, bool bPropagateToChildren);// 0x1ff158eb6041
	void SetControlVector2D(FName ControlName, Vector2D Value);// 0x1ff058eb6041
	void SetControlTransform(FName ControlName, Transform Value, enum Space);// 0x1fef58eb6041
	void SetControlScale(FName ControlName, Vector Value, enum Space);// 0x1fee58eb6041
	void SetControlRotator(FName ControlName, Rotator Value, enum Space);// 0x1fed58eb6041
	void SetControlPosition(FName ControlName, Vector Value, enum Space);// 0x1fec58eb6041
	void SetControlOffset(FName ControlName, Transform OffsetTransform, enum Space);// 0x1feb58eb6041
	void SetControlInt(FName ControlName, int Value);// 0x1fea58eb6041
	void SetControlFloat(FName ControlName, float Value);// 0x202b58eb6041
	void SetControlBool(FName ControlName, bool Value);// 0x1fe858eb6041
	void SetBoneTransform(FName BoneName, Transform Transform, enum Space, float Weight, bool bPropagateToChildren);// 0x1fe758eb6041
	void SetBoneInitialTransformsFromSkeletalMesh(SkeletalMesh* InSkeletalMesh);// 0x1fe658eb6041
	void OnPreSetup(ControlRigComponent* Component);// 0x1fe558eb6041
	void OnPreInitialize(ControlRigComponent* Component);// 0x1fe458eb6041
	void OnPreForwardsSolve(ControlRigComponent* Component);// 0x1fe358eb6041
	void OnPostSetup(ControlRigComponent* Component);// 0x1fe258eb6041
	void OnPostInitialize(ControlRigComponent* Component);// 0x1fe158eb6041
	void OnPostForwardsSolve(ControlRigComponent* Component);// 0x1fe058eb6041
	void Initialize();// 0x1fdf58eb6041
	Transform GetSpaceTransform(FName SpaceName, enum Space);// 0x1fde58eb6041
	Transform GetInitialSpaceTransform(FName SpaceName, enum Space);// 0x1fdd58eb6041
	Transform GetInitialBoneTransform(FName BoneName, enum Space);// 0x1fdc58eb6041
	FName[] GetElementNames(enum ElementType);// 0x1fdb58eb6041
	Vector2D GetControlVector2D(FName ControlName);// 0x1fda58eb6041
	Transform GetControlTransform(FName ControlName, enum Space);// 0x1fd958eb6041
	Vector GetControlScale(FName ControlName, enum Space);// 0x1fd858eb6041
	Rotator GetControlRotator(FName ControlName, enum Space);// 0x1fd758eb6041
	ControlRig* GetControlRig();// 0x1fd658eb6041
	Vector GetControlPosition(FName ControlName, enum Space);// 0x1fd558eb6041
	Transform GetControlOffset(FName ControlName, enum Space);// 0x1fd458eb6041
	int GetControlInt(FName ControlName);// 0x1fd358eb6041
	float GetControlFloat(FName ControlName);// 0x1fd258eb6041
	bool GetControlBool(FName ControlName);// 0x1fd158eb6041
	Transform GetBoneTransform(FName BoneName, enum Space);// 0x1fd058eb6041
	float GetAbsoluteTime();// 0x1fcf58eb6041
	bool DoesElementExist(FName Name, enum ElementType);// 0x1fce58eb6041
	void ClearMappedElements();// 0x1fcd58eb6041
	bool CanExecute();// 0x1fcc58eb6041
	void AddMappedSkeletalMesh(SkeletalMeshComponent* SkeletalMeshComponent, ControlRigComponentMappedBone[] Bones, ControlRigComponentMappedCurve[] Curves);// 0x1fcb58eb6041
	void AddMappedElements(ControlRigComponentMappedElement[] NewMappedElements);// 0x1fca58eb6041
	void AddMappedComponents(ControlRigComponentMappedComponent[] Components);// 0x1fc958eb6041
	void AddMappedCompleteSkeletalMesh(SkeletalMeshComponent* SkeletalMeshComponent);// 0x200a58eb6041

--------------------------------
Class: ControlRigComponentMappedElement
	ComponentReference ComponentReference;//[Offset: 0x0, Size: 0x28]
	int TransformIndex;//[Offset: 0x28, Size: 0x4]
	FName TransformName;//[Offset: 0x2c, Size: 0x8]
	enum ElementType;//[Offset: 0x34, Size: 0x1]
	FName ElementName;//[Offset: 0x38, Size: 0x8]
	enum Direction;//[Offset: 0x40, Size: 0x1]
	Transform Offset;//[Offset: 0x50, Size: 0x60]
	float Weight;//[Offset: 0xb0, Size: 0x4]
	enum Space;//[Offset: 0xb4, Size: 0x1]
	SceneComponent* SceneComponent;//[Offset: 0xb8, Size: 0x8]
	int ElementIndex;//[Offset: 0xc0, Size: 0x4]
	int SubIndex;//[Offset: 0xc4, Size: 0x4]

--------------------------------
Class: ComponentReference
	Actor* OtherActor;//[Offset: 0x0, Size: 0x8]
	FName ComponentProperty;//[Offset: 0x8, Size: 0x8]
	FString PathToComponent;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ControlRigComponentMappedBone
	FName Source;//[Offset: 0x0, Size: 0x8]
	FName Target;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ControlRigComponentMappedCurve
	FName Source;//[Offset: 0x0, Size: 0x8]
	FName Target;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ControlRigComponentMappedComponent
	SceneComponent* Component;//[Offset: 0x0, Size: 0x8]
	FName ElementName;//[Offset: 0x8, Size: 0x8]
	enum ElementType;//[Offset: 0x10, Size: 0x1]
	enum Direction;//[Offset: 0x11, Size: 0x1]

--------------------------------
Class: ControlRigControlActor.Actor.Object
	Actor* ActorToTrack;//[Offset: 0x278, Size: 0x8]
	class ControlRig* ControlRigClass;//[Offset: 0x280, Size: 0x8]
	bool bRefreshOnTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	bool bIsSelectable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 0x1]
	MaterialInterface* MaterialOverride;//[Offset: 0x290, Size: 0x8]
	FString ColorParameter;//[Offset: 0x298, Size: 0x10]
	bool bCastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	SceneComponent* ActorRootComponent;//[Offset: 0x2b0, Size: 0x8]
	ControlRig* ControlRig;//[Offset: 0x2b8, Size: 0x8]
	FName[] ControlNames;//[Offset: 0x2c0, Size: 0x10]
	Transform[] ShapeTransforms;//[Offset: 0x2d0, Size: 0x10]
	StaticMeshComponent*[] Components;//[Offset: 0x2e0, Size: 0x10]
	MaterialInstanceDynamic*[] Materials;//[Offset: 0x2f0, Size: 0x10]
	FName ColorParameterName;//[Offset: 0x300, Size: 0x8]
	void Refresh();// 0x1ff658eb6041
	void Clear();// 0x1ff558eb6041

--------------------------------
Class: ControlRigShapeActor.Actor.Object
	SceneComponent* ActorRootComponent;//[Offset: 0x278, Size: 0x8]
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x280, Size: 0x8]
	uint32 ControlRigIndex;//[Offset: 0x288, Size: 0x4]
	FName ControlName;//[Offset: 0x28c, Size: 0x8]
	FName ColorParameterName;//[Offset: 0x294, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 0x1]
	bool bSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29c, Size: 0x1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29c, Size: 0x1]
	bool bHovered;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29c, Size: 0x1]
	void SetSelected(bool bInSelected);// 0x200458eb6041
	void SetSelectable(bool bInSelectable);// 0x200358eb6041
	void SetHovered(bool bInHovered);// 0x200258eb6041
	void SetGlobalTransform(out const Transform InTransform);// 0x200158eb6041
	void SetEnabled(bool bInEnabled);// 0x200058eb6041
	void OnTransformChanged(out const Transform NewTransform);// 0x1fff58eb6041
	void OnSelectionChanged(bool bIsSelected);// 0x1ffe58eb6041
	void OnManipulatingChanged(bool bIsManipulating);// 0x1ffd58eb6041
	void OnHoveredChanged(bool bIsSelected);// 0x1ffc58eb6041
	void OnEnabledChanged(bool bIsEnabled);// 0x1ffb58eb6041
	bool IsSelectedInEditor();// 0x1ffa58eb6041
	bool IsHovered();// 0x1ff958eb6041
	bool IsEnabled();// 0x1ff858eb6041
	Transform GetGlobalTransform();// 0x1ff758eb6041

--------------------------------
Class: ControlRigLayerInstance.AnimInstance.Object

--------------------------------
Class: ControlRigValidationPass.Object

--------------------------------
Class: ControlRigNumericalValidationPass.ControlRigValidationPass.Object
	bool bCheckControls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bCheckBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bCheckCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	float TranslationPrecision;//[Offset: 0x2c, Size: 0x4]
	float RotationPrecision;//[Offset: 0x30, Size: 0x4]
	float ScalePrecision;//[Offset: 0x34, Size: 0x4]
	float CurvePrecision;//[Offset: 0x38, Size: 0x4]
	FName EventNameA;//[Offset: 0x3c, Size: 0x8]
	FName EventNameB;//[Offset: 0x44, Size: 0x8]
	RigPose Pose;//[Offset: 0x50, Size: 0x70]

--------------------------------
Class: ControlRigObjectHolder.Object
	Object*[] Objects;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ControlRigPoseAsset.Object
	ControlRigControlPose Pose;//[Offset: 0x28, Size: 0x60]
	void SelectControls(ControlRig* InControlRig, bool bDoMirror);// 0x200b58eb6041
	void SavePose(ControlRig* InControlRig, bool bUseAll);// 0x204c58eb6041
	void ReplaceControlName(out const FName CurrentName, out const FName NewName);// 0x200958eb6041
	void PastePose(ControlRig* InControlRig, bool bDoKey, bool bDoMirror);// 0x200858eb6041
	void GetCurrentPose(ControlRig* InControlRig, out ControlRigControlPose OutPose);// 0x200758eb6041
	FName[] GetControlNames();// 0x200658eb6041
	bool DoesMirrorMatch(ControlRig* ControlRig, out const FName ControlName);// 0x200558eb6041

--------------------------------
Class: ControlRigControlPose
	RigControlCopy[] CopyOfControls;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RigControlCopy
	FName Name;//[Offset: 0x8, Size: 0x8]
	enum ControlType;//[Offset: 0x10, Size: 0x1]
	RigControlValue Value;//[Offset: 0x20, Size: 0xf0]
	RigElementKey ParentKey;//[Offset: 0x110, Size: 0xc]
	Transform OffsetTransform;//[Offset: 0x120, Size: 0x60]
	Transform ParentTransform;//[Offset: 0x180, Size: 0x60]
	Transform LocalTransform;//[Offset: 0x1e0, Size: 0x60]
	Transform GlobalTransform;//[Offset: 0x240, Size: 0x60]

--------------------------------
Class: ControlRigPoseMirrorSettings.Object
	FString RightSide;//[Offset: 0x28, Size: 0x10]
	FString LeftSide;//[Offset: 0x38, Size: 0x10]
	byte MirrorAxis;//[Offset: 0x48, Size: 0x1]
	byte AxisToFlip;//[Offset: 0x49, Size: 0x1]

--------------------------------
Class: ControlRigPoseProjectSettings.Object
	DirectoryPath[] RootSaveDirs;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x68, Size: 0x8]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x70, Size: 0x50]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0xc0, Size: 0xa0]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x160, Size: 0x50]
	ClassPtrProperty DirectorClass;//[Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x1b8, Size: 0x10]
	void RemoveMetaDataByClass(class Object InClass);// 0x201258eb6041
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x201158eb6041
	Object* FindMetaDataByClass(class Object InClass);// 0x201058eb6041
	Object* CopyMetaData(Object* InMetaData);// 0x200f58eb6041

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 0x50]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 0x18]
	FString ObjectPath;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 0x1c]
	FString ComponentName;//[Offset: 0x20, Size: 0x10]
	Object* CachedComponent;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ControlRigSequence.LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	AnimSequence* LastExportedToAnimationSequence;//[Offset: 0x1c8, Size: 0x28]
	SkeletalMesh* LastExportedUsingSkeletalMesh;//[Offset: 0x1f0, Size: 0x28]
	float LastExportedFrameRate;//[Offset: 0x218, Size: 0x4]

--------------------------------
Class: ControlRigSettings.DeveloperSettings.Object

--------------------------------
Class: ControlRigEditorSettings.DeveloperSettings.Object

--------------------------------
Class: ControlRigSnapSettings.Object
	bool bKeepOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bSnapPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bSnapRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool bSnapScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ControlRigValidator.Object
	ControlRigValidationPass*[] Passes;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: FKControlRig.ControlRig.Object
	bool[] IsControlActive;//[Offset: 0x488, Size: 0x10]
	enum ApplyMode;//[Offset: 0x498, Size: 0x1]

--------------------------------
Class: MovieSceneBuiltInEasingFunction.Object
	enum Type;//[Offset: 0x30, Size: 0x1]

--------------------------------
Class: MovieSceneParameterSection.MovieSceneSection.MovieSceneSignedObject.Object
	BoolParameterNameAndCurve[] BoolParameterNamesAndCurves;//[Offset: 0xe0, Size: 0x10]
	ScalarParameterNameAndCurve[] ScalarParameterNamesAndCurves;//[Offset: 0xf0, Size: 0x10]
	Vector2DParameterNameAndCurves[] Vector2DParameterNamesAndCurves;//[Offset: 0x100, Size: 0x10]
	VectorParameterNameAndCurves[] VectorParameterNamesAndCurves;//[Offset: 0x110, Size: 0x10]
	ColorParameterNameAndCurves[] ColorParameterNamesAndCurves;//[Offset: 0x120, Size: 0x10]
	TransformParameterNameAndCurves[] TransformParameterNamesAndCurves;//[Offset: 0x130, Size: 0x10]
	bool RemoveVectorParameter(FName InParameterName);// 0x202f58eb6041
	bool RemoveVector2DParameter(FName InParameterName);// 0x202e58eb6041
	bool RemoveTransformParameter(FName InParameterName);// 0x202d58eb6041
	bool RemoveScalarParameter(FName InParameterName);// 0x202c58eb6041
	bool RemoveColorParameter(FName InParameterName);// 0x206d58eb6041
	bool RemoveBoolParameter(FName InParameterName);// 0x202a58eb6041
	void GetParameterNames(out <FName> ParameterNames);// 0x202958eb6041
	void AddVectorParameterKey(FName InParameterName, FrameNumber InTime, Vector InValue);// 0x202858eb6041
	void AddVector2DParameterKey(FName InParameterName, FrameNumber InTime, Vector2D InValue);// 0x202758eb6041
	void AddTransformParameterKey(FName InParameterName, FrameNumber InTime, out const Transform InValue);// 0x202658eb6041
	void AddScalarParameterKey(FName InParameterName, FrameNumber InTime, float InValue);// 0x202558eb6041
	void AddColorParameterKey(FName InParameterName, FrameNumber InTime, LinearColor InValue);// 0x202458eb6041
	void AddBoolParameterKey(FName InParameterName, FrameNumber InTime, bool InValue);// 0x202358eb6041

--------------------------------
Class: BoolParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneBoolChannel ParameterCurve;//[Offset: 0x8, Size: 0xd8]

--------------------------------
Class: MovieSceneBoolChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x50, Size: 0x10]
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	bool[] Values;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: MovieSceneChannel

--------------------------------
Class: ScalarParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneFloatChannel ParameterCurve;//[Offset: 0x8, Size: 0xe8]

--------------------------------
Class: MovieSceneFloatChannel.MovieSceneChannel
	byte PreInfinityExtrap;//[Offset: 0x50, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x51, Size: 0x1]
	FrameNumber[] Times;//[Offset: 0x58, Size: 0x10]
	MovieSceneFloatValue[] Values;//[Offset: 0x68, Size: 0x10]
	float DefaultValue;//[Offset: 0x78, Size: 0x4]
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	MovieSceneKeyHandleMap KeyHandles;//[Offset: 0x80, Size: 0x60]
	FrameRate TickResolution;//[Offset: 0xe0, Size: 0x8]

--------------------------------
Class: MovieSceneFloatValue
	float Value;//[Offset: 0x0, Size: 0x4]
	MovieSceneTangentData Tangent;//[Offset: 0x4, Size: 0x14]
	byte InterpMode;//[Offset: 0x18, Size: 0x1]
	byte TangentMode;//[Offset: 0x19, Size: 0x1]
	byte PaddingByte;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: MovieSceneTangentData
	float ArriveTangent;//[Offset: 0x0, Size: 0x4]
	float LeaveTangent;//[Offset: 0x4, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x8, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0xc, Size: 0x4]
	byte TangentWeightMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MovieSceneKeyHandleMap.KeyHandleLookupTable

--------------------------------
Class: KeyHandleLookupTable

--------------------------------
Class: Vector2DParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneFloatChannel XCurve;//[Offset: 0x8, Size: 0xe8]
	MovieSceneFloatChannel YCurve;//[Offset: 0xf0, Size: 0xe8]

--------------------------------
Class: VectorParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneFloatChannel XCurve;//[Offset: 0x8, Size: 0xe8]
	MovieSceneFloatChannel YCurve;//[Offset: 0xf0, Size: 0xe8]
	MovieSceneFloatChannel ZCurve;//[Offset: 0x1d8, Size: 0xe8]

--------------------------------
Class: ColorParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneFloatChannel RedCurve;//[Offset: 0x8, Size: 0xe8]
	MovieSceneFloatChannel GreenCurve;//[Offset: 0xf0, Size: 0xe8]
	MovieSceneFloatChannel BlueCurve;//[Offset: 0x1d8, Size: 0xe8]
	MovieSceneFloatChannel AlphaCurve;//[Offset: 0x2c0, Size: 0xe8]

--------------------------------
Class: TransformParameterNameAndCurves
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneFloatChannel Translation;//[Offset: 0x8, Size: 0xe8]
	MovieSceneFloatChannel Rotation;//[Offset: 0x2c0, Size: 0xe8]
	MovieSceneFloatChannel Scale;//[Offset: 0x578, Size: 0xe8]

--------------------------------
Class: MovieSceneControlRigParameterSection.MovieSceneParameterSection.MovieSceneSection.MovieSceneSignedObject.Object
	ControlRig* ControlRig;//[Offset: 0x158, Size: 0x8]
	class ControlRig* ControlRigClass;//[Offset: 0x160, Size: 0x8]
	bool[] ControlsMask;//[Offset: 0x168, Size: 0x10]
	MovieSceneTransformMask TransformMask;//[Offset: 0x178, Size: 0x4]
	MovieSceneFloatChannel Weight;//[Offset: 0x180, Size: 0xe8]
	<FName,ChannelMapInfo> ControlChannelMap;//[Offset: 0x268, Size: 0x50]
	EnumParameterNameAndCurve[] EnumParameterNamesAndCurves;//[Offset: 0x2b8, Size: 0x10]
	IntegerParameterNameAndCurve[] IntegerParameterNamesAndCurves;//[Offset: 0x2c8, Size: 0x10]
	SpaceControlNameAndChannel[] SpaceChannels;//[Offset: 0x2d8, Size: 0x10]

--------------------------------
Class: MovieSceneTransformMask
	uint32 Mask;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ChannelMapInfo
	int ControlIndex;//[Offset: 0x0, Size: 0x4]
	int TotalChannelIndex;//[Offset: 0x4, Size: 0x4]
	int ChannelIndex;//[Offset: 0x8, Size: 0x4]
	int ParentControlIndex;//[Offset: 0xc, Size: 0x4]
	FName ChannelTypeName;//[Offset: 0x10, Size: 0x8]
	bool bDoesHaveSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	int SpaceChannelIndex;//[Offset: 0x1c, Size: 0x4]
	int MaskIndex;//[Offset: 0x20, Size: 0x4]
	int CategoryIndex;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: EnumParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneByteChannel ParameterCurve;//[Offset: 0x8, Size: 0xe0]

--------------------------------
Class: MovieSceneByteChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x50, Size: 0x10]
	byte DefaultValue;//[Offset: 0x60, Size: 0x1]
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	byte[] Values;//[Offset: 0x68, Size: 0x10]
	Enum* Enum;//[Offset: 0x78, Size: 0x8]

--------------------------------
Class: IntegerParameterNameAndCurve
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	MovieSceneIntegerChannel ParameterCurve;//[Offset: 0x8, Size: 0xd8]

--------------------------------
Class: MovieSceneIntegerChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x50, Size: 0x10]
	int DefaultValue;//[Offset: 0x60, Size: 0x4]
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	int[] Values;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: SpaceControlNameAndChannel
	FName ControlName;//[Offset: 0x0, Size: 0x8]
	MovieSceneControlRigSpaceChannel SpaceCurve;//[Offset: 0x8, Size: 0xe8]

--------------------------------
Class: MovieSceneControlRigSpaceChannel.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x50, Size: 0x10]
	MovieSceneControlRigSpaceBaseKey[] KeyValues;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: MovieSceneControlRigSpaceBaseKey
	enum SpaceType;//[Offset: 0x0, Size: 0x1]
	RigElementKey ControlRigElement;//[Offset: 0x4, Size: 0xc]

--------------------------------
Class: MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneControlRigParameterTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	ControlRig* ControlRig;//[Offset: 0xb8, Size: 0x8]
	MovieSceneSection* SectionToKey;//[Offset: 0xc0, Size: 0x8]
	MovieSceneSection*[] Sections;//[Offset: 0xc8, Size: 0x10]
	FName TrackName;//[Offset: 0xd8, Size: 0x8]

--------------------------------
Class: MovieSceneBindingExtensions.BlueprintFunctionLibrary.Object
	void SetParent(out const SequencerBindingProxy InBinding, out const SequencerBindingProxy InParentBinding);// 0x20b458eb6041
	void SetName(out const SequencerBindingProxy InBinding, FString InName);// 0x20b358eb6041
	void SetDisplayName(out const SequencerBindingProxy InBinding, out const FText InDisplayName);// 0x20b258eb6041
	void RemoveTrack(out const SequencerBindingProxy InBinding, MovieSceneTrack* TrackToRemove);// 0x20b158eb6041
	void Remove(out const SequencerBindingProxy InBinding);// 0x20b058eb6041
	void MoveBindingContents(out const SequencerBindingProxy SourceBindingId, out const SequencerBindingProxy DestinationBindingId);// 0x20af58eb6041
	bool IsValid(out const SequencerBindingProxy InBinding);// 0x20ae58eb6041
	MovieSceneTrack*[] GetTracks(out const SequencerBindingProxy InBinding);// 0x20ad58eb6041
	class Object GetPossessedObjectClass(out const SequencerBindingProxy InBinding);// 0x20ac58eb6041
	SequencerBindingProxy GetParent(out const SequencerBindingProxy InBinding);// 0x20ab58eb6041
	Object* GetObjectTemplate(out const SequencerBindingProxy InBinding);// 0x20ec58eb6041
	FString GetName(out const SequencerBindingProxy InBinding);// 0x20a958eb6041
	Guid GetId(out const SequencerBindingProxy InBinding);// 0x20a858eb6041
	FText GetDisplayName(out const SequencerBindingProxy InBinding);// 0x20a758eb6041
	SequencerBindingProxy[] GetChildPossessables(out const SequencerBindingProxy InBinding);// 0x20a658eb6041
	MovieSceneTrack*[] FindTracksByType(out const SequencerBindingProxy InBinding, class MovieSceneTrack TrackType);// 0x20a558eb6041
	MovieSceneTrack*[] FindTracksByExactType(out const SequencerBindingProxy InBinding, class MovieSceneTrack TrackType);// 0x20a458eb6041
	MovieSceneTrack* AddTrack(out const SequencerBindingProxy InBinding, class MovieSceneTrack TrackType);// 0x20a358eb6041

--------------------------------
Class: SequencerBindingProxy
	Guid BindingID;//[Offset: 0x0, Size: 0x10]
	MovieSceneSequence* Sequence;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MovieSceneEventTrackExtensions.BlueprintFunctionLibrary.Object
	class Object GetBoundObjectPropertyClass(out const MovieSceneEvent EventKey);// 0x20b758eb6041
	MovieSceneEventTriggerSection* AddEventTriggerSection(MovieSceneEventTrack* InTrack);// 0x20b658eb6041
	MovieSceneEventRepeaterSection* AddEventRepeaterSection(MovieSceneEventTrack* InTrack);// 0x20b558eb6041

--------------------------------
Class: MovieSceneEvent
	MovieSceneEventPtrs Ptrs;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: MovieSceneEventPtrs
	Function* Function;//[Offset: 0x0, Size: 0x8]
	FieldPathProperty BoundObjectProperty;//[Size: 0x20]

--------------------------------
Class: MovieSceneEventTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
	enum EventPosition;//[Offset: 0xa1, Size: 0x1]
	MovieSceneSection*[] Sections;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: MovieSceneEventTriggerSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneEventChannel EventChannel;//[Offset: 0xe8, Size: 0xd0]

--------------------------------
Class: MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEventChannel.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x50, Size: 0x10]
	MovieSceneEvent[] KeyValues;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: MovieSceneEventRepeaterSection.MovieSceneEventSectionBase.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneEvent Event;//[Offset: 0xe8, Size: 0x28]

--------------------------------
Class: MovieSceneFolderExtensions.BlueprintFunctionLibrary.Object
	bool SetFolderName(MovieSceneFolder* Folder, FName InFolderName);// 0x20c458eb6041
	bool SetFolderColor(MovieSceneFolder* Folder, Color InFolderColor);// 0x20c358eb6041
	bool RemoveChildObjectBinding(MovieSceneFolder* Folder, const SequencerBindingProxy InObjectBinding);// 0x20c258eb6041
	bool RemoveChildMasterTrack(MovieSceneFolder* Folder, MovieSceneTrack* InMasterTrack);// 0x20c158eb6041
	bool RemoveChildFolder(MovieSceneFolder* TargetFolder, MovieSceneFolder* FolderToRemove);// 0x20c058eb6041
	FName GetFolderName(MovieSceneFolder* Folder);// 0x20bf58eb6041
	Color GetFolderColor(MovieSceneFolder* Folder);// 0x20be58eb6041
	SequencerBindingProxy[] GetChildObjectBindings(MovieSceneFolder* Folder);// 0x20bd58eb6041
	MovieSceneTrack*[] GetChildMasterTracks(MovieSceneFolder* Folder);// 0x20bc58eb6041
	MovieSceneFolder*[] GetChildFolders(MovieSceneFolder* Folder);// 0x20bb58eb6041
	bool AddChildObjectBinding(MovieSceneFolder* Folder, SequencerBindingProxy InObjectBinding);// 0x20ba58eb6041
	bool AddChildMasterTrack(MovieSceneFolder* Folder, MovieSceneTrack* InMasterTrack);// 0x20b958eb6041
	bool AddChildFolder(MovieSceneFolder* TargetFolder, MovieSceneFolder* FolderToAdd);// 0x20b858eb6041

--------------------------------
Class: MovieSceneFolder.Object
	FName FolderName;//[Offset: 0x28, Size: 0x8]
	MovieSceneFolder*[] ChildFolders;//[Offset: 0x30, Size: 0x10]
	MovieSceneTrack*[] ChildMasterTracks;//[Offset: 0x40, Size: 0x10]
	FString[] ChildObjectBindingStrings;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: MovieScenePropertyTrackExtensions.BlueprintFunctionLibrary.Object
	void SetPropertyNameAndPath(MovieScenePropertyTrack* Track, out const FName InPropertyName, FString InPropertyPath);// 0x20ca58eb6041
	void SetObjectPropertyClass(MovieSceneObjectPropertyTrack* Track, class Object PropertyClass);// 0x20c958eb6041
	FName GetUniqueTrackName(MovieScenePropertyTrack* Track);// 0x20c858eb6041
	FString GetPropertyPath(MovieScenePropertyTrack* Track);// 0x20c758eb6041
	FName GetPropertyName(MovieScenePropertyTrack* Track);// 0x20c658eb6041
	class Object GetObjectPropertyClass(MovieSceneObjectPropertyTrack* Track);// 0x20c558eb6041

--------------------------------
Class: MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection* SectionToKey;//[Offset: 0x90, Size: 0x8]
	MovieScenePropertyBinding PropertyBinding;//[Offset: 0x98, Size: 0x14]
	MovieSceneSection*[] Sections;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: MovieScenePropertyBinding
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	FName PropertyPath;//[Offset: 0x8, Size: 0x8]
	bool bCanUseClassLookup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MovieSceneObjectPropertyTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	ClassPtrProperty PropertyClass;//[Size: 0x8]

--------------------------------
Class: MovieSceneScriptingKey.Object

--------------------------------
Class: MovieSceneScriptingActorReferenceKey.MovieSceneScriptingKey.Object
	void SetValue(out const MovieSceneObjectBindingID InNewValue);// 0x20ce58eb6041
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x20cd58eb6041
	MovieSceneObjectBindingID GetValue();// 0x20cc58eb6041
	FrameTime GetTime(enum TimeUnit);// 0x210d58eb6041

--------------------------------
Class: MovieSceneScriptingChannel.Object
	FName ChannelName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MovieSceneScriptingActorReferenceChannel.MovieSceneScriptingChannel.Object
	void SetDefault(MovieSceneObjectBindingID InDefaultValue);// 0x20d558eb6041
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x20d458eb6041
	void RemoveDefault();// 0x20d358eb6041
	bool HasDefault();// 0x20d258eb6041
	MovieSceneScriptingKey*[] GetKeys();// 0x20d158eb6041
	MovieSceneObjectBindingID GetDefault();// 0x20d058eb6041
	MovieSceneScriptingActorReferenceKey* AddKey(const FrameNumber InTime, MovieSceneObjectBindingID NewValue, float SubFrame, enum TimeUnit);// 0x20cf58eb6041

--------------------------------
Class: MovieSceneScriptingBoolKey.MovieSceneScriptingKey.Object
	void SetValue(bool InNewValue);// 0x20d958eb6041
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x20d858eb6041
	bool GetValue();// 0x20d758eb6041
	FrameTime GetTime(enum TimeUnit);// 0x20d658eb6041

--------------------------------
Class: MovieSceneScriptingBoolChannel.MovieSceneScriptingChannel.Object
	void SetDefault(bool InDefaultValue);// 0x20e358eb6041
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x20e258eb6041
	void RemoveDefault();// 0x20e158eb6041
	bool HasDefault();// 0x20e058eb6041
	int GetNumKeys();// 0x20df58eb6041
	MovieSceneScriptingKey*[] GetKeys();// 0x20de58eb6041
	bool GetDefault();// 0x20dd58eb6041
	bool[] EvaluateKeys(SequencerScriptingRange Range, FrameRate FrameRate);// 0x20dc58eb6041
	SequencerScriptingRange ComputeEffectiveRange();// 0x20db58eb6041
	MovieSceneScriptingBoolKey* AddKey(out const FrameNumber InTime, bool NewValue, float SubFrame, enum TimeUnit);// 0x20da58eb6041

--------------------------------
Class: SequencerScriptingRange
	bool bHasStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bHasEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int InclusiveStart;//[Offset: 0x4, Size: 0x4]
	int ExclusiveEnd;//[Offset: 0x8, Size: 0x4]
	FrameRate InternalRate;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: MovieSceneScriptingByteKey.MovieSceneScriptingKey.Object
	void SetValue(byte InNewValue);// 0x20e758eb6041
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x20e658eb6041
	byte GetValue();// 0x20e558eb6041
	FrameTime GetTime(enum TimeUnit);// 0x20e458eb6041

--------------------------------
Class: MovieSceneScriptingByteChannel.MovieSceneScriptingChannel.Object
	void SetDefault(byte InDefaultValue);// 0x20ee58eb6041
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x20ed58eb6041
	void RemoveDefault();// 0x212e58eb6041
	bool HasDefault();// 0x20eb58eb6041
	MovieSceneScriptingKey*[] GetKeys();// 0x20ea58eb6041
	byte GetDefault();// 0x20e958eb6041
	MovieSceneScriptingByteKey* AddKey(out const FrameNumber InTime, byte NewValue, float SubFrame, enum TimeUnit, enum InInterpolation);// 0x20e858eb6041

--------------------------------
Class: MovieSceneScriptingDoubleKey.MovieSceneScriptingKey.Object
	void SetValue(double InNewValue);// 0x210058eb6041
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x20ff58eb6041
	void SetTangentWeightMode(byte InNewValue);// 0x20fe58eb6041
	void SetTangentMode(byte InNewValue);// 0x20fd58eb6041
	void SetLeaveTangentWeight(float InNewValue);// 0x20fc58eb6041
	void SetLeaveTangent(float InNewValue);// 0x20fb58eb6041
	void SetInterpolationMode(byte InNewValue);// 0x20fa58eb6041
	void SetArriveTangentWeight(float InNewValue);// 0x20f958eb6041
	void SetArriveTangent(float InNewValue);// 0x20f858eb6041
	double GetValue();// 0x20f758eb6041
	FrameTime GetTime(enum TimeUnit);// 0x20f658eb6041
	byte GetTangentWeightMode();// 0x20f558eb6041
	byte GetTangentMode();// 0x20f458eb6041
	float GetLeaveTangentWeight();// 0x20f358eb6041
	float GetLeaveTangent();// 0x20f258eb6041
	byte GetInterpolationMode();// 0x20f158eb6041
	float GetArriveTangentWeight();// 0x20f058eb6041
	float GetArriveTangent();// 0x20ef58eb6041

--------------------------------
Class: MovieSceneScriptingDoubleChannel.MovieSceneScriptingChannel.Object
	void SetPreInfinityExtrapolation(byte InExtrapolation);// 0x210e58eb6041
	void SetPostInfinityExtrapolation(byte InExtrapolation);// 0x214f58eb6041
	void SetDefault(double InDefaultValue);// 0x210c58eb6041
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x210b58eb6041
	void RemoveDefault();// 0x210a58eb6041
	bool HasDefault();// 0x210958eb6041
	byte GetPreInfinityExtrapolation();// 0x210858eb6041
	byte GetPostInfinityExtrapolation();// 0x210758eb6041
	int GetNumKeys();// 0x210658eb6041
	MovieSceneScriptingKey*[] GetKeys();// 0x210558eb6041
	double GetDefault();// 0x210458eb6041
	double[] EvaluateKeys(SequencerScriptingRange Range, FrameRate FrameRate);// 0x210358eb6041
	SequencerScriptingRange ComputeEffectiveRange();// 0x210258eb6041
	MovieSceneScriptingDoubleKey* AddKey(out const FrameNumber InTime, double NewValue, float SubFrame, enum TimeUnit, enum InInterpolation);// 0x210158eb6041

--------------------------------
Class: MovieSceneScriptingEventKey.MovieSceneScriptingKey.Object
	void SetValue(out const MovieSceneEvent InNewValue);// 0x211258eb6041
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x211158eb6041
	MovieSceneEvent GetValue();// 0x211058eb6041
	FrameTime GetTime(enum TimeUnit);// 0x210f58eb6041

--------------------------------
Class: MovieSceneScriptingEventChannel.MovieSceneScriptingChannel.Object
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x211558eb6041
	MovieSceneScriptingKey*[] GetKeys();// 0x211458eb6041
	MovieSceneScriptingEventKey* AddKey(out const FrameNumber InTime, MovieSceneEvent NewValue, float SubFrame, enum TimeUnit);// 0x211358eb6041

--------------------------------
Class: MovieSceneScriptingFloatKey.MovieSceneScriptingKey.Object
	void SetValue(float InNewValue);// 0x212758eb6041
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x212658eb6041
	void SetTangentWeightMode(byte InNewValue);// 0x212558eb6041
	void SetTangentMode(byte InNewValue);// 0x212458eb6041
	void SetLeaveTangentWeight(float InNewValue);// 0x212358eb6041
	void SetLeaveTangent(float InNewValue);// 0x212258eb6041
	void SetInterpolationMode(byte InNewValue);// 0x212158eb6041
	void SetArriveTangentWeight(float InNewValue);// 0x212058eb6041
	void SetArriveTangent(float InNewValue);// 0x211f58eb6041
	float GetValue();// 0x211e58eb6041
	FrameTime GetTime(enum TimeUnit);// 0x211d58eb6041
	byte GetTangentWeightMode();// 0x211c58eb6041
	byte GetTangentMode();// 0x211b58eb6041
	float GetLeaveTangentWeight();// 0x211a58eb6041
	float GetLeaveTangent();// 0x211958eb6041
	byte GetInterpolationMode();// 0x211858eb6041
	float GetArriveTangentWeight();// 0x211758eb6041
	float GetArriveTangent();// 0x211658eb6041

--------------------------------
Class: MovieSceneScriptingActualFloatKey.MovieSceneScriptingFloatKey.MovieSceneScriptingKey.Object

--------------------------------
Class: MovieSceneScriptingDoubleAsFloatKey.MovieSceneScriptingFloatKey.MovieSceneScriptingKey.Object

--------------------------------
Class: MovieSceneScriptingFloatChannel.MovieSceneScriptingChannel.Object
	void SetPreInfinityExtrapolation(byte InExtrapolation);// 0x213558eb6041
	void SetPostInfinityExtrapolation(byte InExtrapolation);// 0x213458eb6041
	void SetDefault(float InDefaultValue);// 0x213358eb6041
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x213258eb6041
	void RemoveDefault();// 0x213158eb6041
	bool HasDefault();// 0x213058eb6041
	byte GetPreInfinityExtrapolation();// 0x212f58eb6041
	byte GetPostInfinityExtrapolation();// 0x217058eb6041
	int GetNumKeys();// 0x212d58eb6041
	MovieSceneScriptingKey*[] GetKeys();// 0x212c58eb6041
	float GetDefault();// 0x212b58eb6041
	float[] EvaluateKeys(SequencerScriptingRange Range, FrameRate FrameRate);// 0x212a58eb6041
	SequencerScriptingRange ComputeEffectiveRange();// 0x212958eb6041
	MovieSceneScriptingFloatKey* AddKey(out const FrameNumber InTime, float NewValue, float SubFrame, enum TimeUnit, enum InInterpolation);// 0x212858eb6041

--------------------------------
Class: MovieSceneScriptingIntegerKey.MovieSceneScriptingKey.Object
	void SetValue(int InNewValue);// 0x213958eb6041
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x213858eb6041
	int GetValue();// 0x213758eb6041
	FrameTime GetTime(enum TimeUnit);// 0x213658eb6041

--------------------------------
Class: MovieSceneScriptingIntegerChannel.MovieSceneScriptingChannel.Object
	void SetDefault(int InDefaultValue);// 0x214058eb6041
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x213f58eb6041
	void RemoveDefault();// 0x213e58eb6041
	bool HasDefault();// 0x213d58eb6041
	MovieSceneScriptingKey*[] GetKeys();// 0x213c58eb6041
	int GetDefault();// 0x213b58eb6041
	MovieSceneScriptingIntegerKey* AddKey(out const FrameNumber InTime, int NewValue, float SubFrame, enum TimeUnit);// 0x213a58eb6041

--------------------------------
Class: MovieSceneScriptingObjectPathKey.MovieSceneScriptingKey.Object
	void SetValue(Object* InNewValue);// 0x214458eb6041
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x214358eb6041
	Object* GetValue();// 0x214258eb6041
	FrameTime GetTime(enum TimeUnit);// 0x214158eb6041

--------------------------------
Class: MovieSceneScriptingObjectPathChannel.MovieSceneScriptingChannel.Object
	void SetDefault(Object* InDefaultValue);// 0x214b58eb6041
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x214a58eb6041
	void RemoveDefault();// 0x214958eb6041
	bool HasDefault();// 0x214858eb6041
	MovieSceneScriptingKey*[] GetKeys();// 0x214758eb6041
	Object* GetDefault();// 0x214658eb6041
	MovieSceneScriptingObjectPathKey* AddKey(const FrameNumber InTime, Object* NewValue, float SubFrame, enum TimeUnit);// 0x214558eb6041

--------------------------------
Class: MovieSceneScriptingStringKey.MovieSceneScriptingKey.Object
	void SetValue(FString InNewValue);// 0x219158eb6041
	void SetTime(out const FrameNumber NewFrameNumber, float SubFrame, enum TimeUnit);// 0x214e58eb6041
	FString GetValue();// 0x214d58eb6041
	FrameTime GetTime(enum TimeUnit);// 0x214c58eb6041

--------------------------------
Class: MovieSceneScriptingStringChannel.MovieSceneScriptingChannel.Object
	void SetDefault(FString InDefaultValue);// 0x215658eb6041
	void RemoveKey(MovieSceneScriptingKey* Key);// 0x215558eb6041
	void RemoveDefault();// 0x215458eb6041
	bool HasDefault();// 0x215358eb6041
	MovieSceneScriptingKey*[] GetKeys();// 0x215258eb6041
	FString GetDefault();// 0x215158eb6041
	MovieSceneScriptingStringKey* AddKey(out const FrameNumber InTime, FString NewValue, float SubFrame, enum TimeUnit);// 0x215058eb6041

--------------------------------
Class: MovieSceneSectionExtensions.BlueprintFunctionLibrary.Object
	void SetStartFrameSeconds(MovieSceneSection* Section, float StartTime);// 0x216958eb6041
	void SetStartFrameBounded(MovieSceneSection* Section, bool bIsBounded);// 0x216858eb6041
	void SetStartFrame(MovieSceneSection* Section, int StartFrame);// 0x216758eb6041
	void SetRangeSeconds(MovieSceneSection* Section, float StartTime, float EndTime);// 0x216658eb6041
	void SetRange(MovieSceneSection* Section, int StartFrame, int EndFrame);// 0x216558eb6041
	void SetEndFrameSeconds(MovieSceneSection* Section, float EndTime);// 0x216458eb6041
	void SetEndFrameBounded(MovieSceneSection* Section, bool bIsBounded);// 0x216358eb6041
	void SetEndFrame(MovieSceneSection* Section, int EndFrame);// 0x216258eb6041
	bool HasStartFrame(MovieSceneSection* Section);// 0x216158eb6041
	bool HasEndFrame(MovieSceneSection* Section);// 0x216058eb6041
	float GetStartFrameSeconds(MovieSceneSection* Section);// 0x215f58eb6041
	int GetStartFrame(MovieSceneSection* Section);// 0x215e58eb6041
	int GetParentSequenceFrame(MovieSceneSubSection* Section, int InFrame, MovieSceneSequence* ParentSequence);// 0x215d58eb6041
	float GetEndFrameSeconds(MovieSceneSection* Section);// 0x215c58eb6041
	int GetEndFrame(MovieSceneSection* Section);// 0x215b58eb6041
	MovieSceneScriptingChannel*[] GetChannelsByType(MovieSceneSection* Section, class MovieSceneScriptingChannel ChannelType);// 0x215a58eb6041
	MovieSceneScriptingChannel*[] GetChannels(MovieSceneSection* Section);// 0x215958eb6041
	MovieSceneScriptingChannel*[] GetAllChannels(MovieSceneSection* Section);// 0x215858eb6041
	MovieSceneScriptingChannel*[] FindChannelsByType(MovieSceneSection* Section, class MovieSceneScriptingChannel ChannelType);// 0x215758eb6041

--------------------------------
Class: MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSectionParameters Parameters;//[Offset: 0xdc, Size: 0x24]
	float StartOffset;//[Offset: 0x100, Size: 0x4]
	float TimeScale;//[Offset: 0x104, Size: 0x4]
	float PrerollTime;//[Offset: 0x108, Size: 0x4]
	byte NetworkMask;//[Offset: 0x10c, Size: 0x1]
	MovieSceneSequence* SubSequence;//[Offset: 0x110, Size: 0x8]
	void SetSequence(MovieSceneSequence* Sequence);// 0x221758eb6041
	MovieSceneSequence* GetSequence();// 0x221658eb6041

--------------------------------
Class: MovieSceneSectionParameters
	FrameNumber StartFrameOffset;//[Offset: 0x0, Size: 0x4]
	bool bCanLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	FrameNumber EndFrameOffset;//[Offset: 0x8, Size: 0x4]
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0xc, Size: 0x4]
	float TimeScale;//[Offset: 0x10, Size: 0x4]
	int HierarchicalBias;//[Offset: 0x14, Size: 0x4]
	float StartOffset;//[Offset: 0x18, Size: 0x4]
	float PrerollTime;//[Offset: 0x1c, Size: 0x4]
	float PostrollTime;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceExtensions.BlueprintFunctionLibrary.Object
	void SortMarkedFrames(MovieSceneSequence* Sequence);// 0x21a658eb6041
	void SetWorkRangeStart(MovieSceneSequence* InSequence, float StartTimeInSeconds);// 0x21a558eb6041
	void SetWorkRangeEnd(MovieSceneSequence* InSequence, float EndTimeInSeconds);// 0x21a458eb6041
	void SetViewRangeStart(MovieSceneSequence* InSequence, float StartTimeInSeconds);// 0x21a358eb6041
	void SetViewRangeEnd(MovieSceneSequence* InSequence, float EndTimeInSeconds);// 0x21a258eb6041
	void SetTickResolutionDirectly(MovieSceneSequence* Sequence, FrameRate TickResolution);// 0x21a158eb6041
	void SetTickResolution(MovieSceneSequence* Sequence, FrameRate TickResolution);// 0x21a058eb6041
	void SetReadOnly(MovieSceneSequence* Sequence, bool bInReadOnly);// 0x219f58eb6041
	void SetPlaybackStartSeconds(MovieSceneSequence* Sequence, float StartTime);// 0x219e58eb6041
	void SetPlaybackStart(MovieSceneSequence* Sequence, int StartFrame);// 0x219d58eb6041
	void SetPlaybackEndSeconds(MovieSceneSequence* Sequence, float EndTime);// 0x219c58eb6041
	void SetPlaybackEnd(MovieSceneSequence* Sequence, int EndFrame);// 0x219b58eb6041
	void SetMarkedFrame(MovieSceneSequence* Sequence, int InMarkIndex, FrameNumber InFrameNumber);// 0x219a58eb6041
	void SetEvaluationType(MovieSceneSequence* InSequence, enum InEvaluationType);// 0x219958eb6041
	void SetDisplayRate(MovieSceneSequence* Sequence, FrameRate DisplayRate);// 0x219858eb6041
	void SetClockSource(MovieSceneSequence* InSequence, enum InClockSource);// 0x219758eb6041
	SequencerBindingProxy ResolveBindingID(MovieSceneSequence* MasterSequence, MovieSceneObjectBindingID InObjectBindingID);// 0x219658eb6041
	bool RemoveMasterTrack(MovieSceneSequence* Sequence, MovieSceneTrack* MasterTrack);// 0x219558eb6041
	SequencerScriptingRange MakeRangeSeconds(MovieSceneSequence* Sequence, float StartTime, float Duration);// 0x219458eb6041
	SequencerScriptingRange MakeRange(MovieSceneSequence* Sequence, int StartFrame, int Duration);// 0x219358eb6041
	MovieSceneObjectBindingID MakeBindingID(MovieSceneSequence* MasterSequence, out const SequencerBindingProxy InBinding, enum Space);// 0x219258eb6041
	Object*[] LocateBoundObjects(MovieSceneSequence* Sequence, out const SequencerBindingProxy InBinding, Object* Context);// 0xffffff8158eb6000
	bool IsReadOnly(MovieSceneSequence* Sequence);// 0x219058eb6041
	float GetWorkRangeStart(MovieSceneSequence* InSequence);// 0x218f58eb6041
	float GetWorkRangeEnd(MovieSceneSequence* InSequence);// 0x218e58eb6041
	float GetViewRangeStart(MovieSceneSequence* InSequence);// 0x218d58eb6041
	float GetViewRangeEnd(MovieSceneSequence* InSequence);// 0x218c58eb6041
	Timecode GetTimecodeSource(MovieSceneSequence* Sequence);// 0x218b58eb6041
	FrameRate GetTickResolution(MovieSceneSequence* Sequence);// 0x218a58eb6041
	SequencerBindingProxy[] GetSpawnables(MovieSceneSequence* Sequence);// 0x218958eb6041
	MovieSceneFolder*[] GetRootFoldersInSequence(MovieSceneSequence* Sequence);// 0x218858eb6041
	SequencerBindingProxy[] GetPossessables(MovieSceneSequence* Sequence);// 0x218758eb6041
	MovieSceneObjectBindingID GetPortableBindingID(MovieSceneSequence* MasterSequence, MovieSceneSequence* DestinationSequence, out const SequencerBindingProxy InBinding);// 0x218658eb6041
	float GetPlaybackStartSeconds(MovieSceneSequence* Sequence);// 0x218558eb6041
	int GetPlaybackStart(MovieSceneSequence* Sequence);// 0x218458eb6041
	SequencerScriptingRange GetPlaybackRange(MovieSceneSequence* Sequence);// 0x218358eb6041
	float GetPlaybackEndSeconds(MovieSceneSequence* Sequence);// 0x218258eb6041
	int GetPlaybackEnd(MovieSceneSequence* Sequence);// 0x218158eb6041
	MovieScene* GetMovieScene(MovieSceneSequence* Sequence);// 0x218058eb6041
	MovieSceneTrack*[] GetMasterTracks(MovieSceneSequence* Sequence);// 0x217f58eb6041
	MovieSceneMarkedFrame[] GetMarkedFrames(MovieSceneSequence* Sequence);// 0x217e58eb6041
	enum GetEvaluationType(MovieSceneSequence* InSequence);// 0x217d58eb6041
	FrameRate GetDisplayRate(MovieSceneSequence* Sequence);// 0x217c58eb6041
	enum GetClockSource(MovieSceneSequence* InSequence);// 0x217b58eb6041
	SequencerBindingProxy[] GetBindings(MovieSceneSequence* Sequence);// 0x217a58eb6041
	MovieSceneObjectBindingID GetBindingID(out const SequencerBindingProxy InBinding);// 0x217958eb6041
	int FindNextMarkedFrame(MovieSceneSequence* Sequence, FrameNumber InFrameNumber, bool bForward);// 0x217858eb6041
	MovieSceneTrack*[] FindMasterTracksByType(MovieSceneSequence* Sequence, class MovieSceneTrack TrackType);// 0x217758eb6041
	MovieSceneTrack*[] FindMasterTracksByExactType(MovieSceneSequence* Sequence, class MovieSceneTrack TrackType);// 0x217658eb6041
	int FindMarkedFrameByLabel(MovieSceneSequence* Sequence, FString InLabel);// 0x217558eb6041
	int FindMarkedFrameByFrameNumber(MovieSceneSequence* Sequence, FrameNumber InFrameNumber);// 0x217458eb6041
	SequencerBindingProxy FindBindingByName(MovieSceneSequence* Sequence, FString Name);// 0x217358eb6041
	SequencerBindingProxy FindBindingById(MovieSceneSequence* Sequence, Guid BindingID);// 0x217258eb6041
	void DeleteMarkedFrames(MovieSceneSequence* Sequence);// 0x217158eb6041
	void DeleteMarkedFrame(MovieSceneSequence* Sequence, int DeleteIndex);// 0x21ad58eb6041
	SequencerBindingProxy AddSpawnableFromInstance(MovieSceneSequence* Sequence, Object* ObjectToSpawn);// 0x216f58eb6041
	SequencerBindingProxy AddSpawnableFromClass(MovieSceneSequence* Sequence, class Object ClassToSpawn);// 0x216e58eb6041
	MovieSceneFolder* AddRootFolderToSequence(MovieSceneSequence* Sequence, FString NewFolderName);// 0x216d58eb6041
	SequencerBindingProxy AddPossessable(MovieSceneSequence* Sequence, Object* ObjectToPossess);// 0x216c58eb6041
	MovieSceneTrack* AddMasterTrack(MovieSceneSequence* Sequence, class MovieSceneTrack TrackType);// 0x216b58eb6041
	int AddMarkedFrame(MovieSceneSequence* Sequence, out const MovieSceneMarkedFrame InMarkedFrame);// 0x216a58eb6041

--------------------------------
Class: MovieSceneTrackExtensions.BlueprintFunctionLibrary.Object
	void SetTrackRowDisplayName(MovieSceneTrack* Track, out const FText InName, int RowIndex);// 0x21b358eb6041
	void SetSortingOrder(MovieSceneTrack* Track, int SortingOrder);// 0x21b258eb6041
	void SetSectionToKey(MovieSceneTrack* Track, MovieSceneSection* Section);// 0x21b158eb6041
	void SetDisplayName(MovieSceneTrack* Track, out const FText InName);// 0x21b058eb6041
	void SetColorTint(MovieSceneTrack* Track, out const Color ColorTint);// 0x21af58eb6041
	void RemoveSection(MovieSceneTrack* Track, MovieSceneSection* Section);// 0x21ae58eb6041
	FText GetTrackRowDisplayName(MovieSceneTrack* Track, int RowIndex);// 0x21ef58eb6041
	int GetSortingOrder(MovieSceneTrack* Track);// 0x21ac58eb6041
	MovieSceneSection* GetSectionToKey(MovieSceneTrack* Track);// 0x21ab58eb6041
	MovieSceneSection*[] GetSections(MovieSceneTrack* Track);// 0x21aa58eb6041
	FText GetDisplayName(MovieSceneTrack* Track);// 0x21a958eb6041
	Color GetColorTint(MovieSceneTrack* Track);// 0x21a858eb6041
	MovieSceneSection* AddSection(MovieSceneTrack* Track);// 0x21a758eb6041

--------------------------------
Class: MovieSceneFloatVectorTrackExtensions.BlueprintFunctionLibrary.Object
	void SetNumChannelsUsed(MovieSceneFloatVectorTrack* Track, int InNumChannelsUsed);// 0x21b558eb6041
	int GetNumChannelsUsed(MovieSceneFloatVectorTrack* Track);// 0x21b458eb6041

--------------------------------
Class: MovieSceneFloatVectorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int NumChannelsUsed;//[Offset: 0xc0, Size: 0x4]

--------------------------------
Class: MovieSceneDoubleVectorTrackExtensions.BlueprintFunctionLibrary.Object
	void SetNumChannelsUsed(MovieSceneDoubleVectorTrack* Track, int InNumChannelsUsed);// 0x21b758eb6041
	int GetNumChannelsUsed(MovieSceneDoubleVectorTrack* Track);// 0x21b658eb6041

--------------------------------
Class: MovieSceneDoubleVectorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int NumChannelsUsed;//[Offset: 0xc0, Size: 0x4]

--------------------------------
Class: SequencerScriptingRangeExtensions.BlueprintFunctionLibrary.Object
	void SetStartSeconds(out SequencerScriptingRange Range, float Start);// 0x21c358eb6041
	void SetStartFrame(out SequencerScriptingRange Range, int Start);// 0x21c258eb6041
	void SetEndSeconds(out SequencerScriptingRange Range, float End);// 0x21c158eb6041
	void SetEndFrame(out SequencerScriptingRange Range, int End);// 0x21c058eb6041
	void RemoveStart(out SequencerScriptingRange Range);// 0x21bf58eb6041
	void RemoveEnd(out SequencerScriptingRange Range);// 0x21be58eb6041
	bool HasStart(out const SequencerScriptingRange Range);// 0x21bd58eb6041
	bool HasEnd(out const SequencerScriptingRange Range);// 0x21bc58eb6041
	float GetStartSeconds(out const SequencerScriptingRange Range);// 0x21bb58eb6041
	int GetStartFrame(out const SequencerScriptingRange Range);// 0x21ba58eb6041
	float GetEndSeconds(out const SequencerScriptingRange Range);// 0x21b958eb6041
	int GetEndFrame(out const SequencerScriptingRange Range);// 0x21b858eb6041

--------------------------------
Class: RetargetChainSettings.Object
	FName SourceChain;//[Offset: 0x28, Size: 0x8]
	FName TargetChain;//[Offset: 0x30, Size: 0x8]
	bool CopyPoseUsingFK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	enum RotationMode;//[Offset: 0x39, Size: 0x1]
	float RotationAlpha;//[Offset: 0x3c, Size: 0x4]
	enum TranslationMode;//[Offset: 0x40, Size: 0x1]
	float TranslationAlpha;//[Offset: 0x44, Size: 0x4]
	bool DriveIKGoal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	float BlendToSource;//[Offset: 0x4c, Size: 0x4]
	Vector BlendToSourceWeights;//[Offset: 0x50, Size: 0x18]
	Vector StaticOffset;//[Offset: 0x68, Size: 0x18]
	float Extension;//[Offset: 0x80, Size: 0x4]
	float MatchSourceVelocity;//[Offset: 0x84, Size: 0x4]
	float VelocityThreshold;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: IKRetargeter.Object
	IKRigDefinition* SourceIKRigAsset;//[Offset: 0x28, Size: 0x8]
	IKRigDefinition* TargetIKRigAsset;//[Offset: 0x30, Size: 0x8]
	bool bRetargetRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bRetargetFK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bRetargetIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 0x1]
	<FName,IKRetargetPose> RetargetPoses;//[Offset: 0x40, Size: 0x50]
	RetargetChainMap[] ChainMapping;//[Offset: 0x90, Size: 0x10]
	RetargetChainSettings*[] ChainSettings;//[Offset: 0xa0, Size: 0x10]
	FName CurrentRetargetPose;//[Offset: 0xb0, Size: 0x8]

--------------------------------
Class: IKRigDefinition.Object
	SkeletalMesh* PreviewSkeletalMesh;//[Offset: 0x30, Size: 0x8]
	IKRigSkeleton Skeleton;//[Offset: 0x38, Size: 0x70]
	IKRigEffectorGoal*[] Goals;//[Offset: 0xa8, Size: 0x10]
	IKRigSolver*[] Solvers;//[Offset: 0xb8, Size: 0x10]
	RetargetDefinition RetargetDefinition;//[Offset: 0xc8, Size: 0x18]

--------------------------------
Class: IKRigSkeleton
	FName[] BoneNames;//[Offset: 0x0, Size: 0x10]
	int[] ParentIndices;//[Offset: 0x10, Size: 0x10]
	FName[] ExcludedBones;//[Offset: 0x20, Size: 0x10]
	Transform[] CurrentPoseGlobal;//[Offset: 0x30, Size: 0x10]
	Transform[] CurrentPoseLocal;//[Offset: 0x40, Size: 0x10]
	Transform[] RefPoseGlobal;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: IKRigEffectorGoal.Object
	FName GoalName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	float PositionAlpha;//[Offset: 0x38, Size: 0x4]
	float RotationAlpha;//[Offset: 0x3c, Size: 0x4]
	Transform CurrentTransform;//[Offset: 0x40, Size: 0x60]
	Transform InitialTransform;//[Offset: 0xa0, Size: 0x60]

--------------------------------
Class: IKRigSolver.Object

--------------------------------
Class: RetargetDefinition
	FName RootBone;//[Offset: 0x0, Size: 0x8]
	BoneChain[] BoneChains;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BoneChain
	FName ChainName;//[Offset: 0x0, Size: 0x8]
	BoneReference StartBone;//[Offset: 0x8, Size: 0x10]
	BoneReference EndBone;//[Offset: 0x18, Size: 0x10]
	FName IKGoalName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: IKRetargetPose
	Vector RootTranslationOffset;//[Offset: 0x0, Size: 0x18]
	<FName,Quat> BoneRotationOffsets;//[Offset: 0x18, Size: 0x50]

--------------------------------
Class: RetargetChainMap
	FName SourceChain;//[Offset: 0x0, Size: 0x8]
	FName TargetChain;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: IKRetargetProcessor.Object
	IKRigProcessor* IKRigProcessor;//[Offset: 0xf8, Size: 0x8]

--------------------------------
Class: IKRigProcessor.Object
	IKRigSolver*[] Solvers;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: IKRigComponent.ActorComponent.Object
	void SetIKRigGoalTransform(const FName GoalName, const Transform Transform, const float PositionAlpha, const float RotationAlpha);// 0x21c758eb6041
	void SetIKRigGoalPositionAndRotation(const FName GoalName, const Vector Position, const Quat Rotation, const float PositionAlpha, const float RotationAlpha);// 0x21c658eb6041
	void SetIKRigGoal(out const IKRigGoal Goal);// 0x21c558eb6041
	void ClearAllGoals();// 0x21c458eb6041

--------------------------------
Class: IKRigGoal
	FName Name;//[Offset: 0x0, Size: 0x8]
	enum TransformSource;//[Offset: 0x8, Size: 0x1]
	BoneReference SourceBone;//[Offset: 0xc, Size: 0x10]
	Vector Position;//[Offset: 0x20, Size: 0x18]
	Rotator Rotation;//[Offset: 0x38, Size: 0x18]
	float PositionAlpha;//[Offset: 0x50, Size: 0x4]
	float RotationAlpha;//[Offset: 0x54, Size: 0x4]
	enum PositionSpace;//[Offset: 0x58, Size: 0x1]
	enum RotationSpace;//[Offset: 0x59, Size: 0x1]
	Vector FinalBlendedPosition;//[Offset: 0x60, Size: 0x18]
	Quat FinalBlendedRotation;//[Offset: 0x80, Size: 0x20]

--------------------------------
Class: IKGoalCreatorInterface.Interface.Object
	void AddIKGoals(out <FName,IKRigGoal> OutGoals);// 0x21c858eb6041

--------------------------------
Class: IKRig_BodyMoverEffector.Object
	FName GoalName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	float InfluenceMultiplier;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: IKRig_BodyMover.IKRigSolver.Object
	FName RootBone;//[Offset: 0x28, Size: 0x8]
	float PositionAlpha;//[Offset: 0x30, Size: 0x4]
	float PositionPositiveX;//[Offset: 0x34, Size: 0x4]
	float PositionNegativeX;//[Offset: 0x38, Size: 0x4]
	float PositionPositiveY;//[Offset: 0x3c, Size: 0x4]
	float PositionNegativeY;//[Offset: 0x40, Size: 0x4]
	float PositionPositiveZ;//[Offset: 0x44, Size: 0x4]
	float PositionNegativeZ;//[Offset: 0x48, Size: 0x4]
	float RotationAlpha;//[Offset: 0x4c, Size: 0x4]
	float RotateXAlpha;//[Offset: 0x50, Size: 0x4]
	float RotateYAlpha;//[Offset: 0x54, Size: 0x4]
	float RotateZAlpha;//[Offset: 0x58, Size: 0x4]
	IKRig_BodyMoverEffector*[] Effectors;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: IKRig_LimbEffector.Object
	FName GoalName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: IKRig_LimbSolver.IKRigSolver.Object
	FName RootName;//[Offset: 0x28, Size: 0x8]
	float ReachPrecision;//[Offset: 0x30, Size: 0x4]
	byte HingeRotationAxis;//[Offset: 0x34, Size: 0x1]
	int MaxIterations;//[Offset: 0x38, Size: 0x4]
	bool bEnableLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	float MinRotationAngle;//[Offset: 0x40, Size: 0x4]
	bool bAveragePull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	float PullDistribution;//[Offset: 0x48, Size: 0x4]
	float ReachStepAlpha;//[Offset: 0x4c, Size: 0x4]
	bool bEnableTwistCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	byte EndBoneForwardAxis;//[Offset: 0x51, Size: 0x1]
	IKRig_LimbEffector* Effector;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: IKRig_FBIKEffector.Object
	FName GoalName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	float StrengthAlpha;//[Offset: 0x38, Size: 0x4]
	float PullChainAlpha;//[Offset: 0x3c, Size: 0x4]
	float PinRotation;//[Offset: 0x40, Size: 0x4]
	int IndexInSolver;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: IKRig_PBIKBoneSettings.Object
	FName bone;//[Offset: 0x28, Size: 0x8]
	float RotationStiffness;//[Offset: 0x30, Size: 0x4]
	float PositionStiffness;//[Offset: 0x34, Size: 0x4]
	enum X;//[Offset: 0x38, Size: 0x1]
	float MinX;//[Offset: 0x3c, Size: 0x4]
	float MaxX;//[Offset: 0x40, Size: 0x4]
	enum Y;//[Offset: 0x44, Size: 0x1]
	float MinY;//[Offset: 0x48, Size: 0x4]
	float MaxY;//[Offset: 0x4c, Size: 0x4]
	enum Z;//[Offset: 0x50, Size: 0x1]
	float MinZ;//[Offset: 0x54, Size: 0x4]
	float MaxZ;//[Offset: 0x58, Size: 0x4]
	bool bUsePreferredAngles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	Vector PreferredAngles;//[Offset: 0x60, Size: 0x18]

--------------------------------
Class: IKRigPBIKSolver.IKRigSolver.Object
	FName RootBone;//[Offset: 0x28, Size: 0x8]
	int Iterations;//[Offset: 0x30, Size: 0x4]
	float MassMultiplier;//[Offset: 0x34, Size: 0x4]
	float MinMassMultiplier;//[Offset: 0x38, Size: 0x4]
	bool bAllowStretch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	enum RootBehavior;//[Offset: 0x3d, Size: 0x1]
	bool bStartSolveFromInputPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	IKRig_FBIKEffector*[] Effectors;//[Offset: 0x40, Size: 0x10]
	IKRig_PBIKBoneSettings*[] BoneSettings;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: IKRig_PoleSolverEffector.Object
	FName GoalName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	float Alpha;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: IKRig_PoleSolver.IKRigSolver.Object
	FName RootName;//[Offset: 0x28, Size: 0x8]
	FName EndName;//[Offset: 0x30, Size: 0x8]
	IKRig_PoleSolverEffector* Effector;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: IKRig_SetTransformEffector.Object
	bool bEnablePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bEnableRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	float Alpha;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: IKRig_SetTransform.IKRigSolver.Object
	FName Goal;//[Offset: 0x28, Size: 0x8]
	FName RootBone;//[Offset: 0x30, Size: 0x8]
	IKRig_SetTransformEffector* Effector;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: CameraAnimationCameraModifier.CameraModifier.Object
	ActiveCameraAnimationInfo[] ActiveAnimations;//[Offset: 0x48, Size: 0x10]
	uint16 InstanceSerialNumber;//[Offset: 0x58, Size: 0x2]
	void StopCameraAnimation(out const CameraAnimationHandle Handle, bool bImmediate);// 0x21d758eb6041
	void StopAllCameraAnimationsOf(CameraAnimationSequence* Sequence, bool bImmediate);// 0x21d658eb6041
	void StopAllCameraAnimations(bool bImmediate);// 0x21d558eb6041
	CameraAnimationHandle PlayCameraAnimation(CameraAnimationSequence* Sequence, CameraAnimationParams Params);// 0x21d458eb6041
	bool IsCameraAnimationActive(out const CameraAnimationHandle Handle);// 0x21d358eb6041
	CameraAnimationCameraModifier* GetCameraAnimationCameraModifierFromPlayerController(const PlayerController* PlayerController);// 0x21d258eb6041
	CameraAnimationCameraModifier* GetCameraAnimationCameraModifierFromID(const Object* WorldContextObject, int ControllerId);// 0x21d158eb6041
	CameraAnimationCameraModifier* GetCameraAnimationCameraModifier(const Object* WorldContextObject, int PlayerIndex);// 0x21d058eb6041

--------------------------------
Class: ActiveCameraAnimationInfo
	CameraAnimationSequence* Sequence;//[Offset: 0x0, Size: 0x8]
	CameraAnimationParams Params;//[Offset: 0x8, Size: 0x40]
	CameraAnimationHandle Handle;//[Offset: 0x48, Size: 0x4]
	CameraAnimationSequencePlayer* Player;//[Offset: 0x50, Size: 0x8]
	CameraAnimationSequenceCameraStandIn* CameraStandIn;//[Offset: 0x58, Size: 0x8]
	float EaseInCurrentTime;//[Offset: 0x60, Size: 0x4]
	float EaseOutCurrentTime;//[Offset: 0x64, Size: 0x4]
	bool bIsEasingIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bIsEasingOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]

--------------------------------
Class: CameraAnimationSequence.TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object

--------------------------------
Class: TemplateSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8]
	class Actor* BoundActorClass;//[Offset: 0x68, Size: 0x28]
	Actor* BoundPreviewActor;//[Offset: 0x90, Size: 0x28]
	<Guid,FName> BoundActorComponents;//[Offset: 0xb8, Size: 0x50]

--------------------------------
Class: CameraAnimationParams
	float PlayRate;//[Offset: 0x0, Size: 0x4]
	float Scale;//[Offset: 0x4, Size: 0x4]
	enum EaseInType;//[Offset: 0x8, Size: 0x1]
	float EaseInDuration;//[Offset: 0xc, Size: 0x4]
	enum EaseOutType;//[Offset: 0x10, Size: 0x1]
	float EaseOutDuration;//[Offset: 0x14, Size: 0x4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	float DurationOverride;//[Offset: 0x1c, Size: 0x4]
	enum PlaySpace;//[Offset: 0x20, Size: 0x1]
	Rotator UserPlaySpaceRot;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: CameraAnimationHandle

--------------------------------
Class: CameraAnimationSequencePlayer.Object
	Object* BoundObjectOverride;//[Offset: 0x2a8, Size: 0x8]
	MovieSceneSequence* Sequence;//[Offset: 0x2b0, Size: 0x8]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x2b8, Size: 0xe0]

--------------------------------
Class: CameraAnimationSequenceCameraStandIn.Object
	float FieldOfView;//[Offset: 0x30, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	float AspectRatio;//[Offset: 0x38, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x6b0]
	float PostProcessBlendWeight;//[Offset: 0x6f0, Size: 0x4]
	CameraFilmbackSettings Filmback;//[Offset: 0x6f4, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0x700, Size: 0x18]
	CameraFocusSettings FocusSettings;//[Offset: 0x718, Size: 0x68]
	float CurrentFocalLength;//[Offset: 0x780, Size: 0x4]
	float CurrentAperture;//[Offset: 0x784, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0x788, Size: 0x4]

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]
	float SensorAspectRatio;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 0x4]
	float MaxFocalLength;//[Offset: 0x4, Size: 0x4]
	float MinFStop;//[Offset: 0x8, Size: 0x4]
	float MaxFStop;//[Offset: 0xc, Size: 0x4]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 0x4]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 0x48]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	Color DebugFocusPlaneColor;//[Offset: 0x54, Size: 0x4]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x5c, Size: 0x4]
	float FocusOffset;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x28, Size: 0x18]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: TestCameraShake.CameraShakeBase.Object

--------------------------------
Class: SimpleCameraShakePattern.CameraShakePattern.Object
	float Duration;//[Offset: 0x28, Size: 0x4]
	float BlendInTime;//[Offset: 0x2c, Size: 0x4]
	float BlendOutTime;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: ConstantCameraShakePattern.SimpleCameraShakePattern.CameraShakePattern.Object
	Vector LocationOffset;//[Offset: 0x38, Size: 0x18]
	Rotator RotationOffset;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: CompositeCameraShakePattern.CameraShakePattern.Object
	CameraShakePattern*[] ChildPatterns;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: DefaultCameraShakeBase.CameraShakeBase.Object

--------------------------------
Class: PerlinNoiseCameraShakePattern.SimpleCameraShakePattern.CameraShakePattern.Object
	float LocationAmplitudeMultiplier;//[Offset: 0x34, Size: 0x4]
	float LocationFrequencyMultiplier;//[Offset: 0x38, Size: 0x4]
	PerlinNoiseShaker X;//[Offset: 0x3c, Size: 0x8]
	PerlinNoiseShaker Y;//[Offset: 0x44, Size: 0x8]
	PerlinNoiseShaker Z;//[Offset: 0x4c, Size: 0x8]
	float RotationAmplitudeMultiplier;//[Offset: 0x54, Size: 0x4]
	float RotationFrequencyMultiplier;//[Offset: 0x58, Size: 0x4]
	PerlinNoiseShaker Pitch;//[Offset: 0x5c, Size: 0x8]
	PerlinNoiseShaker Yaw;//[Offset: 0x64, Size: 0x8]
	PerlinNoiseShaker Roll;//[Offset: 0x6c, Size: 0x8]
	PerlinNoiseShaker FOV;//[Offset: 0x74, Size: 0x8]

--------------------------------
Class: PerlinNoiseShaker
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MatineeCameraShake.CameraShakeBase.Object
	float OscillationDuration;//[Offset: 0xe8, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0xec, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0xf0, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0xf4, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x118, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x13c, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x148, Size: 0x4]
	float AnimScale;//[Offset: 0x14c, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x150, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x154, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x158, Size: 0x4]
	CameraAnim* Anim;//[Offset: 0x160, Size: 0x8]
	CameraAnimationSequence* AnimSequence;//[Offset: 0x168, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1]
	float OscillatorTimeRemaining;//[Offset: 0x174, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x178, Size: 0x8]
	SequenceCameraShakePattern* SequenceShakePattern;//[Offset: 0x1f8, Size: 0x8]
	MatineeCameraShake* StartMatineeCameraShakeFromSource(PlayerCameraManager* PlayerCameraManager, class MatineeCameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x21df58eb6041
	MatineeCameraShake* StartMatineeCameraShake(PlayerCameraManager* PlayerCameraManager, class MatineeCameraShake ShakeClass, float Scale, enum PlaySpace, Rotator UserPlaySpaceRot);// 0x21de58eb6041
	void ReceiveStopShake(bool bImmediately);// 0x21dd58eb6041
	void ReceivePlayShake(float Scale);// 0x21dc58eb6041
	bool ReceiveIsFinished();// 0x21db58eb6041
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x21da58eb6041

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: SequenceCameraShakePattern.CameraShakePattern.Object
	CameraAnimationSequence* Sequence;//[Offset: 0x28, Size: 0x8]
	float PlayRate;//[Offset: 0x30, Size: 0x4]
	float Scale;//[Offset: 0x34, Size: 0x4]
	float BlendInTime;//[Offset: 0x38, Size: 0x4]
	float BlendOutTime;//[Offset: 0x3c, Size: 0x4]
	float RandomSegmentDuration;//[Offset: 0x40, Size: 0x4]
	bool bRandomSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	CameraAnimationSequencePlayer* Player;//[Offset: 0x48, Size: 0x8]
	CameraAnimationSequenceCameraStandIn* CameraStandIn;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: MatineeCameraShakePattern.CameraShakePattern.Object

--------------------------------
Class: MovieSceneCameraShakeEvaluator.Object

--------------------------------
Class: MovieSceneMatineeCameraShakeEvaluator.MovieSceneCameraShakeEvaluator.Object

--------------------------------
Class: MatineeCameraShakeFunctionLibrary.BlueprintFunctionLibrary.Object
	MatineeCameraShake* Conv_MatineeCameraShake(CameraShakeBase* CameraShake);// 0x21e058eb6041

--------------------------------
Class: WaveOscillatorCameraShakePattern.SimpleCameraShakePattern.CameraShakePattern.Object
	float LocationAmplitudeMultiplier;//[Offset: 0x34, Size: 0x4]
	float LocationFrequencyMultiplier;//[Offset: 0x38, Size: 0x4]
	WaveOscillator X;//[Offset: 0x3c, Size: 0xc]
	WaveOscillator Y;//[Offset: 0x48, Size: 0xc]
	WaveOscillator Z;//[Offset: 0x54, Size: 0xc]
	float RotationAmplitudeMultiplier;//[Offset: 0x60, Size: 0x4]
	float RotationFrequencyMultiplier;//[Offset: 0x64, Size: 0x4]
	WaveOscillator Pitch;//[Offset: 0x68, Size: 0xc]
	WaveOscillator Yaw;//[Offset: 0x74, Size: 0xc]
	WaveOscillator Roll;//[Offset: 0x80, Size: 0xc]
	WaveOscillator FOV;//[Offset: 0x8c, Size: 0xc]

--------------------------------
Class: WaveOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	enum InitialOffsetType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: CameraAnimationSequenceSubsystem.WorldSubsystem.Subsystem.Object
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: SequenceCameraShakeTestUtil.BlueprintFunctionLibrary.Object
	bool GetPostProcessBlendCache(PlayerController* PlayerController, int PPIndex, out PostProcessSettings OutPPSettings, out float OutPPBlendWeight);// 0x21e358eb6041
	MinimalViewInfo GetLastFrameCameraCachePOV(PlayerController* PlayerController);// 0x21e258eb6041
	MinimalViewInfo GetCameraCachePOV(PlayerController* PlayerController);// 0x21e158eb6041

--------------------------------
Class: TemplateSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x288, Size: 0x14]
	TemplateSequencePlayer* SequencePlayer;//[Offset: 0x2a0, Size: 0x8]
	SoftObjectPath TemplateSequence;//[Offset: 0x2a8, Size: 0x18]
	TemplateSequenceBindingOverrideData BindingOverride;//[Offset: 0x2c0, Size: 0xc]
	void SetSequence(TemplateSequence* InSequence);// 0x21e858eb6041
	void SetBinding(Actor* Actor, bool bOverridesDefault);// 0x21e758eb6041
	TemplateSequence* LoadSequence();// 0x21e658eb6041
	TemplateSequencePlayer* GetSequencePlayer();// 0x21e558eb6041
	TemplateSequence* GetSequence();// 0x21e458eb6041

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float StartTime;//[Offset: 0xc, Size: 0x4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: TemplateSequencePlayer.MovieSceneSequencePlayer.Object
	TemplateSequencePlayer* CreateTemplateSequencePlayer(Object* WorldContextObject, TemplateSequence* TemplateSequence, MovieSceneSequencePlaybackSettings Settings, out TemplateSequenceActor* OutActor);// 0x221558eb6041

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x238, Size: 0x10]
	delegate OnPlayReverse;//[Offset: 0x248, Size: 0x10]
	delegate OnStop;//[Offset: 0x258, Size: 0x10]
	delegate OnPause;//[Offset: 0x268, Size: 0x10]
	delegate OnFinished;//[Offset: 0x278, Size: 0x10]
	byte Status;//[Offset: 0x288, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x289, Size: 0x1]
	MovieSceneSequence* Sequence;//[Offset: 0x290, Size: 0x8]
	FrameNumber StartTime;//[Offset: 0x298, Size: 0x4]
	int DurationFrames;//[Offset: 0x29c, Size: 0x4]
	float DurationSubFrames;//[Offset: 0x2a0, Size: 0x4]
	int CurrentNumLoops;//[Offset: 0x2a4, Size: 0x4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x2a8, Size: 0x14]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x2c0, Size: 0xe0]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x420, Size: 0x10]
	interface class None* PlaybackClient;//[Offset: 0x430, Size: 0x10]
	MovieSceneSequenceTickManager* TickManager;//[Offset: 0x440, Size: 0x8]
	void StopAtCurrentTime();// 0x221458eb6041
	void Stop();// 0x221358eb6041
	void SetTimeRange(float StartTime, float Duration);// 0x221258eb6041
	void SetPlayRate(float PlayRate);// 0x221158eb6041
	void SetPlaybackPosition(MovieSceneSequencePlaybackParams PlaybackParams);// 0x225258eb6041
	void SetFrameRate(FrameRate FrameRate);// 0x220f58eb6041
	void SetFrameRange(int StartFrame, int Duration, float SubFrames);// 0x220e58eb6041
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x220d58eb6041
	void ScrubToSeconds(float TimeInSeconds);// 0x220c58eb6041
	bool ScrubToMarkedFrame(FString InLabel);// 0x220b58eb6041
	void ScrubToFrame(FrameTime NewPosition);// 0x220a58eb6041
	void Scrub();// 0x220958eb6041
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x220858eb6041
	void RPC_OnFinishPlaybackEvent(FrameTime StoppedTime);// 0x220758eb6041
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x220658eb6041
	void RestoreState();// 0x220558eb6041
	void PlayToSeconds(float TimeInSeconds);// 0x220458eb6041
	bool PlayToMarkedFrame(FString InLabel);// 0x220358eb6041
	void PlayToFrame(FrameTime NewPosition);// 0x220258eb6041
	void PlayTo(MovieSceneSequencePlaybackParams PlaybackParams, MovieSceneSequencePlayToParams PlayToParams);// 0x220158eb6041
	void PlayReverse();// 0x220058eb6041
	void PlayLooping(int NumLoops);// 0x21ff58eb6041
	void Play();// 0x21fe58eb6041
	void Pause();// 0x21fd58eb6041
	void JumpToSeconds(float TimeInSeconds);// 0x21fc58eb6041
	bool JumpToMarkedFrame(FString InLabel);// 0x21fb58eb6041
	void JumpToFrame(FrameTime NewPosition);// 0x21fa58eb6041
	bool IsReversed();// 0x21f958eb6041
	bool IsPlaying();// 0x21f858eb6041
	bool IsPaused();// 0x21f758eb6041
	void GoToEndAndStop();// 0x21f658eb6041
	QualifiedFrameTime GetStartTime();// 0x21f558eb6041
	FString GetSequenceName(bool bAddClientInfo);// 0x21f458eb6041
	MovieSceneSequence* GetSequence();// 0x21f358eb6041
	float GetPlayRate();// 0x21f258eb6041
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x21f158eb6041
	FrameRate GetFrameRate();// 0x21f058eb6041
	int GetFrameDuration();// 0x223158eb6041
	QualifiedFrameTime GetEndTime();// 0x21ee58eb6041
	QualifiedFrameTime GetDuration();// 0x21ed58eb6041
	bool GetDisableCameraCuts();// 0x21ec58eb6041
	QualifiedFrameTime GetCurrentTime();// 0x21eb58eb6041
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x21ea58eb6041
	void ChangePlaybackDirection();// 0x21e958eb6041

--------------------------------
Class: MovieSceneSequencePlaybackParams
	FrameTime Frame;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
	FString MarkedFrame;//[Offset: 0x10, Size: 0x10]
	enum PositionType;//[Offset: 0x20, Size: 0x1]
	enum UpdateMethod;//[Offset: 0x21, Size: 0x1]
	bool bHasJumped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 0x1]

--------------------------------
Class: MovieSceneSequencePlayToParams
	bool bExclusive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 0x8]
	byte LastKnownStatus;//[Offset: 0x8, Size: 0x1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceTickManager.Object
	MovieSceneSequenceActorPointers[] SequenceActors;//[Offset: 0x28, Size: 0x10]
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: MovieSceneSequenceActorPointers
	Actor* SequenceActor;//[Offset: 0x0, Size: 0x8]
	interface class None* SequenceActorInterface;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TemplateSequenceBindingOverrideData
	Object* Object;//[Offset: 0x0, Size: 0x8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TemplateSequenceSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	TemplateSectionPropertyScale[] PropertyScales;//[Offset: 0x120, Size: 0x10]

--------------------------------
Class: TemplateSectionPropertyScale
	Guid ObjectBinding;//[Offset: 0x0, Size: 0x10]
	MovieScenePropertyBinding PropertyBinding;//[Offset: 0x10, Size: 0x14]
	enum PropertyScaleType;//[Offset: 0x24, Size: 0x4]
	MovieSceneFloatChannel FloatChannel;//[Offset: 0x28, Size: 0xe8]

--------------------------------
Class: MovieSceneEntitySystem.Object
	MovieSceneEntitySystemLinker* Linker;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: TemplateSequenceSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: TemplateSequencePropertyScalingInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: TemplateSequencePropertyScalingEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: TemplateSequenceTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: OodleNetworkTrainerCommandlet.Commandlet.Object
	bool bCompressionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	bool bWriteV5Dictionaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]
	int HashTableSize;//[Offset: 0x7c, Size: 0x4]
	int DictionarySize;//[Offset: 0x80, Size: 0x4]
	int DictionaryTrials;//[Offset: 0x84, Size: 0x4]
	int TrialRandomness;//[Offset: 0x88, Size: 0x4]
	int TrialGenerations;//[Offset: 0x8c, Size: 0x4]
	bool bNoTrials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]

--------------------------------
Class: AnimSharingStateInstance.AnimInstance.Object
	AnimSequence* AnimationToPlay;//[Offset: 0x348, Size: 0x8]
	float PermutationTimeOffset;//[Offset: 0x350, Size: 0x4]
	float PlayRate;//[Offset: 0x354, Size: 0x4]
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	AnimSharingInstance* Instance;//[Offset: 0x360, Size: 0x8]
	void GetInstancedActors(out Actor*[] Actors);// 0x221858eb6041

--------------------------------
Class: AnimSharingInstance.Object
	Actor*[] RegisteredActors;//[Offset: 0x28, Size: 0x10]
	AnimationSharingStateProcessor* StateProcessor;//[Offset: 0x88, Size: 0x8]
	AnimSequence*[] UsedAnimationSequences;//[Offset: 0xc8, Size: 0x10]
	Enum* StateEnum;//[Offset: 0xe8, Size: 0x8]
	Actor* SharingActor;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: AnimationSharingStateProcessor.Object
	Enum* AnimationStateEnum;//[Offset: 0x28, Size: 0x28]
	void ProcessActorState(out int OutState, Actor* InActor, byte CurrentState, byte OnDemandState, out bool bShouldProcess);// 0x221e58eb6041
	Enum* GetAnimationStateEnum();// 0x221d58eb6041

--------------------------------
Class: AnimSharingTransitionInstance.AnimInstance.Object
	SkeletalMeshComponent* FromComponent;//[Offset: 0x348, Size: 0x8]
	SkeletalMeshComponent* ToComponent;//[Offset: 0x350, Size: 0x8]
	float BlendTime;//[Offset: 0x358, Size: 0x4]
	bool bBlendBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 0x1]

--------------------------------
Class: AnimSharingAdditiveInstance.AnimInstance.Object
	SkeletalMeshComponent* BaseComponent;//[Offset: 0x348, Size: 0x8]
	AnimSequence* AdditiveAnimation;//[Offset: 0x350, Size: 0x8]
	float Alpha;//[Offset: 0x358, Size: 0x4]
	bool bStateBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 0x1]

--------------------------------
Class: AnimationSharingManager.Object
	Skeleton*[] Skeletons;//[Offset: 0x28, Size: 0x10]
	AnimSharingInstance*[] PerSkeletonData;//[Offset: 0x38, Size: 0x10]
	void RegisterActorWithSkeletonBP(Actor* InActor, const Skeleton* SharingSkeleton);// 0x221c58eb6041
	AnimationSharingManager* GetAnimationSharingManager(Object* WorldContextObject);// 0x221b58eb6041
	bool CreateAnimationSharingManager(Object* WorldContextObject, const AnimationSharingSetup* Setup);// 0x221a58eb6041
	bool AnimationSharingEnabled();// 0x221958eb6041

--------------------------------
Class: AnimationSharingSetup.Object
	PerSkeletonAnimationSharingSetup[] SkeletonSetups;//[Offset: 0x28, Size: 0x10]
	AnimationSharingScalability ScalabilitySettings;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: PerSkeletonAnimationSharingSetup
	Skeleton* Skeleton;//[Offset: 0x0, Size: 0x8]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x8, Size: 0x8]
	class AnimSharingTransitionInstance* BlendAnimBlueprint;//[Offset: 0x10, Size: 0x8]
	class AnimSharingAdditiveInstance* AdditiveAnimBlueprint;//[Offset: 0x18, Size: 0x8]
	class AnimationSharingStateProcessor* StateProcessorClass;//[Offset: 0x20, Size: 0x8]
	AnimationStateEntry[] AnimationStates;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AnimationStateEntry
	byte State;//[Offset: 0x0, Size: 0x1]
	AnimationSetup[] AnimationSetups;//[Offset: 0x8, Size: 0x10]
	bool bOnDemand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]
	float BlendTime;//[Offset: 0x1c, Size: 0x4]
	bool bReturnToPreviousState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
	bool bSetNextState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 0x1]
	byte NextState;//[Offset: 0x22, Size: 0x1]
	PerPlatformInt MaximumNumberOfConcurrentInstances;//[Offset: 0x24, Size: 0x4]
	float WiggleTimePercentage;//[Offset: 0x28, Size: 0x4]
	bool bRequiresCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: AnimationSetup
	AnimSequence* AnimSequence;//[Offset: 0x0, Size: 0x8]
	class AnimSharingStateInstance* AnimBlueprint;//[Offset: 0x8, Size: 0x8]
	PerPlatformInt NumRandomizedInstances;//[Offset: 0x10, Size: 0x4]
	PerPlatformBool Enabled;//[Offset: 0x14, Size: 0x1]

--------------------------------
Class: AnimationSharingScalability
	PerPlatformBool UseBlendTransitions;//[Offset: 0x0, Size: 0x1]
	PerPlatformFloat BlendSignificanceValue;//[Offset: 0x4, Size: 0x4]
	PerPlatformInt MaximumNumberConcurrentBlends;//[Offset: 0x8, Size: 0x4]
	PerPlatformFloat TickSignificanceValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SignificanceManager.Object
	SoftClassPath SignificanceManagerClassName;//[Offset: 0x108, Size: 0x18]

--------------------------------
Class: MyPluginObject.Object
	MyPluginStruct MyStruct;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MyPluginStruct
	FString TestString;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AudioCurveSourceComponent.AudioComponent.SceneComponent.ActorComponent.Object
	FName CurveSourceBindingName;//[Offset: 0xb28, Size: 0x8]
	float CurveSyncOffset;//[Offset: 0xb30, Size: 0x4]

--------------------------------
Class: DatasmithObjectTemplate.Object

--------------------------------
Class: DatasmithActorTemplate.DatasmithObjectTemplate.Object
	<FName> Layers;//[Offset: 0x30, Size: 0x50]
	<FName> Tags;//[Offset: 0x80, Size: 0x50]

--------------------------------
Class: DatasmithAdditionalData.Object

--------------------------------
Class: DatasmithAreaLightActor.Actor.Object
	byte Mobility;//[Offset: 0x278, Size: 0x1]
	enum LightType;//[Offset: 0x279, Size: 0x1]
	enum LightShape;//[Offset: 0x27a, Size: 0x1]
	Vector2D Dimensions;//[Offset: 0x280, Size: 0x10]
	float Intensity;//[Offset: 0x290, Size: 0x4]
	enum IntensityUnits;//[Offset: 0x294, Size: 0x1]
	LinearColor Color;//[Offset: 0x298, Size: 0x10]
	float Temperature;//[Offset: 0x2a8, Size: 0x4]
	TextureLightProfile* IESTexture;//[Offset: 0x2b0, Size: 0x8]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	float IESBrightnessScale;//[Offset: 0x2bc, Size: 0x4]
	Rotator Rotation;//[Offset: 0x2c0, Size: 0x18]
	float SourceRadius;//[Offset: 0x2d8, Size: 0x4]
	float SourceLength;//[Offset: 0x2dc, Size: 0x4]
	float AttenuationRadius;//[Offset: 0x2e0, Size: 0x4]
	float SpotlightInnerAngle;//[Offset: 0x2e4, Size: 0x4]
	float SpotlightOuterAngle;//[Offset: 0x2e8, Size: 0x4]

--------------------------------
Class: DatasmithAreaLightActorTemplate.DatasmithObjectTemplate.Object
	enum LightType;//[Offset: 0x29, Size: 0x1]
	enum LightShape;//[Offset: 0x2a, Size: 0x1]
	Vector2D Dimensions;//[Offset: 0x30, Size: 0x10]
	LinearColor Color;//[Offset: 0x40, Size: 0x10]
	float Intensity;//[Offset: 0x50, Size: 0x4]
	enum IntensityUnits;//[Offset: 0x54, Size: 0x1]
	float Temperature;//[Offset: 0x58, Size: 0x4]
	TextureLightProfile* IESTexture;//[Offset: 0x60, Size: 0x28]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float IESBrightnessScale;//[Offset: 0x8c, Size: 0x4]
	Rotator Rotation;//[Offset: 0x90, Size: 0x18]
	float SourceRadius;//[Offset: 0xa8, Size: 0x4]
	float SourceLength;//[Offset: 0xac, Size: 0x4]
	float AttenuationRadius;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithStaticMeshCADImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithTranslatedSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithCADImportSceneData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithMDLSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithGLTFSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	FString Generator;//[Offset: 0x28, Size: 0x10]
	float Version;//[Offset: 0x38, Size: 0x4]
	FString Author;//[Offset: 0x40, Size: 0x10]
	FString License;//[Offset: 0x50, Size: 0x10]
	FString Source;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: DatasmithStaticMeshGLTFImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object
	FString SourceMeshName;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	FString TexturesDir;//[Offset: 0x30, Size: 0x10]
	byte IntermediateSerialization;//[Offset: 0x40, Size: 0x1]
	bool bColorizeMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]

--------------------------------
Class: DatasmithDeltaGenAssetImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithDeltaGenSceneImportData.DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bMergeNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	bool bOptimizeDuplicatedNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	bool bRemoveInvisibleNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bSimplifyNodeHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool bImportVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	FString VarPath;//[Offset: 0x48, Size: 0x10]
	bool bImportPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	FString PosPath;//[Offset: 0x60, Size: 0x10]
	bool bImportTml;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	FString TmlPath;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: DatasmithVREDAssetImportData.DatasmithAssetImportData.AssetImportData.Object

--------------------------------
Class: DatasmithVREDSceneImportData.DatasmithFBXSceneImportData.DatasmithSceneImportData.AssetImportData.Object
	bool bMergeNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	bool bOptimizeDuplicatedNodes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	bool bImportMats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	FString MatsPath;//[Offset: 0x48, Size: 0x10]
	bool bImportVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bCleanVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]
	FString VarPath;//[Offset: 0x60, Size: 0x10]
	bool bImportLightInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	FString LightInfoPath;//[Offset: 0x78, Size: 0x10]
	bool bImportClipInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	FString ClipInfoPath;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: DatasmithIFCSceneImportData.DatasmithSceneImportData.AssetImportData.Object

--------------------------------
Class: DatasmithStaticMeshIFCImportData.DatasmithStaticMeshImportData.DatasmithAssetImportData.AssetImportData.Object
	FString SourceGlobalId;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: DatasmithAssetUserData.AssetUserData.Object
	<FName,FString> MetaData;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: DatasmithCineCameraActorTemplate.DatasmithObjectTemplate.Object
	DatasmithCameraLookatTrackingSettingsTemplate LookatTrackingSettings;//[Offset: 0x30, Size: 0x30]

--------------------------------
Class: DatasmithCameraLookatTrackingSettingsTemplate
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	Actor* ActorToTrack;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: DatasmithCineCameraComponentTemplate.DatasmithObjectTemplate.Object
	DatasmithCameraFilmbackSettingsTemplate FilmbackSettings;//[Offset: 0x2c, Size: 0x8]
	DatasmithCameraLensSettingsTemplate LensSettings;//[Offset: 0x34, Size: 0x4]
	DatasmithCameraFocusSettingsTemplate FocusSettings;//[Offset: 0x38, Size: 0x8]
	float CurrentFocalLength;//[Offset: 0x40, Size: 0x4]
	float CurrentAperture;//[Offset: 0x44, Size: 0x4]
	DatasmithPostProcessSettingsTemplate PostProcessSettings;//[Offset: 0x50, Size: 0x40]

--------------------------------
Class: DatasmithCameraFilmbackSettingsTemplate
	float SensorWidth;//[Offset: 0x0, Size: 0x4]
	float SensorHeight;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DatasmithCameraLensSettingsTemplate
	float MaxFStop;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: DatasmithCameraFocusSettingsTemplate
	enum FocusMethod;//[Offset: 0x0, Size: 0x1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DatasmithPostProcessSettingsTemplate
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	float WhiteTemp;//[Offset: 0x4, Size: 0x4]
	float VignetteIntensity;//[Offset: 0x8, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0x10, Size: 0x20]
	byte AutoExposureMethod;//[Offset: 0x30, Size: 0x1]
	float CameraISO;//[Offset: 0x34, Size: 0x4]
	float CameraShutterSpeed;//[Offset: 0x38, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: DatasmithContentBlueprintLibrary.BlueprintFunctionLibrary.Object
	FString GetDatasmithUserDataValueForKey(Object* Object, FName Key);// 0x224458eb6041
	void GetDatasmithUserDataKeysAndValuesForValue(Object* Object, FString StringToMatch, out FName[] OutKeys, out FString[] OutValues);// 0x224358eb6041
	DatasmithAssetUserData* GetDatasmithUserData(Object* Object);// 0x224258eb6041

--------------------------------
Class: DatasmithCustomActionBase.Object

--------------------------------
Class: DatasmithDecalComponentTemplate.DatasmithObjectTemplate.Object
	int SortOrder;//[Offset: 0x2c, Size: 0x4]
	Vector DecalSize;//[Offset: 0x30, Size: 0x18]
	MaterialInterface* Material;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: DatasmithImportedSequencesActor.Actor.Object
	LevelSequence*[] ImportedSequences;//[Offset: 0x278, Size: 0x10]
	void PlayLevelSequence(LevelSequence* SequenceToPlay);// 0x224558eb6041

--------------------------------
Class: DatasmithOptionsBase.Object

--------------------------------
Class: DatasmithCommonTessellationOptions.DatasmithOptionsBase.Object
	DatasmithTessellationOptions Options;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: DatasmithTessellationOptions
	float ChordTolerance;//[Offset: 0x0, Size: 0x4]
	float MaxEdgeLength;//[Offset: 0x4, Size: 0x4]
	float NormalTolerance;//[Offset: 0x8, Size: 0x4]
	enum StitchingTechnique;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: DatasmithImportOptions.DatasmithOptionsBase.Object
	enum SearchPackagePolicy;//[Offset: 0x28, Size: 0x1]
	enum MaterialConflictPolicy;//[Offset: 0x29, Size: 0x1]
	enum TextureConflictPolicy;//[Offset: 0x2a, Size: 0x1]
	enum StaticMeshActorImportPolicy;//[Offset: 0x2b, Size: 0x1]
	enum LightImportPolicy;//[Offset: 0x2c, Size: 0x1]
	enum CameraImportPolicy;//[Offset: 0x2d, Size: 0x1]
	enum OtherActorImportPolicy;//[Offset: 0x2e, Size: 0x1]
	enum MaterialQuality;//[Offset: 0x2f, Size: 0x1]
	DatasmithImportBaseOptions BaseOptions;//[Offset: 0x30, Size: 0x14]
	DatasmithReimportOptions ReimportOptions;//[Offset: 0x44, Size: 0x2]
	FString Filename;//[Offset: 0x48, Size: 0x10]
	FString FilePath;//[Offset: 0x58, Size: 0x10]
	FString SourceUri;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: DatasmithImportBaseOptions
	enum SceneHandling;//[Offset: 0x0, Size: 0x1]
	bool bIncludeGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bIncludeMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bIncludeLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bIncludeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bIncludeAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	DatasmithAssetImportOptions AssetOptions;//[Offset: 0x8, Size: 0x8]
	DatasmithStaticMeshImportOptions StaticMeshOptions;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: DatasmithAssetImportOptions
	FName PackagePath;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: DatasmithStaticMeshImportOptions
	enum MinLightmapResolution;//[Offset: 0x0, Size: 0x1]
	enum MaxLightmapResolution;//[Offset: 0x1, Size: 0x1]
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: DatasmithReimportOptions
	bool bUpdateActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bRespawnDeletedActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: DatasmithLandscapeTemplate.DatasmithObjectTemplate.Object
	MaterialInterface* LandscapeMaterial;//[Offset: 0x30, Size: 0x8]
	int StaticLightingLOD;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: DatasmithLightComponentTemplate.DatasmithObjectTemplate.Object
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	float Intensity;//[Offset: 0x2c, Size: 0x4]
	float Temperature;//[Offset: 0x30, Size: 0x4]
	float IESBrightnessScale;//[Offset: 0x34, Size: 0x4]
	LinearColor LightColor;//[Offset: 0x38, Size: 0x10]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x48, Size: 0x8]
	TextureLightProfile* IESTexture;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: DatasmithMaterialInstanceTemplate.DatasmithObjectTemplate.Object
	MaterialInterface* ParentMaterial;//[Offset: 0x30, Size: 0x28]
	<FName,float> ScalarParameterValues;//[Offset: 0x58, Size: 0x50]
	<FName,LinearColor> VectorParameterValues;//[Offset: 0xa8, Size: 0x50]
	<FName,Texture*> TextureParameterValues;//[Offset: 0xf8, Size: 0x50]
	DatasmithStaticParameterSetTemplate StaticParameters;//[Offset: 0x148, Size: 0x50]

--------------------------------
Class: DatasmithStaticParameterSetTemplate
	<FName,bool> StaticSwitchParameters;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: DatasmithPointLightComponentTemplate.DatasmithObjectTemplate.Object
	enum IntensityUnits;//[Offset: 0x29, Size: 0x1]
	float SourceRadius;//[Offset: 0x2c, Size: 0x4]
	float SourceLength;//[Offset: 0x30, Size: 0x4]
	float AttenuationRadius;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: DatasmithPostProcessVolumeTemplate.DatasmithObjectTemplate.Object
	DatasmithPostProcessSettingsTemplate Settings;//[Offset: 0x30, Size: 0x40]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: DatasmithScene.Object

--------------------------------
Class: DatasmithSceneActor.Actor.Object
	DatasmithScene* Scene;//[Offset: 0x278, Size: 0x8]
	<FName,Actor*> RelatedActors;//[Offset: 0x280, Size: 0x50]

--------------------------------
Class: DatasmithSceneComponentTemplate.DatasmithObjectTemplate.Object
	Transform RelativeTransform;//[Offset: 0x30, Size: 0x60]
	byte Mobility;//[Offset: 0x90, Size: 0x1]
	SceneComponent* AttachParent;//[Offset: 0x98, Size: 0x28]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	<FName> Tags;//[Offset: 0xc8, Size: 0x50]

--------------------------------
Class: DatasmithSkyLightComponentTemplate.DatasmithObjectTemplate.Object
	byte SourceType;//[Offset: 0x29, Size: 0x1]
	int CubemapResolution;//[Offset: 0x2c, Size: 0x4]
	TextureCube* Cubemap;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: DatasmithSpotLightComponentTemplate.DatasmithObjectTemplate.Object
	float InnerConeAngle;//[Offset: 0x2c, Size: 0x4]
	float OuterConeAngle;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: DatasmithStaticMeshComponentTemplate.DatasmithObjectTemplate.Object
	StaticMesh* StaticMesh;//[Offset: 0x30, Size: 0x8]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: DatasmithStaticMeshTemplate.DatasmithObjectTemplate.Object
	DatasmithMeshSectionInfoMapTemplate SectionInfoMap;//[Offset: 0x30, Size: 0x50]
	int LightMapCoordinateIndex;//[Offset: 0x80, Size: 0x4]
	int LightMapResolution;//[Offset: 0x84, Size: 0x4]
	DatasmithMeshBuildSettingsTemplate[] BuildSettings;//[Offset: 0x88, Size: 0x10]
	DatasmithStaticMaterialTemplate[] StaticMaterials;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: DatasmithMeshSectionInfoMapTemplate
	<uint32,DatasmithMeshSectionInfoTemplate> Map;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: DatasmithMeshSectionInfoTemplate
	int MaterialIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: DatasmithMeshBuildSettingsTemplate
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGenerateLightmapUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	int MinLightmapResolution;//[Offset: 0x4, Size: 0x4]
	int SrcLightmapIndex;//[Offset: 0x8, Size: 0x4]
	int DstLightmapIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: DatasmithStaticMaterialTemplate
	FName MaterialSlotName;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* MaterialInterface;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: LevelVariantSets.Object
	ClassPtrProperty DirectorClass;//[Size: 0x8]
	VariantSet*[] VariantSets;//[Offset: 0x30, Size: 0x10]
	VariantSet* GetVariantSetByName(FString VariantSetName);// 0x224858eb6041
	VariantSet* GetVariantSet(int VariantSetIndex);// 0x224758eb6041
	int GetNumVariantSets();// 0x224658eb6041

--------------------------------
Class: VariantSet.Object
	FText DisplayText;//[Offset: 0x28, Size: 0x18]
	bool bExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	Variant*[] Variants;//[Offset: 0x60, Size: 0x10]
	Texture2D* Thumbnail;//[Offset: 0x70, Size: 0x8]
	void SetThumbnailFromTexture(Texture2D* NewThumbnail);// 0x226f58eb6041
	void SetThumbnailFromFile(FString FilePath);// 0x226e58eb6041
	void SetThumbnailFromEditorViewport();// 0x226d58eb6041
	void SetThumbnailFromCamera(Object* WorldContextObject, out const Transform CameraTransform, float FOVDegrees, float MinZ, float Gamma);// 0x226c58eb6041
	void SetDisplayText(out const FText NewDisplayText);// 0x226b58eb6041
	Variant* GetVariantByName(FString VariantName);// 0x226a58eb6041
	Variant* GetVariant(int VariantIndex);// 0x226958eb6041
	Texture2D* GetThumbnail();// 0x226858eb6041
	LevelVariantSets* GetParent();// 0x226758eb6041
	int GetNumVariants();// 0x226658eb6041
	FText GetDisplayText();// 0x226558eb6041

--------------------------------
Class: Variant.Object
	VariantDependency[] Dependencies;//[Offset: 0x28, Size: 0x10]
	FText DisplayText;//[Offset: 0x38, Size: 0x18]
	VariantObjectBinding*[] ObjectBindings;//[Offset: 0x68, Size: 0x10]
	Texture2D* Thumbnail;//[Offset: 0x78, Size: 0x8]
	void SwitchOn();// 0x226458eb6041
	void SetThumbnailFromTexture(Texture2D* NewThumbnail);// 0x226358eb6041
	void SetThumbnailFromFile(FString FilePath);// 0x226258eb6041
	void SetThumbnailFromEditorViewport();// 0x226158eb6041
	void SetThumbnailFromCamera(Object* WorldContextObject, out const Transform CameraTransform, float FOVDegrees, float MinZ, float Gamma);// 0x226058eb6041
	void SetDisplayText(out const FText NewDisplayText);// 0x225f58eb6041
	void SetDependency(int Index, out VariantDependency Dependency);// 0x225e58eb6041
	bool IsActive();// 0x225d58eb6041
	Texture2D* GetThumbnail();// 0x225c58eb6041
	VariantSet* GetParent();// 0x225b58eb6041
	int GetNumDependencies();// 0x225a58eb6041
	int GetNumActors();// 0x225958eb6041
	FText GetDisplayText();// 0x225858eb6041
	Variant*[] GetDependents(LevelVariantSets* LevelVariantSets, bool bOnlyEnabledDependencies);// 0x225758eb6041
	VariantDependency GetDependency(int Index);// 0x225658eb6041
	Actor* GetActor(int ActorIndex);// 0x225558eb6041
	void DeleteDependency(int Index);// 0x225458eb6041
	int AddDependency(out VariantDependency Dependency);// 0x225358eb6041

--------------------------------
Class: VariantDependency
	VariantSet* VariantSet;//[Offset: 0x0, Size: 0x28]
	Variant* Variant;//[Offset: 0x28, Size: 0x28]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: VariantObjectBinding.Object
	FString CachedActorLabel;//[Offset: 0x28, Size: 0x10]
	SoftObjectPath ObjectPtr;//[Offset: 0x38, Size: 0x18]
	Object* LazyObjectPtr;//[Offset: 0x50, Size: 0x1c]
	PropertyValue*[] CapturedProperties;//[Offset: 0x70, Size: 0x10]
	FunctionCaller[] FunctionCallers;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: PropertyValue.Object
	Properties(FieldPathProperty)[] Properties;//[Offset: 0x88, Size: 0x10]
	int[] PropertyIndices;//[Offset: 0x98, Size: 0x10]
	CapturedPropSegment[] CapturedPropSegments;//[Offset: 0xa8, Size: 0x10]
	FString FullDisplayString;//[Offset: 0xb8, Size: 0x10]
	FName PropertySetterName;//[Offset: 0xc8, Size: 0x8]
	<FString,FString> PropertySetterParameterDefaults;//[Offset: 0xd0, Size: 0x50]
	bool bHasRecordedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]
	ClassPtrProperty LeafPropertyClass;//[Size: 0x8]
	byte[] ValueBytes;//[Offset: 0x138, Size: 0x10]
	enum PropCategory;//[Offset: 0x148, Size: 0x1]
	bool HasRecordedData();// 0x224f58eb6041
	FText GetPropertyTooltip();// 0x224e58eb6041
	FString GetFullDisplayString();// 0x224d58eb6041

--------------------------------
Class: CapturedPropSegment
	FString PropertyName;//[Offset: 0x0, Size: 0x10]
	int PropertyIndex;//[Offset: 0x10, Size: 0x4]
	FString ComponentName;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: FunctionCaller
	FName FunctionName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: LevelVariantSetsActor.Actor.Object
	SoftObjectPath LevelVariantSets;//[Offset: 0x278, Size: 0x18]
	<DirectorInstances_Key(ClassPtrProperty),LevelVariantSetsFunctionDirector*> DirectorInstances;//[Offset: 0x290, Size: 0x50]
	bool SwitchOnVariantByName(FString VariantSetName, FString VariantName);// 0x224c58eb6041
	bool SwitchOnVariantByIndex(int VariantSetIndex, int VariantIndex);// 0x224b58eb6041
	void SetLevelVariantSets(LevelVariantSets* InVariantSets);// 0x224a58eb6041
	LevelVariantSets* GetLevelVariantSets(bool bLoad);// 0x224958eb6041

--------------------------------
Class: LevelVariantSetsFunctionDirector.Object

--------------------------------
Class: PropertyValueTransform.PropertyValue.Object

--------------------------------
Class: PropertyValueVisibility.PropertyValue.Object

--------------------------------
Class: PropertyValueColor.PropertyValue.Object

--------------------------------
Class: PropertyValueMaterial.PropertyValue.Object

--------------------------------
Class: PropertyValueOption.PropertyValue.Object

--------------------------------
Class: PropertyValueSoftObject.PropertyValue.Object

--------------------------------
Class: SwitchActor.Actor.Object
	SceneComponent* SceneComponent;//[Offset: 0x290, Size: 0x8]
	int LastSelectedOption;//[Offset: 0x298, Size: 0x4]
	void SelectOption(int OptionIndex);// 0x229458eb6041
	int GetSelectedOption();// 0x225158eb6041
	Actor*[] GetOptions();// 0x225058eb6041

--------------------------------
Class: AutomationUtilsBlueprintLibrary.BlueprintFunctionLibrary.Object
	void TakeGameplayAutomationScreenshot(const FString ScreenshotName, float MaxGlobalError, float MaxLocalError, FString MapNameOverride);// 0x227058eb6041

--------------------------------
Class: ClothConfigBase.Object

--------------------------------
Class: ClothConfigCommon.ClothConfigBase.Object

--------------------------------
Class: ChaosClothConfig.ClothConfigCommon.ClothConfigBase.Object
	enum MassMode;//[Offset: 0x28, Size: 0x1]
	float UniformMass;//[Offset: 0x2c, Size: 0x4]
	float TotalMass;//[Offset: 0x30, Size: 0x4]
	float Density;//[Offset: 0x34, Size: 0x4]
	float MinPerParticleMass;//[Offset: 0x38, Size: 0x4]
	ChaosClothWeightedValue EdgeStiffnessWeighted;//[Offset: 0x3c, Size: 0x8]
	ChaosClothWeightedValue BendingStiffnessWeighted;//[Offset: 0x44, Size: 0x8]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	ChaosClothWeightedValue AreaStiffnessWeighted;//[Offset: 0x50, Size: 0x8]
	float VolumeStiffness;//[Offset: 0x58, Size: 0x4]
	ChaosClothWeightedValue TetherStiffness;//[Offset: 0x5c, Size: 0x8]
	ChaosClothWeightedValue TetherScale;//[Offset: 0x64, Size: 0x8]
	bool bUseGeodesicDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 0x1]
	float ShapeTargetStiffness;//[Offset: 0x70, Size: 0x4]
	float CollisionThickness;//[Offset: 0x74, Size: 0x4]
	float FrictionCoefficient;//[Offset: 0x78, Size: 0x4]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 0x1]
	float SelfCollisionThickness;//[Offset: 0x80, Size: 0x4]
	bool bUseLegacyBackstop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	float DampingCoefficient;//[Offset: 0x88, Size: 0x4]
	float LocalDampingCoefficient;//[Offset: 0x8c, Size: 0x4]
	bool bUsePointBasedWindModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	ChaosClothWeightedValue Drag;//[Offset: 0x94, Size: 0x8]
	ChaosClothWeightedValue Lift;//[Offset: 0x9c, Size: 0x8]
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	float GravityScale;//[Offset: 0xa8, Size: 0x4]
	Vector Gravity;//[Offset: 0xb0, Size: 0x18]
	ChaosClothWeightedValue AnimDriveStiffness;//[Offset: 0xc8, Size: 0x8]
	ChaosClothWeightedValue AnimDriveDamping;//[Offset: 0xd0, Size: 0x8]
	Vector LinearVelocityScale;//[Offset: 0xd8, Size: 0x18]
	float AngularVelocityScale;//[Offset: 0xf0, Size: 0x4]
	float FictitiousAngularScale;//[Offset: 0xf4, Size: 0x4]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 0x1]

--------------------------------
Class: ChaosClothWeightedValue
	float Low;//[Offset: 0x0, Size: 0x4]
	float High;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ClothSharedConfigCommon.ClothConfigCommon.ClothConfigBase.Object

--------------------------------
Class: ChaosClothSharedSimConfig.ClothSharedConfigCommon.ClothConfigCommon.ClothConfigBase.Object
	int IterationCount;//[Offset: 0x28, Size: 0x4]
	int MaxIterationCount;//[Offset: 0x2c, Size: 0x4]
	int SubdivisionCount;//[Offset: 0x30, Size: 0x4]
	bool bUseLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bUseXPBDConstraints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]

--------------------------------
Class: ChaosClothingSimulationFactory.ClothingSimulationFactory.Object

--------------------------------
Class: ChaosClothingInteractor.ClothingInteractor.Object
	void SetWind(Vector2D Drag, Vector2D Lift, float AirDensity, Vector WindVelocity);// 0x227e58eb6041
	void SetVelocityScale(Vector LinearVelocityScale, float AngularVelocityScale, float FictitiousAngularScale);// 0x227d58eb6041
	void SetMaterialLinear(float EdgeStiffness, float BendingStiffness, float AreaStiffness);// 0x227c58eb6041
	void SetMaterial(Vector2D EdgeStiffness, Vector2D BendingStiffness, Vector2D AreaStiffness);// 0x227b58eb6041
	void SetLongRangeAttachmentLinear(float TetherStiffness, float TetherScale);// 0x227a58eb6041
	void SetLongRangeAttachment(Vector2D TetherStiffness, Vector2D TetherScale);// 0x227958eb6041
	void SetGravity(float GravityScale, bool bIsGravityOverridden, Vector GravityOverride);// 0x227858eb6041
	void SetDamping(float DampingCoefficient);// 0x227758eb6041
	void SetCollision(float CollisionThickness, float FrictionCoefficient, bool bUseCCD, float SelfCollisionThickness);// 0x227658eb6041
	void SetBackstop(bool bEnabled);// 0x227558eb6041
	void SetAnimDriveLinear(float AnimDriveStiffness);// 0x227458eb6041
	void SetAnimDrive(Vector2D AnimDriveStiffness, Vector2D AnimDriveDamping);// 0x22b558eb6041
	void SetAerodynamics(float DragCoefficient, float LiftCoefficient, Vector WindVelocity);// 0x227258eb6041
	void ResetAndTeleport(bool bReset, bool bTeleport);// 0x227158eb6041

--------------------------------
Class: ChaosClothingSimulationInteractor.ClothingSimulationInteractor.Object

--------------------------------
Class: MovieSceneGeometryCollectionSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneGeometryCollectionParams Params;//[Offset: 0xe0, Size: 0x30]

--------------------------------
Class: MovieSceneGeometryCollectionParams
	SoftObjectPath GeometryCollectionCache;//[Offset: 0x8, Size: 0x18]
	FrameNumber StartFrameOffset;//[Offset: 0x20, Size: 0x4]
	FrameNumber EndFrameOffset;//[Offset: 0x24, Size: 0x4]
	float PlayRate;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: MovieSceneGeometryCollectionTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: KismetProceduralMeshLibrary.BlueprintFunctionLibrary.Object
	void SliceProceduralMesh(ProceduralMeshComponent* InProcMesh, Vector PlanePosition, Vector PlaneNormal, bool bCreateOtherHalf, out ProceduralMeshComponent* OutOtherHalfProcMesh, enum CapOption, MaterialInterface* CapMaterial);// 0x229758eb6041
	void GetSectionFromStaticMesh(StaticMesh* InMesh, int LODIndex, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x229658eb6041
	void GetSectionFromProceduralMesh(ProceduralMeshComponent* InProcMesh, int SectionIndex, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x229558eb6041
	void GenerateBoxMesh(Vector BoxRadius, out Vector[] Vertices, out int[] Triangles, out Vector[] Normals, out Vector2D[] UVs, out ProcMeshTangent[] Tangents);// 0x22d158eb6041
	void CreateGridMeshWelded(int NumX, int NumY, out int[] Triangles, out Vector[] Vertices, out Vector2D[] UVs, float GridSpacing);// 0x229358eb6041
	void CreateGridMeshTriangles(int NumX, int NumY, bool bWinding, out int[] Triangles);// 0x229258eb6041
	void CreateGridMeshSplit(int NumX, int NumY, out int[] Triangles, out Vector[] Vertices, out Vector2D[] UVs, out Vector2D[] UV1s, float GridSpacing);// 0x229158eb6041
	void CopyProceduralMeshFromStaticMeshComponent(StaticMeshComponent* StaticMeshComponent, int LODIndex, ProceduralMeshComponent* ProcMeshComponent, bool bCreateCollision);// 0x229058eb6041
	void ConvertQuadToTriangles(out int[] Triangles, int Vert0, int Vert1, int Vert2, int Vert3);// 0x228f58eb6041
	void CalculateTangentsForMesh(out const Vector[] Vertices, out const int[] Triangles, out const Vector2D[] UVs, out Vector[] Normals, out ProcMeshTangent[] Tangents);// 0x228e58eb6041

--------------------------------
Class: ProceduralMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x569, Size: 0x1]
	BodySetup* ProcMeshBodySetup;//[Offset: 0x570, Size: 0x8]
	ProcMeshSection[] ProcMeshSections;//[Offset: 0x578, Size: 0x10]
	KConvexElem[] CollisionConvexElems;//[Offset: 0x588, Size: 0x10]
	BoxSphereBounds LocalBounds;//[Offset: 0x598, Size: 0x38]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x5d0, Size: 0x10]
	void UpdateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents);// 0x22a258eb6041
	void UpdateMeshSection(int SectionIndex, out const Vector[] Vertices, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents);// 0x22a158eb6041
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x22a058eb6041
	bool IsMeshSectionVisible(int SectionIndex);// 0x229f58eb6041
	int GetNumSections();// 0x229e58eb6041
	void CreateMeshSection_LinearColor(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const Vector2D[] UV3, out const LinearColor[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x229d58eb6041
	void CreateMeshSection(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const Vector2D[] UV0, out const Color[] VertexColors, out const ProcMeshTangent[] Tangents, bool bCreateCollision);// 0x229c58eb6041
	void ClearMeshSection(int SectionIndex);// 0x229b58eb6041
	void ClearCollisionConvexMeshes();// 0x229a58eb6041
	void ClearAllMeshSections();// 0x229958eb6041
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x229858eb6041

--------------------------------
Class: ProcMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 0x18]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: ProcMeshSection
	ProcMeshVertex[] ProcVertexBuffer;//[Offset: 0x0, Size: 0x10]
	uint32[] ProcIndexBuffer;//[Offset: 0x10, Size: 0x10]
	Box SectionLocalBox;//[Offset: 0x20, Size: 0x38]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool bSectionVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: ProcMeshVertex
	Vector Position;//[Offset: 0x0, Size: 0x18]
	Vector Normal;//[Offset: 0x18, Size: 0x18]
	ProcMeshTangent Tangent;//[Offset: 0x30, Size: 0x20]
	Color Color;//[Offset: 0x50, Size: 0x4]
	Vector2D UV0;//[Offset: 0x58, Size: 0x10]
	Vector2D UV1;//[Offset: 0x68, Size: 0x10]
	Vector2D UV2;//[Offset: 0x78, Size: 0x10]
	Vector2D UV3;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceChaosDestruction.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	<ChaosSolverActor*> ChaosSolverActorSet;//[Offset: 0x38, Size: 0x50]
	enum DataSourceType;//[Offset: 0x88, Size: 0x1]
	int DataProcessFrequency;//[Offset: 0x8c, Size: 0x4]
	int MaxNumberOfDataEntriesToSpawn;//[Offset: 0x90, Size: 0x4]
	bool DoSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 0x1]
	Vector2D SpawnMultiplierMinMax;//[Offset: 0x98, Size: 0x10]
	float SpawnChance;//[Offset: 0xa8, Size: 0x4]
	Vector2D ImpulseToSpawnMinMax;//[Offset: 0xb0, Size: 0x10]
	Vector2D SpeedToSpawnMinMax;//[Offset: 0xc0, Size: 0x10]
	Vector2D MassToSpawnMinMax;//[Offset: 0xd0, Size: 0x10]
	Vector2D ExtentMinToSpawnMinMax;//[Offset: 0xe0, Size: 0x10]
	Vector2D ExtentMaxToSpawnMinMax;//[Offset: 0xf0, Size: 0x10]
	Vector2D VolumeToSpawnMinMax;//[Offset: 0x100, Size: 0x10]
	Vector2D SolverTimeToSpawnMinMax;//[Offset: 0x110, Size: 0x10]
	int SurfaceTypeToSpawn;//[Offset: 0x120, Size: 0x4]
	enum LocationFilteringMode;//[Offset: 0x124, Size: 0x1]
	enum LocationXToSpawn;//[Offset: 0x125, Size: 0x1]
	Vector2D LocationXToSpawnMinMax;//[Offset: 0x128, Size: 0x10]
	enum LocationYToSpawn;//[Offset: 0x138, Size: 0x1]
	Vector2D LocationYToSpawnMinMax;//[Offset: 0x140, Size: 0x10]
	enum LocationZToSpawn;//[Offset: 0x150, Size: 0x1]
	Vector2D LocationZToSpawnMinMax;//[Offset: 0x158, Size: 0x10]
	float TrailMinSpeedToSpawn;//[Offset: 0x168, Size: 0x4]
	enum DataSortingType;//[Offset: 0x16c, Size: 0x1]
	bool bGetExternalCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 0x1]
	bool DoSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e, Size: 0x1]
	Vector SpatialHashVolumeMin;//[Offset: 0x170, Size: 0x18]
	Vector SpatialHashVolumeMax;//[Offset: 0x188, Size: 0x18]
	Vector SpatialHashVolumeCellSize;//[Offset: 0x1a0, Size: 0x18]
	int MaxDataPerCell;//[Offset: 0x1b8, Size: 0x4]
	bool bApplyMaterialsFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 0x1]
	<PhysicalMaterial*> ChaosBreakingMaterialSet;//[Offset: 0x1c0, Size: 0x50]
	bool bGetExternalBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	bool bGetExternalTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 0x1]
	Vector2D RandomPositionMagnitudeMinMax;//[Offset: 0x218, Size: 0x10]
	float InheritedVelocityMultiplier;//[Offset: 0x228, Size: 0x4]
	enum RandomVelocityGenerationType;//[Offset: 0x22c, Size: 0x1]
	Vector2D RandomVelocityMagnitudeMinMax;//[Offset: 0x230, Size: 0x10]
	float SpreadAngleMax;//[Offset: 0x240, Size: 0x4]
	Vector VelocityOffsetMin;//[Offset: 0x248, Size: 0x18]
	Vector VelocityOffsetMax;//[Offset: 0x260, Size: 0x18]
	Vector2D FinalVelocityMagnitudeMinMax;//[Offset: 0x278, Size: 0x10]
	float MaxLatency;//[Offset: 0x288, Size: 0x4]
	enum DebugType;//[Offset: 0x28c, Size: 0x1]
	int LastSpawnedPointID;//[Offset: 0x290, Size: 0x4]
	float LastSpawnTime;//[Offset: 0x294, Size: 0x4]
	float SolverTime;//[Offset: 0x2a8, Size: 0x4]
	float TimeStampOfLastProcessedData;//[Offset: 0x2ac, Size: 0x4]

--------------------------------
Class: ChaosSolverActor.Actor.Object
	ChaosSolverConfiguration Properties;//[Offset: 0x278, Size: 0x6c]
	float TimeStepMultiplier;//[Offset: 0x2e4, Size: 0x4]
	int CollisionIterations;//[Offset: 0x2e8, Size: 0x4]
	int PushOutIterations;//[Offset: 0x2ec, Size: 0x4]
	int PushOutPairIterations;//[Offset: 0x2f0, Size: 0x4]
	float ClusterConnectionFactor;//[Offset: 0x2f4, Size: 0x4]
	enum ClusterUnionConnectionType;//[Offset: 0x2f8, Size: 0x1]
	bool DoGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 0x1]
	SolverCollisionFilterSettings CollisionFilterSettings;//[Offset: 0x2fc, Size: 0x10]
	bool DoGenerateBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	SolverBreakingFilterSettings BreakingFilterSettings;//[Offset: 0x310, Size: 0x10]
	bool DoGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	SolverTrailingFilterSettings TrailingFilterSettings;//[Offset: 0x324, Size: 0x10]
	float MassScale;//[Offset: 0x334, Size: 0x4]
	bool bGenerateContactGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 0x1]
	bool bHasFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 0x1]
	float FloorHeight;//[Offset: 0x33c, Size: 0x4]
	ChaosDebugSubstepControl ChaosDebugSubstepControl;//[Offset: 0x340, Size: 0x3]
	BillboardComponent* SpriteComponent;//[Offset: 0x348, Size: 0x8]
	ChaosGameplayEventDispatcher* GameplayEventDispatcherComponent;//[Offset: 0x368, Size: 0x8]
	void SetSolverActive(bool bActive);// 0x27e158eb6041
	void SetAsCurrentWorldSolver();// 0x27e058eb6041

--------------------------------
Class: ChaosDebugSubstepControl
	bool bPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bSubstep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]

--------------------------------
Class: ChaosGameplayEventDispatcher.ChaosEventListenerComponent.ActorComponent.Object
	<PrimitiveComponent*,ChaosHandlerSet> CollisionEventRegistrations;//[Offset: 0x1c8, Size: 0x50]
	<PrimitiveComponent*,BreakEventCallbackWrapper> BreakEventRegistrations;//[Offset: 0x218, Size: 0x50]
	<PrimitiveComponent*,RemovalEventCallbackWrapper> RemovalEventRegistrations;//[Offset: 0x268, Size: 0x50]

--------------------------------
Class: ChaosEventListenerComponent.ActorComponent.Object

--------------------------------
Class: ChaosHandlerSet
	<Object*> ChaosHandlers;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: BreakEventCallbackWrapper

--------------------------------
Class: RemovalEventCallbackWrapper

--------------------------------
Class: NiagaraDataInterfaceGeometryCollection.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	GeometryCollectionActor* GeometryCollectionActor;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: GeometryCollectionActor.Actor.Object
	GeometryCollectionComponent* GeometryCollectionComponent;//[Offset: 0x278, Size: 0x8]
	GeometryCollectionDebugDrawComponent* GeometryCollectionDebugDrawComponent;//[Offset: 0x280, Size: 0x8]
	bool RaycastSingle(Vector Start, Vector End, out HitResult OutHit);// 0x281158eb6041

--------------------------------
Class: GeometryCollectionComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ChaosSolverActor* ChaosSolverActor;//[Offset: 0x568, Size: 0x8]
	GeometryCollection* RestCollection;//[Offset: 0x658, Size: 0x8]
	FieldSystemActor*[] InitializationFields;//[Offset: 0x660, Size: 0x10]
	bool Simulating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 0x1]
	enum ObjectType;//[Offset: 0x678, Size: 0x1]
	bool bForceMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x679, Size: 0x1]
	bool EnableClustering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67a, Size: 0x1]
	int ClusterGroupIndex;//[Offset: 0x67c, Size: 0x4]
	int MaxClusterLevel;//[Offset: 0x680, Size: 0x4]
	float[] DamageThreshold;//[Offset: 0x688, Size: 0x10]
	bool bUseSizeSpecificDamageThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1]
	enum ClusterConnectionType;//[Offset: 0x699, Size: 0x1]
	int CollisionGroup;//[Offset: 0x69c, Size: 0x4]
	float CollisionSampleFraction;//[Offset: 0x6a0, Size: 0x4]
	float LinearEtherDrag;//[Offset: 0x6a4, Size: 0x4]
	float AngularEtherDrag;//[Offset: 0x6a8, Size: 0x4]
	ChaosPhysicalMaterial* PhysicalMaterial;//[Offset: 0x6b0, Size: 0x8]
	enum InitialVelocityType;//[Offset: 0x6b8, Size: 0x1]
	Vector InitialLinearVelocity;//[Offset: 0x6c0, Size: 0x18]
	Vector InitialAngularVelocity;//[Offset: 0x6d8, Size: 0x18]
	PhysicalMaterial* PhysicalMaterialOverride;//[Offset: 0x6f0, Size: 0x8]
	GeomComponentCacheParameters CacheParameters;//[Offset: 0x6f8, Size: 0x50]
	Transform[] RestTransforms;//[Offset: 0x748, Size: 0x10]
	delegate NotifyGeometryCollectionPhysicsStateChange;//[Offset: 0x758, Size: 0x10]
	delegate NotifyGeometryCollectionPhysicsLoadingStateChange;//[Offset: 0x768, Size: 0x10]
	delegate OnChaosBreakEvent;//[Offset: 0x790, Size: 0x10]
	delegate OnChaosRemovalEvent;//[Offset: 0x7a0, Size: 0x10]
	float DesiredCacheTime;//[Offset: 0x7b0, Size: 0x4]
	bool CachePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b4, Size: 0x1]
	delegate OnChaosPhysicsCollision;//[Offset: 0x7b8, Size: 0x10]
	bool bNotifyBreaks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 0x1]
	bool bNotifyCollisions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c9, Size: 0x1]
	bool bNotifyTrailing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ca, Size: 0x1]
	bool bNotifyRemovals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cb, Size: 0x1]
	bool bStoreVelocities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cc, Size: 0x1]
	bool bShowBoneColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cd, Size: 0x1]
	bool bEnableReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ce, Size: 0x1]
	bool bEnableAbandonAfterLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cf, Size: 0x1]
	int ReplicationAbandonClusterLevel;//[Offset: 0x7d0, Size: 0x4]
	GeometryCollectionRepData RepData;//[Offset: 0x7d8, Size: 0x18]
	BodySetup* DummyBodySetup;//[Offset: 0xa70, Size: 0x8]
	InstancedStaticMeshComponent*[] EmbeddedGeometryComponents;//[Offset: 0xa80, Size: 0x10]
	void SetNotifyRemovals(bool bNewNotifyRemovals);// 0xfe458eb6041
	void SetNotifyBreaks(bool bNewNotifyBreaks);// 0xfe358eb6041
	void ReceivePhysicsCollision(out const ChaosPhysicsCollisionInfo CollisionInfo);// 0xfe158eb6041
	void OnRep_RepData(out const GeometryCollectionRepData OldData);// 0xfe058eb6041
	void NotifyGeometryCollectionPhysicsStateChange__DelegateSignature(GeometryCollectionComponent* FracturedComponent);// 0xfdf58eb6041
	void NotifyGeometryCollectionPhysicsLoadingStateChange__DelegateSignature(GeometryCollectionComponent* FracturedComponent);// 0xfde58eb6041
	void NetAbandonCluster(int TransformIndex);// 0xfdd58eb6041
	void ApplyPhysicsField(bool Enabled, enum Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0xfdc58eb6041
	void ApplyKinematicField(float Radius, Vector Position);// 0xfdb58eb6041

--------------------------------
Class: ChaosPhysicsCollisionInfo
	PrimitiveComponent* Component;//[Offset: 0x0, Size: 0x8]
	PrimitiveComponent* OtherComponent;//[Offset: 0x8, Size: 0x8]
	Vector Location;//[Offset: 0x10, Size: 0x18]
	Vector Normal;//[Offset: 0x28, Size: 0x18]
	Vector AccumulatedImpulse;//[Offset: 0x40, Size: 0x18]
	Vector Velocity;//[Offset: 0x58, Size: 0x18]
	Vector OtherVelocity;//[Offset: 0x70, Size: 0x18]
	Vector AngularVelocity;//[Offset: 0x88, Size: 0x18]
	Vector OtherAngularVelocity;//[Offset: 0xa0, Size: 0x18]
	float Mass;//[Offset: 0xb8, Size: 0x4]
	float OtherMass;//[Offset: 0xbc, Size: 0x4]

--------------------------------
Class: GeometryCollectionRepData

--------------------------------
Class: GeometryCollection.Object
	bool EnableClustering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	int ClusterGroupIndex;//[Offset: 0x34, Size: 0x4]
	int MaxClusterLevel;//[Offset: 0x38, Size: 0x4]
	float[] DamageThreshold;//[Offset: 0x40, Size: 0x10]
	enum ClusterConnectionType;//[Offset: 0x50, Size: 0x1]
	MaterialInterface*[] Materials;//[Offset: 0x58, Size: 0x10]
	GeometryCollectionEmbeddedExemplar[] EmbeddedGeometryExemplar;//[Offset: 0x68, Size: 0x10]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bStripOnCook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	bool EnableNanite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]
	bool bMassAsDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1]
	float Mass;//[Offset: 0x7c, Size: 0x4]
	float MinimumMassClamp;//[Offset: 0x80, Size: 0x4]
	bool bRemoveOnMaxSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	Vector2D MaximumSleepTime;//[Offset: 0x88, Size: 0x10]
	Vector2D RemovalDuration;//[Offset: 0x98, Size: 0x10]
	GeometryCollectionSizeSpecificData[] SizeSpecificData;//[Offset: 0xa8, Size: 0x10]
	bool EnableRemovePiecesOnFracture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	MaterialInterface*[] RemoveOnFractureMaterials;//[Offset: 0xc0, Size: 0x10]
	Guid PersistentGuid;//[Offset: 0xd0, Size: 0x10]
	Guid StateGuid;//[Offset: 0xe0, Size: 0x10]
	int BoneSelectedMaterialIndex;//[Offset: 0xf0, Size: 0x4]

--------------------------------
Class: GeometryCollectionEmbeddedExemplar
	SoftObjectPath StaticMeshExemplar;//[Offset: 0x0, Size: 0x18]
	float StartCullDistance;//[Offset: 0x18, Size: 0x4]
	float EndCullDistance;//[Offset: 0x1c, Size: 0x4]
	int InstanceCount;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: GeometryCollectionSizeSpecificData
	float MaxSize;//[Offset: 0x0, Size: 0x4]
	GeometryCollectionCollisionTypeData[] CollisionShapes;//[Offset: 0x8, Size: 0x10]
	int DamageThreshold;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: GeometryCollectionCollisionTypeData
	enum CollisionType;//[Offset: 0x0, Size: 0x1]
	enum ImplicitType;//[Offset: 0x1, Size: 0x1]
	GeometryCollectionLevelSetData LevelSet;//[Offset: 0x4, Size: 0x10]
	GeometryCollectionCollisionParticleData CollisionParticles;//[Offset: 0x14, Size: 0x8]
	float CollisionObjectReductionPercentage;//[Offset: 0x1c, Size: 0x4]
	float CollisionMarginFraction;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: GeometryCollectionLevelSetData
	int MinLevelSetResolution;//[Offset: 0x0, Size: 0x4]
	int MaxLevelSetResolution;//[Offset: 0x4, Size: 0x4]
	int MinClusterLevelSetResolution;//[Offset: 0x8, Size: 0x4]
	int MaxClusterLevelSetResolution;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: GeometryCollectionCollisionParticleData
	float CollisionParticlesFraction;//[Offset: 0x0, Size: 0x4]
	int MaximumCollisionParticles;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FieldSystemActor.Actor.Object
	FieldSystemComponent* FieldSystemComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: FieldSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FieldSystem* FieldSystem;//[Offset: 0x538, Size: 0x8]
	bool bIsWorldField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	bool bIsChaosField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x541, Size: 0x1]
	ChaosSolverActor*[] SupportedSolvers;//[Offset: 0x548, Size: 0x10]
	FieldObjectCommands ConstructionCommands;//[Offset: 0x558, Size: 0x30]
	FieldObjectCommands BufferCommands;//[Offset: 0x588, Size: 0x30]
	void ResetFieldSystem();// 0x27ec58eb6041
	void RemovePersistentFields();// 0x27eb58eb6041
	void ApplyUniformVectorFalloffForce(bool Enabled, Vector Position, Vector Direction, float Radius, float Magnitude);// 0x27ea58eb6041
	void ApplyStrainField(bool Enabled, Vector Position, float Radius, float Magnitude, int Iterations);// 0x27e958eb6041
	void ApplyStayDynamicField(bool Enabled, Vector Position, float Radius);// 0x27e858eb6041
	void ApplyRadialVectorFalloffForce(bool Enabled, Vector Position, float Radius, float Magnitude);// 0x27e758eb6041
	void ApplyRadialForce(bool Enabled, Vector Position, float Magnitude);// 0x27e658eb6041
	void ApplyPhysicsField(bool Enabled, byte Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0x282758eb6041
	void ApplyLinearForce(bool Enabled, Vector Direction, float Magnitude);// 0x27e458eb6041
	void AddPersistentField(bool Enabled, byte Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0x27e358eb6041
	void AddFieldCommand(bool Enabled, byte Target, FieldSystemMetaData* MetaData, FieldNodeBase* Field);// 0x27e258eb6041

--------------------------------
Class: FieldSystemMetaData.ActorComponent.Object

--------------------------------
Class: FieldNodeBase.ActorComponent.Object

--------------------------------
Class: FieldSystem.Object

--------------------------------
Class: FieldObjectCommands
	FName[] TargetNames;//[Offset: 0x0, Size: 0x10]
	FieldNodeBase*[] RootNodes;//[Offset: 0x10, Size: 0x10]
	FieldSystemMetaData*[] MetaDatas;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ChaosPhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	float StaticFriction;//[Offset: 0x2c, Size: 0x4]
	float Restitution;//[Offset: 0x30, Size: 0x4]
	float LinearEtherDrag;//[Offset: 0x34, Size: 0x4]
	float AngularEtherDrag;//[Offset: 0x38, Size: 0x4]
	float SleepingLinearVelocityThreshold;//[Offset: 0x3c, Size: 0x4]
	float SleepingAngularVelocityThreshold;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: GeomComponentCacheParameters
	enum CacheMode;//[Offset: 0x0, Size: 0x1]
	GeometryCollectionCache* TargetCache;//[Offset: 0x8, Size: 0x8]
	float ReverseCacheBeginTime;//[Offset: 0x10, Size: 0x4]
	bool SaveCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool DoGenerateCollisionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	int CollisionDataSizeMax;//[Offset: 0x18, Size: 0x4]
	bool DoCollisionDataSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float CollisionDataSpatialHashRadius;//[Offset: 0x20, Size: 0x4]
	int MaxCollisionPerCell;//[Offset: 0x24, Size: 0x4]
	bool SaveBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool DoGenerateBreakingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	int BreakingDataSizeMax;//[Offset: 0x2c, Size: 0x4]
	bool DoBreakingDataSpatialHash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	float BreakingDataSpatialHashRadius;//[Offset: 0x34, Size: 0x4]
	int MaxBreakingPerCell;//[Offset: 0x38, Size: 0x4]
	bool SaveTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	bool DoGenerateTrailingData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	int TrailingDataSizeMax;//[Offset: 0x40, Size: 0x4]
	float TrailingMinSpeedThreshold;//[Offset: 0x44, Size: 0x4]
	float TrailingMinVolumeThreshold;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: GeometryCollectionCache.Object
	RecordedTransformTrack RecordedData;//[Offset: 0x28, Size: 0x10]
	GeometryCollection* SupportedCollection;//[Offset: 0x38, Size: 0x8]
	Guid CompatibleCollectionState;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: RecordedTransformTrack
	RecordedFrame[] Records;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: RecordedFrame
	Transform[] Transforms;//[Offset: 0x0, Size: 0x10]
	int[] TransformIndices;//[Offset: 0x10, Size: 0x10]
	int[] PreviousTransformIndices;//[Offset: 0x20, Size: 0x10]
	bool[] DisabledFlags;//[Offset: 0x30, Size: 0x10]
	SolverCollisionData[] Collisions;//[Offset: 0x40, Size: 0x10]
	SolverBreakingData[] Breakings;//[Offset: 0x50, Size: 0x10]
	<SolverTrailingData> Trailings;//[Offset: 0x60, Size: 0x50]
	float Timestamp;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: SolverCollisionData
	Vector Location;//[Offset: 0x0, Size: 0x18]
	Vector AccumulatedImpulse;//[Offset: 0x18, Size: 0x18]
	Vector Normal;//[Offset: 0x30, Size: 0x18]
	Vector Velocity1;//[Offset: 0x48, Size: 0x18]
	Vector Velocity2;//[Offset: 0x60, Size: 0x18]
	Vector AngularVelocity1;//[Offset: 0x78, Size: 0x18]
	Vector AngularVelocity2;//[Offset: 0x90, Size: 0x18]
	float Mass1;//[Offset: 0xa8, Size: 0x4]
	float Mass2;//[Offset: 0xac, Size: 0x4]
	int ParticleIndex;//[Offset: 0xb0, Size: 0x4]
	int LevelsetIndex;//[Offset: 0xb4, Size: 0x4]
	int ParticleIndexMesh;//[Offset: 0xb8, Size: 0x4]
	int LevelsetIndexMesh;//[Offset: 0xbc, Size: 0x4]

--------------------------------
Class: SolverBreakingData
	Vector Location;//[Offset: 0x0, Size: 0x18]
	Vector Velocity;//[Offset: 0x18, Size: 0x18]
	Vector AngularVelocity;//[Offset: 0x30, Size: 0x18]
	float Mass;//[Offset: 0x48, Size: 0x4]
	int ParticleIndex;//[Offset: 0x4c, Size: 0x4]
	int ParticleIndexMesh;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: SolverTrailingData
	Vector Location;//[Offset: 0x0, Size: 0x18]
	Vector Velocity;//[Offset: 0x18, Size: 0x18]
	Vector AngularVelocity;//[Offset: 0x30, Size: 0x18]
	float Mass;//[Offset: 0x48, Size: 0x4]
	int ParticleIndex;//[Offset: 0x4c, Size: 0x4]
	int ParticleIndexMesh;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: GeometryCollectionDebugDrawComponent.ActorComponent.Object
	GeometryCollectionDebugDrawActor* GeometryCollectionDebugDrawActor;//[Offset: 0xb0, Size: 0x8]
	GeometryCollectionRenderLevelSetActor* GeometryCollectionRenderLevelSetActor;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: GeometryCollectionDebugDrawActor.Actor.Object
	GeometryCollectionDebugDrawWarningMessage WarningMessage;//[Offset: 0x278, Size: 0x1]
	GeometryCollectionDebugDrawActorSelectedRigidBody SelectedRigidBody;//[Offset: 0x280, Size: 0x18]
	bool bDebugDrawWholeCollection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 0x1]
	bool bDebugDrawHierarchy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 0x1]
	bool bDebugDrawClustering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 0x1]
	enum HideGeometry;//[Offset: 0x29b, Size: 0x1]
	bool bShowRigidBodyId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 0x1]
	bool bShowRigidBodyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 0x1]
	bool bCollisionAtOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29e, Size: 0x1]
	bool bShowRigidBodyTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29f, Size: 0x1]
	bool bShowRigidBodyInertia;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	bool bShowRigidBodyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1]
	bool bShowRigidBodyForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a2, Size: 0x1]
	bool bShowRigidBodyInfos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a3, Size: 0x1]
	bool bShowTransformIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]
	bool bShowTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 0x1]
	bool bShowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6, Size: 0x1]
	bool bShowLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7, Size: 0x1]
	bool bShowConnectivityEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	bool bShowGeometryIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a9, Size: 0x1]
	bool bShowGeometryTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2aa, Size: 0x1]
	bool bShowBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ab, Size: 0x1]
	bool bShowFaces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	bool bShowFaceIndices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 0x1]
	bool bShowFaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ae, Size: 0x1]
	bool bShowSingleFace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2af, Size: 0x1]
	int SingleFaceIndex;//[Offset: 0x2b0, Size: 0x4]
	bool bShowVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 0x1]
	bool bShowVertexIndices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5, Size: 0x1]
	bool bShowVertexNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b6, Size: 0x1]
	bool bUseActiveVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b7, Size: 0x1]
	float PointThickness;//[Offset: 0x2b8, Size: 0x4]
	float LineThickness;//[Offset: 0x2bc, Size: 0x4]
	bool bTextShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	float TextScale;//[Offset: 0x2c4, Size: 0x4]
	float NormalScale;//[Offset: 0x2c8, Size: 0x4]
	float AxisScale;//[Offset: 0x2cc, Size: 0x4]
	float ArrowScale;//[Offset: 0x2d0, Size: 0x4]
	Color RigidBodyIdColor;//[Offset: 0x2d4, Size: 0x4]
	float RigidBodyTransformScale;//[Offset: 0x2d8, Size: 0x4]
	Color RigidBodyCollisionColor;//[Offset: 0x2dc, Size: 0x4]
	Color RigidBodyInertiaColor;//[Offset: 0x2e0, Size: 0x4]
	Color RigidBodyVelocityColor;//[Offset: 0x2e4, Size: 0x4]
	Color RigidBodyForceColor;//[Offset: 0x2e8, Size: 0x4]
	Color RigidBodyInfoColor;//[Offset: 0x2ec, Size: 0x4]
	Color TransformIndexColor;//[Offset: 0x2f0, Size: 0x4]
	float TransformScale;//[Offset: 0x2f4, Size: 0x4]
	Color LevelColor;//[Offset: 0x2f8, Size: 0x4]
	Color ParentColor;//[Offset: 0x2fc, Size: 0x4]
	float ConnectivityEdgeThickness;//[Offset: 0x300, Size: 0x4]
	Color GeometryIndexColor;//[Offset: 0x304, Size: 0x4]
	float GeometryTransformScale;//[Offset: 0x308, Size: 0x4]
	Color BoundingBoxColor;//[Offset: 0x30c, Size: 0x4]
	Color FaceColor;//[Offset: 0x310, Size: 0x4]
	Color FaceIndexColor;//[Offset: 0x314, Size: 0x4]
	Color FaceNormalColor;//[Offset: 0x318, Size: 0x4]
	Color SingleFaceColor;//[Offset: 0x31c, Size: 0x4]
	Color VertexColor;//[Offset: 0x320, Size: 0x4]
	Color VertexIndexColor;//[Offset: 0x324, Size: 0x4]
	Color VertexNormalColor;//[Offset: 0x328, Size: 0x4]
	BillboardComponent* SpriteComponent;//[Offset: 0x330, Size: 0x8]

--------------------------------
Class: GeometryCollectionDebugDrawWarningMessage

--------------------------------
Class: GeometryCollectionDebugDrawActorSelectedRigidBody
	int ID;//[Offset: 0x0, Size: 0x4]
	ChaosSolverActor* Solver;//[Offset: 0x8, Size: 0x8]
	GeometryCollectionActor* GeometryCollection;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: GeometryCollectionRenderLevelSetActor.Actor.Object
	VolumeTexture* TargetVolumeTexture;//[Offset: 0x278, Size: 0x8]
	Material* RayMarchMaterial;//[Offset: 0x280, Size: 0x8]
	float SurfaceTolerance;//[Offset: 0x288, Size: 0x4]
	float Isovalue;//[Offset: 0x28c, Size: 0x4]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	bool RenderVolumeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1]

--------------------------------
Class: NiagaraDataInterfacePhysicsField.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	NiagaraVariable Parameter;//[Offset: 0xa0, Size: 0x20]

--------------------------------
Class: NiagaraVariable.NiagaraVariableBase
	byte[] VarData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NiagaraVariableBase
	FName Name;//[Offset: 0x0, Size: 0x8]
	NiagaraTypeDefinitionHandle TypeDefHandle;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NiagaraTypeDefinitionHandle
	int RegisteredTypeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneNiagaraBoolParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraColorParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraFloatParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraIntegerParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraSystemSpawnSection.MovieSceneSection.MovieSceneSignedObject.Object
	enum SectionStartBehavior;//[Offset: 0xdc, Size: 0x4]
	enum SectionEvaluateBehavior;//[Offset: 0xe0, Size: 0x4]
	enum SectionEndBehavior;//[Offset: 0xe4, Size: 0x4]
	enum AgeUpdateMode;//[Offset: 0xe8, Size: 0x1]
	bool bAllowScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]

--------------------------------
Class: MovieSceneNiagaraSystemTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneNiagaraVectorParameterTrack.MovieSceneNiagaraParameterTrack.MovieSceneNiagaraTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int ChannelsUsed;//[Offset: 0xc8, Size: 0x4]

--------------------------------
Class: NiagaraActor.Actor.Object
	NiagaraComponent* NiagaraComponent;//[Offset: 0x278, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 0x1]
	void SetDestroyOnSystemFinish(bool bShouldDestroyOnSystemFinish);// 0x22a458eb6041
	void OnNiagaraSystemFinished(NiagaraComponent* FinishedComponent);// 0x22a358eb6041

--------------------------------
Class: NiagaraComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NiagaraSystem* Asset;//[Offset: 0x538, Size: 0x8]
	enum TickBehavior;//[Offset: 0x540, Size: 0x1]
	int RandomSeedOffset;//[Offset: 0x544, Size: 0x4]
	NiagaraUserRedirectionParameterStore OverrideParameters;//[Offset: 0x548, Size: 0xd8]
	bool bForceSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x620, Size: 0x1]
	bool bEnableGpuComputeDebug;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x620, Size: 0x1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x655, Size: 0x1]
	bool bRenderingEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x655, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x655, Size: 0x1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x655, Size: 0x1]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x658, Size: 0x4]
	delegate OnSystemFinished;//[Offset: 0x660, Size: 0x10]
	SceneComponent* AutoAttachParent;//[Offset: 0x670, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x678, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x680, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x681, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x682, Size: 0x1]
	bool bAllowScalability;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68c, Size: 0x1]
	NiagaraCullProxyComponent* CullProxy;//[Offset: 0x7b0, Size: 0x8]
	void SetVariableVec4(FName InVariableName, out const Vector4 InValue);// 0x22fa58eb6041
	void SetVariableVec3(FName InVariableName, Vector InValue);// 0x22f958eb6041
	void SetVariableVec2(FName InVariableName, Vector2D InValue);// 0x22f858eb6041
	void SetVariableTextureRenderTarget(FName InVariableName, TextureRenderTarget* TextureRenderTarget);// 0x22f758eb6041
	void SetVariableTexture(FName InVariableName, Texture* Texture);// 0x22f658eb6041
	void SetVariableStaticMesh(FName InVariableName, StaticMesh* InValue);// 0x22f558eb6041
	void SetVariableQuat(FName InVariableName, out const Quat InValue);// 0x22f458eb6041
	void SetVariablePosition(FName InVariableName, Vector InValue);// 0x22f358eb6041
	void SetVariableObject(FName InVariableName, Object* Object);// 0x233458eb6041
	void SetVariableMaterial(FName InVariableName, MaterialInterface* Object);// 0x22f158eb6041
	void SetVariableLinearColor(FName InVariableName, out const LinearColor InValue);// 0x22f058eb6041
	void SetVariableInt(FName InVariableName, int InValue);// 0x22ef58eb6041
	void SetVariableFloat(FName InVariableName, float InValue);// 0x22ee58eb6041
	void SetVariableBool(FName InVariableName, bool InValue);// 0x22ed58eb6041
	void SetVariableActor(FName InVariableName, Actor* Actor);// 0x22ec58eb6041
	void SetTickBehavior(enum NewTickBehavior);// 0x22eb58eb6041
	void SetSystemFixedBounds(Box LocalBounds);// 0x22ea58eb6041
	void SetSeekDelta(float InSeekDelta);// 0x22e958eb6041
	void SetRenderingEnabled(bool bInRenderingEnabled);// 0x22e858eb6041
	void SetRandomSeedOffset(int NewRandomSeedOffset);// 0x22e758eb6041
	void SetPreviewLODDistance(bool bEnablePreviewLODDistance, float PreviewLODDistance, float PreviewMaxDistance);// 0x22e658eb6041
	void SetPaused(bool bInPaused);// 0x22e558eb6041
	void SetNiagaraVariableVec4(FString InVariableName, out const Vector4 InValue);// 0x22e458eb6041
	void SetNiagaraVariableVec3(FString InVariableName, Vector InValue);// 0x22e358eb6041
	void SetNiagaraVariableVec2(FString InVariableName, Vector2D InValue);// 0x22e258eb6041
	void SetNiagaraVariableQuat(FString InVariableName, out const Quat InValue);// 0x22e158eb6041
	void SetNiagaraVariablePosition(FString InVariableName, Vector InValue);// 0x22e058eb6041
	void SetNiagaraVariableObject(FString InVariableName, Object* Object);// 0x22df58eb6041
	void SetNiagaraVariableLinearColor(FString InVariableName, out const LinearColor InValue);// 0x22de58eb6041
	void SetNiagaraVariableInt(FString InVariableName, int InValue);// 0x22dd58eb6041
	void SetNiagaraVariableFloat(FString InVariableName, float InValue);// 0x22dc58eb6041
	void SetNiagaraVariableBool(FString InVariableName, bool InValue);// 0x22db58eb6041
	void SetNiagaraVariableActor(FString InVariableName, Actor* Actor);// 0x22da58eb6041
	void SetMaxSimTime(float InMaxTime);// 0x22d958eb6041
	void SetLockDesiredAgeDeltaTimeToSeekDelta(bool bLock);// 0x22d858eb6041
	void SetGpuComputeDebug(bool bEnableDebug);// 0x22d758eb6041
	void SetForceSolo(bool bInForceSolo);// 0x22d658eb6041
	void SetForceLocalPlayerEffect(bool bIsPlayerEffect);// 0x22d558eb6041
	void SetEmitterFixedBounds(FName EmitterName, Box LocalBounds);// 0x22d458eb6041
	void SetDesiredAge(float InDesiredAge);// 0x22d358eb6041
	void SetCustomTimeDilation(float Dilation);// 0x22d258eb6041
	void SetCanRenderWhileSeeking(bool bInCanRenderWhileSeeking);// 0x231358eb6041
	void SetAutoDestroy(bool bInAutoDestroy);// 0x22d058eb6041
	void SetAsset(NiagaraSystem* InAsset, bool bResetExistingOverrideParameters);// 0x22cf58eb6041
	void SetAllowScalability(bool bAllow);// 0x22ce58eb6041
	void SetAgeUpdateMode(enum InAgeUpdateMode);// 0x22cd58eb6041
	void SeekToDesiredAge(float InDesiredAge);// 0x22cc58eb6041
	void ResetSystem();// 0x22cb58eb6041
	void ReinitializeSystem();// 0x22ca58eb6041
	bool IsPaused();// 0x22c958eb6041
	void InitForPerformanceBaseline();// 0x22c858eb6041
	enum GetTickBehavior();// 0x22c758eb6041
	Box GetSystemFixedBounds();// 0x22c658eb6041
	float GetSeekDelta();// 0x22c558eb6041
	int GetRandomSeedOffset();// 0x22c458eb6041
	bool GetPreviewLODDistanceEnabled();// 0x22c358eb6041
	float GetPreviewLODDistance();// 0x22c258eb6041
	Vector[] GetNiagaraParticleValueVec3_DebugOnly(FString InEmitterName, FString InValueName);// 0x22c158eb6041
	float[] GetNiagaraParticleValues_DebugOnly(FString InEmitterName, FString InValueName);// 0x22c058eb6041
	Vector[] GetNiagaraParticlePositions_DebugOnly(FString InEmitterName);// 0x22bf58eb6041
	float GetMaxSimTime();// 0x22be58eb6041
	bool GetLockDesiredAgeDeltaTimeToSeekDelta();// 0x22bd58eb6041
	bool GetForceSolo();// 0x22bc58eb6041
	bool GetForceLocalPlayerEffect();// 0x22bb58eb6041
	Box GetEmitterFixedBounds(FName EmitterName);// 0x22ba58eb6041
	float GetDesiredAge();// 0x22b958eb6041
	NiagaraDataInterface* GetDataInterface(FString Name);// 0x22b858eb6041
	float GetCustomTimeDilation();// 0x22b758eb6041
	NiagaraSystem* GetAsset();// 0x22b658eb6041
	bool GetAllowScalability();// 0xffffff8158eb6000
	enum GetAgeUpdateMode();// 0x22b458eb6041
	void ClearSystemFixedBounds();// 0x22b358eb6041
	void ClearEmitterFixedBounds(FName EmitterName);// 0x22b258eb6041
	void AdvanceSimulationByTime(float SimulateTime, float TickDeltaSeconds);// 0x22b158eb6041
	void AdvanceSimulation(int TickCount, float TickDeltaSeconds);// 0x22b058eb6041

--------------------------------
Class: NiagaraSystem.FXSystemAsset.Object
	bool bSupportLargeWorldCoordinates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bOverrideCastShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bOverrideReceivesDecals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bOverrideRenderCustomDepth;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bOverrideCustomDepthStencilValue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bOverrideCustomDepthStencilWriteMask;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	bool bCastShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x32, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x34, Size: 0x4]
	bool bDumpDebugSystemInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bDumpDebugEmitterInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 0x1]
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	NiagaraEffectType* EffectType;//[Offset: 0x40, Size: 0x8]
	bool bOverrideScalabilitySettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool bOverrideAllowCullingForLocalPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49, Size: 0x1]
	bool bAllowCullingForLocalPlayersOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x49, Size: 0x1]
	NiagaraSystemScalabilityOverride[] ScalabilityOverrides;//[Offset: 0x50, Size: 0x10]
	NiagaraSystemScalabilityOverrides SystemScalabilityOverrides;//[Offset: 0x60, Size: 0x10]
	NiagaraEmitterHandle[] EmitterHandles;//[Offset: 0x70, Size: 0x10]
	NiagaraParameterCollectionInstance*[] ParameterCollectionOverrides;//[Offset: 0x80, Size: 0x10]
	NiagaraScript* SystemSpawnScript;//[Offset: 0x90, Size: 0x8]
	NiagaraScript* SystemUpdateScript;//[Offset: 0x98, Size: 0x8]
	NiagaraSystemCompiledData SystemCompiledData;//[Offset: 0xb0, Size: 0x228]
	NiagaraUserRedirectionParameterStore ExposedParameters;//[Offset: 0x2d8, Size: 0xd8]
	Box FixedBounds;//[Offset: 0x3b0, Size: 0x38]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	bool bDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 0x1]
	int RandomSeed;//[Offset: 0x3ec, Size: 0x4]
	float WarmupTime;//[Offset: 0x3f0, Size: 0x4]
	int WarmupTickCount;//[Offset: 0x3f4, Size: 0x4]
	float WarmupTickDelta;//[Offset: 0x3f8, Size: 0x4]
	bool bFixedTickDelta;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 0x1]
	float FixedTickDeltaTime;//[Offset: 0x400, Size: 0x4]
	bool bHasSystemScriptDIsWithPerInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 0x1]
	bool bNeedsGPUContextInitForDataInterfaces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 0x1]
	FName[] UserDINamesReadInSystemScripts;//[Offset: 0x408, Size: 0x10]

--------------------------------
Class: NiagaraEffectType.Object
	bool bAllowCullingForLocalPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	enum UpdateFrequency;//[Offset: 0x2c, Size: 0x4]
	enum CullReaction;//[Offset: 0x30, Size: 0x4]
	NiagaraSignificanceHandler* SignificanceHandler;//[Offset: 0x38, Size: 0x8]
	NiagaraSystemScalabilitySettings[] DetailLevelScalabilitySettings;//[Offset: 0x40, Size: 0x10]
	NiagaraSystemScalabilitySettingsArray SystemScalabilitySettings;//[Offset: 0x50, Size: 0x10]
	NiagaraEmitterScalabilitySettingsArray EmitterScalabilitySettings;//[Offset: 0x60, Size: 0x10]
	NiagaraBaselineController* PerformanceBaselineController;//[Offset: 0x78, Size: 0x8]
	NiagaraPerfBaselineStats PerfBaselineStats;//[Offset: 0x80, Size: 0x10]
	Guid PerfBaselineVersion;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSystemScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 0x30]
	bool bCullByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bCullMaxInstanceCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bCullPerSystemMaxInstanceCount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bCullByMaxTimeWithoutRender;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	float MaxDistance;//[Offset: 0x34, Size: 0x4]
	int MaxInstances;//[Offset: 0x38, Size: 0x4]
	int MaxSystemInstances;//[Offset: 0x3c, Size: 0x4]
	float MaxTimeWithoutRender;//[Offset: 0x40, Size: 0x4]
	enum CullProxyMode;//[Offset: 0x44, Size: 0x4]
	int MaxSystemProxies;//[Offset: 0x48, Size: 0x4]
	NiagaraGlobalBudgetScaling BudgetScaling;//[Offset: 0x4c, Size: 0x38]

--------------------------------
Class: NiagaraPlatformSet
	int QualityLevelMask;//[Offset: 0x0, Size: 0x4]
	NiagaraDeviceProfileStateEntry[] DeviceProfileStates;//[Offset: 0x8, Size: 0x10]
	NiagaraPlatformSetCVarCondition[] CVarConditions;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: NiagaraDeviceProfileStateEntry
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	uint32 QualityLevelMask;//[Offset: 0x8, Size: 0x4]
	uint32 SetQualityLevelMask;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: NiagaraPlatformSetCVarCondition
	FName CVarName;//[Offset: 0x0, Size: 0x8]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	int MinInt;//[Offset: 0xc, Size: 0x4]
	int MaxInt;//[Offset: 0x10, Size: 0x4]
	float MinFloat;//[Offset: 0x14, Size: 0x4]
	float MaxFloat;//[Offset: 0x18, Size: 0x4]
	bool bUseMinInt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bUseMaxInt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bUseMinFloat;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bUseMaxFloat;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: NiagaraGlobalBudgetScaling
	bool bCullByGlobalBudget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bScaleMaxDistanceByGlobalBudgetUse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bScaleMaxInstanceCountByGlobalBudgetUse;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bScaleSystemInstanceCountByGlobalBudgetUse;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float MaxGlobalBudgetUsage;//[Offset: 0x4, Size: 0x4]
	NiagaraLinearRamp MaxDistanceScaleByGlobalBudgetUse;//[Offset: 0x8, Size: 0x10]
	NiagaraLinearRamp MaxInstanceCountScaleByGlobalBudgetUse;//[Offset: 0x18, Size: 0x10]
	NiagaraLinearRamp MaxSystemInstanceCountScaleByGlobalBudgetUse;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: NiagaraLinearRamp
	float StartX;//[Offset: 0x0, Size: 0x4]
	float StartY;//[Offset: 0x4, Size: 0x4]
	float EndX;//[Offset: 0x8, Size: 0x4]
	float EndY;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: NiagaraSystemScalabilitySettingsArray
	NiagaraSystemScalabilitySettings[] Settings;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScalabilitySettingsArray
	NiagaraEmitterScalabilitySettings[] Settings;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScalabilitySettings
	NiagaraPlatformSet Platforms;//[Offset: 0x0, Size: 0x30]
	bool bScaleSpawnCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	float SpawnCountScale;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: NiagaraBaselineController.Object
	float TestDuration;//[Offset: 0x28, Size: 0x4]
	NiagaraEffectType* EffectType;//[Offset: 0x30, Size: 0x8]
	NiagaraPerfBaselineActor* Owner;//[Offset: 0x38, Size: 0x8]
	NiagaraSystem* System;//[Offset: 0x40, Size: 0x28]
	bool OnTickTest();// 0x234d58eb6041
	void OnOwnerTick(float DeltaTime);// 0x234c58eb6041
	void OnEndTest(NiagaraPerfBaselineStats Stats);// 0x234b58eb6041
	void OnBeginTest();// 0x234a58eb6041
	NiagaraSystem* GetSystem();// 0x234958eb6041

--------------------------------
Class: NiagaraPerfBaselineStats
	float PerInstanceAvg_GT;//[Offset: 0x0, Size: 0x4]
	float PerInstanceAvg_RT;//[Offset: 0x4, Size: 0x4]
	float PerInstanceMax_GT;//[Offset: 0x8, Size: 0x4]
	float PerInstanceMax_RT;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: NiagaraPerfBaselineActor.Actor.Object
	NiagaraBaselineController* Controller;//[Offset: 0x278, Size: 0x8]
	TextRenderComponent* Label;//[Offset: 0x280, Size: 0x8]

--------------------------------
Class: NiagaraSystemScalabilityOverride.NiagaraSystemScalabilitySettings
	bool bOverrideDistanceSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	bool bOverrideInstanceCountSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84, Size: 0x1]
	bool bOverridePerSystemInstanceCountSettings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x84, Size: 0x1]
	bool bOverrideTimeSinceRendererSettings;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x84, Size: 0x1]
	bool bOverrideGlobalBudgetScalingSettings;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x84, Size: 0x1]
	bool bOverrideCullProxySettings;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x84, Size: 0x1]

--------------------------------
Class: NiagaraSystemScalabilityOverrides
	NiagaraSystemScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterHandle
	Guid ID;//[Offset: 0x0, Size: 0x10]
	FName IdName;//[Offset: 0x10, Size: 0x8]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	FName Name;//[Offset: 0x1c, Size: 0x8]
	NiagaraEmitter* Instance;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: NiagaraEmitter.Object
	bool bLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	int RandomSeed;//[Offset: 0x2c, Size: 0x4]
	enum AllocationMode;//[Offset: 0x30, Size: 0x1]
	int PreAllocationCount;//[Offset: 0x34, Size: 0x4]
	NiagaraEmitterScriptProperties UpdateScriptProps;//[Offset: 0x38, Size: 0x28]
	NiagaraEmitterScriptProperties SpawnScriptProps;//[Offset: 0x60, Size: 0x28]
	enum SimTarget;//[Offset: 0x88, Size: 0x1]
	Box FixedBounds;//[Offset: 0x90, Size: 0x38]
	int MinDetailLevel;//[Offset: 0xc8, Size: 0x4]
	int MaxDetailLevel;//[Offset: 0xcc, Size: 0x4]
	NiagaraDetailsLevelScaleOverrides GlobalSpawnCountScaleOverrides;//[Offset: 0xd0, Size: 0x14]
	NiagaraPlatformSet Platforms;//[Offset: 0xe8, Size: 0x30]
	NiagaraEmitterScalabilityOverrides ScalabilityOverrides;//[Offset: 0x118, Size: 0x10]
	bool bInterpolatedSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 0x1]
	bool bFixedBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x128, Size: 0x1]
	bool bUseMinDetailLevel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x128, Size: 0x1]
	bool bUseMaxDetailLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x128, Size: 0x1]
	bool bOverrideGlobalSpawnCountScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x128, Size: 0x1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x128, Size: 0x1]
	bool bCombineEventSpawn;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x128, Size: 0x1]
	float MaxDeltaTimePerTick;//[Offset: 0x12c, Size: 0x4]
	bool bLimitDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1]
	int MaxGPUParticlesSpawnPerFrame;//[Offset: 0x134, Size: 0x4]
	NiagaraParameterStore RendererBindings;//[Offset: 0x138, Size: 0x88]
	FString UniqueEmitterName;//[Offset: 0x1d8, Size: 0x10]
	NiagaraRendererProperties*[] RendererProperties;//[Offset: 0x1e8, Size: 0x10]
	NiagaraEventScriptProperties[] EventHandlerScriptProps;//[Offset: 0x1f8, Size: 0x10]
	NiagaraSimulationStageBase*[] SimulationStages;//[Offset: 0x208, Size: 0x10]
	NiagaraScript* GPUComputeScript;//[Offset: 0x218, Size: 0x8]
	FName[] SharedEventGeneratorIds;//[Offset: 0x220, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScriptProperties
	NiagaraScript* Script;//[Offset: 0x0, Size: 0x8]
	NiagaraEventReceiverProperties[] EventReceivers;//[Offset: 0x8, Size: 0x10]
	NiagaraEventGeneratorProperties[] EventGenerators;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: NiagaraScript.NiagaraScriptBase.Object
	enum Usage;//[Offset: 0x28, Size: 0x1]
	Guid UsageId;//[Offset: 0x2c, Size: 0x10]
	NiagaraParameterStore RapidIterationParameters;//[Offset: 0x40, Size: 0x88]
	NiagaraScriptExecutionParameterStore ScriptExecutionParamStore;//[Offset: 0xc8, Size: 0xa8]
	NiagaraBoundParameter[] ScriptExecutionBoundParameters;//[Offset: 0x170, Size: 0x10]
	NiagaraVMExecutableDataId CachedScriptVMId;//[Offset: 0x180, Size: 0x58]
	NiagaraVMExecutableData CachedScriptVM;//[Offset: 0x1e8, Size: 0x138]
	NiagaraParameterCollection*[] CachedParameterCollectionReferences;//[Offset: 0x320, Size: 0x10]
	NiagaraScriptDataInterfaceInfo[] CachedDefaultDataInterfaces;//[Offset: 0x330, Size: 0x10]
	void RaiseOnGPUCompilationComplete();// 0x235658eb6041

--------------------------------
Class: NiagaraScriptBase.Object

--------------------------------
Class: NiagaraParameterStore
	Object* Owner;//[Offset: 0x8, Size: 0x8]
	NiagaraVariableWithOffset[] SortedParameterOffsets;//[Offset: 0x10, Size: 0x10]
	byte[] ParameterData;//[Offset: 0x20, Size: 0x10]
	NiagaraDataInterface*[] DataInterfaces;//[Offset: 0x30, Size: 0x10]
	Object*[] UObjects;//[Offset: 0x40, Size: 0x10]
	NiagaraPositionSource[] OriginalPositionData;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraVariableWithOffset.NiagaraVariableBase
	int Offset;//[Offset: 0xc, Size: 0x4]
	NiagaraLwcStructConverter StructConverter;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NiagaraLwcStructConverter
	NiagaraStructConversionStep[] ConversionSteps;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraStructConversionStep
	int SourceBytes;//[Offset: 0x0, Size: 0x4]
	int SourceOffset;//[Offset: 0x4, Size: 0x4]
	int SimulationBytes;//[Offset: 0x8, Size: 0x4]
	int SimulationOffset;//[Offset: 0xc, Size: 0x4]
	enum ConversionType;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: NiagaraPositionSource
	FName Name;//[Offset: 0x0, Size: 0x8]
	Vector Value;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: NiagaraScriptExecutionParameterStore.NiagaraParameterStore
	int ParameterSize;//[Offset: 0x88, Size: 0x4]
	uint32 PaddedParameterSize;//[Offset: 0x8c, Size: 0x4]
	NiagaraScriptExecutionPaddingInfo[] PaddingInfo;//[Offset: 0x90, Size: 0x10]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: NiagaraScriptExecutionPaddingInfo
	uint16 SrcOffset;//[Offset: 0x0, Size: 0x2]
	uint16 DestOffset;//[Offset: 0x2, Size: 0x2]
	uint16 SrcSize;//[Offset: 0x4, Size: 0x2]
	uint16 DestSize;//[Offset: 0x6, Size: 0x2]

--------------------------------
Class: NiagaraBoundParameter
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 0x20]
	int SrcOffset;//[Offset: 0x20, Size: 0x4]
	int DestOffset;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: NiagaraVMExecutableDataId
	Guid CompilerVersionID;//[Offset: 0x0, Size: 0x10]
	enum ScriptUsageType;//[Offset: 0x10, Size: 0x1]
	Guid ScriptUsageTypeID;//[Offset: 0x14, Size: 0x10]
	bool bUsesRapidIterationParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bDisableDebugSwitches;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	bool bInterpolatedSpawn;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 0x1]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 0x1]
	Guid BaseScriptID;//[Offset: 0x28, Size: 0x10]
	NiagaraCompileHash BaseScriptCompileHash;//[Offset: 0x38, Size: 0x10]
	Guid ScriptVersionID;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: NiagaraCompileHash
	byte[] DataHash;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraVMExecutableData
	NiagaraVMExecutableByteCode ByteCode;//[Offset: 0x0, Size: 0x18]
	NiagaraVMExecutableByteCode OptimizedByteCode;//[Offset: 0x18, Size: 0x18]
	int NumTempRegisters;//[Offset: 0x68, Size: 0x4]
	int NumUserPtrs;//[Offset: 0x6c, Size: 0x4]
	NiagaraCompilerTag[] CompileTags;//[Offset: 0x70, Size: 0x10]
	byte[] ScriptLiterals;//[Offset: 0x80, Size: 0x10]
	NiagaraVariable[] Attributes;//[Offset: 0x90, Size: 0x10]
	NiagaraScriptDataUsageInfo DataUsage;//[Offset: 0xa0, Size: 0x1]
	NiagaraScriptDataInterfaceCompileInfo[] DataInterfaceInfo;//[Offset: 0xa8, Size: 0x10]
	VMExternalFunctionBindingInfo[] CalledVMExternalFunctions;//[Offset: 0xb8, Size: 0x10]
	NiagaraDataSetID[] ReadDataSets;//[Offset: 0xd8, Size: 0x10]
	NiagaraDataSetProperties[] WriteDataSets;//[Offset: 0xe8, Size: 0x10]
	NiagaraStatScope[] StatScopes;//[Offset: 0xf8, Size: 0x10]
	NiagaraDataInterfaceGPUParamInfo[] DIParamInfo;//[Offset: 0x108, Size: 0x10]
	enum LastCompileStatus;//[Offset: 0x118, Size: 0x1]
	SimulationStageMetaData[] SimulationStageMetaData;//[Offset: 0x120, Size: 0x10]
	bool bReadsSignificanceIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1]
	bool bNeedsGPUContextInit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x130, Size: 0x1]

--------------------------------
Class: NiagaraVMExecutableByteCode
	byte[] Data;//[Offset: 0x0, Size: 0x10]
	int UncompressedSize;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: NiagaraCompilerTag
	NiagaraVariable Variable;//[Offset: 0x0, Size: 0x20]
	FString StringValue;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: NiagaraScriptDataUsageInfo
	bool bReadsAttributeData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: NiagaraScriptDataInterfaceCompileInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	int UserPtrIdx;//[Offset: 0x8, Size: 0x4]
	NiagaraTypeDefinition Type;//[Offset: 0x10, Size: 0x10]
	FName RegisteredParameterMapRead;//[Offset: 0x20, Size: 0x8]
	FName RegisteredParameterMapWrite;//[Offset: 0x28, Size: 0x8]
	bool bIsPlaceholder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: NiagaraTypeDefinition
	Object* ClassStructOrEnum;//[Offset: 0x0, Size: 0x8]
	uint16 UnderlyingType;//[Offset: 0x8, Size: 0x2]
	byte Flags;//[Offset: 0xa, Size: 0x1]

--------------------------------
Class: VMExternalFunctionBindingInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	FName OwnerName;//[Offset: 0x8, Size: 0x8]
	bool[] InputParamLocations;//[Offset: 0x10, Size: 0x10]
	int NumOutputs;//[Offset: 0x20, Size: 0x4]
	VMFunctionSpecifier[] FunctionSpecifiers;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: VMFunctionSpecifier
	FName Key;//[Offset: 0x0, Size: 0x8]
	FName Value;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: NiagaraDataSetID
	FName Name;//[Offset: 0x0, Size: 0x8]
	enum Type;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: NiagaraDataSetProperties
	NiagaraDataSetID ID;//[Offset: 0x0, Size: 0xc]
	NiagaraVariable[] Variables;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NiagaraStatScope
	FName FullName;//[Offset: 0x0, Size: 0x8]
	FName FriendlyName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceGPUParamInfo
	FString DataInterfaceHLSLSymbol;//[Offset: 0x0, Size: 0x10]
	FString DIClassName;//[Offset: 0x10, Size: 0x10]
	NiagaraDataInterfaceGeneratedFunction[] GeneratedFunctions;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceGeneratedFunction

--------------------------------
Class: SimulationStageMetaData
	FName SimulationStageName;//[Offset: 0x0, Size: 0x8]
	FName EnabledBinding;//[Offset: 0x8, Size: 0x8]
	FName IterationSource;//[Offset: 0x10, Size: 0x8]
	enum ExecuteBehavior;//[Offset: 0x18, Size: 0x1]
	bool bWritesParticles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bPartialParticleUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]
	bool bParticleIterationStateEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1]
	FName ParticleIterationStateBinding;//[Offset: 0x1c, Size: 0x8]
	IntPoint ParticleIterationStateRange;//[Offset: 0x28, Size: 0x8]
	FName[] OutputDestinations;//[Offset: 0x30, Size: 0x10]
	int NumIterations;//[Offset: 0x40, Size: 0x4]
	FName NumIterationsBinding;//[Offset: 0x44, Size: 0x8]
	enum GpuDispatchType;//[Offset: 0x4c, Size: 0x1]
	IntVector GpuDispatchNumThreads;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: NiagaraParameterCollection.Object
	FName Namespace;//[Offset: 0x28, Size: 0x8]
	NiagaraVariable[] Parameters;//[Offset: 0x30, Size: 0x10]
	MaterialParameterCollection* SourceMaterialCollection;//[Offset: 0x40, Size: 0x8]
	NiagaraParameterCollectionInstance* DefaultInstance;//[Offset: 0x48, Size: 0x8]
	Guid CompileId;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraParameterCollectionInstance.Object
	NiagaraParameterCollection* Collection;//[Offset: 0x28, Size: 0x8]
	NiagaraVariable[] OverridenParameters;//[Offset: 0x30, Size: 0x10]
	NiagaraParameterStore ParameterStorage;//[Offset: 0x40, Size: 0x88]
	void SetVectorParameter(FString InVariableName, Vector InValue);// 0x234858eb6041
	void SetVector4Parameter(FString InVariableName, out const Vector4 InValue);// 0x234758eb6041
	void SetVector2DParameter(FString InVariableName, Vector2D InValue);// 0x234658eb6041
	void SetQuatParameter(FString InVariableName, out const Quat InValue);// 0x234558eb6041
	void SetIntParameter(FString InVariableName, int InValue);// 0x234458eb6041
	void SetFloatParameter(FString InVariableName, float InValue);// 0x234358eb6041
	void SetColorParameter(FString InVariableName, LinearColor InValue);// 0x234258eb6041
	void SetBoolParameter(FString InVariableName, bool InValue);// 0x234158eb6041
	Vector GetVectorParameter(FString InVariableName);// 0x234058eb6041
	Vector4 GetVector4Parameter(FString InVariableName);// 0x233f58eb6041
	Vector2D GetVector2DParameter(FString InVariableName);// 0x233e58eb6041
	Quat GetQuatParameter(FString InVariableName);// 0x233d58eb6041
	int GetIntParameter(FString InVariableName);// 0x233c58eb6041
	float GetFloatParameter(FString InVariableName);// 0x233b58eb6041
	LinearColor GetColorParameter(FString InVariableName);// 0x233a58eb6041
	bool GetBoolParameter(FString InVariableName);// 0x233958eb6041

--------------------------------
Class: NiagaraScriptDataInterfaceInfo
	NiagaraDataInterface* DataInterface;//[Offset: 0x0, Size: 0x8]
	FName Name;//[Offset: 0x8, Size: 0x8]
	int UserPtrIdx;//[Offset: 0x10, Size: 0x4]
	NiagaraTypeDefinition Type;//[Offset: 0x18, Size: 0x10]
	FName RegisteredParameterMapRead;//[Offset: 0x28, Size: 0x8]
	FName RegisteredParameterMapWrite;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: NiagaraEventReceiverProperties
	FName Name;//[Offset: 0x0, Size: 0x8]
	FName SourceEventGenerator;//[Offset: 0x8, Size: 0x8]
	FName SourceEmitter;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: NiagaraEventGeneratorProperties
	int MaxEventsPerFrame;//[Offset: 0x0, Size: 0x4]
	FName ID;//[Offset: 0x4, Size: 0x8]
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x10, Size: 0x40]

--------------------------------
Class: NiagaraDataSetCompiledData
	NiagaraVariable[] Variables;//[Offset: 0x0, Size: 0x10]
	NiagaraVariableLayoutInfo[] VariableLayouts;//[Offset: 0x10, Size: 0x10]
	NiagaraDataSetID ID;//[Offset: 0x20, Size: 0xc]
	uint32 TotalFloatComponents;//[Offset: 0x2c, Size: 0x4]
	uint32 TotalInt32Components;//[Offset: 0x30, Size: 0x4]
	uint32 TotalHalfComponents;//[Offset: 0x34, Size: 0x4]
	bool bRequiresPersistentIDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	enum SimTarget;//[Offset: 0x39, Size: 0x1]

--------------------------------
Class: NiagaraVariableLayoutInfo
	uint32 FloatComponentStart;//[Offset: 0x0, Size: 0x4]
	uint32 Int32ComponentStart;//[Offset: 0x4, Size: 0x4]
	uint32 HalfComponentStart;//[Offset: 0x8, Size: 0x4]
	NiagaraTypeLayoutInfo LayoutInfo;//[Offset: 0x10, Size: 0x60]

--------------------------------
Class: NiagaraTypeLayoutInfo
	uint32[] FloatComponentByteOffsets;//[Offset: 0x0, Size: 0x10]
	uint32[] FloatComponentRegisterOffsets;//[Offset: 0x10, Size: 0x10]
	uint32[] Int32ComponentByteOffsets;//[Offset: 0x20, Size: 0x10]
	uint32[] Int32ComponentRegisterOffsets;//[Offset: 0x30, Size: 0x10]
	uint32[] HalfComponentByteOffsets;//[Offset: 0x40, Size: 0x10]
	uint32[] HalfComponentRegisterOffsets;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: NiagaraDetailsLevelScaleOverrides
	float Low;//[Offset: 0x0, Size: 0x4]
	float Medium;//[Offset: 0x4, Size: 0x4]
	float High;//[Offset: 0x8, Size: 0x4]
	float Epic;//[Offset: 0xc, Size: 0x4]
	float Cine;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: NiagaraEmitterScalabilityOverrides
	NiagaraEmitterScalabilityOverride[] Overrides;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraEmitterScalabilityOverride.NiagaraEmitterScalabilitySettings
	bool bOverrideSpawnCountScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x28, Size: 0x30]
	int SortOrderHint;//[Offset: 0x58, Size: 0x4]
	enum MotionVectorSetting;//[Offset: 0x5c, Size: 0x4]
	NiagaraVariableAttributeBinding RendererEnabledBinding;//[Offset: 0x60, Size: 0x58]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]
	bool bAllowInCullProxies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 0x1]
	bool bMotionBlurEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 0x1]

--------------------------------
Class: NiagaraVariableAttributeBinding
	NiagaraVariableBase ParamMapVariable;//[Offset: 0x0, Size: 0xc]
	NiagaraVariable DataSetVariable;//[Offset: 0x10, Size: 0x20]
	NiagaraVariable RootVariable;//[Offset: 0x30, Size: 0x20]
	byte BindingSourceMode;//[Offset: 0x50, Size: 0x1]
	bool bBindingExistsOnSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 0x1]
	bool bIsCachedParticleValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51, Size: 0x1]

--------------------------------
Class: NiagaraEventScriptProperties.NiagaraEmitterScriptProperties
	enum ExecutionMode;//[Offset: 0x28, Size: 0x1]
	uint32 SpawnNumber;//[Offset: 0x2c, Size: 0x4]
	uint32 MaxEventsPerFrame;//[Offset: 0x30, Size: 0x4]
	Guid SourceEmitterID;//[Offset: 0x34, Size: 0x10]
	FName SourceEventName;//[Offset: 0x44, Size: 0x8]
	bool bRandomSpawnNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	uint32 MinSpawnNumber;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: NiagaraSimulationStageBase.NiagaraMergeable.Object
	NiagaraScript* Script;//[Offset: 0x28, Size: 0x8]
	FName SimulationStageName;//[Offset: 0x30, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: NiagaraSystemCompiledData
	NiagaraParameterStore InstanceParamStore;//[Offset: 0x0, Size: 0x88]
	NiagaraDataSetCompiledData DataSetCompiledData;//[Offset: 0x88, Size: 0x40]
	NiagaraDataSetCompiledData SpawnInstanceParamsDataSetCompiledData;//[Offset: 0xc8, Size: 0x40]
	NiagaraDataSetCompiledData UpdateInstanceParamsDataSetCompiledData;//[Offset: 0x108, Size: 0x40]
	NiagaraParameterDataSetBindingCollection SpawnInstanceGlobalBinding;//[Offset: 0x148, Size: 0x20]
	NiagaraParameterDataSetBindingCollection SpawnInstanceSystemBinding;//[Offset: 0x168, Size: 0x20]
	NiagaraParameterDataSetBindingCollection SpawnInstanceOwnerBinding;//[Offset: 0x188, Size: 0x20]
	NiagaraParameterDataSetBindingCollection[] SpawnInstanceEmitterBindings;//[Offset: 0x1a8, Size: 0x10]
	NiagaraParameterDataSetBindingCollection UpdateInstanceGlobalBinding;//[Offset: 0x1b8, Size: 0x20]
	NiagaraParameterDataSetBindingCollection UpdateInstanceSystemBinding;//[Offset: 0x1d8, Size: 0x20]
	NiagaraParameterDataSetBindingCollection UpdateInstanceOwnerBinding;//[Offset: 0x1f8, Size: 0x20]
	NiagaraParameterDataSetBindingCollection[] UpdateInstanceEmitterBindings;//[Offset: 0x218, Size: 0x10]

--------------------------------
Class: NiagaraParameterDataSetBindingCollection
	NiagaraParameterDataSetBinding[] FloatOffsets;//[Offset: 0x0, Size: 0x10]
	NiagaraParameterDataSetBinding[] Int32Offsets;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: NiagaraParameterDataSetBinding
	int ParameterOffset;//[Offset: 0x0, Size: 0x4]
	int DataSetComponentOffset;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: NiagaraUserRedirectionParameterStore.NiagaraParameterStore
	<NiagaraVariable,NiagaraVariable> UserParameterRedirects;//[Offset: 0x88, Size: 0x50]

--------------------------------
Class: NiagaraCullProxyComponent.NiagaraComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NiagaraCulledComponentInfo[] Instances;//[Offset: 0x7b8, Size: 0x10]

--------------------------------
Class: NiagaraCulledComponentInfo

--------------------------------
Class: NiagaraBakerSettings.Object
	float StartSeconds;//[Offset: 0x28, Size: 0x4]
	float DurationSeconds;//[Offset: 0x2c, Size: 0x4]
	int FramesPerSecond;//[Offset: 0x30, Size: 0x4]
	bool bPreviewLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	IntPoint FramesPerDimension;//[Offset: 0x38, Size: 0x8]
	NiagaraBakerTextureSettings[] OutputTextures;//[Offset: 0x40, Size: 0x10]
	enum CameraViewportMode;//[Offset: 0x50, Size: 0x4]
	Vector CameraViewportLocation;//[Offset: 0x58, Size: 0x18]
	Rotator CameraViewportRotation;//[Offset: 0x100, Size: 0x18]
	float CameraOrbitDistance;//[Offset: 0x1a8, Size: 0x4]
	float CameraFOV;//[Offset: 0x1ac, Size: 0x4]
	float CameraOrthoWidth;//[Offset: 0x1b0, Size: 0x4]
	bool bUseCameraAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b4, Size: 0x1]
	float CameraAspectRatio;//[Offset: 0x1b8, Size: 0x4]
	bool bRenderComponentOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bc, Size: 0x1]

--------------------------------
Class: NiagaraBakerTextureSettings
	NiagaraBakerTextureSource SourceBinding;//[Offset: 0x0, Size: 0x8]
	bool bUseFrameSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	IntPoint FrameSize;//[Offset: 0xc, Size: 0x8]
	IntPoint TextureSize;//[Offset: 0x14, Size: 0x8]
	Texture2D* GeneratedTexture;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: NiagaraBakerTextureSource
	FName SourceName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: NiagaraComponentPool.Object
	<NiagaraSystem*,NCPool> WorldParticleSystemPools;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: NCPool
	NCPoolElement[] FreeElements;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NCPoolElement
	NiagaraComponent* Component;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: NiagaraComponentRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	class SceneComponent* ComponentType;//[Offset: 0xd0, Size: 0x8]
	uint32 ComponentCountLimit;//[Offset: 0xd8, Size: 0x4]
	NiagaraVariableAttributeBinding EnabledBinding;//[Offset: 0xe0, Size: 0x58]
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x138, Size: 0x58]
	bool bAssignComponentsOnParticleID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	bool bOnlyCreateComponentsOnParticleSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 0x1]
	bool bOnlyActivateNewlyAquiredComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x192, Size: 0x1]
	int RendererVisibility;//[Offset: 0x194, Size: 0x4]
	SceneComponent* TemplateComponent;//[Offset: 0x198, Size: 0x8]
	NiagaraComponentPropertyBinding[] PropertyBindings;//[Offset: 0x1a0, Size: 0x10]

--------------------------------
Class: NiagaraComponentPropertyBinding
	NiagaraVariableAttributeBinding AttributeBinding;//[Offset: 0x0, Size: 0x58]
	FName PropertyName;//[Offset: 0x58, Size: 0x8]
	NiagaraTypeDefinition PropertyType;//[Offset: 0x60, Size: 0x10]
	FName MetadataSetterName;//[Offset: 0x70, Size: 0x8]
	<FString,FString> PropertySetterParameterDefaults;//[Offset: 0x78, Size: 0x50]
	NiagaraVariable WritableValue;//[Offset: 0xc8, Size: 0x20]

--------------------------------
Class: NiagaraComponentSettings.Object
	<FName> SuppressActivationList;//[Offset: 0x28, Size: 0x50]
	<FName> ForceAutoPooolingList;//[Offset: 0x78, Size: 0x50]
	<NiagaraEmitterNameSettingsRef> SuppressEmitterList;//[Offset: 0xc8, Size: 0x50]
	<NiagaraEmitterNameSettingsRef> GPUEmitterAllowList;//[Offset: 0x118, Size: 0x50]
	<FName> GpuDataInterfaceDenyList;//[Offset: 0x168, Size: 0x50]

--------------------------------
Class: NiagaraEmitterNameSettingsRef
	FName SystemName;//[Offset: 0x0, Size: 0x8]
	FString EmitterName;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: NiagaraConvertInPlaceUtilityBase.Object

--------------------------------
Class: NiagaraDataInterface2DArrayTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Texture2DArray* Texture;//[Offset: 0x38, Size: 0x8]
	NiagaraUserParameterBinding TextureUserParameter;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: NiagaraUserParameterBinding
	NiagaraVariable Parameter;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: NiagaraDataInterfaceActorComponent.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	Actor* SourceActor;//[Offset: 0x34, Size: 0x1c]
	NiagaraUserParameterBinding ActorOrComponentParameter;//[Offset: 0x50, Size: 0x20]

--------------------------------
Class: NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum GpuSyncMode;//[Offset: 0x6c, Size: 0x4]
	int MaxElements;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceArrayFloat.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	float[] FloatData;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayFloat2.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector2D[] FloatData;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayFloat3.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector[] FloatData;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayPosition.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraPosition[] PositionData;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NiagaraPosition.Vector3f

--------------------------------
Class: NiagaraDataInterfaceArrayFloat4.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Vector4[] FloatData;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayColor.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	LinearColor[] ColorData;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayQuat.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Quat[] QuatData;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayFunctionLibrary.BlueprintFunctionLibrary.Object
	void SetNiagaraArrayVectorValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const Vector Value, bool bSizeToFit);// 0x231e58eb6041
	void SetNiagaraArrayVector4Value(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const Vector4 Value, bool bSizeToFit);// 0x231d58eb6041
	void SetNiagaraArrayVector4(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector4[] ArrayData);// 0x231c58eb6041
	void SetNiagaraArrayVector2DValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const Vector2D Value, bool bSizeToFit);// 0x231b58eb6041
	void SetNiagaraArrayVector2D(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector2D[] ArrayData);// 0x231a58eb6041
	void SetNiagaraArrayVector(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector[] ArrayData);// 0x231958eb6041
	void SetNiagaraArrayQuatValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const Quat Value, bool bSizeToFit);// 0x231858eb6041
	void SetNiagaraArrayQuat(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Quat[] ArrayData);// 0x231758eb6041
	void SetNiagaraArrayPositionValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const Vector Value, bool bSizeToFit);// 0x231658eb6041
	void SetNiagaraArrayPosition(NiagaraComponent* NiagaraSystem, FName OverrideName, out const Vector[] ArrayData);// 0x231558eb6041
	void SetNiagaraArrayInt32Value(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, int Value, bool bSizeToFit);// 0x231458eb6041
	void SetNiagaraArrayInt32(NiagaraComponent* NiagaraSystem, FName OverrideName, out const int[] ArrayData);// 0x235558eb6041
	void SetNiagaraArrayFloatValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, float Value, bool bSizeToFit);// 0x231258eb6041
	void SetNiagaraArrayFloat(NiagaraComponent* NiagaraSystem, FName OverrideName, out const float[] ArrayData);// 0x231158eb6041
	void SetNiagaraArrayColorValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const LinearColor Value, bool bSizeToFit);// 0x231058eb6041
	void SetNiagaraArrayColor(NiagaraComponent* NiagaraSystem, FName OverrideName, out const LinearColor[] ArrayData);// 0x230f58eb6041
	void SetNiagaraArrayBoolValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index, out const bool Value, bool bSizeToFit);// 0x230e58eb6041
	void SetNiagaraArrayBool(NiagaraComponent* NiagaraSystem, FName OverrideName, out const bool[] ArrayData);// 0x230d58eb6041
	Vector GetNiagaraArrayVectorValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x230c58eb6041
	Vector4 GetNiagaraArrayVector4Value(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x230b58eb6041
	Vector4[] GetNiagaraArrayVector4(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x230a58eb6041
	Vector2D GetNiagaraArrayVector2DValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x230958eb6041
	Vector2D[] GetNiagaraArrayVector2D(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x230858eb6041
	Vector[] GetNiagaraArrayVector(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x230758eb6041
	Quat GetNiagaraArrayQuatValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x230658eb6041
	Quat[] GetNiagaraArrayQuat(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x230558eb6041
	Vector GetNiagaraArrayPositionValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x230458eb6041
	Vector[] GetNiagaraArrayPosition(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x230358eb6041
	int GetNiagaraArrayInt32Value(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x230258eb6041
	int[] GetNiagaraArrayInt32(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x230158eb6041
	float GetNiagaraArrayFloatValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x230058eb6041
	float[] GetNiagaraArrayFloat(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x22ff58eb6041
	LinearColor GetNiagaraArrayColorValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x22fe58eb6041
	LinearColor[] GetNiagaraArrayColor(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x22fd58eb6041
	bool GetNiagaraArrayBoolValue(NiagaraComponent* NiagaraSystem, FName OverrideName, int Index);// 0x22fc58eb6041
	bool[] GetNiagaraArrayBool(NiagaraComponent* NiagaraSystem, FName OverrideName);// 0x22fb58eb6041

--------------------------------
Class: NiagaraDataInterfaceArrayInt32.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int[] IntData;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayBool.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	bool[] BoolData;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceArrayNiagaraID.NiagaraDataInterfaceArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraID[] IntData;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: NiagaraID
	int Index;//[Offset: 0x0, Size: 0x4]
	int AcquireTag;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceAsyncGpuTrace.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int MaxTracesPerParticle;//[Offset: 0x34, Size: 0x4]
	int MaxRetraces;//[Offset: 0x38, Size: 0x4]
	byte TraceProvider;//[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: NiagaraDataInterfaceAudioSubmix.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundSubmix* Submix;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceAudioOscilloscope.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundSubmix* Submix;//[Offset: 0x38, Size: 0x8]
	int Resolution;//[Offset: 0x40, Size: 0x4]
	float ScopeInMilliseconds;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceAudioPlayer.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	SoundBase* SoundToPlay;//[Offset: 0x38, Size: 0x8]
	SoundAttenuation* Attenuation;//[Offset: 0x40, Size: 0x8]
	SoundConcurrency* Concurrency;//[Offset: 0x48, Size: 0x8]
	FName[] ParameterNames;//[Offset: 0x50, Size: 0x10]
	bool bLimitPlaysPerTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int MaxPlaysPerTick;//[Offset: 0x64, Size: 0x4]
	bool bStopWhenComponentIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: NiagaraDataInterfaceAudioSpectrum.NiagaraDataInterfaceAudioSubmix.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int Resolution;//[Offset: 0x40, Size: 0x4]
	float MinimumFrequency;//[Offset: 0x44, Size: 0x4]
	float MaximumFrequency;//[Offset: 0x48, Size: 0x4]
	float NoiseFloorDb;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceCamera.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int PlayerControllerIndex;//[Offset: 0x34, Size: 0x4]
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: NiagaraDataInterfaceCollisionQuery.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	float[] ShaderLUT;//[Offset: 0x38, Size: 0x10]
	float LUTMinTime;//[Offset: 0x48, Size: 0x4]
	float LUTMaxTime;//[Offset: 0x4c, Size: 0x4]
	float LUTInvTimeRange;//[Offset: 0x50, Size: 0x4]
	float LUTNumSamplesMinusOne;//[Offset: 0x54, Size: 0x4]
	bool bUseLUT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]
	bool bExposeCurve;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 0x1]
	FName ExposedName;//[Offset: 0x60, Size: 0x8]
	Texture2D* ExposedTexture;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceColorCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve RedCurve;//[Offset: 0x70, Size: 0x80]
	RichCurve GreenCurve;//[Offset: 0xf0, Size: 0x80]
	RichCurve BlueCurve;//[Offset: 0x170, Size: 0x80]
	RichCurve AlphaCurve;//[Offset: 0x1f0, Size: 0x80]

--------------------------------
Class: NiagaraDataInterfaceCubeTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	TextureCube* Texture;//[Offset: 0x38, Size: 0x8]
	NiagaraUserParameterBinding TextureUserParameter;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: NiagaraDataInterfaceCurlNoise.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	uint32 Seed;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve Curve;//[Offset: 0x70, Size: 0x80]

--------------------------------
Class: NiagaraDataInterfaceDebugDraw.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	uint32 OverrideMaxLineInstances;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceEmitterProperties.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraDataInterfaceEmitterBinding EmitterBinding;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: NiagaraDataInterfaceEmitterBinding
	enum BindingMode;//[Offset: 0x0, Size: 0x4]
	FName EmitterName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: NiagaraParticleCallbackHandler.Interface.Object
	void ReceiveParticleData(out const BasicParticleData[] Data, NiagaraSystem* NiagaraSystem, out const Vector SimulationPositionOffset);// 0x231f58eb6041

--------------------------------
Class: BasicParticleData
	Vector Position;//[Offset: 0x0, Size: 0x18]
	float Size;//[Offset: 0x18, Size: 0x4]
	Vector Velocity;//[Offset: 0x20, Size: 0x18]

--------------------------------
Class: NiagaraDataInterfaceExport.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraUserParameterBinding CallbackHandlerParameter;//[Offset: 0x38, Size: 0x20]
	enum GPUAllocationMode;//[Offset: 0x58, Size: 0x1]
	int GPUAllocationFixedSize;//[Offset: 0x5c, Size: 0x4]
	float GPUAllocationPerParticleSize;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceGBuffer.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int NumCellsX;//[Offset: 0x34, Size: 0x4]
	int NumCellsY;//[Offset: 0x38, Size: 0x4]
	int NumCellsMaxAxis;//[Offset: 0x3c, Size: 0x4]
	int NumAttributes;//[Offset: 0x40, Size: 0x4]
	bool SetGridFromMaxAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	Vector2D WorldBBoxSize;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceGrid2DCollection.NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x58, Size: 0x20]
	enum OverrideBufferFormat;//[Offset: 0x78, Size: 0x1]
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79, Size: 0x1]
	<uint64,TextureRenderTarget2DArray*> ManagedRenderTargets;//[Offset: 0xd0, Size: 0x50]
	void GetTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY);// 0x232358eb6041
	void GetRawTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY);// 0x232258eb6041
	bool FillTexture2D(const NiagaraComponent* Component, TextureRenderTarget2D* Dest, int AttributeIndex);// 0x232158eb6041
	bool FillRawTexture2D(const NiagaraComponent* Component, TextureRenderTarget2D* Dest, out int TilesX, out int TilesY);// 0x232058eb6041

--------------------------------
Class: NiagaraDataInterfaceGrid2DCollectionReader.NiagaraDataInterfaceGrid2DCollection.NiagaraDataInterfaceGrid2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	FString EmitterName;//[Offset: 0x120, Size: 0x10]
	FString DIName;//[Offset: 0x130, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector NumCells;//[Offset: 0x34, Size: 0xc]
	float CellSize;//[Offset: 0x40, Size: 0x4]
	int NumCellsMaxAxis;//[Offset: 0x44, Size: 0x4]
	enum SetResolutionMethod;//[Offset: 0x48, Size: 0x4]
	Vector WorldBBoxSize;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: NiagaraDataInterfaceGrid3DCollection.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int NumAttributes;//[Offset: 0x68, Size: 0x4]
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x70, Size: 0x20]
	enum OverrideBufferFormat;//[Offset: 0x90, Size: 0x1]
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x91, Size: 0x1]
	void GetTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY, out int SizeZ);// 0x232758eb6041
	void GetRawTextureSize(const NiagaraComponent* Component, out int SizeX, out int SizeY, out int SizeZ);// 0x232658eb6041
	bool FillVolumeTexture(const NiagaraComponent* Component, VolumeTexture* Dest, int AttributeIndex);// 0x232558eb6041
	bool FillRawVolumeTexture(const NiagaraComponent* Component, VolumeTexture* Dest, out int TilesX, out int TilesY, out int TileZ);// 0x232458eb6041

--------------------------------
Class: NiagaraDataInterfaceGrid3DCollectionReader.NiagaraDataInterfaceGrid3DCollection.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	FString EmitterName;//[Offset: 0xe8, Size: 0x10]
	FString DIName;//[Offset: 0xf8, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceIntRenderTarget2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntPoint Size;//[Offset: 0x34, Size: 0x8]
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x40, Size: 0x20]
	<uint64,TextureRenderTarget2D*> ManagedRenderTargets;//[Offset: 0x60, Size: 0x50]

--------------------------------
Class: NiagaraDataInterfaceLandscape.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Actor* SourceLandscape;//[Offset: 0x38, Size: 0x8]
	enum SourceMode;//[Offset: 0x40, Size: 0x1]
	PhysicalMaterial*[] PhysicalMaterials;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceMeshRendererInfo.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraMeshRendererProperties* MeshRenderer;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: NiagaraMeshRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraMeshRendererMeshProperties[] Meshes;//[Offset: 0xd0, Size: 0x10]
	enum SourceMode;//[Offset: 0xe0, Size: 0x1]
	enum SortMode;//[Offset: 0xe1, Size: 0x1]
	bool bOverrideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe2, Size: 0x1]
	bool bSortOnlyWhenTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe2, Size: 0x1]
	bool bGpuLowLatencyTranslucency;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe2, Size: 0x1]
	bool bSubImageBlend;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe2, Size: 0x1]
	bool bEnableFrustumCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe2, Size: 0x1]
	bool bEnableCameraDistanceCulling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe2, Size: 0x1]
	bool bEnableMeshFlipbook;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe2, Size: 0x1]
	NiagaraMeshMaterialOverride[] OverrideMaterials;//[Offset: 0xe8, Size: 0x10]
	Vector2D SubImageSize;//[Offset: 0xf8, Size: 0x10]
	enum FacingMode;//[Offset: 0x108, Size: 0x1]
	bool bLockedAxisEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x109, Size: 0x1]
	Vector LockedAxis;//[Offset: 0x110, Size: 0x18]
	enum LockedAxisSpace;//[Offset: 0x128, Size: 0x1]
	float MinCameraDistance;//[Offset: 0x12c, Size: 0x4]
	float MaxCameraDistance;//[Offset: 0x130, Size: 0x4]
	uint32 RendererVisibility;//[Offset: 0x134, Size: 0x4]
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0x138, Size: 0x58]
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x190, Size: 0x58]
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x1e8, Size: 0x58]
	NiagaraVariableAttributeBinding MeshOrientationBinding;//[Offset: 0x240, Size: 0x58]
	NiagaraVariableAttributeBinding ScaleBinding;//[Offset: 0x298, Size: 0x58]
	NiagaraVariableAttributeBinding SubImageIndexBinding;//[Offset: 0x2f0, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x348, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x3a0, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x3f8, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x450, Size: 0x58]
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x4a8, Size: 0x58]
	NiagaraVariableAttributeBinding CustomSortingBinding;//[Offset: 0x500, Size: 0x58]
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x558, Size: 0x58]
	NiagaraVariableAttributeBinding CameraOffsetBinding;//[Offset: 0x5b0, Size: 0x58]
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x608, Size: 0x58]
	NiagaraVariableAttributeBinding MeshIndexBinding;//[Offset: 0x660, Size: 0x58]
	NiagaraMaterialAttributeBinding[] MaterialParameterBindings;//[Offset: 0x6b8, Size: 0x10]
	NiagaraVariableAttributeBinding PrevPositionBinding;//[Offset: 0x6c8, Size: 0x58]
	NiagaraVariableAttributeBinding PrevScaleBinding;//[Offset: 0x720, Size: 0x58]
	NiagaraVariableAttributeBinding PrevMeshOrientationBinding;//[Offset: 0x778, Size: 0x58]
	NiagaraVariableAttributeBinding PrevCameraOffsetBinding;//[Offset: 0x7d0, Size: 0x58]
	NiagaraVariableAttributeBinding PrevVelocityBinding;//[Offset: 0x828, Size: 0x58]
	StaticMesh* ParticleMesh;//[Offset: 0x8e8, Size: 0x8]
	Vector PivotOffset;//[Offset: 0x8f0, Size: 0x18]
	enum PivotOffsetSpace;//[Offset: 0x908, Size: 0x1]

--------------------------------
Class: NiagaraMeshRendererMeshProperties
	StaticMesh* Mesh;//[Offset: 0x0, Size: 0x8]
	NiagaraUserParameterBinding UserParamBinding;//[Offset: 0x8, Size: 0x20]
	Vector Scale;//[Offset: 0x28, Size: 0x18]
	Rotator Rotation;//[Offset: 0x40, Size: 0x18]
	Vector PivotOffset;//[Offset: 0x58, Size: 0x18]
	enum PivotOffsetSpace;//[Offset: 0x70, Size: 0x1]

--------------------------------
Class: NiagaraMeshMaterialOverride
	MaterialInterface* ExplicitMat;//[Offset: 0x0, Size: 0x8]
	NiagaraUserParameterBinding UserParamBinding;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: NiagaraMaterialAttributeBinding
	FName MaterialParameterName;//[Offset: 0x0, Size: 0x8]
	NiagaraVariableBase NiagaraVariable;//[Offset: 0x8, Size: 0xc]
	NiagaraVariableBase ResolvedNiagaraVariable;//[Offset: 0x14, Size: 0xc]
	NiagaraVariableBase NiagaraChildVariable;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: NiagaraDataInterfaceNeighborGrid3D.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	uint32 MaxNeighborsPerCell;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceOcclusion.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object

--------------------------------
Class: NiagaraDataInterfaceParticleRead.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	FString EmitterName;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfacePlatformSet.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraPlatformSet Platforms;//[Offset: 0x38, Size: 0x30]

--------------------------------
Class: NiagaraDataInterfaceRasterizationGrid3D.NiagaraDataInterfaceGrid3D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int NumAttributes;//[Offset: 0x68, Size: 0x4]
	float Precision;//[Offset: 0x6c, Size: 0x4]
	int ResetValue;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceRenderTarget2D.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntPoint Size;//[Offset: 0x34, Size: 0x8]
	enum MipMapGeneration;//[Offset: 0x3c, Size: 0x1]
	enum MipMapGenerationType;//[Offset: 0x3d, Size: 0x1]
	byte OverrideRenderTargetFormat;//[Offset: 0x3e, Size: 0x1]
	bool bInheritUserParameterSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f, Size: 0x1]
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f, Size: 0x1]
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x40, Size: 0x20]
	<uint64,TextureRenderTarget2D*> ManagedRenderTargets;//[Offset: 0xb0, Size: 0x50]

--------------------------------
Class: NiagaraDataInterfaceRenderTarget2DArray.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector Size;//[Offset: 0x34, Size: 0xc]
	byte OverrideRenderTargetFormat;//[Offset: 0x40, Size: 0x1]
	bool bInheritUserParameterSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1]
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1]
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x48, Size: 0x20]
	<uint64,TextureRenderTarget2DArray*> ManagedRenderTargets;//[Offset: 0x68, Size: 0x50]

--------------------------------
Class: NiagaraDataInterfaceRenderTargetCube.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	int Size;//[Offset: 0x34, Size: 0x4]
	byte OverrideRenderTargetFormat;//[Offset: 0x38, Size: 0x1]
	bool bInheritUserParameterSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 0x1]
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 0x1]
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x40, Size: 0x20]
	<uint64,TextureRenderTargetCube*> ManagedRenderTargets;//[Offset: 0x60, Size: 0x50]

--------------------------------
Class: NiagaraDataInterfaceRenderTargetVolume.NiagaraDataInterfaceRWBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	IntVector Size;//[Offset: 0x34, Size: 0xc]
	byte OverrideRenderTargetFormat;//[Offset: 0x40, Size: 0x1]
	bool bInheritUserParameterSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1]
	bool bOverrideFormat;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 0x1]
	NiagaraUserParameterBinding RenderTargetUserParameter;//[Offset: 0x48, Size: 0x20]
	<uint64,TextureRenderTargetVolume*> ManagedRenderTargets;//[Offset: 0x68, Size: 0x50]

--------------------------------
Class: NiagaraDataInterfaceRigidMeshCollisionQuery.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	FString Tag;//[Offset: 0x38, Size: 0x10]
	bool OnlyUseMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	int MaxNumPrimitives;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceSimpleCounter.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum GpuSyncMode;//[Offset: 0x34, Size: 0x4]
	int InitialValue;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceSkeletalMesh.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum SourceMode;//[Offset: 0x31, Size: 0x1]
	Actor* Source;//[Offset: 0x38, Size: 0x8]
	NiagaraUserParameterBinding MeshUserParameter;//[Offset: 0x40, Size: 0x20]
	SkeletalMeshComponent* SourceComponent;//[Offset: 0x60, Size: 0x8]
	enum SkinningMode;//[Offset: 0x68, Size: 0x1]
	FName[] SamplingRegions;//[Offset: 0x70, Size: 0x10]
	int WholeMeshLOD;//[Offset: 0x80, Size: 0x4]
	FName[] FilteredBones;//[Offset: 0x88, Size: 0x10]
	FName[] FilteredSockets;//[Offset: 0x98, Size: 0x10]
	FName ExcludeBoneName;//[Offset: 0xa8, Size: 0x8]
	bool bExcludeBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int UvSetIndex;//[Offset: 0xb4, Size: 0x4]
	bool bRequireCurrentFrameData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 0x1]

--------------------------------
Class: NiagaraDataInterfaceSpline.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Actor* Source;//[Offset: 0x38, Size: 0x8]
	NiagaraUserParameterBinding SplineUserParameter;//[Offset: 0x40, Size: 0x20]
	bool bUseLUT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	int NumLUTSteps;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: NiagaraDataInterfaceStaticMesh.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	enum SourceMode;//[Offset: 0x31, Size: 0x1]
	StaticMesh* DefaultMesh;//[Offset: 0x38, Size: 0x8]
	Actor* Source;//[Offset: 0x40, Size: 0x8]
	StaticMeshComponent* SourceComponent;//[Offset: 0x48, Size: 0x8]
	NDIStaticMeshSectionFilter SectionFilter;//[Offset: 0x50, Size: 0x10]
	bool bUsePhysicsBodyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	FName[] FilteredSockets;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: NDIStaticMeshSectionFilter
	int[] AllowedMaterialSlots;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NiagaraDataInterfaceTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	Texture* Texture;//[Offset: 0x38, Size: 0x8]
	NiagaraUserParameterBinding TextureUserParameter;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: NiagaraDataInterfaceUObjectPropertyReader.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	NiagaraUserParameterBinding UObjectParameterBinding;//[Offset: 0x38, Size: 0x20]
	NiagaraUObjectPropertyReaderRemap[] PropertyRemap;//[Offset: 0x58, Size: 0x10]
	Actor* SourceActor;//[Offset: 0x68, Size: 0x1c]
	ClassPtrProperty SourceActorComponentClass;//[Size: 0x8]
	void SetUObjectReaderPropertyRemap(NiagaraComponent* NiagaraComponent, FName UserParameterName, FName GraphName, FName RemapName);// 0x232858eb6041

--------------------------------
Class: NiagaraUObjectPropertyReaderRemap
	FName GraphName;//[Offset: 0x0, Size: 0x8]
	FName RemapName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: NiagaraDataInterfaceVector2DCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80]
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80]

--------------------------------
Class: NiagaraDataInterfaceVector4Curve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80]
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80]
	RichCurve ZCurve;//[Offset: 0x170, Size: 0x80]
	RichCurve WCurve;//[Offset: 0x1f0, Size: 0x80]

--------------------------------
Class: NiagaraDataInterfaceVectorCurve.NiagaraDataInterfaceCurveBase.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	RichCurve XCurve;//[Offset: 0x70, Size: 0x80]
	RichCurve YCurve;//[Offset: 0xf0, Size: 0x80]
	RichCurve ZCurve;//[Offset: 0x170, Size: 0x80]

--------------------------------
Class: NiagaraDataInterfaceVectorField.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	VectorField* Field;//[Offset: 0x38, Size: 0x8]
	bool bTileX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bTileY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	bool bTileZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]

--------------------------------
Class: NiagaraDataInterfaceVolumeTexture.NiagaraDataInterface.NiagaraDataInterfaceBase.NiagaraMergeable.Object
	VolumeTexture* Texture;//[Offset: 0x38, Size: 0x8]
	NiagaraUserParameterBinding TextureUserParameter;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: NiagaraDebugHUDSettings.Object
	NiagaraDebugHUDSettingsData Data;//[Offset: 0x48, Size: 0x220]

--------------------------------
Class: NiagaraDebugHUDSettingsData
	bool bHudEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bValidateSystemSimulationDataBuffers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bValidateParticleDataBuffers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bOverviewEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	enum OverviewMode;//[Offset: 0x4, Size: 0x4]
	enum OverviewFont;//[Offset: 0x8, Size: 0x4]
	Vector2D OverviewLocation;//[Offset: 0x10, Size: 0x10]
	FString ActorFilter;//[Offset: 0x20, Size: 0x10]
	bool bComponentFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	FString ComponentFilter;//[Offset: 0x38, Size: 0x10]
	bool bSystemFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	FString SystemFilter;//[Offset: 0x50, Size: 0x10]
	bool bEmitterFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	FString EmitterFilter;//[Offset: 0x68, Size: 0x10]
	bool bActorFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	enum SystemDebugVerbosity;//[Offset: 0x7c, Size: 0x4]
	enum SystemEmitterVerbosity;//[Offset: 0x80, Size: 0x4]
	bool bSystemShowBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool bSystemShowActiveOnlyInWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	bool bShowSystemVariables;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1]
	NiagaraDebugHUDVariable[] SystemVariables;//[Offset: 0x88, Size: 0x10]
	NiagaraDebugHudTextOptions SystemTextOptions;//[Offset: 0x98, Size: 0x18]
	bool bShowParticleVariables;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bEnableGpuParticleReadback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	bool bShowParticleIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 0x1]
	NiagaraDebugHUDVariable[] ParticlesVariables;//[Offset: 0xb8, Size: 0x10]
	NiagaraDebugHudTextOptions ParticleTextOptions;//[Offset: 0xc8, Size: 0x18]
	bool bShowParticlesVariablesWithSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool bShowParticleVariablesVertical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	bool bUseMaxParticlesToDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1]
	bool bUseParticleDisplayClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3, Size: 0x1]
	Vector2D ParticleDisplayClip;//[Offset: 0xe8, Size: 0x10]
	bool bUseParticleDisplayCenterRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	float ParticleDisplayCenterRadius;//[Offset: 0xfc, Size: 0x4]
	int MaxParticlesToDisplay;//[Offset: 0x100, Size: 0x4]
	int PerfReportFrames;//[Offset: 0x104, Size: 0x4]
	enum PerfSampleMode;//[Offset: 0x108, Size: 0x4]
	enum PerfGraphMode;//[Offset: 0x10c, Size: 0x4]
	int PerfHistoryFrames;//[Offset: 0x110, Size: 0x4]
	float PerfGraphTimeRange;//[Offset: 0x114, Size: 0x4]
	Vector2D PerfGraphSize;//[Offset: 0x118, Size: 0x10]
	LinearColor PerfGraphAxisColor;//[Offset: 0x128, Size: 0x10]
	bool bEnableSmoothing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	int SmoothingWidth;//[Offset: 0x13c, Size: 0x4]
	LinearColor DefaultBackgroundColor;//[Offset: 0x140, Size: 0x10]
	LinearColor OverviewHeadingColor;//[Offset: 0x150, Size: 0x10]
	LinearColor OverviewDetailColor;//[Offset: 0x160, Size: 0x10]
	LinearColor OverviewDetailHighlightColor;//[Offset: 0x170, Size: 0x10]
	LinearColor InWorldErrorTextColor;//[Offset: 0x180, Size: 0x10]
	LinearColor InWorldTextColor;//[Offset: 0x190, Size: 0x10]
	LinearColor MessageInfoTextColor;//[Offset: 0x1a0, Size: 0x10]
	LinearColor MessageWarningTextColor;//[Offset: 0x1b0, Size: 0x10]
	LinearColor MessageErrorTextColor;//[Offset: 0x1c0, Size: 0x10]
	float SystemColorTableOpacity;//[Offset: 0x1d0, Size: 0x4]
	uint32 SystemColorSeed;//[Offset: 0x1d4, Size: 0x4]
	Vector SystemColorHSVMin;//[Offset: 0x1d8, Size: 0x18]
	Vector SystemColorHSVMax;//[Offset: 0x1f0, Size: 0x18]
	enum PlaybackMode;//[Offset: 0x208, Size: 0x1]
	bool bPlaybackRateEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 0x1]
	float PlaybackRate;//[Offset: 0x20c, Size: 0x4]
	bool bLoopTimeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	float LoopTime;//[Offset: 0x214, Size: 0x4]
	bool bShowGlobalBudgetInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 0x1]

--------------------------------
Class: NiagaraDebugHUDVariable
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FString Name;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: NiagaraDebugHudTextOptions
	enum Font;//[Offset: 0x0, Size: 0x4]
	enum HorizontalAlignment;//[Offset: 0x4, Size: 0x1]
	enum VerticalAlignment;//[Offset: 0x5, Size: 0x1]
	Vector2D ScreenOffset;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: NiagaraEditorDataBase.Object

--------------------------------
Class: NiagaraEditorParametersAdapterBase.Object

--------------------------------
Class: NiagaraSignificanceHandlerDistance.NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraSignificanceHandlerAge.NiagaraSignificanceHandler.Object

--------------------------------
Class: NiagaraEventReceiverEmitterAction.Object

--------------------------------
Class: NiagaraEventReceiverEmitterAction_SpawnParticles.NiagaraEventReceiverEmitterAction.Object
	uint32 NumParticles;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: NiagaraFunctionLibrary.BlueprintFunctionLibrary.Object
	NiagaraComponent* SpawnSystemAttachedWithParams(out FXSystemSpawnParameters SpawnParams);// 0x233858eb6041
	NiagaraComponent* SpawnSystemAttached(NiagaraSystem* SystemTemplate, SceneComponent* AttachToComponent, FName AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bAutoDestroy, bool bAutoActivate, enum PoolingMethod, bool bPreCullCheck);// 0x233758eb6041
	NiagaraComponent* SpawnSystemAtLocationWithParams(out FXSystemSpawnParameters SpawnParams);// 0x233658eb6041
	NiagaraComponent* SpawnSystemAtLocation(const Object* WorldContextObject, NiagaraSystem* SystemTemplate, Vector Location, Rotator Rotation, Vector Scale, bool bAutoDestroy, bool bAutoActivate, enum PoolingMethod, bool bPreCullCheck);// 0x233558eb6041
	void SetVolumeTextureObject(NiagaraComponent* NiagaraSystem, FString OverrideName, VolumeTexture* Texture);// 0x237658eb6041
	void SetTextureObject(NiagaraComponent* NiagaraSystem, FString OverrideName, Texture* Texture);// 0x233358eb6041
	void SetTexture2DArrayObject(NiagaraComponent* NiagaraSystem, FString OverrideName, Texture2DArray* Texture);// 0x233258eb6041
	void SetSkeletalMeshDataInterfaceSamplingRegions(NiagaraComponent* NiagaraSystem, FString OverrideName, out const FName[] SamplingRegions);// 0x233158eb6041
	void SetComponentNiagaraGPURayTracedCollisionGroup(Object* WorldContextObject, PrimitiveComponent* Primitive, int CollisionGroup);// 0x233058eb6041
	void SetActorNiagaraGPURayTracedCollisionGroup(Object* WorldContextObject, Actor* Actor, int CollisionGroup);// 0x232f58eb6041
	void ReleaseNiagaraGPURayTracedCollisionGroup(Object* WorldContextObject, int CollisionGroup);// 0x232e58eb6041
	void OverrideSystemUserVariableStaticMeshComponent(NiagaraComponent* NiagaraSystem, FString OverrideName, StaticMeshComponent* StaticMeshComponent);// 0x232d58eb6041
	void OverrideSystemUserVariableStaticMesh(NiagaraComponent* NiagaraSystem, FString OverrideName, StaticMesh* StaticMesh);// 0x232c58eb6041
	void OverrideSystemUserVariableSkeletalMeshComponent(NiagaraComponent* NiagaraSystem, FString OverrideName, SkeletalMeshComponent* SkeletalMeshComponent);// 0x232b58eb6041
	NiagaraParameterCollectionInstance* GetNiagaraParameterCollection(Object* WorldContextObject, NiagaraParameterCollection* Collection);// 0x232a58eb6041
	int AcquireNiagaraGPURayTracedCollisionGroup(Object* WorldContextObject);// 0x232958eb6041

--------------------------------
Class: FXSystemSpawnParameters

--------------------------------
Class: NiagaraLensEffectBase.NiagaraActor.Actor.Object
	Transform DesiredRelativeTransform;//[Offset: 0x290, Size: 0x60]
	float BaseAuthoredFOV;//[Offset: 0x2f0, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f4, Size: 0x1]
	class Actor[] EmittersToTreatAsSame;//[Offset: 0x2f8, Size: 0x10]
	PlayerCameraManager* OwningCameraManager;//[Offset: 0x308, Size: 0x8]

--------------------------------
Class: NiagaraLightRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1]
	bool bAffectsTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd0, Size: 0x1]
	bool bAlphaScalesBrightness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd0, Size: 0x1]
	float RadiusScale;//[Offset: 0xd4, Size: 0x4]
	float DefaultExponent;//[Offset: 0xd8, Size: 0x4]
	Vector ColorAdd;//[Offset: 0xe0, Size: 0x18]
	int RendererVisibility;//[Offset: 0xf8, Size: 0x4]
	NiagaraVariableAttributeBinding LightRenderingEnabledBinding;//[Offset: 0x100, Size: 0x58]
	NiagaraVariableAttributeBinding LightExponentBinding;//[Offset: 0x158, Size: 0x58]
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0x1b0, Size: 0x58]
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x208, Size: 0x58]
	NiagaraVariableAttributeBinding RadiusBinding;//[Offset: 0x260, Size: 0x58]
	NiagaraVariableAttributeBinding VolumetricScatteringBinding;//[Offset: 0x2b8, Size: 0x58]
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x310, Size: 0x58]

--------------------------------
Class: NiagaraMessageDataBase.Object

--------------------------------
Class: NiagaraParameterDefinitionsBase.Object

--------------------------------
Class: NiagaraBaselineController_Basic.NiagaraBaselineController.Object
	int NumInstances;//[Offset: 0x68, Size: 0x4]
	NiagaraComponent*[] SpawnedComponents;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: NiagaraPrecompileContainer.Object
	NiagaraScript*[] Scripts;//[Offset: 0x28, Size: 0x10]
	NiagaraSystem* System;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: NiagaraPreviewBase.Actor.Object
	void SetSystem(NiagaraSystem* InSystem);// 0x234f58eb6041
	void SetLabelText(out const FText InXAxisText, out const FText InYAxisText);// 0x234e58eb6041

--------------------------------
Class: NiagaraPreviewAxis.Object
	int Num();// 0x235158eb6041
	void ApplyToPreview(NiagaraComponent* PreviewComponent, int PreviewIndex, bool bIsXAxis, out FString OutLabelText);// 0x235058eb6041

--------------------------------
Class: NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	FName Param;//[Offset: 0x28, Size: 0x8]
	int Count;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: NiagaraPreviewAxis_InterpParamInt32.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	int Min;//[Offset: 0x34, Size: 0x4]
	int Max;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: NiagaraPreviewAxis_InterpParamFloat.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	float Min;//[Offset: 0x34, Size: 0x4]
	float Max;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector2D.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector2D Min;//[Offset: 0x38, Size: 0x10]
	Vector2D Max;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector Min;//[Offset: 0x38, Size: 0x18]
	Vector Max;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: NiagaraPreviewAxis_InterpParamVector4.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	Vector4 Min;//[Offset: 0x40, Size: 0x20]
	Vector4 Max;//[Offset: 0x60, Size: 0x20]

--------------------------------
Class: NiagaraPreviewAxis_InterpParamLinearColor.NiagaraPreviewAxis_InterpParamBase.NiagaraPreviewAxis.Object
	LinearColor Min;//[Offset: 0x34, Size: 0x10]
	LinearColor Max;//[Offset: 0x44, Size: 0x10]

--------------------------------
Class: NiagaraPreviewGrid.Actor.Object
	NiagaraSystem* System;//[Offset: 0x278, Size: 0x8]
	enum ResetMode;//[Offset: 0x280, Size: 0x1]
	NiagaraPreviewAxis* PreviewAxisX;//[Offset: 0x288, Size: 0x8]
	NiagaraPreviewAxis* PreviewAxisY;//[Offset: 0x290, Size: 0x8]
	class NiagaraPreviewBase* PreviewClass;//[Offset: 0x298, Size: 0x8]
	float SpacingX;//[Offset: 0x2a0, Size: 0x4]
	float SpacingY;//[Offset: 0x2a4, Size: 0x4]
	int NumX;//[Offset: 0x2a8, Size: 0x4]
	int NumY;//[Offset: 0x2ac, Size: 0x4]
	ChildActorComponent*[] PreviewComponents;//[Offset: 0x2b0, Size: 0x10]
	void SetPaused(bool bPaused);// 0x239758eb6041
	void GetPreviews(out NiagaraComponent*[] OutPreviews);// 0x235458eb6041
	void DeactivatePreviews();// 0x235358eb6041
	void ActivatePreviews(bool bReset);// 0x235258eb6041

--------------------------------
Class: NiagaraRibbonRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	MaterialInterface* Material;//[Offset: 0xd0, Size: 0x8]
	NiagaraUserParameterBinding MaterialUserParamBinding;//[Offset: 0xd8, Size: 0x20]
	enum FacingMode;//[Offset: 0xf8, Size: 0x1]
	NiagaraRibbonUVSettings UV0Settings;//[Offset: 0x100, Size: 0x38]
	NiagaraRibbonUVSettings UV1Settings;//[Offset: 0x138, Size: 0x38]
	enum DrawDirection;//[Offset: 0x170, Size: 0x1]
	enum Shape;//[Offset: 0x171, Size: 0x1]
	bool bEnableAccurateGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 0x1]
	int WidthSegmentationCount;//[Offset: 0x174, Size: 0x4]
	int MultiPlaneCount;//[Offset: 0x178, Size: 0x4]
	int TubeSubdivisions;//[Offset: 0x17c, Size: 0x4]
	NiagaraRibbonShapeCustomVertex[] CustomVertices;//[Offset: 0x180, Size: 0x10]
	float CurveTension;//[Offset: 0x190, Size: 0x4]
	enum TessellationMode;//[Offset: 0x194, Size: 0x1]
	int TessellationFactor;//[Offset: 0x198, Size: 0x4]
	bool bUseConstantFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 0x1]
	float TessellationAngle;//[Offset: 0x1a0, Size: 0x4]
	bool bScreenSpaceTessellation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 0x1]
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0x1a8, Size: 0x58]
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x200, Size: 0x58]
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x258, Size: 0x58]
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x2b0, Size: 0x58]
	NiagaraVariableAttributeBinding RibbonTwistBinding;//[Offset: 0x308, Size: 0x58]
	NiagaraVariableAttributeBinding RibbonWidthBinding;//[Offset: 0x360, Size: 0x58]
	NiagaraVariableAttributeBinding RibbonFacingBinding;//[Offset: 0x3b8, Size: 0x58]
	NiagaraVariableAttributeBinding RibbonIdBinding;//[Offset: 0x410, Size: 0x58]
	NiagaraVariableAttributeBinding RibbonLinkOrderBinding;//[Offset: 0x468, Size: 0x58]
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x4c0, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x518, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x570, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x5c8, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x620, Size: 0x58]
	NiagaraVariableAttributeBinding RibbonUVDistance;//[Offset: 0x678, Size: 0x58]
	NiagaraVariableAttributeBinding U0OverrideBinding;//[Offset: 0x6d0, Size: 0x58]
	NiagaraVariableAttributeBinding V0RangeOverrideBinding;//[Offset: 0x728, Size: 0x58]
	NiagaraVariableAttributeBinding U1OverrideBinding;//[Offset: 0x780, Size: 0x58]
	NiagaraVariableAttributeBinding V1RangeOverrideBinding;//[Offset: 0x7d8, Size: 0x58]
	NiagaraMaterialAttributeBinding[] MaterialParameterBindings;//[Offset: 0x830, Size: 0x10]
	NiagaraVariableAttributeBinding PrevPositionBinding;//[Offset: 0x840, Size: 0x58]
	NiagaraVariableAttributeBinding PrevRibbonWidthBinding;//[Offset: 0x898, Size: 0x58]
	NiagaraVariableAttributeBinding PrevRibbonFacingBinding;//[Offset: 0x8f0, Size: 0x58]
	NiagaraVariableAttributeBinding PrevRibbonTwistBinding;//[Offset: 0x948, Size: 0x58]

--------------------------------
Class: NiagaraRibbonUVSettings
	enum DistributionMode;//[Offset: 0x0, Size: 0x4]
	enum LeadingEdgeMode;//[Offset: 0x4, Size: 0x4]
	enum TrailingEdgeMode;//[Offset: 0x8, Size: 0x4]
	float TilingLength;//[Offset: 0xc, Size: 0x4]
	Vector2D Offset;//[Offset: 0x10, Size: 0x10]
	Vector2D Scale;//[Offset: 0x20, Size: 0x10]
	bool bEnablePerParticleUOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bEnablePerParticleVRangeOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]

--------------------------------
Class: NiagaraRibbonShapeCustomVertex
	Vector2D Position;//[Offset: 0x0, Size: 0x10]
	Vector2D Normal;//[Offset: 0x10, Size: 0x10]
	float TextureV;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: NiagaraScriptSourceBase.Object

--------------------------------
Class: NiagaraSettings.DeveloperSettings.Object
	bool bSystemsSupportLargeWorldCoordinates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bEnforceStrictStackTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	SoftObjectPath DefaultEffectType;//[Offset: 0x40, Size: 0x18]
	LinearColor PositionPinTypeColor;//[Offset: 0x58, Size: 0x10]
	FText[] QualityLevels;//[Offset: 0x68, Size: 0x10]
	<FString,FText> ComponentRendererWarningsPerClass;//[Offset: 0x78, Size: 0x50]
	byte DefaultRenderTargetFormat;//[Offset: 0xc8, Size: 0x1]
	enum DefaultGridFormat;//[Offset: 0xc9, Size: 0x1]
	enum DefaultRendererMotionVectorSetting;//[Offset: 0xcc, Size: 0x4]
	enum DefaultPixelCoverageMode;//[Offset: 0xd0, Size: 0x1]
	byte NDISkelMesh_GpuMaxInfluences;//[Offset: 0xd1, Size: 0x1]
	byte NDISkelMesh_GpuUniformSamplingFormat;//[Offset: 0xd2, Size: 0x1]
	byte NDISkelMesh_AdjacencyTriangleIndexFormat;//[Offset: 0xd3, Size: 0x1]
	bool NDIStaticMesh_AllowDistanceFields;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 0x1]
	byte[] NDICollisionQuery_AsyncGpuTraceProviderOrder;//[Offset: 0xd8, Size: 0x10]

--------------------------------
Class: NiagaraSimulationStageGeneric.NiagaraSimulationStageBase.NiagaraMergeable.Object
	NiagaraVariableAttributeBinding EnabledBinding;//[Offset: 0x40, Size: 0x58]
	enum IterationSource;//[Offset: 0x98, Size: 0x1]
	int Iterations;//[Offset: 0x9c, Size: 0x4]
	NiagaraVariableAttributeBinding NumIterationsBinding;//[Offset: 0xa0, Size: 0x58]
	bool bSpawnOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 0x1]
	enum ExecuteBehavior;//[Offset: 0xf9, Size: 0x1]
	bool bDisablePartialParticleUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfa, Size: 0x1]
	NiagaraVariableDataInterfaceBinding DataInterface;//[Offset: 0x100, Size: 0x20]
	bool bParticleIterationStateEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1]
	NiagaraVariableAttributeBinding ParticleIterationStateBinding;//[Offset: 0x128, Size: 0x58]
	IntPoint ParticleIterationStateRange;//[Offset: 0x180, Size: 0x8]
	bool bGpuDispatchForceLinear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1]
	bool bOverrideGpuDispatchNumThreads;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x188, Size: 0x1]
	IntVector OverrideGpuDispatchNumThreads;//[Offset: 0x18c, Size: 0xc]

--------------------------------
Class: NiagaraVariableDataInterfaceBinding
	NiagaraVariable BoundVariable;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: NiagaraSpriteRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	MaterialInterface* Material;//[Offset: 0xd0, Size: 0x8]
	enum SourceMode;//[Offset: 0xd8, Size: 0x1]
	NiagaraUserParameterBinding MaterialUserParamBinding;//[Offset: 0xe0, Size: 0x20]
	enum Alignment;//[Offset: 0x100, Size: 0x1]
	enum FacingMode;//[Offset: 0x101, Size: 0x1]
	Vector2D PivotInUVSpace;//[Offset: 0x108, Size: 0x10]
	float MacroUVRadius;//[Offset: 0x118, Size: 0x4]
	enum SortMode;//[Offset: 0x11c, Size: 0x1]
	Vector2D SubImageSize;//[Offset: 0x120, Size: 0x10]
	bool bSubImageBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 0x1]
	bool bRemoveHMDRollInVR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x130, Size: 0x1]
	bool bSortOnlyWhenTranslucent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x130, Size: 0x1]
	bool bGpuLowLatencyTranslucency;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x130, Size: 0x1]
	enum PixelCoverageMode;//[Offset: 0x131, Size: 0x1]
	float PixelCoverageBlend;//[Offset: 0x134, Size: 0x4]
	float MinFacingCameraBlendDistance;//[Offset: 0x138, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x13c, Size: 0x4]
	bool bEnableCameraDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 0x1]
	float MinCameraDistance;//[Offset: 0x144, Size: 0x4]
	float MaxCameraDistance;//[Offset: 0x148, Size: 0x4]
	uint32 RendererVisibility;//[Offset: 0x14c, Size: 0x4]
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0x150, Size: 0x58]
	NiagaraVariableAttributeBinding ColorBinding;//[Offset: 0x1a8, Size: 0x58]
	NiagaraVariableAttributeBinding VelocityBinding;//[Offset: 0x200, Size: 0x58]
	NiagaraVariableAttributeBinding SpriteRotationBinding;//[Offset: 0x258, Size: 0x58]
	NiagaraVariableAttributeBinding SpriteSizeBinding;//[Offset: 0x2b0, Size: 0x58]
	NiagaraVariableAttributeBinding SpriteFacingBinding;//[Offset: 0x308, Size: 0x58]
	NiagaraVariableAttributeBinding SpriteAlignmentBinding;//[Offset: 0x360, Size: 0x58]
	NiagaraVariableAttributeBinding SubImageIndexBinding;//[Offset: 0x3b8, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterialBinding;//[Offset: 0x410, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial1Binding;//[Offset: 0x468, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial2Binding;//[Offset: 0x4c0, Size: 0x58]
	NiagaraVariableAttributeBinding DynamicMaterial3Binding;//[Offset: 0x518, Size: 0x58]
	NiagaraVariableAttributeBinding CameraOffsetBinding;//[Offset: 0x570, Size: 0x58]
	NiagaraVariableAttributeBinding UVScaleBinding;//[Offset: 0x5c8, Size: 0x58]
	NiagaraVariableAttributeBinding PivotOffsetBinding;//[Offset: 0x620, Size: 0x58]
	NiagaraVariableAttributeBinding MaterialRandomBinding;//[Offset: 0x678, Size: 0x58]
	NiagaraVariableAttributeBinding CustomSortingBinding;//[Offset: 0x6d0, Size: 0x58]
	NiagaraVariableAttributeBinding NormalizedAgeBinding;//[Offset: 0x728, Size: 0x58]
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x780, Size: 0x58]
	NiagaraMaterialAttributeBinding[] MaterialParameterBindings;//[Offset: 0x7d8, Size: 0x10]
	NiagaraVariableAttributeBinding PrevPositionBinding;//[Offset: 0x7e8, Size: 0x58]
	NiagaraVariableAttributeBinding PrevVelocityBinding;//[Offset: 0x840, Size: 0x58]
	NiagaraVariableAttributeBinding PrevSpriteRotationBinding;//[Offset: 0x898, Size: 0x58]
	NiagaraVariableAttributeBinding PrevSpriteSizeBinding;//[Offset: 0x8f0, Size: 0x58]
	NiagaraVariableAttributeBinding PrevSpriteFacingBinding;//[Offset: 0x948, Size: 0x58]
	NiagaraVariableAttributeBinding PrevSpriteAlignmentBinding;//[Offset: 0x9a0, Size: 0x58]
	NiagaraVariableAttributeBinding PrevCameraOffsetBinding;//[Offset: 0x9f8, Size: 0x58]
	NiagaraVariableAttributeBinding PrevPivotOffsetBinding;//[Offset: 0xa50, Size: 0x58]

--------------------------------
Class: AnimNotifyState_TimedNiagaraEffect.AnimNotifyState.Object
	NiagaraSystem* Template;//[Offset: 0x30, Size: 0x8]
	FName SocketName;//[Offset: 0x38, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x40, Size: 0x18]
	Rotator RotationOffset;//[Offset: 0x58, Size: 0x18]
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	FXSystemComponent* GetSpawnedEffect(MeshComponent* MeshComp);// 0x235c58eb6041

--------------------------------
Class: AnimNotifyState_TimedNiagaraEffectAdvanced.AnimNotifyState_TimedNiagaraEffect.AnimNotifyState.Object
	bool bEnableNormalizedNotifyProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	FName NotifyProgressUserParameter;//[Offset: 0x74, Size: 0x8]
	CurveParameterPair[] AnimCurves;//[Offset: 0x80, Size: 0x10]
	float GetNotifyProgress(MeshComponent* MeshComp);// 0x235d58eb6041

--------------------------------
Class: CurveParameterPair
	FName AnimCurveName;//[Offset: 0x0, Size: 0x8]
	FName UserVariableName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AnimNotify_PlayNiagaraEffect.AnimNotify.Object
	NiagaraSystem* Template;//[Offset: 0x38, Size: 0x8]
	Vector LocationOffset;//[Offset: 0x40, Size: 0x18]
	Rotator RotationOffset;//[Offset: 0x58, Size: 0x18]
	Vector Scale;//[Offset: 0x70, Size: 0x18]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	FName SocketName;//[Offset: 0xc4, Size: 0x8]
	FXSystemComponent* GetSpawnedEffect();// 0x236158eb6041

--------------------------------
Class: GeometryCache.Object
	MaterialInterface*[] Materials;//[Offset: 0x30, Size: 0x10]
	GeometryCacheTrack*[] Tracks;//[Offset: 0x40, Size: 0x10]
	int StartFrame;//[Offset: 0x60, Size: 0x4]
	int EndFrame;//[Offset: 0x64, Size: 0x4]
	uint64 Hash;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: GeometryCacheTrack.Object
	float Duration;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: GeometryCacheActor.Actor.Object
	GeometryCacheComponent* GeometryCacheComponent;//[Offset: 0x278, Size: 0x8]
	GeometryCacheComponent* GetGeometryCacheComponent();// 0x236258eb6041

--------------------------------
Class: GeometryCacheComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	GeometryCache* GeometryCache;//[Offset: 0x560, Size: 0x8]
	bool bRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x569, Size: 0x1]
	bool bExtrapolateFrames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56a, Size: 0x1]
	float StartTimeOffset;//[Offset: 0x56c, Size: 0x4]
	float PlaybackSpeed;//[Offset: 0x570, Size: 0x4]
	float MotionVectorScale;//[Offset: 0x574, Size: 0x4]
	int NumTracks;//[Offset: 0x578, Size: 0x4]
	float ElapsedTime;//[Offset: 0x57c, Size: 0x4]
	float Duration;//[Offset: 0x5cc, Size: 0x4]
	bool bManualTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 0x1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 0x1]
	LinearColor WireframeOverrideColor;//[Offset: 0x5d4, Size: 0x10]
	void TickAtThisTime(const float Time, bool bInIsRunning, bool bInBackwards, bool bInIsLooping);// 0x237e58eb6041
	void Stop();// 0x237d58eb6041
	void SetWireframeOverrideColor(const LinearColor Color);// 0x237c58eb6041
	void SetStartTimeOffset(const float NewStartTimeOffset);// 0x237b58eb6041
	void SetPlaybackSpeed(const float NewPlaybackSpeed);// 0x237a58eb6041
	void SetOverrideWireframeColor(bool bOverride);// 0x237958eb6041
	void SetMotionVectorScale(const float NewMotionVectorScale);// 0x237858eb6041
	void SetLooping(const bool bNewLooping);// 0x237758eb6041
	bool SetGeometryCache(GeometryCache* NewGeomCache);// 0x23b858eb6041
	void SetExtrapolateFrames(const bool bNewExtrapolating);// 0x237558eb6041
	void PlayReversedFromEnd();// 0x237458eb6041
	void PlayReversed();// 0x237358eb6041
	void PlayFromStart();// 0x237258eb6041
	void Play();// 0x237158eb6041
	void Pause();// 0x237058eb6041
	bool IsPlayingReversed();// 0x236f58eb6041
	bool IsPlaying();// 0x236e58eb6041
	bool IsLooping();// 0x236d58eb6041
	bool IsExtrapolatingFrames();// 0x236c58eb6041
	LinearColor GetWireframeOverrideColor();// 0x236b58eb6041
	float GetStartTimeOffset();// 0x236a58eb6041
	float GetPlaybackSpeed();// 0x236958eb6041
	float GetPlaybackDirection();// 0x236858eb6041
	bool GetOverrideWireframeColor();// 0x236758eb6041
	int GetNumberOfFrames();// 0x236658eb6041
	float GetMotionVectorScale();// 0x236558eb6041
	float GetDuration();// 0x236458eb6041
	float GetAnimationTime();// 0x236358eb6041

--------------------------------
Class: GeometryCacheCodecBase.Object
	int[] TopologyRanges;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: GeometryCacheCodecRaw.GeometryCacheCodecBase.Object
	int DummyProperty;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: GeometryCacheCodecV1.GeometryCacheCodecBase.Object

--------------------------------
Class: GeometryCacheTrack_FlipbookAnimation.GeometryCacheTrack.Object
	uint32 NumMeshSamples;//[Offset: 0x54, Size: 0x4]
	void AddMeshSample(out const GeometryCacheMeshData MeshData, const float SampleTime);// 0x237f58eb6041

--------------------------------
Class: GeometryCacheMeshData

--------------------------------
Class: GeometryCacheTrackStreamable.GeometryCacheTrack.Object
	GeometryCacheCodecBase* Codec;//[Offset: 0x58, Size: 0x8]
	float StartSampleTime;//[Offset: 0xc8, Size: 0x4]

--------------------------------
Class: GeometryCacheTrack_TransformAnimation.GeometryCacheTrack.Object
	void SetMesh(out const GeometryCacheMeshData NewMeshData);// 0x238058eb6041

--------------------------------
Class: GeometryCacheTrack_TransformGroupAnimation.GeometryCacheTrack.Object
	void SetMesh(out const GeometryCacheMeshData NewMeshData);// 0x238158eb6041

--------------------------------
Class: NiagaraGeometryCacheRendererProperties.NiagaraRendererProperties.NiagaraMergeable.Object
	NiagaraGeometryCacheReference[] GeometryCaches;//[Offset: 0xd0, Size: 0x10]
	bool bIsLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	uint32 ComponentCountLimit;//[Offset: 0xe4, Size: 0x4]
	NiagaraVariableAttributeBinding PositionBinding;//[Offset: 0xe8, Size: 0x58]
	NiagaraVariableAttributeBinding RotationBinding;//[Offset: 0x140, Size: 0x58]
	NiagaraVariableAttributeBinding ScaleBinding;//[Offset: 0x198, Size: 0x58]
	NiagaraVariableAttributeBinding ElapsedTimeBinding;//[Offset: 0x1f0, Size: 0x58]
	NiagaraVariableAttributeBinding EnabledBinding;//[Offset: 0x248, Size: 0x58]
	NiagaraVariableAttributeBinding ArrayIndexBinding;//[Offset: 0x2a0, Size: 0x58]
	NiagaraVariableAttributeBinding RendererVisibilityTagBinding;//[Offset: 0x2f8, Size: 0x58]
	int RendererVisibility;//[Offset: 0x350, Size: 0x4]
	bool bAssignComponentsOnParticleID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 0x1]

--------------------------------
Class: NiagaraGeometryCacheReference
	GeometryCache* GeometryCache;//[Offset: 0x0, Size: 0x8]
	NiagaraUserParameterBinding GeometryCacheUserParamBinding;//[Offset: 0x8, Size: 0x20]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneGeometryCacheSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneGeometryCacheParams Params;//[Offset: 0xe0, Size: 0x40]

--------------------------------
Class: MovieSceneGeometryCacheParams
	GeometryCache* GeometryCacheAsset;//[Offset: 0x0, Size: 0x8]
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0x8, Size: 0x4]
	FrameNumber StartFrameOffset;//[Offset: 0xc, Size: 0x4]
	FrameNumber EndFrameOffset;//[Offset: 0x10, Size: 0x4]
	float PlayRate;//[Offset: 0x14, Size: 0x4]
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	float StartOffset;//[Offset: 0x1c, Size: 0x4]
	float EndOffset;//[Offset: 0x20, Size: 0x4]
	SoftObjectPath GeometryCache;//[Offset: 0x28, Size: 0x18]

--------------------------------
Class: MovieSceneGeometryCacheTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: AndroidMediaSettings.Object
	bool CacheableVideoSampleBuffers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: MediaSource.Object
	bool Validate();// 0x238758eb6041
	void SetMediaOptionString(out const FName Key, FString Value);// 0x238658eb6041
	void SetMediaOptionInt64(out const FName Key, int64 Value);// 0x238558eb6041
	void SetMediaOptionFloat(out const FName Key, float Value);// 0x238458eb6041
	void SetMediaOptionBool(out const FName Key, bool Value);// 0x238358eb6041
	FString GetUrl();// 0x238258eb6041

--------------------------------
Class: BaseMediaSource.MediaSource.Object
	FName PlayerName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: ImgMediaSource.BaseMediaSource.MediaSource.Object
	bool IsPathRelativeToProjectRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	FrameRate FrameRateOverride;//[Offset: 0x8c, Size: 0x8]
	FString ProxyOverride;//[Offset: 0x98, Size: 0x10]
	bool bFillGapsInSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	DirectoryPath SequencePath;//[Offset: 0xb0, Size: 0x10]
	void SetSequencePath(FString Path);// 0x238f58eb6041
	void SetMipLevelDistance(float Distance);// 0x238e58eb6041
	void RemoveTargetObject(Actor* InActor);// 0x238d58eb6041
	void RemoveGlobalCamera(Actor* InActor);// 0x238c58eb6041
	FString GetSequencePath();// 0x238b58eb6041
	void GetProxies(out FString[] OutProxies);// 0x238a58eb6041
	void AddTargetObject(Actor* InActor, float Width);// 0x238958eb6041
	void AddGlobalCamera(Actor* InActor);// 0x238858eb6041

--------------------------------
Class: ImgMediaPlaybackComponent.ActorComponent.Object
	float Width;//[Offset: 0xb0, Size: 0x4]
	float LODBias;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: ImgMediaSettings.Object
	FrameRate DefaultFrameRate;//[Offset: 0x28, Size: 0x8]
	float CacheBehindPercentage;//[Offset: 0x30, Size: 0x4]
	float CacheSizeGB;//[Offset: 0x34, Size: 0x4]
	int CacheThreads;//[Offset: 0x38, Size: 0x4]
	int CacheThreadStackSizeKB;//[Offset: 0x3c, Size: 0x4]
	float GlobalCacheSizeGB;//[Offset: 0x40, Size: 0x4]
	bool UseGlobalCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	uint32 ExrDecoderThreads;//[Offset: 0x48, Size: 0x4]
	FString DefaultProxy;//[Offset: 0x50, Size: 0x10]
	bool UseDefaultProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: MovieSceneMediaPlayerPropertySection.MovieSceneSection.MovieSceneSignedObject.Object
	MediaSource* MediaSource;//[Offset: 0xe0, Size: 0x8]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]

--------------------------------
Class: MovieSceneMediaPlayerPropertyTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneMediaSection.MovieSceneSection.MovieSceneSignedObject.Object
	MediaSource* MediaSource;//[Offset: 0xe0, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	FrameNumber StartFrameOffset;//[Offset: 0xec, Size: 0x4]
	MediaTexture* MediaTexture;//[Offset: 0xf0, Size: 0x8]
	MediaSoundComponent* MediaSoundComponent;//[Offset: 0xf8, Size: 0x8]
	bool bUseExternalMediaPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 0x1]
	MediaPlayer* ExternalMediaPlayer;//[Offset: 0x108, Size: 0x8]

--------------------------------
Class: MediaTexture.Texture.StreamableRenderAsset.Object
	byte AddressX;//[Offset: 0x1f0, Size: 0x1]
	byte AddressY;//[Offset: 0x1f1, Size: 0x1]
	bool AutoClear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 0x1]
	LinearColor ClearColor;//[Offset: 0x1f4, Size: 0x10]
	bool EnableGenMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 0x1]
	byte NumMips;//[Offset: 0x205, Size: 0x1]
	bool NewStyleOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x206, Size: 0x1]
	byte OutputFormat;//[Offset: 0x207, Size: 0x1]
	float CurrentAspectRatio;//[Offset: 0x208, Size: 0x4]
	byte CurrentOrientation;//[Offset: 0x20c, Size: 0x1]
	MediaPlayer* MediaPlayer;//[Offset: 0x210, Size: 0x8]
	void UpdateResource();// 0x2c1958eb6041
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0x2c1858eb6041
	int GetWidth();// 0x2c1758eb6041
	int GetTextureNumMips();// 0x2c1658eb6041
	MediaPlayer* GetMediaPlayer();// 0x2c1558eb6041
	int GetHeight();// 0x2c1458eb6041
	float GetAspectRatio();// 0x2c1358eb6041

--------------------------------
Class: MediaPlayer.Object
	delegate OnEndReached;//[Offset: 0x28, Size: 0x10]
	delegate OnMediaClosed;//[Offset: 0x38, Size: 0x10]
	delegate OnMediaOpened;//[Offset: 0x48, Size: 0x10]
	delegate OnMediaOpenFailed;//[Offset: 0x58, Size: 0x10]
	delegate OnPlaybackResumed;//[Offset: 0x68, Size: 0x10]
	delegate OnPlaybackSuspended;//[Offset: 0x78, Size: 0x10]
	delegate OnSeekCompleted;//[Offset: 0x88, Size: 0x10]
	delegate OnTracksChanged;//[Offset: 0x98, Size: 0x10]
	Timespan CacheAhead;//[Offset: 0xa8, Size: 0x8]
	Timespan CacheBehind;//[Offset: 0xb0, Size: 0x8]
	Timespan CacheBehindGame;//[Offset: 0xb8, Size: 0x8]
	bool NativeAudioOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]
	bool PlayOnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 0x1]
	bool Shuffle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 0x1]
	bool Loop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 0x1]
	MediaPlaylist* Playlist;//[Offset: 0xc8, Size: 0x8]
	int PlaylistIndex;//[Offset: 0xd0, Size: 0x4]
	Timespan TimeDelay;//[Offset: 0xd8, Size: 0x8]
	float HorizontalFieldOfView;//[Offset: 0xe0, Size: 0x4]
	float VerticalFieldOfView;//[Offset: 0xe4, Size: 0x4]
	Rotator ViewRotation;//[Offset: 0xe8, Size: 0x18]
	Guid PlayerGuid;//[Offset: 0x128, Size: 0x10]
	bool SupportsSeeking();// 0x2bfc58eb6041
	bool SupportsScrubbing();// 0x2bfb58eb6041
	bool SupportsRate(float Rate, bool Unthinned);// 0x2bfa58eb6041
	bool SetViewRotation(out const Rotator Rotation, bool Absolute);// 0x2bf958eb6041
	bool SetViewField(float Horizontal, float Vertical, bool Absolute);// 0x2bf858eb6041
	bool SetVideoTrackFrameRate(int TrackIndex, int FormatIndex, float FrameRate);// 0x2bf758eb6041
	bool SetTrackFormat(enum TrackType, int TrackIndex, int FormatIndex);// 0x2bf658eb6041
	void SetTimeDelay(Timespan TimeDelay);// 0x2bf558eb6041
	bool SetRate(float Rate);// 0x2bf458eb6041
	bool SetNativeVolume(float Volume);// 0x2bf358eb6041
	void SetMediaOptions(const MediaSource* Options);// 0x2bf258eb6041
	bool SetLooping(bool Looping);// 0x2c3358eb6041
	void SetDesiredPlayerName(FName PlayerName);// 0x2bf058eb6041
	void SetBlockOnTime(out const Timespan Time);// 0x2bef58eb6041
	bool SelectTrack(enum TrackType, int TrackIndex);// 0x2bee58eb6041
	bool Seek(out const Timespan Time);// 0x2bed58eb6041
	bool Rewind();// 0x2bec58eb6041
	bool Reopen();// 0x2beb58eb6041
	bool Previous();// 0x2bea58eb6041
	void PlayAndSeek();// 0x2be958eb6041
	bool Play();// 0x2be858eb6041
	bool Pause();// 0x2be758eb6041
	bool OpenUrl(FString URL);// 0x2be658eb6041
	bool OpenSourceWithOptions(MediaSource* MediaSource, out const MediaPlayerOptions Options);// 0x2be558eb6041
	void OpenSourceLatent(const Object* WorldContextObject, LatentActionInfo LatentInfo, MediaSource* MediaSource, out const MediaPlayerOptions Options, out bool bSuccess);// 0x2be458eb6041
	bool OpenSource(MediaSource* MediaSource);// 0x2be358eb6041
	bool OpenPlaylistIndex(MediaPlaylist* InPlaylist, int Index);// 0x2be258eb6041
	bool OpenPlaylist(MediaPlaylist* InPlaylist);// 0x2be158eb6041
	bool OpenFile(FString FilePath);// 0x2be058eb6041
	bool Next();// 0x2bdf58eb6041
	bool IsReady();// 0x2bde58eb6041
	bool IsPreparing();// 0x2bdd58eb6041
	bool IsPlaying();// 0x2bdc58eb6041
	bool IsPaused();// 0x2bdb58eb6041
	bool IsLooping();// 0x2bda58eb6041
	bool IsConnecting();// 0x2bd958eb6041
	bool IsClosed();// 0x2bd858eb6041
	bool IsBuffering();// 0x2bd758eb6041
	bool HasError();// 0x2bd658eb6041
	Rotator GetViewRotation();// 0xffffff8158eb6000
	FString GetVideoTrackType(int TrackIndex, int FormatIndex);// 0x2bd458eb6041
	FloatRange GetVideoTrackFrameRates(int TrackIndex, int FormatIndex);// 0x2bd358eb6041
	float GetVideoTrackFrameRate(int TrackIndex, int FormatIndex);// 0x2bd258eb6041
	IntPoint GetVideoTrackDimensions(int TrackIndex, int FormatIndex);// 0x2bd158eb6041
	float GetVideoTrackAspectRatio(int TrackIndex, int FormatIndex);// 0x2bd058eb6041
	float GetVerticalFieldOfView();// 0x2bcf58eb6041
	FString GetUrl();// 0x2bce58eb6041
	FString GetTrackLanguage(enum TrackType, int TrackIndex);// 0x2bcd58eb6041
	int GetTrackFormat(enum TrackType, int TrackIndex);// 0x2bcc58eb6041
	FText GetTrackDisplayName(enum TrackType, int TrackIndex);// 0x2bcb58eb6041
	MediaTimeStampInfo* GetTimeStamp();// 0x2bca58eb6041
	Timespan GetTimeDelay();// 0x2bc958eb6041
	Timespan GetTime();// 0x2bc858eb6041
	void GetSupportedRates(out FloatRange[] OutRates, bool Unthinned);// 0x2bc758eb6041
	int GetSelectedTrack(enum TrackType);// 0x2bc658eb6041
	float GetRate();// 0x2bc558eb6041
	int GetPlaylistIndex();// 0x2bc458eb6041
	MediaPlaylist* GetPlaylist();// 0x2bc358eb6041
	FName GetPlayerName();// 0x2bc258eb6041
	int GetNumTracks(enum TrackType);// 0x2bc158eb6041
	int GetNumTrackFormats(enum TrackType, int TrackIndex);// 0x2bc058eb6041
	FText GetMediaName();// 0x2bbf58eb6041
	float GetHorizontalFieldOfView();// 0x2bbe58eb6041
	Timespan GetDuration();// 0x2bbd58eb6041
	FName GetDesiredPlayerName();// 0x2bbc58eb6041
	FString GetAudioTrackType(int TrackIndex, int FormatIndex);// 0x2bbb58eb6041
	int GetAudioTrackSampleRate(int TrackIndex, int FormatIndex);// 0x2bba58eb6041
	int GetAudioTrackChannels(int TrackIndex, int FormatIndex);// 0x2bb958eb6041
	void Close();// 0x2bb858eb6041
	bool CanPlayUrl(FString URL);// 0x2bb758eb6041
	bool CanPlaySource(MediaSource* MediaSource);// 0x2bb658eb6041
	bool CanPause();// 0x2bb558eb6041

--------------------------------
Class: MediaPlayerOptions
	MediaPlayerTrackOptions Tracks;//[Offset: 0x0, Size: 0x1c]
	Timespan SeekTime;//[Offset: 0x20, Size: 0x8]
	enum PlayOnOpen;//[Offset: 0x28, Size: 0x1]
	enum Loop;//[Offset: 0x29, Size: 0x1]

--------------------------------
Class: MediaPlayerTrackOptions
	int Audio;//[Offset: 0x0, Size: 0x4]
	int Caption;//[Offset: 0x4, Size: 0x4]
	int MetaData;//[Offset: 0x8, Size: 0x4]
	int Script;//[Offset: 0xc, Size: 0x4]
	int Subtitle;//[Offset: 0x10, Size: 0x4]
	int Text;//[Offset: 0x14, Size: 0x4]
	int Video;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: MediaPlaylist.Object
	MediaSource*[] Items;//[Offset: 0x28, Size: 0x10]
	bool Replace(int Index, MediaSource* Replacement);// 0x2c0858eb6041
	bool RemoveAt(int Index);// 0x2c0758eb6041
	bool Remove(MediaSource* MediaSource);// 0x2c0658eb6041
	int Num();// 0x2c0558eb6041
	void Insert(MediaSource* MediaSource, int Index);// 0x2c0458eb6041
	MediaSource* GetRandom(out int OutIndex);// 0x2c0358eb6041
	MediaSource* GetPrevious(out int InOutIndex);// 0x2c0258eb6041
	MediaSource* GetNext(out int InOutIndex);// 0x2c0158eb6041
	MediaSource* Get(int Index);// 0x2c0058eb6041
	bool AddUrl(FString URL);// 0x2bff58eb6041
	bool AddFile(FString FilePath);// 0x2bfe58eb6041
	bool Add(MediaSource* MediaSource);// 0x2bfd58eb6041

--------------------------------
Class: MediaTimeStampInfo.Object
	Timespan Time;//[Offset: 0x28, Size: 0x8]
	int64 SequenceIndex;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: MediaSoundComponent.SynthComponent.SceneComponent.ActorComponent.Object
	enum Channels;//[Offset: 0x7a0, Size: 0x4]
	bool DynamicRateAdjustment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a4, Size: 0x1]
	float RateAdjustmentFactor;//[Offset: 0x7a8, Size: 0x4]
	FloatRange RateAdjustmentRange;//[Offset: 0x7ac, Size: 0x10]
	MediaPlayer* MediaPlayer;//[Offset: 0x7c0, Size: 0x8]
	void SetSpectralAnalysisSettings(float[] InFrequenciesToAnalyze, enum InFFTSize);// 0x2c5458eb6041
	void SetMediaPlayer(MediaPlayer* NewMediaPlayer);// 0x2c1158eb6041
	void SetEnvelopeFollowingsettings(int AttackTimeMsec, int ReleaseTimeMsec);// 0x2c1058eb6041
	void SetEnableSpectralAnalysis(bool bInSpectralAnalysisEnabled);// 0x2c0f58eb6041
	void SetEnableEnvelopeFollowing(bool bInEnvelopeFollowing);// 0x2c0e58eb6041
	MediaSoundComponentSpectralData[] GetSpectralData();// 0x2c0d58eb6041
	MediaSoundComponentSpectralData[] GetNormalizedSpectralData();// 0x2c0c58eb6041
	MediaPlayer* GetMediaPlayer();// 0x2c0b58eb6041
	float GetEnvelopeValue();// 0x2c0a58eb6041
	bool BP_GetAttenuationSettingsToApply(out SoundAttenuationSettings OutAttenuationSettings);// 0x2c0958eb6041

--------------------------------
Class: SynthComponent.SceneComponent.ActorComponent.Object
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b0, Size: 0x1]
	bool bEnableBusSends;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2b0, Size: 0x1]
	bool bEnableBaseSubmix;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2b0, Size: 0x1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2b0, Size: 0x1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x2b8, Size: 0x8]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x2c0, Size: 0x3c8]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x688, Size: 0x8]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x690, Size: 0x50]
	SoundClass* SoundClass;//[Offset: 0x6e0, Size: 0x8]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x6e8, Size: 0x8]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x6f0, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x6f8, Size: 0x10]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x708, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x718, Size: 0x10]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x728, Size: 0x1]
	bool bIsPreviewSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x728, Size: 0x1]
	int EnvelopeFollowerAttackTime;//[Offset: 0x72c, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x730, Size: 0x4]
	delegate OnAudioEnvelopeValue;//[Offset: 0x738, Size: 0x10]
	SynthSound* Synth;//[Offset: 0x768, Size: 0x8]
	AudioComponent* AudioComponent;//[Offset: 0x770, Size: 0x8]
	void Stop();// 0x23d158eb6041
	void Start();// 0x23d058eb6041
	void SetVolumeMultiplier(float VolumeMultiplier);// 0x23cf58eb6041
	void SetSubmixSend(SoundSubmixBase* Submix, float SendLevel);// 0x23ce58eb6041
	void SetOutputToBusOnly(bool bInOutputToBusOnly);// 0x23cd58eb6041
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);// 0x23cc58eb6041
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);// 0x23cb58eb6041
	bool IsPlaying();// 0x23ca58eb6041

--------------------------------
Class: MediaSoundComponentSpectralData
	float FrequencyHz;//[Offset: 0x0, Size: 0x4]
	float Magnitude;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SynthSound.SoundWaveProcedural.SoundWave.SoundBase.Object
	SynthComponent* OwningSynthComponent;//[Offset: 0x390, Size: 0x8]

--------------------------------
Class: MovieSceneMediaTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] MediaSections;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: TcpMessagingSettings.Object
	bool EnableTransport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	FString ListenEndpoint;//[Offset: 0x30, Size: 0x10]
	FString[] ConnectToEndpoints;//[Offset: 0x40, Size: 0x10]
	int ConnectionRetryDelay;//[Offset: 0x50, Size: 0x4]
	bool bStopServiceWhenAppDeactivates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: UdpMessagingSettings.Object
	bool EnabledByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool EnableTransport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bAutoRepair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	float MaxSendRate;//[Offset: 0x2c, Size: 0x4]
	uint32 AutoRepairAttemptLimit;//[Offset: 0x30, Size: 0x4]
	bool bStopServiceWhenAppDeactivates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	FString UnicastEndpoint;//[Offset: 0x38, Size: 0x10]
	FString MulticastEndpoint;//[Offset: 0x48, Size: 0x10]
	enum MessageFormat;//[Offset: 0x58, Size: 0x1]
	byte MulticastTimeToLive;//[Offset: 0x59, Size: 0x1]
	FString[] StaticEndpoints;//[Offset: 0x60, Size: 0x10]
	bool EnableTunnel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	FString TunnelUnicastEndpoint;//[Offset: 0x78, Size: 0x10]
	FString TunnelMulticastEndpoint;//[Offset: 0x88, Size: 0x10]
	FString[] RemoteTunnelEndpoints;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: ActorSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8]
	ActorSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x68, Size: 0x20]

--------------------------------
Class: ActorSequenceObjectReferenceMap
	Guid[] BindingIds;//[Offset: 0x0, Size: 0x10]
	ActorSequenceObjectReferences[] References;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ActorSequenceObjectReferences
	ActorSequenceObjectReference[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ActorSequenceObjectReference
	enum Type;//[Offset: 0x0, Size: 0x1]
	Guid ActorId;//[Offset: 0x4, Size: 0x10]
	FString PathToComponent;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ActorSequenceComponent.ActorComponent.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0xb8, Size: 0x14]
	ActorSequence* Sequence;//[Offset: 0xd0, Size: 0x8]
	ActorSequencePlayer* SequencePlayer;//[Offset: 0xd8, Size: 0x8]

--------------------------------
Class: ActorSequencePlayer.MovieSceneSequencePlayer.Object

--------------------------------
Class: NamedInterfaces.Object
	NamedInterface[] NamedInterfaces;//[Offset: 0x28, Size: 0x10]
	NamedInterfaceDef[] NamedInterfaceDefs;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: NamedInterface
	FName InterfaceName;//[Offset: 0x0, Size: 0x8]
	Object* InterfaceObject;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: NamedInterfaceDef
	FName InterfaceName;//[Offset: 0x0, Size: 0x8]
	FString InterfaceClassName;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TurnBasedMatchInterface.Interface.Object
	void OnMatchReceivedTurn(FString Match, bool bDidBecomeActive);// 0x239158eb6041
	void OnMatchEnded(FString Match);// 0x239058eb6041

--------------------------------
Class: AndroidPermissionCallbackProxy.Object
	delegate OnPermissionsGrantedDynamicDelegate;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: AndroidPermissionFunctionLibrary.BlueprintFunctionLibrary.Object
	bool CheckPermission(FString permission);// 0x239458eb6041
	AndroidPermissionCallbackProxy* AcquirePermissions(out const FString[] Permissions);// 0x239358eb6041

--------------------------------
Class: AchievementBlueprintLibrary.BlueprintFunctionLibrary.Object
	void GetCachedAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementID, out bool bFoundID, out float Progress);// 0x239658eb6041
	void GetCachedAchievementDescription(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementID, out bool bFoundID, out FText Title, out FText LockedDescription, out FText UnlockedDescription, out bool bHidden);// 0x239558eb6041

--------------------------------
Class: AchievementQueryCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	AchievementQueryCallbackProxy* CacheAchievements(Object* WorldContextObject, PlayerController* PlayerController);// 0x239858eb6041
	AchievementQueryCallbackProxy* CacheAchievementDescriptions(Object* WorldContextObject, PlayerController* PlayerController);// 0x23d958eb6041

--------------------------------
Class: AchievementWriteCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	AchievementWriteCallbackProxy* WriteAchievementProgress(Object* WorldContextObject, PlayerController* PlayerController, FName AchievementName, float Progress, int UserTag);// 0x239958eb6041

--------------------------------
Class: ConnectionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	ConnectionCallbackProxy* ConnectToService(Object* WorldContextObject, PlayerController* PlayerController);// 0x239a58eb6041

--------------------------------
Class: CreateSessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	CreateSessionCallbackProxy* CreateSession(Object* WorldContextObject, PlayerController* PlayerController, int PublicConnections, bool bUseLAN);// 0x239b58eb6041

--------------------------------
Class: DestroySessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	DestroySessionCallbackProxy* DestroySession(Object* WorldContextObject, PlayerController* PlayerController);// 0x239c58eb6041

--------------------------------
Class: EndMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	EndMatchCallbackProxy* EndMatch(Object* WorldContextObject, PlayerController* PlayerController, interface classNone MatchActor, FString MatchID, byte LocalPlayerOutcome, byte OtherPlayersOutcome);// 0x239d58eb6041

--------------------------------
Class: EndTurnCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	EndTurnCallbackProxy* EndTurn(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, interface classNone TurnBasedMatchInterface);// 0x239e58eb6041

--------------------------------
Class: FindSessionsCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	FString GetServerName(out const BlueprintSessionResult Result);// 0x23a358eb6041
	int GetPingInMs(out const BlueprintSessionResult Result);// 0x23a258eb6041
	int GetMaxPlayers(out const BlueprintSessionResult Result);// 0x23a158eb6041
	int GetCurrentPlayers(out const BlueprintSessionResult Result);// 0x23a058eb6041
	FindSessionsCallbackProxy* FindSessions(Object* WorldContextObject, PlayerController* PlayerController, int MaxResults, bool bUseLAN);// 0x239f58eb6041

--------------------------------
Class: BlueprintSessionResult

--------------------------------
Class: FindTurnBasedMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	FindTurnBasedMatchCallbackProxy* FindTurnBasedMatch(Object* WorldContextObject, PlayerController* PlayerController, interface classNone MatchActor, int MinPlayers, int MaxPlayers, int PlayerGroup, bool ShowExistingMatches);// 0x23a458eb6041

--------------------------------
Class: InAppPurchaseCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	InAppPurchaseCallbackProxy* CreateProxyObjectForInAppPurchase(PlayerController* PlayerController, out const InAppPurchaseProductRequest ProductRequest);// 0x23a558eb6041

--------------------------------
Class: InAppPurchaseProductRequest
	FString ProductIdentifier;//[Offset: 0x0, Size: 0x10]
	bool bIsConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: InAppPurchaseCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchaseUnprocessedPurchases(PlayerController* PlayerController);// 0x23a858eb6041
	InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchaseQueryOwned(PlayerController* PlayerController);// 0x23a758eb6041
	InAppPurchaseCallbackProxy2* CreateProxyObjectForInAppPurchase(PlayerController* PlayerController, out const InAppPurchaseProductRequest2 ProductRequest);// 0x23a658eb6041

--------------------------------
Class: InAppPurchaseProductRequest2
	FString ProductIdentifier;//[Offset: 0x0, Size: 0x10]
	bool bIsConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: InAppPurchaseQueryCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	InAppPurchaseQueryCallbackProxy* CreateProxyObjectForInAppPurchaseQuery(PlayerController* PlayerController, out const FString[] ProductIdentifiers);// 0x23a958eb6041

--------------------------------
Class: InAppPurchaseQueryCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	InAppPurchaseQueryCallbackProxy2* CreateProxyObjectForInAppPurchaseQuery(PlayerController* PlayerController, out const FString[] ProductIdentifiers);// 0x23aa58eb6041

--------------------------------
Class: InAppPurchaseRestoreCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	InAppPurchaseRestoreCallbackProxy* CreateProxyObjectForInAppPurchaseRestore(out const InAppPurchaseProductRequest[] ConsumableProductFlags, PlayerController* PlayerController);// 0x23ab58eb6041

--------------------------------
Class: InAppPurchaseRestoreCallbackProxy2.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	InAppPurchaseRestoreCallbackProxy2* CreateProxyObjectForInAppPurchaseRestore(out const InAppPurchaseProductRequest2[] ConsumableProductFlags, PlayerController* PlayerController);// 0x23ac58eb6041

--------------------------------
Class: IpConnection.NetConnection.Player.Object
	float SocketErrorDisconnectDelay;//[Offset: 0x3290, Size: 0x4]

--------------------------------
Class: IpNetDriver.NetDriver.Object
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x764, Size: 0x1]
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x764, Size: 0x1]
	uint32 MaxPortCountToTry;//[Offset: 0x768, Size: 0x4]
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x77c, Size: 0x4]
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x780, Size: 0x4]
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x784, Size: 0x4]
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x788, Size: 0x4]
	double MaxSecondsInReceive;//[Offset: 0x790, Size: 0x8]
	int NbPacketsBetweenReceiveTimeTest;//[Offset: 0x798, Size: 0x4]
	float ResolutionConnectionTimeout;//[Offset: 0x79c, Size: 0x4]

--------------------------------
Class: JoinSessionCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	JoinSessionCallbackProxy* JoinSession(Object* WorldContextObject, PlayerController* PlayerController, out const BlueprintSessionResult SearchResult);// 0x23ad58eb6041

--------------------------------
Class: LeaderboardBlueprintLibrary.BlueprintFunctionLibrary.Object
	bool WriteLeaderboardInteger(PlayerController* PlayerController, FName StatName, int StatValue);// 0x23ae58eb6041

--------------------------------
Class: LeaderboardFlushCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	LeaderboardFlushCallbackProxy* CreateProxyObjectForFlush(PlayerController* PlayerController, FName SessionName);// 0x23af58eb6041

--------------------------------
Class: LeaderboardQueryCallbackProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFailure;//[Offset: 0x38, Size: 0x10]
	LeaderboardQueryCallbackProxy* CreateProxyObjectForIntQuery(PlayerController* PlayerController, FName StatName);// 0x23b058eb6041

--------------------------------
Class: LogoutCallbackProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	LogoutCallbackProxy* Logout(Object* WorldContextObject, PlayerController* PlayerController);// 0x23b158eb6041

--------------------------------
Class: OnlineBeacon.Actor.Object
	float BeaconConnectionInitialTimeout;//[Offset: 0x280, Size: 0x4]
	float BeaconConnectionTimeout;//[Offset: 0x284, Size: 0x4]
	NetDriver* NetDriver;//[Offset: 0x288, Size: 0x8]

--------------------------------
Class: OnlineBeaconClient.OnlineBeacon.Actor.Object
	OnlineBeaconHostObject* BeaconOwner;//[Offset: 0x2a8, Size: 0x8]
	NetConnection* BeaconConnection;//[Offset: 0x2b0, Size: 0x8]
	enum ConnectionState;//[Offset: 0x2b8, Size: 0x1]
	void ClientOnConnected();// 0x23b258eb6041

--------------------------------
Class: OnlineBeaconHostObject.Actor.Object
	FString BeaconTypeName;//[Offset: 0x278, Size: 0x10]
	class OnlineBeaconClient* ClientBeaconActorClass;//[Offset: 0x288, Size: 0x8]
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x290, Size: 0x10]

--------------------------------
Class: OnlineBeaconHost.OnlineBeacon.Actor.Object
	int ListenPort;//[Offset: 0x2a8, Size: 0x4]
	bool bAuthRequired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 0x1]
	uint32 MaxAuthTokenSize;//[Offset: 0x2b0, Size: 0x4]
	OnlineBeaconClient*[] ClientActors;//[Offset: 0x308, Size: 0x10]

--------------------------------
Class: OnlineEngineInterfaceImpl.OnlineEngineInterface.Object
	<FName,FName> MappedUniqueNetIdTypes;//[Offset: 0x28, Size: 0x50]
	FName[] CompatibleUniqueNetIdTypes;//[Offset: 0x78, Size: 0x10]
	FName VoiceSubsystemNameOverride;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: OnlinePIESettings.DeveloperSettings.Object
	bool bOnlinePIEEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	PIELoginSettingsInternal[] Logins;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: PIELoginSettingsInternal
	FString ID;//[Offset: 0x0, Size: 0x10]
	FString Token;//[Offset: 0x10, Size: 0x10]
	FString Type;//[Offset: 0x20, Size: 0x10]
	byte[] TokenBytes;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: OnlineServicesEngineInterfaceImpl.OnlineEngineInterface.Object

--------------------------------
Class: OnlineSessionClient.OnlineSession.Object
	bool bIsFromInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]
	bool bHandlingDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 0x1]

--------------------------------
Class: PartyBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	FString DestSessionId;//[Offset: 0x338, Size: 0x10]
	PartyReservation PendingReservation;//[Offset: 0x348, Size: 0x58]
	enum RequestType;//[Offset: 0x3a0, Size: 0x1]
	bool bPendingReservationSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 0x1]
	bool bCancelReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 0x1]
	void ServerUpdateReservationRequest(FString SessionId, const PartyReservation ReservationUpdate);// 0x23bb58eb6041
	void ServerReservationRequest(FString SessionId, const PartyReservation Reservation);// 0x23ba58eb6041
	void ServerRemoveMemberFromReservationRequest(FString SessionId, const PartyReservation ReservationUpdate);// 0x23b958eb6041
	void ServerCancelReservationRequest(const UniqueNetIdRepl PartyLeader);// 0x23f558eb6041
	void ServerAddOrUpdateReservationRequest(FString SessionId, const PartyReservation Reservation);// 0x23b758eb6041
	void ClientSendReservationUpdates(int NumRemainingReservations);// 0x23b658eb6041
	void ClientSendReservationFull();// 0x23b558eb6041
	void ClientReservationResponse(byte ReservationResponse);// 0x23b458eb6041
	void ClientCancelReservationResponse(byte ReservationResponse);// 0x23b358eb6041

--------------------------------
Class: PartyReservation
	int TeamNum;//[Offset: 0x0, Size: 0x4]
	UniqueNetIdRepl PartyLeader;//[Offset: 0x8, Size: 0x30]
	PlayerReservation[] PartyMembers;//[Offset: 0x38, Size: 0x10]
	PlayerReservation[] RemovedPartyMembers;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: PlayerReservation
	UniqueNetIdRepl UniqueId;//[Offset: 0x0, Size: 0x30]
	FString ValidationStr;//[Offset: 0x30, Size: 0x10]
	FString Platform;//[Offset: 0x40, Size: 0x10]
	bool bAllowCrossplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	float ElapsedTime;//[Offset: 0x54, Size: 0x4]

--------------------------------
Class: PartyBeaconHost.OnlineBeaconHostObject.Actor.Object
	PartyBeaconState* State;//[Offset: 0x2a0, Size: 0x8]
	bool bLogoutOnSessionTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	float SessionTimeoutSecs;//[Offset: 0x30c, Size: 0x4]
	float TravelSessionTimeoutSecs;//[Offset: 0x310, Size: 0x4]

--------------------------------
Class: PartyBeaconState.Object
	FName SessionName;//[Offset: 0x28, Size: 0x8]
	int NumConsumedReservations;//[Offset: 0x30, Size: 0x4]
	int MaxReservations;//[Offset: 0x34, Size: 0x4]
	int NumTeams;//[Offset: 0x38, Size: 0x4]
	int NumPlayersPerTeam;//[Offset: 0x3c, Size: 0x4]
	FName TeamAssignmentMethod;//[Offset: 0x40, Size: 0x8]
	int ReservedHostTeamNum;//[Offset: 0x48, Size: 0x4]
	int ForceTeamNum;//[Offset: 0x4c, Size: 0x4]
	bool bRestrictCrossConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	FString[] PlatformCrossplayRestrictions;//[Offset: 0x58, Size: 0x10]
	PartyBeaconCrossplayPlatformMapping[] PlatformTypeMapping;//[Offset: 0x68, Size: 0x10]
	bool bEnableRemovalRequests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	PartyReservation[] Reservations;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: PartyBeaconCrossplayPlatformMapping
	FString PlatformName;//[Offset: 0x0, Size: 0x10]
	FString PlatformType;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: QuitMatchCallbackProxy.OnlineBlueprintCallProxyBase.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	QuitMatchCallbackProxy* QuitMatch(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, byte Outcome, int TurnTimeoutInSeconds);// 0x23bc58eb6041

--------------------------------
Class: ShowLoginUICallbackProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	ShowLoginUICallbackProxy* ShowExternalLoginUI(Object* WorldContextObject, PlayerController* InPlayerController);// 0x23bd58eb6041

--------------------------------
Class: SpectatorBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	FString DestSessionId;//[Offset: 0x338, Size: 0x10]
	SpectatorReservation PendingReservation;//[Offset: 0x348, Size: 0x88]
	enum RequestType;//[Offset: 0x3d0, Size: 0x1]
	bool bPendingReservationSent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 0x1]
	bool bCancelReservation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d2, Size: 0x1]
	void ServerReservationRequest(FString SessionId, const SpectatorReservation Reservation);// 0x23c358eb6041
	void ServerCancelReservationRequest(const UniqueNetIdRepl Spectator);// 0x23c258eb6041
	void ClientSendReservationUpdates(int NumRemainingReservations);// 0x23c158eb6041
	void ClientSendReservationFull();// 0x23c058eb6041
	void ClientReservationResponse(byte ReservationResponse);// 0x23bf58eb6041
	void ClientCancelReservationResponse(byte ReservationResponse);// 0x23be58eb6041

--------------------------------
Class: SpectatorReservation
	UniqueNetIdRepl SpectatorId;//[Offset: 0x0, Size: 0x30]
	PlayerReservation Spectator;//[Offset: 0x30, Size: 0x58]

--------------------------------
Class: SpectatorBeaconHost.OnlineBeaconHostObject.Actor.Object
	SpectatorBeaconState* State;//[Offset: 0x2a0, Size: 0x8]
	bool bLogoutOnSessionTimeout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	float SessionTimeoutSecs;//[Offset: 0x30c, Size: 0x4]
	float TravelSessionTimeoutSecs;//[Offset: 0x310, Size: 0x4]

--------------------------------
Class: SpectatorBeaconState.Object
	FName SessionName;//[Offset: 0x28, Size: 0x8]
	int NumConsumedReservations;//[Offset: 0x30, Size: 0x4]
	int MaxReservations;//[Offset: 0x34, Size: 0x4]
	bool bRestrictCrossConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	SpectatorReservation[] Reservations;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: TestBeaconClient.OnlineBeaconClient.OnlineBeacon.Actor.Object
	void ServerPong();// 0x23c558eb6041
	void ClientPing();// 0x23c458eb6041

--------------------------------
Class: TestBeaconHost.OnlineBeaconHostObject.Actor.Object

--------------------------------
Class: TurnBasedBlueprintLibrary.BlueprintFunctionLibrary.Object
	void RegisterTurnBasedMatchInterfaceObject(Object* WorldContextObject, PlayerController* PlayerController, Object* Object);// 0x23c958eb6041
	void GetPlayerDisplayName(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, int PlayerIndex, out FString PlayerDisplayName);// 0x23c858eb6041
	void GetMyPlayerIndex(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, out int PlayerIndex);// 0x23c758eb6041
	void GetIsMyTurn(Object* WorldContextObject, PlayerController* PlayerController, FString MatchID, out bool bIsMyTurn);// 0x23c658eb6041

--------------------------------
Class: VoipListenerSynthComponent.SynthComponent.SceneComponent.ActorComponent.Object
	bool IsIdling();// 0x23d258eb6041

--------------------------------
Class: LayersBlueprintLibrary.BlueprintFunctionLibrary.Object
	void RemoveActorFromLayer(Actor* InActor, out const ActorLayer Layer);// 0x23d558eb6041
	Actor*[] GetActors(Object* WorldContextObject, out const ActorLayer ActorLayer);// 0x23d458eb6041
	void AddActorToLayer(Actor* InActor, out const ActorLayer Layer);// 0x23d358eb6041

--------------------------------
Class: ActorLayer
	FName Name;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AndroidFileServerBPLibrary.BlueprintFunctionLibrary.Object
	bool StopFileServer(bool bUSB, bool bNetwork);// 0x23d858eb6041
	bool StartFileServer(bool bUSB, bool bNetwork, int Port);// 0x23d758eb6041
	byte IsFileServerRunning();// 0x23d658eb6041

--------------------------------
Class: AppleImageUtilsBaseAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFailure;//[Offset: 0x40, Size: 0x10]
	AppleImageUtilsImageConversionResult ConversionResult;//[Offset: 0x60, Size: 0x20]
	AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToTIFF(Texture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x23dc58eb6041
	AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToPNG(Texture* SourceImage, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x23db58eb6041
	AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToJPEG(Texture* SourceImage, int Quality, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0x23da58eb6041
	AppleImageUtilsBaseAsyncTaskBlueprintProxy* CreateProxyObjectForConvertToHEIF(Texture* SourceImage, int Quality, bool bWantColor, bool bUseGpu, float Scale, enum Rotate);// 0xffffff8158eb6000

--------------------------------
Class: AppleImageUtilsImageConversionResult
	FString Error;//[Offset: 0x0, Size: 0x10]
	byte[] ImageData;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: AppleImageInterface.Interface.Object

--------------------------------
Class: ArchVisCharacter.Character.Pawn.Actor.Object
	FString LookUpAxisName;//[Offset: 0x5f8, Size: 0x10]
	FString LookUpAtRateAxisName;//[Offset: 0x608, Size: 0x10]
	FString TurnAxisName;//[Offset: 0x618, Size: 0x10]
	FString TurnAtRateAxisName;//[Offset: 0x628, Size: 0x10]
	FString MoveForwardAxisName;//[Offset: 0x638, Size: 0x10]
	FString MoveRightAxisName;//[Offset: 0x648, Size: 0x10]
	float MouseSensitivityScale_Pitch;//[Offset: 0x658, Size: 0x4]
	float MouseSensitivityScale_Yaw;//[Offset: 0x65c, Size: 0x4]

--------------------------------
Class: ArchVisCharMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Rotator RotationalAcceleration;//[Offset: 0xef8, Size: 0x18]
	Rotator RotationalDeceleration;//[Offset: 0xf10, Size: 0x18]
	Rotator MaxRotationalVelocity;//[Offset: 0xf28, Size: 0x18]
	float MinPitch;//[Offset: 0xf40, Size: 0x4]
	float MaxPitch;//[Offset: 0xf44, Size: 0x4]
	float WalkingFriction;//[Offset: 0xf48, Size: 0x4]
	float WalkingSpeed;//[Offset: 0xf4c, Size: 0x4]
	float WalkingAcceleration;//[Offset: 0xf50, Size: 0x4]

--------------------------------
Class: AssetTagsSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	FName[] GetCollectionsContainingAssetPtr(const Object* AssetPtr);// 0x245858eb6041
	FName[] GetCollectionsContainingAssetData(out const AssetData AssetData);// 0x241558eb6041
	FName[] GetCollectionsContainingAsset(const FName AssetPathName);// 0x241458eb6041
	FName[] GetCollections();// 0x241358eb6041
	AssetData[] GetAssetsInCollection(const FName Name);// 0x241258eb6041
	bool CollectionExists(const FName Name);// 0x241158eb6041

--------------------------------
Class: AudioGenerator.Object

--------------------------------
Class: AudioCapture.AudioGenerator.Object
	void StopCapturingAudio();// 0x241a58eb6041
	void StartCapturingAudio();// 0x241958eb6041
	bool IsCapturingAudio();// 0x241858eb6041
	bool GetAudioCaptureDeviceInfo(out AudioCaptureDeviceInfo OutInfo);// 0x241758eb6041

--------------------------------
Class: AudioCaptureDeviceInfo
	FName DeviceName;//[Offset: 0x0, Size: 0x8]
	int NumInputChannels;//[Offset: 0x8, Size: 0x4]
	int SampleRate;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AudioCaptureFunctionLibrary.BlueprintFunctionLibrary.Object
	AudioCapture* CreateAudioCapture();// 0x241b58eb6041

--------------------------------
Class: AudioCaptureBlueprintLibrary.BlueprintFunctionLibrary.Object
	void GetAvailableAudioInputDevices(const Object* WorldContextObject, out const delegate OnObtainDevicesEvent);// 0x241d58eb6041
	FString Conv_AudioInputDeviceInfoToString(out const AudioInputDeviceInfo Info);// 0x241c58eb6041

--------------------------------
Class: AudioInputDeviceInfo
	FString DeviceName;//[Offset: 0x0, Size: 0x10]
	FString DeviceID;//[Offset: 0x10, Size: 0x10]
	int InputChannels;//[Offset: 0x20, Size: 0x4]
	int PreferredSampleRate;//[Offset: 0x24, Size: 0x4]
	bool bSupportsHardwareAEC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: AudioCaptureComponent.SynthComponent.SceneComponent.ActorComponent.Object
	int JitterLatencyFrames;//[Offset: 0x7a0, Size: 0x4]

--------------------------------
Class: CableActor.Actor.Object
	CableComponent* CableComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: CableComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAttachStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x559, Size: 0x1]
	bool bAttachEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55a, Size: 0x1]
	ComponentReference AttachEndTo;//[Offset: 0x560, Size: 0x28]
	FName AttachEndToSocketName;//[Offset: 0x588, Size: 0x8]
	Vector EndLocation;//[Offset: 0x590, Size: 0x18]
	float CableLength;//[Offset: 0x5a8, Size: 0x4]
	int NumSegments;//[Offset: 0x5ac, Size: 0x4]
	float SubstepTime;//[Offset: 0x5b0, Size: 0x4]
	int SolverIterations;//[Offset: 0x5b4, Size: 0x4]
	bool bEnableStiffness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 0x1]
	bool bUseSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 0x1]
	bool bSkipCableUpdateWhenNotVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ba, Size: 0x1]
	bool bSkipCableUpdateWhenNotOwnerRecentlyRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bb, Size: 0x1]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 0x1]
	float CollisionFriction;//[Offset: 0x5c0, Size: 0x4]
	Vector CableForce;//[Offset: 0x5c8, Size: 0x18]
	float CableGravityScale;//[Offset: 0x5e0, Size: 0x4]
	float CableWidth;//[Offset: 0x5e4, Size: 0x4]
	int NumSides;//[Offset: 0x5e8, Size: 0x4]
	float TileMaterial;//[Offset: 0x5ec, Size: 0x4]
	void SetAttachEndToComponent(SceneComponent* Component, FName SocketName);// 0x242258eb6041
	void SetAttachEndTo(Actor* Actor, FName ComponentProperty, FName SocketName);// 0x242158eb6041
	void GetCableParticleLocations(out Vector[] Locations);// 0x242058eb6041
	SceneComponent* GetAttachedComponent();// 0x241f58eb6041
	Actor* GetAttachedActor();// 0x241e58eb6041

--------------------------------
Class: CustomMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool SetCustomMeshTriangles(out const CustomMeshTriangle[] Triangles);// 0x242558eb6041
	void ClearCustomMeshTriangles();// 0x242458eb6041
	void AddCustomMeshTriangles(out const CustomMeshTriangle[] Triangles);// 0x242358eb6041

--------------------------------
Class: CustomMeshTriangle
	Vector Vertex0;//[Offset: 0x0, Size: 0x18]
	Vector Vertex1;//[Offset: 0x18, Size: 0x18]
	Vector Vertex2;//[Offset: 0x30, Size: 0x18]

--------------------------------
Class: GooglePADFunctionLibrary.BlueprintFunctionLibrary.Object
	enum ShowCellularDataConfirmation();// 0x243458eb6041
	enum RequestRemoval(FString Name);// 0x243358eb6041
	enum RequestInfo(const FString[] AssetPacks);// 0x243258eb6041
	enum RequestDownload(const FString[] AssetPacks);// 0x243158eb6041
	void ReleaseDownloadState(const int State);// 0x243058eb6041
	void ReleaseAssetPackLocation(const int Location);// 0x242f58eb6041
	int GetTotalBytesToDownload(const int State);// 0x242e58eb6041
	enum GetStorageMethod(const int Location);// 0x242d58eb6041
	enum GetShowCellularDataConfirmationStatus(out enum Status);// 0x242c58eb6041
	enum GetDownloadStatus(const int State);// 0x242b58eb6041
	enum GetDownloadState(FString Name, out int State);// 0x242a58eb6041
	int GetBytesDownloaded(const int State);// 0x242958eb6041
	FString GetAssetsPath(const int Location);// 0x242858eb6041
	enum GetAssetPackLocation(FString Name, out int Location);// 0x242758eb6041
	enum CancelDownload(const FString[] AssetPacks);// 0x242658eb6041

--------------------------------
Class: LocationServices.BlueprintFunctionLibrary.Object
	bool StopLocationServices();// 0x243b58eb6041
	bool StartLocationServices();// 0x243a58eb6041
	bool IsLocationAccuracyAvailable(enum Accuracy);// 0x243958eb6041
	bool InitLocationServices(enum Accuracy, float UpdateFrequency, float MinDistanceFilter);// 0x243858eb6041
	LocationServicesImpl* GetLocationServicesImpl();// 0x247958eb6041
	LocationServicesData GetLastKnownLocation();// 0x243658eb6041
	bool AreLocationServicesEnabled();// 0x243558eb6041

--------------------------------
Class: LocationServicesImpl.Object
	delegate OnLocationChanged;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LocationServicesData
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	float Longitude;//[Offset: 0x4, Size: 0x4]
	float Latitude;//[Offset: 0x8, Size: 0x4]
	float HorizontalAccuracy;//[Offset: 0xc, Size: 0x4]
	float VerticalAccuracy;//[Offset: 0x10, Size: 0x4]
	float Altitude;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: MobileInstalledContent.Object
	bool Mount(int PakOrder, FString MountPoint);// 0x244258eb6041
	float GetInstalledContentSize();// 0x244158eb6041
	float GetDiskFreeSpace();// 0x244058eb6041

--------------------------------
Class: MobilePendingContent.MobileInstalledContent.Object
	void StartInstall(delegate OnSucceeded, delegate OnFailed);// 0x244958eb6041
	float GetTotalDownloadedSize();// 0x244858eb6041
	float GetRequiredDiskSpace();// 0x244758eb6041
	float GetInstallProgress();// 0x244658eb6041
	FText GetDownloadStatusText();// 0x244558eb6041
	float GetDownloadSpeed();// 0x244458eb6041
	float GetDownloadSize();// 0x244358eb6041

--------------------------------
Class: MobilePatchingLibrary.BlueprintFunctionLibrary.Object
	void RequestContent(FString RemoteManifestURL, FString CloudURL, FString InstallDirectory, delegate OnSucceeded, delegate OnFailed);// 0x244e58eb6041
	bool HasActiveWiFiConnection();// 0x244d58eb6041
	FString[] GetSupportedPlatformNames();// 0x244c58eb6041
	MobileInstalledContent* GetInstalledContent(FString InstallDirectory);// 0x244b58eb6041
	FString GetActiveDeviceProfileName();// 0x244a58eb6041

--------------------------------
Class: ResonanceAudioSoundfieldSettings.SoundfieldEncodingSettingsBase.Object
	enum RenderMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: ResonanceAudioBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	void SetGlobalReverbPreset(ResonanceAudioReverbPluginPreset* InPreset);// 0x245058eb6041
	ResonanceAudioReverbPluginPreset* GetGlobalReverbPreset();// 0x244f58eb6041

--------------------------------
Class: ResonanceAudioReverbPluginPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	ResonanceAudioReverbPluginSettings Settings;//[Offset: 0x100, Size: 0x70]
	void SetRoomRotation(out const Quat InRotation);// 0x245958eb6041
	void SetRoomPosition(out const Vector InPosition);// 0x249a58eb6041
	void SetRoomMaterials(out const enum[] InMaterials);// 0x245758eb6041
	void SetRoomDimensions(out const Vector InDimensions);// 0x245658eb6041
	void SetReverbTimeModifier(float InReverbTimeModifier);// 0x245558eb6041
	void SetReverbGain(float InReverbGain);// 0x245458eb6041
	void SetReverbBrightness(float InReverbBrightness);// 0x245358eb6041
	void SetReflectionScalar(float InReflectionScalar);// 0x245258eb6041
	void SetEnableRoomEffects(bool bInEnableRoomEffects);// 0x245158eb6041

--------------------------------
Class: ResonanceAudioReverbPluginSettings
	bool bEnableRoomEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bGetTransformFromAudioVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	Vector RoomPosition;//[Offset: 0x8, Size: 0x18]
	Quat RoomRotation;//[Offset: 0x20, Size: 0x20]
	Vector RoomDimensions;//[Offset: 0x40, Size: 0x18]
	enum LeftWallMaterial;//[Offset: 0x58, Size: 0x1]
	enum RightWallMaterial;//[Offset: 0x59, Size: 0x1]
	enum FloorMaterial;//[Offset: 0x5a, Size: 0x1]
	enum CeilingMaterial;//[Offset: 0x5b, Size: 0x1]
	enum FrontWallMaterial;//[Offset: 0x5c, Size: 0x1]
	enum BackWallMaterial;//[Offset: 0x5d, Size: 0x1]
	float ReflectionScalar;//[Offset: 0x60, Size: 0x4]
	float ReverbGain;//[Offset: 0x64, Size: 0x4]
	float ReverbTimeModifier;//[Offset: 0x68, Size: 0x4]
	float ReverbBrightness;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: ResonanceAudioDirectivityVisualizer.Actor.Object
	Material* Material;//[Offset: 0x2e8, Size: 0x8]
	ResonanceAudioSpatializationSourceSettings* Settings;//[Offset: 0x2f0, Size: 0x8]

--------------------------------
Class: ResonanceAudioSpatializationSourceSettings.SpatializationPluginSourceSettingsBase.Object
	enum SpatializationMethod;//[Offset: 0x28, Size: 0x1]
	float Pattern;//[Offset: 0x2c, Size: 0x4]
	float Sharpness;//[Offset: 0x30, Size: 0x4]
	bool bToggleVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	float Scale;//[Offset: 0x38, Size: 0x4]
	float Spread;//[Offset: 0x3c, Size: 0x4]
	enum Rolloff;//[Offset: 0x40, Size: 0x1]
	float MinDistance;//[Offset: 0x44, Size: 0x4]
	float MaxDistance;//[Offset: 0x48, Size: 0x4]
	void SetSoundSourceSpread(float InSpread);// 0x245b58eb6041
	void SetSoundSourceDirectivity(float InPattern, float InSharpness);// 0x245a58eb6041

--------------------------------
Class: ResonanceAudioSettings.Object
	SoftObjectPath OutputSubmix;//[Offset: 0x28, Size: 0x18]
	enum QualityMode;//[Offset: 0x40, Size: 0x1]
	SoftObjectPath GlobalReverbPreset;//[Offset: 0x48, Size: 0x18]
	SoftObjectPath GlobalSourcePreset;//[Offset: 0x60, Size: 0x18]

--------------------------------
Class: AmbisonicsEncodingSettings.SoundfieldEncodingSettingsBase.Object
	int AmbisonicsOrder;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: ModularSynthPresetBank.Object
	ModularSynthPresetBankEntry[] Presets;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ModularSynthPresetBankEntry
	FString PresetName;//[Offset: 0x0, Size: 0x10]
	ModularSynthPreset Preset;//[Offset: 0x10, Size: 0xd0]

--------------------------------
Class: ModularSynthPreset.TableRowBase
	bool bEnablePolyphony;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	enum Osc1Type;//[Offset: 0x9, Size: 0x1]
	float Osc1Gain;//[Offset: 0xc, Size: 0x4]
	float Osc1Octave;//[Offset: 0x10, Size: 0x4]
	float Osc1Semitones;//[Offset: 0x14, Size: 0x4]
	float Osc1Cents;//[Offset: 0x18, Size: 0x4]
	float Osc1PulseWidth;//[Offset: 0x1c, Size: 0x4]
	enum Osc2Type;//[Offset: 0x20, Size: 0x1]
	float Osc2Gain;//[Offset: 0x24, Size: 0x4]
	float Osc2Octave;//[Offset: 0x28, Size: 0x4]
	float Osc2Semitones;//[Offset: 0x2c, Size: 0x4]
	float Osc2Cents;//[Offset: 0x30, Size: 0x4]
	float Osc2PulseWidth;//[Offset: 0x34, Size: 0x4]
	float Portamento;//[Offset: 0x38, Size: 0x4]
	bool bEnableUnison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bEnableOscillatorSync;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	float Spread;//[Offset: 0x40, Size: 0x4]
	float Pan;//[Offset: 0x44, Size: 0x4]
	float LFO1Frequency;//[Offset: 0x48, Size: 0x4]
	float LFO1Gain;//[Offset: 0x4c, Size: 0x4]
	enum LFO1Type;//[Offset: 0x50, Size: 0x1]
	enum LFO1Mode;//[Offset: 0x51, Size: 0x1]
	enum LFO1PatchType;//[Offset: 0x52, Size: 0x1]
	float LFO2Frequency;//[Offset: 0x54, Size: 0x4]
	float LFO2Gain;//[Offset: 0x58, Size: 0x4]
	enum LFO2Type;//[Offset: 0x5c, Size: 0x1]
	enum LFO2Mode;//[Offset: 0x5d, Size: 0x1]
	enum LFO2PatchType;//[Offset: 0x5e, Size: 0x1]
	float GainDb;//[Offset: 0x60, Size: 0x4]
	float AttackTime;//[Offset: 0x64, Size: 0x4]
	float DecayTime;//[Offset: 0x68, Size: 0x4]
	float SustainGain;//[Offset: 0x6c, Size: 0x4]
	float ReleaseTime;//[Offset: 0x70, Size: 0x4]
	enum ModEnvPatchType;//[Offset: 0x74, Size: 0x1]
	enum ModEnvBiasPatchType;//[Offset: 0x75, Size: 0x1]
	bool bInvertModulationEnvelope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76, Size: 0x1]
	bool bInvertModulationEnvelopeBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76, Size: 0x1]
	float ModulationEnvelopeDepth;//[Offset: 0x78, Size: 0x4]
	float ModulationEnvelopeAttackTime;//[Offset: 0x7c, Size: 0x4]
	float ModulationEnvelopeDecayTime;//[Offset: 0x80, Size: 0x4]
	float ModulationEnvelopeSustainGain;//[Offset: 0x84, Size: 0x4]
	float ModulationEnvelopeReleaseTime;//[Offset: 0x88, Size: 0x4]
	bool bLegato;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c, Size: 0x1]
	bool bRetrigger;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c, Size: 0x1]
	float FilterFrequency;//[Offset: 0x90, Size: 0x4]
	float FilterQ;//[Offset: 0x94, Size: 0x4]
	enum FilterType;//[Offset: 0x98, Size: 0x1]
	enum FilterAlgorithm;//[Offset: 0x99, Size: 0x1]
	bool bStereoDelayEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a, Size: 0x1]
	enum StereoDelayMode;//[Offset: 0x9b, Size: 0x1]
	float StereoDelayTime;//[Offset: 0x9c, Size: 0x4]
	float StereoDelayFeedback;//[Offset: 0xa0, Size: 0x4]
	float StereoDelayWetlevel;//[Offset: 0xa4, Size: 0x4]
	float StereoDelayRatio;//[Offset: 0xa8, Size: 0x4]
	bool bChorusEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	float ChorusDepth;//[Offset: 0xb0, Size: 0x4]
	float ChorusFeedback;//[Offset: 0xb4, Size: 0x4]
	float ChorusFrequency;//[Offset: 0xb8, Size: 0x4]
	EpicSynth1Patch[] Patches;//[Offset: 0xc0, Size: 0x10]

--------------------------------
Class: EpicSynth1Patch
	enum PatchSource;//[Offset: 0x0, Size: 0x1]
	Synth1PatchCable[] PatchCables;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: Synth1PatchCable
	float Depth;//[Offset: 0x0, Size: 0x4]
	enum Destination;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: ModularSynthLibrary.BlueprintFunctionLibrary.Object
	void AddModularSynthPresetToBankAsset(ModularSynthPresetBank* InBank, out const ModularSynthPreset Preset, FString PresetName);// 0x245c58eb6041

--------------------------------
Class: ModularSynthComponent.SynthComponent.SceneComponent.ActorComponent.Object
	int VoiceCount;//[Offset: 0x7a0, Size: 0x4]
	void SetSynthPreset(out const ModularSynthPreset SynthPreset);// 0x249758eb6041
	void SetSustainGain(float SustainGain);// 0x249658eb6041
	void SetStereoDelayWetlevel(float DelayWetlevel);// 0x249558eb6041
	void SetStereoDelayTime(float DelayTimeMsec);// 0x249458eb6041
	void SetStereoDelayRatio(float DelayRatio);// 0x249358eb6041
	void SetStereoDelayMode(enum StereoDelayMode);// 0x249258eb6041
	void SetStereoDelayIsEnabled(bool StereoDelayEnabled);// 0x249158eb6041
	void SetStereoDelayFeedback(float DelayFeedback);// 0x249058eb6041
	void SetSpread(float Spread);// 0x248f58eb6041
	void SetReleaseTime(float ReleaseTimeMsec);// 0x248e58eb6041
	void SetPortamento(float Portamento);// 0x248d58eb6041
	void SetPitchBend(float PitchBend);// 0x248c58eb6041
	void SetPan(float Pan);// 0x248b58eb6041
	void SetOscType(int OscIndex, enum OscType);// 0x248a58eb6041
	void SetOscSync(const bool bIsSynced);// 0x248958eb6041
	void SetOscSemitones(int OscIndex, float Semitones);// 0x248858eb6041
	void SetOscPulsewidth(int OscIndex, float Pulsewidth);// 0x248758eb6041
	void SetOscOctave(int OscIndex, float Octave);// 0x248658eb6041
	void SetOscGainMod(int OscIndex, float OscGainMod);// 0x248558eb6041
	void SetOscGain(int OscIndex, float OscGain);// 0x248458eb6041
	void SetOscFrequencyMod(int OscIndex, float OscFreqMod);// 0x248358eb6041
	void SetOscCents(int OscIndex, float Cents);// 0x248258eb6041
	void SetModEnvSustainGain(const float SustainGain);// 0x248158eb6041
	void SetModEnvReleaseTime(const float Release);// 0x248058eb6041
	void SetModEnvPatch(const enum InPatchType);// 0x247f58eb6041
	void SetModEnvInvert(const bool bInvert);// 0x247e58eb6041
	void SetModEnvDepth(const float Depth);// 0x247d58eb6041
	void SetModEnvDecayTime(const float DecayTimeMsec);// 0x247c58eb6041
	void SetModEnvBiasPatch(const enum InPatchType);// 0x247b58eb6041
	void SetModEnvBiasInvert(const bool bInvert);// 0x247a58eb6041
	void SetModEnvAttackTime(const float AttackTimeMsec);// 0x24bb58eb6041
	void SetLFOType(int LFOIndex, enum LFOType);// 0x247858eb6041
	void SetLFOPatch(int LFOIndex, enum LFOPatchType);// 0x247758eb6041
	void SetLFOMode(int LFOIndex, enum LFOMode);// 0x247658eb6041
	void SetLFOGainMod(int LFOIndex, float GainMod);// 0x247558eb6041
	void SetLFOGain(int LFOIndex, float Gain);// 0x247458eb6041
	void SetLFOFrequencyMod(int LFOIndex, float FrequencyModHz);// 0x247358eb6041
	void SetLFOFrequency(int LFOIndex, float FrequencyHz);// 0x247258eb6041
	void SetGainDb(float GainDb);// 0x247158eb6041
	void SetFilterType(enum FilterType);// 0x247058eb6041
	void SetFilterQMod(float FilterQ);// 0x246f58eb6041
	void SetFilterQ(float FilterQ);// 0x246e58eb6041
	void SetFilterFrequencyMod(float FilterFrequencyHz);// 0x246d58eb6041
	void SetFilterFrequency(float FilterFrequencyHz);// 0x246c58eb6041
	void SetFilterAlgorithm(enum FilterAlgorithm);// 0x246b58eb6041
	void SetEnableUnison(bool EnableUnison);// 0x246a58eb6041
	void SetEnableRetrigger(bool RetriggerEnabled);// 0x246958eb6041
	void SetEnablePolyphony(bool bEnablePolyphony);// 0x246858eb6041
	bool SetEnablePatch(const PatchId PatchId, const bool bIsEnabled);// 0x246758eb6041
	void SetEnableLegato(bool LegatoEnabled);// 0x246658eb6041
	void SetDecayTime(float DecayTimeMsec);// 0x246558eb6041
	void SetChorusFrequency(float Frequency);// 0x246458eb6041
	void SetChorusFeedback(float Feedback);// 0x246358eb6041
	void SetChorusEnabled(bool EnableChorus);// 0x246258eb6041
	void SetChorusDepth(float Depth);// 0x246158eb6041
	void SetAttackTime(float AttackTimeMsec);// 0x246058eb6041
	void NoteOn(const float Note, const int Velocity, const float Duration);// 0x245f58eb6041
	void NoteOff(const float Note, const bool bAllNotesOff, const bool bKillAllNotes);// 0x245e58eb6041
	PatchId CreatePatch(const enum PatchSource, out const Synth1PatchCable[] PatchCables, const bool bEnableByDefault);// 0x245d58eb6041

--------------------------------
Class: PatchId
	int ID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SourceEffectBitCrusherPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectBitCrusherSettings Settings;//[Offset: 0xc0, Size: 0x30]
	void SetSettings(out const SourceEffectBitCrusherBaseSettings Settings);// 0x249d58eb6041
	void SetSampleRateModulator(const SoundModulatorBase* Modulator);// 0x249c58eb6041
	void SetSampleRate(float SampleRate);// 0x249b58eb6041
	void SetModulationSettings(out const SourceEffectBitCrusherSettings ModulationSettings);// 0x24dc58eb6041
	void SetBits(float Bits);// 0x249958eb6041
	void SetBitModulator(const SoundModulatorBase* Modulator);// 0x249858eb6041

--------------------------------
Class: SourceEffectBitCrusherSettings
	float CrushedSampleRate;//[Offset: 0x0, Size: 0x4]
	SoundModulationDestinationSettings SampleRateModulation;//[Offset: 0x8, Size: 0x10]
	float CrushedBits;//[Offset: 0x18, Size: 0x4]
	SoundModulationDestinationSettings BitModulation;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: SourceEffectBitCrusherBaseSettings
	float SampleRate;//[Offset: 0x0, Size: 0x4]
	float BitDepth;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SourceEffectChorusPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectChorusSettings Settings;//[Offset: 0x108, Size: 0x78]
	void SetWetModulator(const SoundModulatorBase* Modulator);// 0x24ab58eb6041
	void SetWet(float WetAmount);// 0x24aa58eb6041
	void SetSpreadModulator(const SoundModulatorBase* Modulator);// 0x24a958eb6041
	void SetSpread(float Spread);// 0x24a858eb6041
	void SetSettings(out const SourceEffectChorusBaseSettings Settings);// 0x24a758eb6041
	void SetModulationSettings(out const SourceEffectChorusSettings ModulationSettings);// 0x24a658eb6041
	void SetFrequencyModulator(const SoundModulatorBase* Modulator);// 0x24a558eb6041
	void SetFrequency(float Frequency);// 0x24a458eb6041
	void SetFeedbackModulator(const SoundModulatorBase* Modulator);// 0x24a358eb6041
	void SetFeedback(float Feedback);// 0x24a258eb6041
	void SetDryModulator(const SoundModulatorBase* Modulator);// 0x24a158eb6041
	void SetDry(float DryAmount);// 0x24a058eb6041
	void SetDepthModulator(const SoundModulatorBase* Modulator);// 0x249f58eb6041
	void SetDepth(float Depth);// 0x249e58eb6041

--------------------------------
Class: SourceEffectChorusSettings
	float Depth;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	float Feedback;//[Offset: 0x8, Size: 0x4]
	float WetLevel;//[Offset: 0xc, Size: 0x4]
	float DryLevel;//[Offset: 0x10, Size: 0x4]
	float Spread;//[Offset: 0x14, Size: 0x4]
	SoundModulationDestinationSettings DepthModulation;//[Offset: 0x18, Size: 0x10]
	SoundModulationDestinationSettings FrequencyModulation;//[Offset: 0x28, Size: 0x10]
	SoundModulationDestinationSettings FeedbackModulation;//[Offset: 0x38, Size: 0x10]
	SoundModulationDestinationSettings WetModulation;//[Offset: 0x48, Size: 0x10]
	SoundModulationDestinationSettings DryModulation;//[Offset: 0x58, Size: 0x10]
	SoundModulationDestinationSettings SpreadModulation;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: SourceEffectChorusBaseSettings
	float Depth;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	float Feedback;//[Offset: 0x8, Size: 0x4]
	float WetLevel;//[Offset: 0xc, Size: 0x4]
	float DryLevel;//[Offset: 0x10, Size: 0x4]
	float Spread;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SourceEffectDynamicsProcessorPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectDynamicsProcessorSettings Settings;//[Offset: 0xb4, Size: 0x28]
	void SetSettings(out const SourceEffectDynamicsProcessorSettings InSettings);// 0x24ac58eb6041

--------------------------------
Class: SourceEffectDynamicsProcessorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1]
	enum PeakMode;//[Offset: 0x1, Size: 0x1]
	float LookAheadMsec;//[Offset: 0x4, Size: 0x4]
	float AttackTimeMsec;//[Offset: 0x8, Size: 0x4]
	float ReleaseTimeMsec;//[Offset: 0xc, Size: 0x4]
	float ThresholdDb;//[Offset: 0x10, Size: 0x4]
	float Ratio;//[Offset: 0x14, Size: 0x4]
	float KneeBandwidthDb;//[Offset: 0x18, Size: 0x4]
	float InputGainDb;//[Offset: 0x1c, Size: 0x4]
	float OutputGainDb;//[Offset: 0x20, Size: 0x4]
	bool bStereoLinked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]

--------------------------------
Class: EnvelopeFollowerListener.ActorComponent.Object
	delegate OnEnvelopeFollowerUpdate;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: SourceEffectEnvelopeFollowerPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectEnvelopeFollowerSettings Settings;//[Offset: 0x98, Size: 0xc]
	void UnregisterEnvelopeFollowerListener(EnvelopeFollowerListener* EnvelopeFollowerListener);// 0x24af58eb6041
	void SetSettings(out const SourceEffectEnvelopeFollowerSettings InSettings);// 0x24ae58eb6041
	void RegisterEnvelopeFollowerListener(EnvelopeFollowerListener* EnvelopeFollowerListener);// 0x24ad58eb6041

--------------------------------
Class: SourceEffectEnvelopeFollowerSettings
	float AttackTime;//[Offset: 0x0, Size: 0x4]
	float ReleaseTime;//[Offset: 0x4, Size: 0x4]
	enum PeakMode;//[Offset: 0x8, Size: 0x1]
	bool bIsAnalogMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]

--------------------------------
Class: SourceEffectEQPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectEQSettings Settings;//[Offset: 0xa0, Size: 0x10]
	void SetSettings(out const SourceEffectEQSettings InSettings);// 0x24b058eb6041

--------------------------------
Class: SourceEffectEQSettings
	SourceEffectEQBand[] EQBands;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SourceEffectEQBand
	float Frequency;//[Offset: 0x0, Size: 0x4]
	float Bandwidth;//[Offset: 0x4, Size: 0x4]
	float GainDb;//[Offset: 0x8, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: SourceEffectFilterPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectFilterSettings Settings;//[Offset: 0xb0, Size: 0x20]
	void SetSettings(out const SourceEffectFilterSettings InSettings);// 0x24b158eb6041

--------------------------------
Class: SourceEffectFilterSettings
	enum FilterCircuit;//[Offset: 0x0, Size: 0x1]
	enum FilterType;//[Offset: 0x1, Size: 0x1]
	float CutoffFrequency;//[Offset: 0x4, Size: 0x4]
	float FilterQ;//[Offset: 0x8, Size: 0x4]
	SourceEffectFilterAudioBusModulationSettings[] AudioBusModulation;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SourceEffectFilterAudioBusModulationSettings
	AudioBus* AudioBus;//[Offset: 0x0, Size: 0x8]
	int EnvelopeFollowerAttackTimeMsec;//[Offset: 0x8, Size: 0x4]
	int EnvelopeFollowerReleaseTimeMsec;//[Offset: 0xc, Size: 0x4]
	float EnvelopeGainMultiplier;//[Offset: 0x10, Size: 0x4]
	enum FilterParam;//[Offset: 0x14, Size: 0x1]
	float MinFrequencyModulation;//[Offset: 0x18, Size: 0x4]
	float MaxFrequencyModulation;//[Offset: 0x1c, Size: 0x4]
	float MinResonanceModulation;//[Offset: 0x20, Size: 0x4]
	float MaxResonanceModulation;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: SourceEffectFoldbackDistortionPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectFoldbackDistortionSettings Settings;//[Offset: 0x98, Size: 0xc]
	void SetSettings(out const SourceEffectFoldbackDistortionSettings InSettings);// 0x24b258eb6041

--------------------------------
Class: SourceEffectFoldbackDistortionSettings
	float InputGainDb;//[Offset: 0x0, Size: 0x4]
	float ThresholdDb;//[Offset: 0x4, Size: 0x4]
	float OutputGainDb;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SourceEffectMidSideSpreaderPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectMidSideSpreaderSettings Settings;//[Offset: 0x94, Size: 0x8]
	void SetSettings(out const SourceEffectMidSideSpreaderSettings InSettings);// 0x24b358eb6041

--------------------------------
Class: SourceEffectMidSideSpreaderSettings
	float SpreadAmount;//[Offset: 0x0, Size: 0x4]
	enum InputMode;//[Offset: 0x4, Size: 0x1]
	enum OutputMode;//[Offset: 0x5, Size: 0x1]
	bool bEqualPower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]

--------------------------------
Class: SourceEffectMotionFilterPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectMotionFilterSettings Settings;//[Offset: 0x108, Size: 0x78]
	void SetSettings(out const SourceEffectMotionFilterSettings InSettings);// 0x24b458eb6041

--------------------------------
Class: SourceEffectMotionFilterSettings
	enum MotionFilterTopology;//[Offset: 0x0, Size: 0x1]
	float MotionFilterMix;//[Offset: 0x4, Size: 0x4]
	SourceEffectIndividualFilterSettings FilterASettings;//[Offset: 0x8, Size: 0xc]
	SourceEffectIndividualFilterSettings FilterBSettings;//[Offset: 0x14, Size: 0xc]
	<enum,SourceEffectMotionFilterModulationSettings> ModulationMappings;//[Offset: 0x20, Size: 0x50]
	float DryVolumeDb;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: SourceEffectIndividualFilterSettings
	enum FilterCircuit;//[Offset: 0x0, Size: 0x1]
	enum FilterType;//[Offset: 0x1, Size: 0x1]
	float CutoffFrequency;//[Offset: 0x4, Size: 0x4]
	float FilterQ;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SourceEffectMotionFilterModulationSettings
	enum ModulationSource;//[Offset: 0x0, Size: 0x1]
	Vector2D ModulationInputRange;//[Offset: 0x8, Size: 0x10]
	Vector2D ModulationOutputMinimumRange;//[Offset: 0x18, Size: 0x10]
	Vector2D ModulationOutputMaximumRange;//[Offset: 0x28, Size: 0x10]
	float UpdateEaseMS;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: SourceEffectPannerPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectPannerSettings Settings;//[Offset: 0x94, Size: 0x8]
	void SetSettings(out const SourceEffectPannerSettings InSettings);// 0x24b558eb6041

--------------------------------
Class: SourceEffectPannerSettings
	float Spread;//[Offset: 0x0, Size: 0x4]
	float Pan;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: SourceEffectPhaserPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectPhaserSettings Settings;//[Offset: 0x9c, Size: 0x10]
	void SetSettings(out const SourceEffectPhaserSettings InSettings);// 0x24b658eb6041

--------------------------------
Class: SourceEffectPhaserSettings
	float WetLevel;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	float Feedback;//[Offset: 0x8, Size: 0x4]
	enum LFOType;//[Offset: 0xc, Size: 0x1]
	bool UseQuadraturePhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]

--------------------------------
Class: SourceEffectRingModulationPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectRingModulationSettings Settings;//[Offset: 0xb0, Size: 0x20]
	void SetSettings(out const SourceEffectRingModulationSettings InSettings);// 0x24b758eb6041

--------------------------------
Class: SourceEffectRingModulationSettings
	enum ModulatorType;//[Offset: 0x0, Size: 0x1]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	float Depth;//[Offset: 0x8, Size: 0x4]
	float DryLevel;//[Offset: 0xc, Size: 0x4]
	float WetLevel;//[Offset: 0x10, Size: 0x4]
	AudioBus* AudioBusModulator;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: SourceEffectSimpleDelayPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectSimpleDelaySettings Settings;//[Offset: 0xa4, Size: 0x18]
	void SetSettings(out const SourceEffectSimpleDelaySettings InSettings);// 0x24b858eb6041

--------------------------------
Class: SourceEffectSimpleDelaySettings
	float SpeedOfSound;//[Offset: 0x0, Size: 0x4]
	float DelayAmount;//[Offset: 0x4, Size: 0x4]
	float DryAmount;//[Offset: 0x8, Size: 0x4]
	float WetAmount;//[Offset: 0xc, Size: 0x4]
	float Feedback;//[Offset: 0x10, Size: 0x4]
	bool bDelayBasedOnDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: SourceEffectStereoDelayPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectStereoDelaySettings Settings;//[Offset: 0xb0, Size: 0x24]
	void SetSettings(out const SourceEffectStereoDelaySettings InSettings);// 0x24b958eb6041

--------------------------------
Class: SourceEffectStereoDelaySettings
	enum DelayMode;//[Offset: 0x0, Size: 0x1]
	float DelayTimeMsec;//[Offset: 0x4, Size: 0x4]
	float Feedback;//[Offset: 0x8, Size: 0x4]
	float DelayRatio;//[Offset: 0xc, Size: 0x4]
	float WetLevel;//[Offset: 0x10, Size: 0x4]
	float DryLevel;//[Offset: 0x14, Size: 0x4]
	bool bFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	enum FilterType;//[Offset: 0x19, Size: 0x1]
	float FilterFrequency;//[Offset: 0x1c, Size: 0x4]
	float FilterQ;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SourceEffectWaveShaperPreset.SoundEffectSourcePreset.SoundEffectPreset.Object
	SourceEffectWaveShaperSettings Settings;//[Offset: 0x94, Size: 0x8]
	void SetSettings(out const SourceEffectWaveShaperSettings InSettings);// 0x24ba58eb6041

--------------------------------
Class: SourceEffectWaveShaperSettings
	float Amount;//[Offset: 0x0, Size: 0x4]
	float OutputGainDb;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AudioImpulseResponse.Object
	float[] ImpulseResponse;//[Offset: 0x28, Size: 0x10]
	int NumChannels;//[Offset: 0x38, Size: 0x4]
	int SampleRate;//[Offset: 0x3c, Size: 0x4]
	float NormalizationVolumeDb;//[Offset: 0x40, Size: 0x4]
	bool bTrueStereo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	float[] IRData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: SubmixEffectConvolutionReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	AudioImpulseResponse* ImpulseResponse;//[Offset: 0x68, Size: 0x8]
	SubmixEffectConvolutionReverbSettings Settings;//[Offset: 0x70, Size: 0x28]
	enum BlockSize;//[Offset: 0x98, Size: 0x1]
	bool bEnableHardwareAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 0x1]
	void SetSettings(out const SubmixEffectConvolutionReverbSettings InSettings);// 0x24bc58eb6041
	void SetImpulseResponse(AudioImpulseResponse* InImpulseResponse);// 0x24fd58eb6041

--------------------------------
Class: SubmixEffectConvolutionReverbSettings
	float NormalizationVolumeDb;//[Offset: 0x0, Size: 0x4]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bMixInputChannelFormatToImpulseResponseFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bMixReverbOutputToOutputChannelFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	float SurroundRearChannelBleedDb;//[Offset: 0x8, Size: 0x4]
	bool bInvertRearChannelBleedPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bSurroundRearChannelFlip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	float SurroundRearChannelBleedAmount;//[Offset: 0x10, Size: 0x4]
	AudioImpulseResponse* ImpulseResponse;//[Offset: 0x18, Size: 0x8]
	bool AllowHArdwareAcceleration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: SubmixEffectDelayStatics.BlueprintFunctionLibrary.Object
	SubmixEffectDelaySettings SetMaximumDelayLength(out SubmixEffectDelaySettings DelaySettings, float MaximumDelayLength);// 0x24bf58eb6041
	SubmixEffectDelaySettings SetInterpolationTime(out SubmixEffectDelaySettings DelaySettings, float InterpolationTime);// 0x24be58eb6041
	SubmixEffectDelaySettings SetDelayLength(out SubmixEffectDelaySettings DelaySettings, float DelayLength);// 0x24bd58eb6041

--------------------------------
Class: SubmixEffectDelaySettings
	float MaximumDelayLength;//[Offset: 0x0, Size: 0x4]
	float InterpolationTime;//[Offset: 0x4, Size: 0x4]
	float DelayLength;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SubmixEffectDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectDelaySettings Settings;//[Offset: 0x98, Size: 0xc]
	SubmixEffectDelaySettings DynamicSettings;//[Offset: 0xa4, Size: 0xc]
	void SetSettings(out const SubmixEffectDelaySettings InSettings);// 0x24c458eb6041
	void SetInterpolationTime(float Time);// 0x24c358eb6041
	void SetDelay(float Length);// 0x24c258eb6041
	void SetDefaultSettings(out const SubmixEffectDelaySettings InSettings);// 0x24c158eb6041
	float GetMaxDelayInMilliseconds();// 0x24c058eb6041

--------------------------------
Class: SubmixEffectFilterPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectFilterSettings Settings;//[Offset: 0x98, Size: 0xc]
	void SetSettings(out const SubmixEffectFilterSettings InSettings);// 0x24cb58eb6041
	void SetFilterType(enum InType);// 0x24ca58eb6041
	void SetFilterQMod(float InQ);// 0x24c958eb6041
	void SetFilterQ(float InQ);// 0x24c858eb6041
	void SetFilterCutoffFrequencyMod(float InFrequency);// 0x24c758eb6041
	void SetFilterCutoffFrequency(float InFrequency);// 0x24c658eb6041
	void SetFilterAlgorithm(enum InAlgorithm);// 0x24c558eb6041

--------------------------------
Class: SubmixEffectFilterSettings
	enum FilterType;//[Offset: 0x0, Size: 0x1]
	enum FilterAlgorithm;//[Offset: 0x1, Size: 0x1]
	float FilterFrequency;//[Offset: 0x4, Size: 0x4]
	float FilterQ;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SubmixEffectFlexiverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectFlexiverbSettings Settings;//[Offset: 0x9c, Size: 0x10]
	void SetSettings(out const SubmixEffectFlexiverbSettings InSettings);// 0x24cc58eb6041

--------------------------------
Class: SubmixEffectFlexiverbSettings
	float PreDelay;//[Offset: 0x0, Size: 0x4]
	float DecayTime;//[Offset: 0x4, Size: 0x4]
	float RoomDampening;//[Offset: 0x8, Size: 0x4]
	int Complexity;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SubmixEffectMultibandCompressorPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectMultibandCompressorSettings Settings;//[Offset: 0xc8, Size: 0x38]
	void SetSettings(out const SubmixEffectMultibandCompressorSettings InSettings);// 0x24d058eb6041
	void SetExternalSubmix(SoundSubmix* Submix);// 0x24cf58eb6041
	void SetAudioBus(AudioBus* AudioBus);// 0x24ce58eb6041
	void ResetKey();// 0x24cd58eb6041

--------------------------------
Class: SubmixEffectMultibandCompressorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1]
	enum PeakMode;//[Offset: 0x1, Size: 0x1]
	enum LinkMode;//[Offset: 0x2, Size: 0x1]
	float LookAheadMsec;//[Offset: 0x4, Size: 0x4]
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bFourPole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	enum KeySource;//[Offset: 0xb, Size: 0x1]
	AudioBus* ExternalAudioBus;//[Offset: 0x10, Size: 0x8]
	SoundSubmix* ExternalSubmix;//[Offset: 0x18, Size: 0x8]
	float KeyGainDb;//[Offset: 0x20, Size: 0x4]
	bool bKeyAudition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	DynamicsBandSettings[] Bands;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: DynamicsBandSettings
	float CrossoverTopFrequency;//[Offset: 0x0, Size: 0x4]
	float AttackTimeMsec;//[Offset: 0x4, Size: 0x4]
	float ReleaseTimeMsec;//[Offset: 0x8, Size: 0x4]
	float ThresholdDb;//[Offset: 0xc, Size: 0x4]
	float Ratio;//[Offset: 0x10, Size: 0x4]
	float KneeBandwidthDb;//[Offset: 0x14, Size: 0x4]
	float InputGainDb;//[Offset: 0x18, Size: 0x4]
	float OutputGainDb;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SubmixEffectStereoDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectStereoDelaySettings Settings;//[Offset: 0xb0, Size: 0x24]
	void SetSettings(out const SubmixEffectStereoDelaySettings InSettings);// 0x24d158eb6041

--------------------------------
Class: SubmixEffectStereoDelaySettings
	enum DelayMode;//[Offset: 0x0, Size: 0x1]
	float DelayTimeMsec;//[Offset: 0x4, Size: 0x4]
	float Feedback;//[Offset: 0x8, Size: 0x4]
	float DelayRatio;//[Offset: 0xc, Size: 0x4]
	float WetLevel;//[Offset: 0x10, Size: 0x4]
	float DryLevel;//[Offset: 0x14, Size: 0x4]
	bool bFilterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	enum FilterType;//[Offset: 0x19, Size: 0x1]
	float FilterFrequency;//[Offset: 0x1c, Size: 0x4]
	float FilterQ;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: SubmixEffectTapDelayPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectTapDelaySettings Settings;//[Offset: 0xa8, Size: 0x18]
	void SetTap(int TapId, out const TapDelayInfo TapInfo);// 0x24d958eb6041
	void SetSettings(out const SubmixEffectTapDelaySettings InSettings);// 0x24d858eb6041
	void SetInterpolationTime(float Time);// 0x24d758eb6041
	void RemoveTap(int TapId);// 0x24d658eb6041
	void GetTapIds(out int[] TapIds);// 0x24d558eb6041
	void GetTap(int TapId, out TapDelayInfo TapInfo);// 0x24d458eb6041
	float GetMaxDelayInMilliseconds();// 0x24d358eb6041
	void AddTap(out int TapId);// 0x24d258eb6041

--------------------------------
Class: SubmixEffectTapDelaySettings
	float MaximumDelayLength;//[Offset: 0x0, Size: 0x4]
	float InterpolationTime;//[Offset: 0x4, Size: 0x4]
	TapDelayInfo[] Taps;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: TapDelayInfo
	enum TapLineMode;//[Offset: 0x0, Size: 0x1]
	float DelayLength;//[Offset: 0x4, Size: 0x4]
	float Gain;//[Offset: 0x8, Size: 0x4]
	int OutputChannel;//[Offset: 0xc, Size: 0x4]
	float PanInDegrees;//[Offset: 0x10, Size: 0x4]
	int TapId;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: Synth2DSlider.Widget.Visual.Object
	float ValueX;//[Offset: 0x128, Size: 0x4]
	float ValueY;//[Offset: 0x12c, Size: 0x4]
	delegate ValueXDelegate;//[Offset: 0x130, Size: 0x10]
	delegate ValueYDelegate;//[Offset: 0x140, Size: 0x10]
	Synth2DSliderStyle WidgetStyle;//[Offset: 0x150, Size: 0x3e0]
	LinearColor SliderHandleColor;//[Offset: 0x530, Size: 0x10]
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 0x1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x541, Size: 0x1]
	float StepSize;//[Offset: 0x544, Size: 0x4]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 0x1]
	delegate OnMouseCaptureBegin;//[Offset: 0x550, Size: 0x10]
	delegate OnMouseCaptureEnd;//[Offset: 0x560, Size: 0x10]
	delegate OnControllerCaptureBegin;//[Offset: 0x570, Size: 0x10]
	delegate OnControllerCaptureEnd;//[Offset: 0x580, Size: 0x10]
	delegate OnValueChangedX;//[Offset: 0x590, Size: 0x10]
	delegate OnValueChangedY;//[Offset: 0x5a0, Size: 0x10]
	void SetValue(Vector2D InValue);// 0x24df58eb6041
	void SetStepSize(float InValue);// 0x24de58eb6041
	void SetSliderHandleColor(LinearColor InValue);// 0x24dd58eb6041
	void SetLocked(bool InValue);// 0x251958eb6041
	void SetIndentHandle(bool InValue);// 0x24db58eb6041
	Vector2D GetValue();// 0x24da58eb6041

--------------------------------
Class: Synth2DSliderStyle.SlateWidgetStyle
	SlateBrush NormalThumbImage;//[Offset: 0x10, Size: 0xc0]
	SlateBrush DisabledThumbImage;//[Offset: 0xd0, Size: 0xc0]
	SlateBrush NormalBarImage;//[Offset: 0x190, Size: 0xc0]
	SlateBrush DisabledBarImage;//[Offset: 0x250, Size: 0xc0]
	SlateBrush BackgroundImage;//[Offset: 0x310, Size: 0xc0]
	float BarThickness;//[Offset: 0x3d0, Size: 0x4]

--------------------------------
Class: GranularSynth.SynthComponent.SceneComponent.ActorComponent.Object
	SoundWave* GranulatedSoundWave;//[Offset: 0x7a0, Size: 0x8]
	void SetSustainGain(const float SustainGain);// 0x24f358eb6041
	void SetSoundWave(SoundWave* InSoundWave);// 0x24f258eb6041
	void SetScrubMode(const bool bScrubMode);// 0x24f158eb6041
	void SetReleaseTimeMsec(const float ReleaseTimeMsec);// 0x24f058eb6041
	void SetPlayheadTime(const float InPositionSec, const float LerpTimeSec, enum SeekType);// 0x24ef58eb6041
	void SetPlaybackSpeed(const float InPlayheadRate);// 0x24ee58eb6041
	void SetGrainVolume(const float BaseVolume, const Vector2D VolumeRange);// 0x24ed58eb6041
	void SetGrainsPerSecond(const float InGrainsPerSecond);// 0x24ec58eb6041
	void SetGrainProbability(const float InGrainProbability);// 0x24eb58eb6041
	void SetGrainPitch(const float BasePitch, const Vector2D PitchRange);// 0x24ea58eb6041
	void SetGrainPan(const float BasePan, const Vector2D PanRange);// 0x24e958eb6041
	void SetGrainEnvelopeType(const enum EnvelopeType);// 0x24e858eb6041
	void SetGrainDuration(const float BaseDurationMsec, const Vector2D DurationRange);// 0x24e758eb6041
	void SetDecayTime(const float DecayTimeMsec);// 0x24e658eb6041
	void SetAttackTime(const float AttackTimeMsec);// 0x24e558eb6041
	void NoteOn(const float Note, const int Velocity, const float Duration);// 0x24e458eb6041
	void NoteOff(const float Note, const bool bKill);// 0x24e358eb6041
	bool IsLoaded();// 0x24e258eb6041
	float GetSampleDuration();// 0x24e158eb6041
	float GetCurrentPlayheadTime();// 0x24e058eb6041

--------------------------------
Class: MonoWaveTableSynthPreset.Object
	FString PresetName;//[Offset: 0x28, Size: 0x10]
	bool bLockKeyframesToGridBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	int LockKeyframesToGrid;//[Offset: 0x3c, Size: 0x4]
	int WaveTableResolution;//[Offset: 0x40, Size: 0x4]
	RuntimeFloatCurve[] WaveTable;//[Offset: 0x48, Size: 0x10]
	bool bNormalizeWaveTables;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]

--------------------------------
Class: SynthComponentMonoWaveTable.SynthComponent.SceneComponent.ActorComponent.Object
	delegate OnTableAltered;//[Offset: 0x7a0, Size: 0x10]
	delegate OnNumTablesChanged;//[Offset: 0x7b0, Size: 0x10]
	MonoWaveTableSynthPreset* CurrentPreset;//[Offset: 0x7c0, Size: 0x8]
	void SetWaveTablePosition(float InPosition);// 0x251f58eb6041
	void SetSustainPedalState(bool InSustainPedalState);// 0x251e58eb6041
	void SetPosLfoType(const enum InLfoType);// 0x251d58eb6041
	void SetPosLfoFrequency(const float InLfoFrequency);// 0x251c58eb6041
	void SetPosLfoDepth(const float InLfoDepth);// 0x251b58eb6041
	void SetPositionEnvelopeSustainGain(const float InSustainGain);// 0x251a58eb6041
	void SetPositionEnvelopeReleaseTime(const float InReleaseTimeMsec);// 0x255b58eb6041
	void SetPositionEnvelopeInvert(const bool bInInvert);// 0x251858eb6041
	void SetPositionEnvelopeDepth(const float InDepth);// 0x251758eb6041
	void SetPositionEnvelopeDecayTime(const float InDecayTimeMsec);// 0x251658eb6041
	void SetPositionEnvelopeBiasInvert(const bool bInBiasInvert);// 0x251558eb6041
	void SetPositionEnvelopeBiasDepth(const float InDepth);// 0x251458eb6041
	void SetPositionEnvelopeAttackTime(const float InAttackTimeMsec);// 0x251358eb6041
	void SetLowPassFilterResonance(float InNewQ);// 0x251258eb6041
	void SetFrequencyWithMidiNote(const float InMidiNote);// 0x251158eb6041
	void SetFrequencyPitchBend(const float FrequencyOffsetCents);// 0x251058eb6041
	void SetFrequency(const float FrequencyHz);// 0x250f58eb6041
	void SetFilterEnvelopeSustainGain(const float InSustainGain);// 0x250e58eb6041
	void SetFilterEnvelopeReleaseTime(const float InReleaseTimeMsec);// 0x250d58eb6041
	void SetFilterEnvelopenDecayTime(const float InDecayTimeMsec);// 0x250c58eb6041
	void SetFilterEnvelopeInvert(const bool bInInvert);// 0x250b58eb6041
	void SetFilterEnvelopeDepth(const float InDepth);// 0x250a58eb6041
	void SetFilterEnvelopeBiasInvert(const bool bInBiasInvert);// 0x250958eb6041
	void SetFilterEnvelopeBiasDepth(const float InDepth);// 0x250858eb6041
	void SetFilterEnvelopeAttackTime(const float InAttackTimeMsec);// 0x250758eb6041
	bool SetCurveValue(int TableIndex, int KeyframeIndex, const float NewValue);// 0x250658eb6041
	bool SetCurveTangent(int TableIndex, float InNewTangent);// 0x250558eb6041
	bool SetCurveInterpolationType(enum InterpolationType, int TableIndex);// 0x250458eb6041
	void SetAmpEnvelopeSustainGain(const float InSustainGain);// 0x250358eb6041
	void SetAmpEnvelopeReleaseTime(const float InReleaseTimeMsec);// 0x250258eb6041
	void SetAmpEnvelopeInvert(const bool bInInvert);// 0x250158eb6041
	void SetAmpEnvelopeDepth(const float InDepth);// 0x250058eb6041
	void SetAmpEnvelopeDecayTime(const float InDecayTimeMsec);// 0x24ff58eb6041
	void SetAmpEnvelopeBiasInvert(const bool bInBiasInvert);// 0x24fe58eb6041
	void SetAmpEnvelopeBiasDepth(const float InDepth);// 0xffffff8158eb6000
	void SetAmpEnvelopeAttackTime(const float InAttackTimeMsec);// 0x24fc58eb6041
	void RefreshWaveTable(int Index);// 0x24fb58eb6041
	void RefreshAllWaveTables();// 0x24fa58eb6041
	void NoteOn(const float InMidiNote, const float InVelocity);// 0x24f958eb6041
	void NoteOff(const float InMidiNote);// 0x24f858eb6041
	int GetNumTableEntries();// 0x24f758eb6041
	int GetMaxTableIndex();// 0x24f658eb6041
	float[] GetKeyFrameValuesForTable(float TableIndex);// 0x24f558eb6041
	float GetCurveTangent(int TableIndex);// 0x24f458eb6041

--------------------------------
Class: SynthComponentToneGenerator.SynthComponent.SceneComponent.ActorComponent.Object
	float Frequency;//[Offset: 0x7a0, Size: 0x4]
	float Volume;//[Offset: 0x7a4, Size: 0x4]
	RuntimeFloatCurve DistanceAttenuationCurve;//[Offset: 0x7a8, Size: 0x88]
	Vector2D DistanceRange;//[Offset: 0x830, Size: 0x10]
	float AttenuationDbAtMaxRange;//[Offset: 0x840, Size: 0x4]
	void SetVolume(float InVolume);// 0x252158eb6041
	void SetFrequency(float InFrequency);// 0x252058eb6041

--------------------------------
Class: SynthSamplePlayer.SynthComponent.SceneComponent.ActorComponent.Object
	SoundWave* SoundWave;//[Offset: 0x7a0, Size: 0x8]
	delegate OnSampleLoaded;//[Offset: 0x7a8, Size: 0x10]
	delegate OnSamplePlaybackProgress;//[Offset: 0x7b8, Size: 0x10]
	void SetSoundWave(SoundWave* InSoundWave);// 0x252a58eb6041
	void SetScrubTimeWidth(float InScrubTimeWidthSec);// 0x252958eb6041
	void SetScrubMode(bool bScrubMode);// 0x252858eb6041
	void SetPitch(float InPitch, float TimeSec);// 0x252758eb6041
	void SeekToTime(float TimeSec, enum SeekType, bool bWrap);// 0x252658eb6041
	bool IsLoaded();// 0x252558eb6041
	float GetSampleDuration();// 0x252458eb6041
	float GetCurrentPlaybackProgressTime();// 0x252358eb6041
	float GetCurrentPlaybackProgressPercent();// 0x252258eb6041

--------------------------------
Class: SynthesisUtilitiesBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	float GetLogFrequency(float InLinearValue, float InDomainMin, float InDomainMax, float InRangeMin, float InRangeMax);// 0x252c58eb6041
	float GetLinearFrequency(float InLogFrequencyValue, float InDomainMin, float InDomainMax, float InRangeMin, float InRangeMax);// 0x252b58eb6041

--------------------------------
Class: SynthKnob.Widget.Visual.Object
	float Value;//[Offset: 0x128, Size: 0x4]
	float StepSize;//[Offset: 0x12c, Size: 0x4]
	float MouseSpeed;//[Offset: 0x130, Size: 0x4]
	float MouseFineTuneSpeed;//[Offset: 0x134, Size: 0x4]
	bool ShowTooltipInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138, Size: 0x1]
	FText ParameterName;//[Offset: 0x140, Size: 0x18]
	FText ParameterUnits;//[Offset: 0x158, Size: 0x18]
	delegate ValueDelegate;//[Offset: 0x170, Size: 0x10]
	SynthKnobStyle WidgetStyle;//[Offset: 0x180, Size: 0x320]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a1, Size: 0x1]
	delegate OnMouseCaptureBegin;//[Offset: 0x4a8, Size: 0x10]
	delegate OnMouseCaptureEnd;//[Offset: 0x4b8, Size: 0x10]
	delegate OnControllerCaptureBegin;//[Offset: 0x4c8, Size: 0x10]
	delegate OnControllerCaptureEnd;//[Offset: 0x4d8, Size: 0x10]
	delegate OnValueChanged;//[Offset: 0x4e8, Size: 0x10]
	void SetValue(float InValue);// 0x253058eb6041
	void SetStepSize(float InValue);// 0x252f58eb6041
	void SetLocked(bool InValue);// 0x252e58eb6041
	float GetValue();// 0x252d58eb6041

--------------------------------
Class: SynthKnobStyle.SlateWidgetStyle
	SlateBrush LargeKnob;//[Offset: 0x10, Size: 0xc0]
	SlateBrush LargeKnobOverlay;//[Offset: 0xd0, Size: 0xc0]
	SlateBrush MediumKnob;//[Offset: 0x190, Size: 0xc0]
	SlateBrush MediumKnobOverlay;//[Offset: 0x250, Size: 0xc0]
	float MinValueAngle;//[Offset: 0x310, Size: 0x4]
	float MaxValueAngle;//[Offset: 0x314, Size: 0x4]
	enum KnobSize;//[Offset: 0x318, Size: 0x1]

--------------------------------
Class: AudioAnalyzerAssetBase.Object

--------------------------------
Class: AudioAnalyzerSettings.AudioAnalyzerAssetBase.Object

--------------------------------
Class: AudioSynesthesiaSettings.AudioAnalyzerSettings.AudioAnalyzerAssetBase.Object

--------------------------------
Class: AudioAnalyzerNRTSettings.AudioAnalyzerAssetBase.Object

--------------------------------
Class: AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAssetBase.Object

--------------------------------
Class: AudioAnalyzerNRT.AudioAnalyzerAssetBase.Object
	SoundWave* Sound;//[Offset: 0x28, Size: 0x8]
	float DurationInSeconds;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAssetBase.Object

--------------------------------
Class: ConstantQNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAssetBase.Object
	float StartingFrequency;//[Offset: 0x28, Size: 0x4]
	int NumBands;//[Offset: 0x2c, Size: 0x4]
	float NumBandsPerOctave;//[Offset: 0x30, Size: 0x4]
	float AnalysisPeriod;//[Offset: 0x34, Size: 0x4]
	bool bDownmixToMono;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	enum FFTSize;//[Offset: 0x39, Size: 0x1]
	enum WindowType;//[Offset: 0x3a, Size: 0x1]
	enum SpectrumType;//[Offset: 0x3b, Size: 0x1]
	float BandWidthStretch;//[Offset: 0x3c, Size: 0x4]
	enum CQTNormalization;//[Offset: 0x40, Size: 0x1]
	float NoiseFloorDb;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: ConstantQNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAssetBase.Object
	ConstantQNRTSettings* Settings;//[Offset: 0x78, Size: 0x8]
	void GetNormalizedChannelConstantQAtTime(const float InSeconds, const int InChannel, out float[] OutConstantQ);// 0x253258eb6041
	void GetChannelConstantQAtTime(const float InSeconds, const int InChannel, out float[] OutConstantQ);// 0x253158eb6041

--------------------------------
Class: LoudnessSettings.AudioSynesthesiaSettings.AudioAnalyzerSettings.AudioAnalyzerAssetBase.Object
	float AnalysisPeriod;//[Offset: 0x28, Size: 0x4]
	float MinimumFrequency;//[Offset: 0x2c, Size: 0x4]
	float MaximumFrequency;//[Offset: 0x30, Size: 0x4]
	enum CurveType;//[Offset: 0x34, Size: 0x1]
	float NoiseFloorDb;//[Offset: 0x38, Size: 0x4]
	float ExpectedMaxLoudness;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: AudioAnalyzer.Object
	AudioBus* AudioBus;//[Offset: 0x28, Size: 0x8]
	AudioAnalyzerSubsystem* AudioAnalyzerSubsystem;//[Offset: 0x38, Size: 0x8]
	void StopAnalyzing(const Object* WorldContextObject);// 0x253458eb6041
	void StartAnalyzing(const Object* WorldContextObject, AudioBus* AudioBusToAnalyze);// 0x253358eb6041

--------------------------------
Class: AudioAnalyzerSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	AudioAnalyzer*[] AudioAnalyzers;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: LoudnessAnalyzer.AudioAnalyzer.Object
	LoudnessSettings* Settings;//[Offset: 0x90, Size: 0x8]
	delegate OnOverallLoudnessResults;//[Offset: 0x98, Size: 0x10]
	delegate OnPerChannelLoudnessResults;//[Offset: 0xa8, Size: 0x10]
	delegate OnLatestOverallLoudnessResults;//[Offset: 0xb8, Size: 0x10]
	delegate OnLatestPerChannelLoudnessResults;//[Offset: 0xc8, Size: 0x10]

--------------------------------
Class: LoudnessNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAssetBase.Object
	float AnalysisPeriod;//[Offset: 0x28, Size: 0x4]
	float MinimumFrequency;//[Offset: 0x2c, Size: 0x4]
	float MaximumFrequency;//[Offset: 0x30, Size: 0x4]
	enum CurveType;//[Offset: 0x34, Size: 0x1]
	float NoiseFloorDb;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: LoudnessNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAssetBase.Object
	LoudnessNRTSettings* Settings;//[Offset: 0x78, Size: 0x8]
	void GetNormalizedLoudnessAtTime(const float InSeconds, out float OutLoudness);// 0x253858eb6041
	void GetNormalizedChannelLoudnessAtTime(const float InSeconds, const int InChannel, out float OutLoudness);// 0x253758eb6041
	void GetLoudnessAtTime(const float InSeconds, out float OutLoudness);// 0x253658eb6041
	void GetChannelLoudnessAtTime(const float InSeconds, const int InChannel, out float OutLoudness);// 0x253558eb6041

--------------------------------
Class: MeterSettings.AudioSynesthesiaSettings.AudioAnalyzerSettings.AudioAnalyzerAssetBase.Object
	float AnalysisPeriod;//[Offset: 0x28, Size: 0x4]
	enum PeakMode;//[Offset: 0x2c, Size: 0x1]
	int MeterAttackTime;//[Offset: 0x30, Size: 0x4]
	int MeterReleaseTime;//[Offset: 0x34, Size: 0x4]
	int PeakHoldTime;//[Offset: 0x38, Size: 0x4]
	float ClippingThreshold;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: MeterAnalyzer.AudioAnalyzer.Object
	MeterSettings* Settings;//[Offset: 0x90, Size: 0x8]
	delegate OnOverallMeterResults;//[Offset: 0x98, Size: 0x10]
	delegate OnPerChannelMeterResults;//[Offset: 0xc0, Size: 0x10]
	delegate OnLatestOverallMeterResults;//[Offset: 0xe8, Size: 0x10]
	delegate OnLatestPerChannelMeterResults;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: OnsetNRTSettings.AudioSynesthesiaNRTSettings.AudioAnalyzerNRTSettings.AudioAnalyzerAssetBase.Object
	bool bDownmixToMono;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	float GranularityInSeconds;//[Offset: 0x2c, Size: 0x4]
	float Sensitivity;//[Offset: 0x30, Size: 0x4]
	float MinimumFrequency;//[Offset: 0x34, Size: 0x4]
	float MaximumFrequency;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: OnsetNRT.AudioSynesthesiaNRT.AudioAnalyzerNRT.AudioAnalyzerAssetBase.Object
	OnsetNRTSettings* Settings;//[Offset: 0x78, Size: 0x8]
	void GetNormalizedChannelOnsetsBetweenTimes(const float InStartSeconds, const float InEndSeconds, const int InChannel, out float[] OutOnsetTimestamps, out float[] OutOnsetStrengths);// 0x257c58eb6041
	void GetChannelOnsetsBetweenTimes(const float InStartSeconds, const float InEndSeconds, const int InChannel, out float[] OutOnsetTimestamps, out float[] OutOnsetStrengths);// 0x253958eb6041

--------------------------------
Class: InputCoreTypes.Object

--------------------------------
Class: FontBulkData.Object

--------------------------------
Class: FontFaceInterface.Interface.Object

--------------------------------
Class: FontProviderInterface.Interface.Object

--------------------------------
Class: SlateTypes.Object

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: SlateWidgetStyleContainerInterface.Interface.Object

--------------------------------
Class: ButtonWidgetStyle.SlateWidgetStyleContainerBase.Object
	ButtonStyle ButtonStyle;//[Offset: 0x30, Size: 0x3b0]

--------------------------------
Class: CheckBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x30, Size: 0xa10]

--------------------------------
Class: ComboBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	ComboBoxStyle ComboBoxStyle;//[Offset: 0x30, Size: 0x600]

--------------------------------
Class: ComboBoxStyle.SlateWidgetStyle
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x10, Size: 0x5a0]
	SlateSound PressedSlateSound;//[Offset: 0x5b0, Size: 0x18]
	SlateSound SelectionChangeSlateSound;//[Offset: 0x5c8, Size: 0x18]
	Margin ContentPadding;//[Offset: 0x5e0, Size: 0x10]
	Margin MenuRowPadding;//[Offset: 0x5f0, Size: 0x10]

--------------------------------
Class: ComboButtonStyle.SlateWidgetStyle
	ButtonStyle ButtonStyle;//[Offset: 0x10, Size: 0x3b0]
	SlateBrush DownArrowImage;//[Offset: 0x3c0, Size: 0xc0]
	Vector2D ShadowOffset;//[Offset: 0x480, Size: 0x10]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x490, Size: 0x10]
	SlateBrush MenuBorderBrush;//[Offset: 0x4a0, Size: 0xc0]
	Margin MenuBorderPadding;//[Offset: 0x560, Size: 0x10]
	Margin ContentPadding;//[Offset: 0x570, Size: 0x10]
	Margin DownArrowPadding;//[Offset: 0x580, Size: 0x10]
	byte DownArrowAlign;//[Offset: 0x590, Size: 0x1]

--------------------------------
Class: ComboButtonWidgetStyle.SlateWidgetStyleContainerBase.Object
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x30, Size: 0x5a0]

--------------------------------
Class: EditableTextBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextBoxStyle EditableTextBoxStyle;//[Offset: 0x30, Size: 0xad0]

--------------------------------
Class: EditableTextBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundImageNormal;//[Offset: 0x10, Size: 0xc0]
	SlateBrush BackgroundImageHovered;//[Offset: 0xd0, Size: 0xc0]
	SlateBrush BackgroundImageFocused;//[Offset: 0x190, Size: 0xc0]
	SlateBrush BackgroundImageReadOnly;//[Offset: 0x250, Size: 0xc0]
	Margin Padding;//[Offset: 0x310, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x320, Size: 0x58]
	SlateColor ForegroundColor;//[Offset: 0x378, Size: 0x14]
	SlateColor BackgroundColor;//[Offset: 0x38c, Size: 0x14]
	SlateColor ReadOnlyForegroundColor;//[Offset: 0x3a0, Size: 0x14]
	SlateColor FocusedForegroundColor;//[Offset: 0x3b4, Size: 0x14]
	Margin HScrollBarPadding;//[Offset: 0x3c8, Size: 0x10]
	Margin VScrollBarPadding;//[Offset: 0x3d8, Size: 0x10]
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x3f0, Size: 0x6e0]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 0x8]
	Object* FontMaterial;//[Offset: 0x8, Size: 0x8]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 0x20]
	FName TypefaceFontName;//[Offset: 0x40, Size: 0x8]
	int Size;//[Offset: 0x48, Size: 0x4]
	int LetterSpacing;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 0x4]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 0x8]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x10, Size: 0xc0]
	SlateBrush VerticalBackgroundImage;//[Offset: 0xd0, Size: 0xc0]
	SlateBrush VerticalTopSlotImage;//[Offset: 0x190, Size: 0xc0]
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x250, Size: 0xc0]
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x310, Size: 0xc0]
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x3d0, Size: 0xc0]
	SlateBrush NormalThumbImage;//[Offset: 0x490, Size: 0xc0]
	SlateBrush HoveredThumbImage;//[Offset: 0x550, Size: 0xc0]
	SlateBrush DraggedThumbImage;//[Offset: 0x610, Size: 0xc0]
	float Thickness;//[Offset: 0x6d0, Size: 0x4]

--------------------------------
Class: EditableTextWidgetStyle.SlateWidgetStyleContainerBase.Object
	EditableTextStyle EditableTextStyle;//[Offset: 0x30, Size: 0x2c0]

--------------------------------
Class: EditableTextStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58]
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x14]
	SlateBrush BackgroundImageSelected;//[Offset: 0x80, Size: 0xc0]
	SlateBrush BackgroundImageComposing;//[Offset: 0x140, Size: 0xc0]
	SlateBrush CaretImage;//[Offset: 0x200, Size: 0xc0]

--------------------------------
Class: ProgressWidgetStyle.SlateWidgetStyleContainerBase.Object
	ProgressBarStyle ProgressBarStyle;//[Offset: 0x30, Size: 0x260]

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x10, Size: 0xc0]
	SlateBrush FillImage;//[Offset: 0xd0, Size: 0xc0]
	SlateBrush MarqueeImage;//[Offset: 0x190, Size: 0xc0]
	bool EnableFillAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 0x1]

--------------------------------
Class: ScrollBarWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x30, Size: 0x6e0]

--------------------------------
Class: ScrollBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	ScrollBoxStyle ScrollBoxStyle;//[Offset: 0x30, Size: 0x310]

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	float BarThickness;//[Offset: 0x8, Size: 0x4]
	SlateBrush TopShadowBrush;//[Offset: 0x10, Size: 0xc0]
	SlateBrush BottomShadowBrush;//[Offset: 0xd0, Size: 0xc0]
	SlateBrush LeftShadowBrush;//[Offset: 0x190, Size: 0xc0]
	SlateBrush RightShadowBrush;//[Offset: 0x250, Size: 0xc0]

--------------------------------
Class: SlateSettings.Object
	bool bExplicitCanvasChildZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: SpinBoxWidgetStyle.SlateWidgetStyleContainerBase.Object
	SpinBoxStyle SpinBoxStyle;//[Offset: 0x30, Size: 0x590]

--------------------------------
Class: SpinBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundBrush;//[Offset: 0x10, Size: 0xc0]
	SlateBrush ActiveBackgroundBrush;//[Offset: 0xd0, Size: 0xc0]
	SlateBrush HoveredBackgroundBrush;//[Offset: 0x190, Size: 0xc0]
	SlateBrush ActiveFillBrush;//[Offset: 0x250, Size: 0xc0]
	SlateBrush HoveredFillBrush;//[Offset: 0x310, Size: 0xc0]
	SlateBrush InactiveFillBrush;//[Offset: 0x3d0, Size: 0xc0]
	SlateBrush ArrowsImage;//[Offset: 0x490, Size: 0xc0]
	SlateColor ForegroundColor;//[Offset: 0x550, Size: 0x14]
	Margin TextPadding;//[Offset: 0x564, Size: 0x10]
	Margin InsetPadding;//[Offset: 0x574, Size: 0x10]

--------------------------------
Class: TextBlockWidgetStyle.SlateWidgetStyleContainerBase.Object
	TextBlockStyle TextBlockStyle;//[Offset: 0x30, Size: 0x310]

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 0x58]
	SlateColor ColorAndOpacity;//[Offset: 0x60, Size: 0x14]
	Vector2D ShadowOffset;//[Offset: 0x78, Size: 0x10]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x88, Size: 0x10]
	SlateColor SelectedBackgroundColor;//[Offset: 0x98, Size: 0x14]
	SlateColor HighlightColor;//[Offset: 0xac, Size: 0x14]
	SlateBrush HighlightShape;//[Offset: 0xc0, Size: 0xc0]
	SlateBrush StrikeBrush;//[Offset: 0x180, Size: 0xc0]
	SlateBrush UnderlineBrush;//[Offset: 0x240, Size: 0xc0]
	enum TransformPolicy;//[Offset: 0x300, Size: 0x1]
	enum OverflowPolicy;//[Offset: 0x301, Size: 0x1]

--------------------------------
Class: ToolMenuBase.Object

--------------------------------
Class: ImageWriteBlueprintLibrary.BlueprintFunctionLibrary.Object
	void ExportToDisk(Texture* Texture, FString Filename, out const ImageWriteOptions Options);// 0x253b58eb6041

--------------------------------
Class: ImageWriteOptions
	enum Format;//[Offset: 0x0, Size: 0x1]
	delegate OnComplete;//[Offset: 0x4, Size: 0x10]
	int CompressionQuality;//[Offset: 0x14, Size: 0x4]
	bool bOverwriteFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]
	bool bAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 0x1]

--------------------------------
Class: GameNetworkManagerSettings.Object
	int MinDynamicBandwidth;//[Offset: 0x28, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x2c, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x30, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x34, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x3c, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x40, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x44, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x48, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x4c, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: GameSessionSettings.Object
	int MaxSpectators;//[Offset: 0x28, Size: 0x4]
	int MaxPlayers;//[Offset: 0x2c, Size: 0x4]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: GeneralEngineSettings.Object

--------------------------------
Class: GeneralProjectSettings.Object
	FString CompanyName;//[Offset: 0x28, Size: 0x10]
	FString CompanyDistinguishedName;//[Offset: 0x38, Size: 0x10]
	FString CopyrightNotice;//[Offset: 0x48, Size: 0x10]
	FString Description;//[Offset: 0x58, Size: 0x10]
	FString Homepage;//[Offset: 0x68, Size: 0x10]
	FString LicensingTerms;//[Offset: 0x78, Size: 0x10]
	FString PrivacyPolicy;//[Offset: 0x88, Size: 0x10]
	Guid ProjectID;//[Offset: 0x98, Size: 0x10]
	FString ProjectName;//[Offset: 0xa8, Size: 0x10]
	FString ProjectVersion;//[Offset: 0xb8, Size: 0x10]
	FString SupportContact;//[Offset: 0xc8, Size: 0x10]
	FText ProjectDisplayedTitle;//[Offset: 0xd8, Size: 0x18]
	FText ProjectDebugTitleInfo;//[Offset: 0xf0, Size: 0x18]
	bool bShouldWindowPreserveAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	bool bUseBorderlessWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1]
	bool bStartInVR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a, Size: 0x1]
	bool bAllowWindowResize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b, Size: 0x1]
	bool bAllowClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]
	bool bAllowMaximize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 0x1]
	bool bAllowMinimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 0x1]

--------------------------------
Class: HudSettings.Object
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	FName[] DebugDisplay;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: DeveloperSettingsBackedByCVars.DeveloperSettings.Object

--------------------------------
Class: PlatformSettings.Object

--------------------------------
Class: PlatformSettingsManager.Object
	<class PlatformSettings,PlatformSettingsInstances> SettingsMap;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: PlatformSettingsInstances
	PlatformSettings* PlatformInstance;//[Offset: 0x0, Size: 0x8]
	<FName,PlatformSettings*> OtherPlatforms;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: MeshReconstructorBase.Object
	void StopReconstruction();// 0x254558eb6041
	void StartReconstruction();// 0x254458eb6041
	void PauseReconstruction();// 0x254358eb6041
	bool IsReconstructionStarted();// 0x254258eb6041
	bool IsReconstructionPaused();// 0x254158eb6041
	void DisconnectMRMesh();// 0x254058eb6041
	void ConnectMRMesh(MRMeshComponent* Mesh);// 0x253f58eb6041

--------------------------------
Class: MRMeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* Material;//[Offset: 0x540, Size: 0x8]
	MaterialInterface* WireframeMaterial;//[Offset: 0x548, Size: 0x8]
	bool bCreateMeshProxySections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	bool bUpdateNavMeshOnMeshUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 0x1]
	bool bNeverCreateCollisionMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x553, Size: 0x1]
	MRMeshBodyHolder*[] BodyHolders;//[Offset: 0x598, Size: 0x10]
	void SetWireframeMaterial(MaterialInterface* InMaterial);// 0x255058eb6041
	void SetWireframeColor(out const LinearColor InColor);// 0x254f58eb6041
	void SetUseWireframe(bool bUseWireframe);// 0x254e58eb6041
	void SetEnableMeshOcclusion(bool bEnable);// 0x254d58eb6041
	void RequestNavMeshUpdate();// 0x254c58eb6041
	bool IsConnected();// 0x254b58eb6041
	LinearColor GetWireframeColor();// 0x254a58eb6041
	bool GetUseWireframe();// 0x254958eb6041
	bool GetEnableMeshOcclusion();// 0x254858eb6041
	void ForceNavMeshUpdate();// 0x254758eb6041
	void Clear();// 0x254658eb6041

--------------------------------
Class: MRMeshBodyHolder.Object
	BodySetup* BodySetup;//[Offset: 0x30, Size: 0x8]
	BodyInstance BodyInstance;//[Offset: 0x38, Size: 0x188]

--------------------------------
Class: MockDataMeshTrackerComponent.SceneComponent.ActorComponent.Object
	delegate OnMeshTrackerUpdated;//[Offset: 0x2b0, Size: 0x10]
	bool ScanWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	bool RequestNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1]
	bool RequestVertexConfidence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c2, Size: 0x1]
	enum VertexColorMode;//[Offset: 0x2c3, Size: 0x1]
	Color[] BlockVertexColors;//[Offset: 0x2c8, Size: 0x10]
	LinearColor VertexColorFromConfidenceZero;//[Offset: 0x2d8, Size: 0x10]
	LinearColor VertexColorFromConfidenceOne;//[Offset: 0x2e8, Size: 0x10]
	float UpdateInterval;//[Offset: 0x2f8, Size: 0x4]
	MRMeshComponent* MRMesh;//[Offset: 0x300, Size: 0x8]
	void OnMockDataMeshTrackerUpdated__DelegateSignature(int Index, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const float[] Confidence);// 0xeb158eb6041
	void DisconnectMRMesh(MRMeshComponent* InMRMeshPtr);// 0xeb058eb6041
	void ConnectMRMesh(MRMeshComponent* InMRMeshPtr);// 0xeae58eb6041

--------------------------------
Class: ARActor.Actor.Object
	ARComponent* AddARComponent(class ARComponent InComponentClass, out const Guid NativeID);// 0x255158eb6041

--------------------------------
Class: ARComponent.SceneComponent.ActorComponent.Object
	Guid NativeID;//[Offset: 0x2b0, Size: 0x10]
	bool bUseDefaultReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x2f8, Size: 0x8]
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x300, Size: 0x8]
	MRMeshComponent* MRMeshComponent;//[Offset: 0x308, Size: 0x8]
	ARTrackedGeometry* MyTrackedGeometry;//[Offset: 0x310, Size: 0x8]
	void UpdateVisualization();// 0x259b58eb6041
	void SetNativeID(Guid NativeID);// 0x259a58eb6041
	void ReceiveRemove();// 0x259958eb6041
	void OnRep_Payload();// 0x259858eb6041
	MRMeshComponent* GetMRMesh();// 0x259758eb6041

--------------------------------
Class: ARTrackedGeometry.Object
	Guid UniqueId;//[Offset: 0x28, Size: 0x10]
	Transform LocalToTrackingTransform;//[Offset: 0x40, Size: 0x60]
	Transform LocalToAlignedTrackingTransform;//[Offset: 0xa0, Size: 0x60]
	enum TrackingState;//[Offset: 0x100, Size: 0x1]
	MRMeshComponent* UnderlyingMesh;//[Offset: 0x110, Size: 0x8]
	enum ObjectClassification;//[Offset: 0x118, Size: 0x1]
	enum SpatialMeshUsageFlags;//[Offset: 0x119, Size: 0x1]
	int LastUpdateFrameNumber;//[Offset: 0x130, Size: 0x4]
	FName DebugName;//[Offset: 0x140, Size: 0x8]
	bool IsTracked();// 0x26f358eb6041
	bool HasSpatialMeshUsageFlag(const enum InFlag);// 0x26f258eb6041
	MRMeshComponent* GetUnderlyingMesh();// 0x26f158eb6041
	enum GetTrackingState();// 0x26f058eb6041
	enum GetObjectClassification();// 0x26ef58eb6041
	FString GetName();// 0x26ee58eb6041
	Transform GetLocalToWorldTransform();// 0x26ed58eb6041
	Transform GetLocalToTrackingTransform();// 0x26ec58eb6041
	float GetLastUpdateTimestamp();// 0x26eb58eb6041
	int GetLastUpdateFrameNumber();// 0x26ea58eb6041
	FName GetDebugName();// 0x26e958eb6041

--------------------------------
Class: ARBlueprintLibrary.BlueprintFunctionLibrary.Object
	void UnpinComponent(SceneComponent* ComponentToUnpin);// 0x258e58eb6041
	bool ToggleARCapture(const bool bOnOff, const enum CaptureType);// 0x258d58eb6041
	void StopARSession();// 0x258c58eb6041
	void StartARSession(ARSessionConfig* SessionConfig);// 0x258b58eb6041
	void SetEnabledXRCamera(bool bOnOff);// 0x258a58eb6041
	void SetARWorldScale(float InWorldScale);// 0x258958eb6041
	void SetARWorldOriginLocationAndRotation(Vector OriginLocation, Rotator OriginRotation, bool bIsTransformInWorldSpace, bool bMaintainUpDirection);// 0x258858eb6041
	void SetAlignmentTransform(out const Transform InAlignmentTransform);// 0x258758eb6041
	bool SaveARPinToLocalStore(FName InSaveName, ARPin* InPin);// 0x258658eb6041
	IntPoint ResizeXRCamera(out const IntPoint InSize);// 0x258558eb6041
	void RemovePin(ARPin* PinToRemove);// 0x258458eb6041
	void RemoveARPinFromLocalStore(FName InSaveName);// 0x258358eb6041
	void RemoveAllARPinsFromLocalStore();// 0x258258eb6041
	ARPin* PinComponentToTraceResult(SceneComponent* ComponentToPin, out const ARTraceResult TraceResult, const FName DebugName);// 0x258158eb6041
	bool PinComponentToARPin(SceneComponent* ComponentToPin, ARPin* Pin);// 0x258058eb6041
	ARPin* PinComponent(SceneComponent* ComponentToPin, out const Transform PinToWorldTransform, ARTrackedGeometry* TrackedGeometry, const FName DebugName);// 0x257f58eb6041
	void PauseARSession();// 0x257e58eb6041
	<FName,ARPin*> LoadARPinsFromLocalStore();// 0x257d58eb6041
	ARTraceResult[] LineTraceTrackedObjects3D(const Vector Start, const Vector End, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);// 0x25be58eb6041
	ARTraceResult[] LineTraceTrackedObjects(const Vector2D ScreenCoord, bool bTestFeaturePoints, bool bTestGroundPlane, bool bTestPlaneExtents, bool bTestPlaneBoundaryPolygon);// 0x257b58eb6041
	bool IsSessionTypeSupported(enum SessionType);// 0x257a58eb6041
	bool IsSessionTrackingFeatureSupported(enum SessionType, enum SessionTrackingFeature);// 0x257958eb6041
	bool IsSceneReconstructionSupported(enum SessionType, enum SceneReconstructionMethod);// 0x257858eb6041
	bool IsARSupported();// 0x257758eb6041
	bool IsARPinLocalStoreSupported();// 0x257658eb6041
	bool IsARPinLocalStoreReady();// 0x257558eb6041
	enum GetWorldMappingStatus();// 0x257458eb6041
	enum GetTrackingQualityReason();// 0x257358eb6041
	enum GetTrackingQuality();// 0x257258eb6041
	ARVideoFormat[] GetSupportedVideoFormats(enum SessionType);// 0x257158eb6041
	ARSessionConfig* GetSessionConfig();// 0x257058eb6041
	Vector[] GetPointCloud();// 0x256f58eb6041
	ARTexture* GetPersonSegmentationImage();// 0x256e58eb6041
	ARTexture* GetPersonSegmentationDepthImage();// 0x256d58eb6041
	bool GetObjectClassificationAtLocation(out const Vector InWorldLocation, out enum OutClassification, out Vector OutClassificationLocation, float MaxLocationDiff);// 0x256c58eb6041
	int GetNumberOfTrackedFacesSupported();// 0x256b58eb6041
	ARLightEstimate* GetCurrentLightEstimate();// 0x256a58eb6041
	bool GetCameraIntrinsics(out ARCameraIntrinsics OutCameraIntrinsics);// 0x256958eb6041
	ARTextureCameraImage* GetCameraImage();// 0x256858eb6041
	ARTextureCameraDepth* GetCameraDepth();// 0x256758eb6041
	float GetARWorldScale();// 0x256658eb6041
	ARTexture* GetARTexture(enum TextureType);// 0x256558eb6041
	ARSessionStatus GetARSessionStatus();// 0x256458eb6041
	ARTrackedPose*[] GetAllTrackedPoses();// 0x256358eb6041
	ARTrackedPoint*[] GetAllTrackedPoints();// 0x256258eb6041
	ARPlaneGeometry*[] GetAllTrackedPlanes();// 0x256158eb6041
	ARTrackedImage*[] GetAllTrackedImages();// 0x256058eb6041
	AREnvironmentCaptureProbe*[] GetAllTrackedEnvironmentCaptureProbes();// 0x255f58eb6041
	ARPose2D[] GetAllTracked2DPoses();// 0x255e58eb6041
	ARPin*[] GetAllPins();// 0x255d58eb6041
	ARTrackedGeometry*[] GetAllGeometriesByClass(class ARTrackedGeometry GeometryClass);// 0x255c58eb6041
	ARTrackedGeometry*[] GetAllGeometries();// 0x259d58eb6041
	Transform GetAlignmentTransform();// 0x255a58eb6041
	ARTrackedPoint*[] FindTrackedPointsByName(FString PointName);// 0x255958eb6041
	void DebugDrawTrackedGeometry(ARTrackedGeometry* TrackedGeometry, Object* WorldContextObject, LinearColor Color, float OutlineThickness, float PersistForSeconds);// 0x255858eb6041
	void DebugDrawPin(ARPin* ARPin, Object* WorldContextObject, LinearColor Color, float Scale, float PersistForSeconds);// 0x255758eb6041
	void CalculateClosestIntersection(out const Vector[] StartPoints, out const Vector[] EndPoints, out Vector ClosestIntersection);// 0x255658eb6041
	void CalculateAlignmentTransform(out const Transform TransformInFirstCoordinateSystem, out const Transform TransformInSecondCoordinateSystem, out Transform AlignmentTransform);// 0x255558eb6041
	bool AddTrackedPointWithName(out const Transform WorldTransform, FString PointName, bool bDeletePointsWithSameName);// 0x255458eb6041
	ARCandidateImage* AddRuntimeCandidateImage(ARSessionConfig* SessionConfig, Texture2D* CandidateTexture, FString FriendlyName, float PhysicalWidth);// 0x255358eb6041
	bool AddManualEnvironmentCaptureProbe(Vector Location, Vector Extent);// 0x255258eb6041

--------------------------------
Class: ARSessionConfig.DataAsset.Object
	bool bGenerateMeshDataFromTrackedGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	bool bGenerateCollisionForMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 0x1]
	bool bGenerateNavMeshForMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 0x1]
	bool bUseMeshDataForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33, Size: 0x1]
	bool bRenderMeshDataInWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	bool bTrackSceneObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	bool bUsePersonSegmentationForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 0x1]
	bool bUseSceneDepthForOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 0x1]
	bool bUseAutomaticImageScaleEstimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bUseStandardOnboardingUX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	enum WorldAlignment;//[Offset: 0x3a, Size: 0x1]
	enum SessionType;//[Offset: 0x3b, Size: 0x1]
	enum PlaneDetectionMode;//[Offset: 0x3c, Size: 0x1]
	bool bHorizontalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 0x1]
	bool bVerticalPlaneDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 0x1]
	bool bEnableAutoFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 0x1]
	enum LightEstimationMode;//[Offset: 0x40, Size: 0x1]
	enum FrameSyncMode;//[Offset: 0x41, Size: 0x1]
	bool bEnableAutomaticCameraOverlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 0x1]
	bool bEnableAutomaticCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 0x1]
	bool bResetCameraTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool bResetTrackedObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	ARCandidateImage*[] CandidateImages;//[Offset: 0x48, Size: 0x10]
	int MaxNumSimultaneousImagesTracked;//[Offset: 0x58, Size: 0x4]
	enum EnvironmentCaptureProbeType;//[Offset: 0x5c, Size: 0x1]
	byte[] WorldMapData;//[Offset: 0x60, Size: 0x10]
	ARCandidateObject*[] CandidateObjects;//[Offset: 0x70, Size: 0x10]
	ARVideoFormat DesiredVideoFormat;//[Offset: 0x80, Size: 0xc]
	bool bUseOptimalVideoFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	enum FaceTrackingDirection;//[Offset: 0x8d, Size: 0x1]
	enum FaceTrackingUpdate;//[Offset: 0x8e, Size: 0x1]
	int MaxNumberOfTrackedFaces;//[Offset: 0x90, Size: 0x4]
	byte[] SerializedARCandidateImageDatabase;//[Offset: 0x98, Size: 0x10]
	enum EnabledSessionTrackingFeature;//[Offset: 0xa8, Size: 0x1]
	enum SceneReconstructionMethod;//[Offset: 0xa9, Size: 0x1]
	class ARPlaneComponent* PlaneComponentClass;//[Offset: 0xb0, Size: 0x8]
	class ARPointComponent* PointComponentClass;//[Offset: 0xb8, Size: 0x8]
	class ARFaceComponent* FaceComponentClass;//[Offset: 0xc0, Size: 0x8]
	class ARImageComponent* ImageComponentClass;//[Offset: 0xc8, Size: 0x8]
	class ARQRCodeComponent* QRCodeComponentClass;//[Offset: 0xd0, Size: 0x8]
	class ARPoseComponent* PoseComponentClass;//[Offset: 0xd8, Size: 0x8]
	class AREnvironmentProbeComponent* EnvironmentProbeComponentClass;//[Offset: 0xe0, Size: 0x8]
	class ARObjectComponent* ObjectComponentClass;//[Offset: 0xe8, Size: 0x8]
	class ARMeshComponent* MeshComponentClass;//[Offset: 0xf0, Size: 0x8]
	class ARGeoAnchorComponent* GeoAnchorComponentClass;//[Offset: 0xf8, Size: 0x8]
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x100, Size: 0x8]
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x108, Size: 0x8]
	bool ShouldResetTrackedObjects();// 0x25f658eb6041
	bool ShouldResetCameraTracking();// 0x25f558eb6041
	bool ShouldRenderCameraOverlay();// 0x25f458eb6041
	bool ShouldEnableCameraTracking();// 0x25f358eb6041
	bool ShouldEnableAutoFocus();// 0x25f258eb6041
	void SetWorldMapData(byte[] WorldMapData);// 0x25f158eb6041
	void SetSessionTrackingFeatureToEnable(enum InSessionTrackingFeature);// 0x25f058eb6041
	void SetSceneReconstructionMethod(enum InSceneReconstructionMethod);// 0x25ef58eb6041
	void SetResetTrackedObjects(bool bNewValue);// 0x25ee58eb6041
	void SetResetCameraTracking(bool bNewValue);// 0x25ed58eb6041
	void SetFaceTrackingUpdate(enum InUpdate);// 0x25ec58eb6041
	void SetFaceTrackingDirection(enum InDirection);// 0x25eb58eb6041
	void SetEnableAutoFocus(bool bNewValue);// 0x25ea58eb6041
	void SetDesiredVideoFormat(ARVideoFormat NewFormat);// 0x25e958eb6041
	void SetCandidateObjectList(out const ARCandidateObject*[] InCandidateObjects);// 0x25e858eb6041
	byte[] GetWorldMapData();// 0x25e758eb6041
	enum GetWorldAlignment();// 0x25e658eb6041
	enum GetSessionType();// 0x25e558eb6041
	enum GetSceneReconstructionMethod();// 0x25e458eb6041
	enum GetPlaneDetectionMode();// 0x25e358eb6041
	int GetMaxNumSimultaneousImagesTracked();// 0x25e258eb6041
	enum GetLightEstimationMode();// 0x25e158eb6041
	enum GetFrameSyncMode();// 0x25e058eb6041
	enum GetFaceTrackingUpdate();// 0x262158eb6041
	enum GetFaceTrackingDirection();// 0x25de58eb6041
	enum GetEnvironmentCaptureProbeType();// 0x25dd58eb6041
	enum GetEnabledSessionTrackingFeature();// 0x25dc58eb6041
	ARVideoFormat GetDesiredVideoFormat();// 0x25db58eb6041
	ARCandidateObject*[] GetCandidateObjectList();// 0x25da58eb6041
	ARCandidateImage*[] GetCandidateImageList();// 0x25d958eb6041
	void AddCandidateObject(ARCandidateObject* CandidateObject);// 0x25d858eb6041
	void AddCandidateImage(ARCandidateImage* NewCandidateImage);// 0x25d758eb6041

--------------------------------
Class: ARVideoFormat
	int FPS;//[Offset: 0x0, Size: 0x4]
	int Width;//[Offset: 0x4, Size: 0x4]
	int Height;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ARCandidateObject.DataAsset.Object
	byte[] CandidateObjectData;//[Offset: 0x30, Size: 0x10]
	FString FriendlyName;//[Offset: 0x40, Size: 0x10]
	Box BoundingBox;//[Offset: 0x50, Size: 0x38]
	void SetFriendlyName(FString NewName);// 0x271258eb6041
	void SetCandidateObjectData(out const byte[] InCandidateObject);// 0x271158eb6041
	void SetBoundingBox(out const Box InBoundingBox);// 0x271058eb6041
	FString GetFriendlyName();// 0x270f58eb6041
	byte[] GetCandidateObjectData();// 0x270e58eb6041
	Box GetBoundingBox();// 0x270d58eb6041

--------------------------------
Class: ARCandidateImage.DataAsset.Object
	Texture2D* CandidateTexture;//[Offset: 0x30, Size: 0x8]
	FString FriendlyName;//[Offset: 0x38, Size: 0x10]
	float Width;//[Offset: 0x48, Size: 0x4]
	float Height;//[Offset: 0x4c, Size: 0x4]
	enum Orientation;//[Offset: 0x50, Size: 0x1]
	float GetPhysicalWidth();// 0x270c58eb6041
	float GetPhysicalHeight();// 0x270b58eb6041
	enum GetOrientation();// 0x270a58eb6041
	FString GetFriendlyName();// 0x270958eb6041
	Texture2D* GetCandidateTexture();// 0x270858eb6041

--------------------------------
Class: ARPlaneComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPlaneUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0xd0]
	void SetPlaneComponentDebugMode(enum NewDebugMode);// 0x25a158eb6041
	void SetObjectClassificationDebugColors(out const <enum,LinearColor> InColors);// 0x25a058eb6041
	void ServerUpdatePayload(const ARPlaneUpdatePayload NewPayload);// 0x259f58eb6041
	void ReceiveUpdate(out const ARPlaneUpdatePayload Payload);// 0x259e58eb6041
	void ReceiveAdd(out const ARPlaneUpdatePayload Payload);// 0x25df58eb6041
	<enum,LinearColor> GetObjectClassificationDebugColors();// 0x259c58eb6041

--------------------------------
Class: ARPlaneUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18]
	Transform WorldTransform;//[Offset: 0x20, Size: 0x60]
	Vector Center;//[Offset: 0x80, Size: 0x18]
	Vector Extents;//[Offset: 0x98, Size: 0x18]
	Vector[] BoundaryVertices;//[Offset: 0xb0, Size: 0x10]
	enum ObjectClassification;//[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: ARSessionPayload
	int ConfigFlags;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* DefaultMeshMaterial;//[Offset: 0x8, Size: 0x8]
	MaterialInterface* DefaultWireframeMeshMaterial;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: ARPointComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPointUpdatePayload ReplicatedPayload;//[Offset: 0x32c, Size: 0x1]
	void ServerUpdatePayload(const ARPointUpdatePayload NewPayload);// 0x25a458eb6041
	void ReceiveUpdate(out const ARPointUpdatePayload Payload);// 0x25a358eb6041
	void ReceiveAdd(out const ARPointUpdatePayload Payload);// 0x25a258eb6041

--------------------------------
Class: ARPointUpdatePayload

--------------------------------
Class: ARFaceComponent.ARComponent.SceneComponent.ActorComponent.Object
	enum TransformSetting;//[Offset: 0x32c, Size: 0x1]
	bool bUpdateVertexNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d, Size: 0x1]
	bool bFaceOutOfScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32e, Size: 0x1]
	ARFaceUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0x60]
	void SetFaceComponentDebugMode(enum NewDebugMode);// 0x25a858eb6041
	void ServerUpdatePayload(const ARFaceUpdatePayload NewPayload);// 0x25a758eb6041
	void ReceiveUpdate(out const ARFaceUpdatePayload Payload);// 0x25a658eb6041
	void ReceiveAdd(out const ARFaceUpdatePayload Payload);// 0x25a558eb6041

--------------------------------
Class: ARFaceUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18]
	Vector LeftEyePosition;//[Offset: 0x18, Size: 0x18]
	Vector RightEyePosition;//[Offset: 0x30, Size: 0x18]
	Vector LookAtTarget;//[Offset: 0x48, Size: 0x18]

--------------------------------
Class: ARImageComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARImageUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0xa0]
	void SetImageComponentDebugMode(enum NewDebugMode);// 0x25ac58eb6041
	void ServerUpdatePayload(const ARImageUpdatePayload NewPayload);// 0x25ab58eb6041
	void ReceiveUpdate(out const ARImageUpdatePayload Payload);// 0x25aa58eb6041
	void ReceiveAdd(out const ARImageUpdatePayload Payload);// 0x25a958eb6041

--------------------------------
Class: ARImageUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18]
	Transform WorldTransform;//[Offset: 0x20, Size: 0x60]
	ARCandidateImage* DetectedImage;//[Offset: 0x80, Size: 0x8]
	Vector2D EstimatedSize;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: ARQRCodeComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARQRCodeUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0xb0]
	void SetQRCodeComponentDebugMode(enum NewDebugMode);// 0x25b058eb6041
	void ServerUpdatePayload(const ARQRCodeUpdatePayload NewPayload);// 0x25af58eb6041
	void ReceiveUpdate(out const ARQRCodeUpdatePayload Payload);// 0x25ae58eb6041
	void ReceiveAdd(out const ARQRCodeUpdatePayload Payload);// 0x25ad58eb6041

--------------------------------
Class: ARQRCodeUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18]
	Transform WorldTransform;//[Offset: 0x20, Size: 0x60]
	Vector Extents;//[Offset: 0x80, Size: 0x18]
	FString QRCode;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: ARPoseComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARPoseUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0x70]
	void SetPoseComponentDebugMode(enum NewDebugMode);// 0x25b458eb6041
	void ServerUpdatePayload(const ARPoseUpdatePayload NewPayload);// 0x25b358eb6041
	void ReceiveUpdate(out const ARPoseUpdatePayload Payload);// 0x25b258eb6041
	void ReceiveAdd(out const ARPoseUpdatePayload Payload);// 0x25b158eb6041

--------------------------------
Class: ARPoseUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x60]
	Transform[] JointTransforms;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: AREnvironmentProbeComponent.ARComponent.SceneComponent.ActorComponent.Object
	AREnvironmentProbeUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0x60]
	void ServerUpdatePayload(const AREnvironmentProbeUpdatePayload NewPayload);// 0x25b758eb6041
	void ReceiveUpdate(out const AREnvironmentProbeUpdatePayload Payload);// 0x25b658eb6041
	void ReceiveAdd(out const AREnvironmentProbeUpdatePayload Payload);// 0x25b558eb6041

--------------------------------
Class: AREnvironmentProbeUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x60]

--------------------------------
Class: ARObjectComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARObjectUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0x60]
	void ServerUpdatePayload(const ARObjectUpdatePayload NewPayload);// 0x25ba58eb6041
	void ReceiveUpdate(out const ARObjectUpdatePayload Payload);// 0x25b958eb6041
	void ReceiveAdd(out const ARObjectUpdatePayload Payload);// 0x25b858eb6041

--------------------------------
Class: ARObjectUpdatePayload
	Transform WorldTransform;//[Offset: 0x0, Size: 0x60]

--------------------------------
Class: ARMeshComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARMeshUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0x90]
	void ServerUpdatePayload(const ARMeshUpdatePayload NewPayload);// 0x25bd58eb6041
	void ReceiveUpdate(out const ARMeshUpdatePayload Payload);// 0x25bc58eb6041
	void ReceiveAdd(out const ARMeshUpdatePayload Payload);// 0x25bb58eb6041

--------------------------------
Class: ARMeshUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18]
	Transform WorldTransform;//[Offset: 0x20, Size: 0x60]
	enum ObjectClassification;//[Offset: 0x80, Size: 0x1]

--------------------------------
Class: ARGeoAnchorComponent.ARComponent.SceneComponent.ActorComponent.Object
	ARGeoAnchorUpdatePayload ReplicatedPayload;//[Offset: 0x330, Size: 0xa0]
	void SetGeoAnchorComponentDebugMode(enum NewDebugMode);// 0x25c158eb6041
	void ServerUpdatePayload(const ARGeoAnchorUpdatePayload NewPayload);// 0x25c058eb6041
	void ReceiveUpdate(out const ARGeoAnchorUpdatePayload Payload);// 0x25bf58eb6041
	void ReceiveAdd(out const ARGeoAnchorUpdatePayload Payload);// 0x260058eb6041

--------------------------------
Class: ARGeoAnchorUpdatePayload
	ARSessionPayload SessionPayload;//[Offset: 0x0, Size: 0x18]
	Transform WorldTransform;//[Offset: 0x20, Size: 0x60]
	float Longitude;//[Offset: 0x80, Size: 0x4]
	float Latitude;//[Offset: 0x84, Size: 0x4]
	float AltitudeMeters;//[Offset: 0x88, Size: 0x4]
	enum AltitudeSource;//[Offset: 0x8c, Size: 0x1]
	FString AnchorName;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: ARPin.Object
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x28, Size: 0x8]
	SceneComponent* PinnedComponent;//[Offset: 0x30, Size: 0x8]
	Transform LocalToTrackingTransform;//[Offset: 0x40, Size: 0x60]
	Transform LocalToAlignedTrackingTransform;//[Offset: 0xa0, Size: 0x60]
	enum TrackingState;//[Offset: 0x100, Size: 0x1]
	delegate OnARTrackingStateChanged;//[Offset: 0x120, Size: 0x10]
	delegate OnARTransformUpdated;//[Offset: 0x130, Size: 0x10]
	enum GetTrackingState();// 0x25d658eb6041
	ARTrackedGeometry* GetTrackedGeometry();// 0x25d558eb6041
	SceneComponent* GetPinnedComponent();// 0x25d458eb6041
	Transform GetLocalToWorldTransform();// 0x25d358eb6041
	Transform GetLocalToTrackingTransform();// 0x25d258eb6041
	FName GetDebugName();// 0x25d158eb6041
	void DebugDraw(World* World, out const LinearColor Color, float Scale, float PersistForSeconds);// 0x25d058eb6041

--------------------------------
Class: ARTraceResult
	float DistanceFromCamera;//[Offset: 0x0, Size: 0x4]
	enum TraceChannel;//[Offset: 0x4, Size: 0x1]
	Transform LocalTransform;//[Offset: 0x10, Size: 0x60]
	ARTrackedGeometry* TrackedGeometry;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: ARTexture.Texture.StreamableRenderAsset.Object
	enum TextureType;//[Offset: 0x1f0, Size: 0x1]
	float Timestamp;//[Offset: 0x1f4, Size: 0x4]
	Guid ExternalTextureGuid;//[Offset: 0x1f8, Size: 0x10]
	Vector2D Size;//[Offset: 0x208, Size: 0x10]

--------------------------------
Class: ARLightEstimate.Object

--------------------------------
Class: ARCameraIntrinsics
	IntPoint ImageResolution;//[Offset: 0x0, Size: 0x8]
	Vector2D FocalLength;//[Offset: 0x8, Size: 0x10]
	Vector2D PrincipalPoint;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ARTextureCameraImage.ARTexture.Texture.StreamableRenderAsset.Object

--------------------------------
Class: ARTextureCameraDepth.ARTexture.Texture.StreamableRenderAsset.Object
	enum DepthQuality;//[Offset: 0x218, Size: 0x1]
	enum DepthAccuracy;//[Offset: 0x219, Size: 0x1]
	bool bIsTemporallySmoothed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a, Size: 0x1]

--------------------------------
Class: ARSessionStatus
	FString AdditionalInfo;//[Offset: 0x0, Size: 0x10]
	enum Status;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ARTrackedPose.ARTrackedGeometry.Object
	ARPose3D TrackedPose;//[Offset: 0x158, Size: 0x50]
	ARPose3D GetTrackedPoseData();// 0x270258eb6041

--------------------------------
Class: ARPose3D
	ARSkeletonDefinition SkeletonDefinition;//[Offset: 0x0, Size: 0x28]
	Transform[] JointTransforms;//[Offset: 0x28, Size: 0x10]
	bool[] IsJointTracked;//[Offset: 0x38, Size: 0x10]
	enum JointTransformSpace;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ARSkeletonDefinition
	int NumJoints;//[Offset: 0x0, Size: 0x4]
	FName[] JointNames;//[Offset: 0x8, Size: 0x10]
	int[] ParentIndices;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ARTrackedPoint.ARTrackedGeometry.Object

--------------------------------
Class: ARPlaneGeometry.ARTrackedGeometry.Object
	enum Orientation;//[Offset: 0x158, Size: 0x1]
	Vector Center;//[Offset: 0x160, Size: 0x18]
	Vector Extent;//[Offset: 0x178, Size: 0x18]
	Vector[] BoundaryPolygon;//[Offset: 0x190, Size: 0x10]
	ARPlaneGeometry* SubsumedBy;//[Offset: 0x1a0, Size: 0x8]
	ARPlaneGeometry* GetSubsumedBy();// 0x26f858eb6041
	enum GetOrientation();// 0x26f758eb6041
	Vector GetExtent();// 0x26f658eb6041
	Vector GetCenter();// 0x26f558eb6041
	Vector[] GetBoundaryPolygonInLocalSpace();// 0x26f458eb6041

--------------------------------
Class: ARTrackedImage.ARTrackedGeometry.Object
	ARCandidateImage* DetectedImage;//[Offset: 0x158, Size: 0x8]
	Vector2D EstimatedSize;//[Offset: 0x160, Size: 0x10]
	Vector2D GetEstimateSize();// 0x26fa58eb6041
	ARCandidateImage* GetDetectedImage();// 0x26f958eb6041

--------------------------------
Class: AREnvironmentCaptureProbe.ARTrackedGeometry.Object
	Vector Extent;//[Offset: 0x158, Size: 0x18]
	AREnvironmentCaptureProbeTexture* EnvironmentCaptureTexture;//[Offset: 0x170, Size: 0x8]
	Vector GetExtent();// 0x270058eb6041
	AREnvironmentCaptureProbeTexture* GetEnvironmentCaptureTexture();// 0x26ff58eb6041

--------------------------------
Class: AREnvironmentCaptureProbeTexture.TextureCube.Texture.StreamableRenderAsset.Object
	enum TextureType;//[Offset: 0x290, Size: 0x1]
	float Timestamp;//[Offset: 0x294, Size: 0x4]
	Guid ExternalTextureGuid;//[Offset: 0x298, Size: 0x10]
	Vector2D Size;//[Offset: 0x2a8, Size: 0x10]

--------------------------------
Class: ARPose2D
	ARSkeletonDefinition SkeletonDefinition;//[Offset: 0x0, Size: 0x28]
	Vector2D[] JointLocations;//[Offset: 0x28, Size: 0x10]
	bool[] IsJointTracked;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ARTraceResultLibrary.BlueprintFunctionLibrary.Object
	ARTrackedGeometry* GetTrackedGeometry(out const ARTraceResult TraceResult);// 0x259458eb6041
	enum GetTraceChannel(out const ARTraceResult TraceResult);// 0x259358eb6041
	Transform GetLocalTransform(out const ARTraceResult TraceResult);// 0x259258eb6041
	Transform GetLocalToWorldTransform(out const ARTraceResult TraceResult);// 0x259158eb6041
	Transform GetLocalToTrackingTransform(out const ARTraceResult TraceResult);// 0x259058eb6041
	float GetDistanceFromCamera(out const ARTraceResult TraceResult);// 0x258f58eb6041

--------------------------------
Class: ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object

--------------------------------
Class: ARSaveWorldAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10]
	delegate OnFailed;//[Offset: 0x60, Size: 0x10]
	ARSaveWorldAsyncTaskBlueprintProxy* ARSaveWorld(Object* WorldContextObject);// 0x259558eb6041

--------------------------------
Class: ARGetCandidateObjectAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10]
	delegate OnFailed;//[Offset: 0x60, Size: 0x10]
	ARGetCandidateObjectAsyncTaskBlueprintProxy* ARGetCandidateObject(Object* WorldContextObject, Vector Location, Vector Extent);// 0x259658eb6041

--------------------------------
Class: ARDependencyHandler.Object
	void StartARSessionLatent(Object* WorldContextObject, ARSessionConfig* SessionConfig, LatentActionInfo LatentInfo);// 0x25c658eb6041
	void RequestARSessionPermission(Object* WorldContextObject, ARSessionConfig* SessionConfig, LatentActionInfo LatentInfo, out enum OutPermissionResult);// 0x25c558eb6041
	void InstallARService(Object* WorldContextObject, LatentActionInfo LatentInfo, out enum OutInstallResult);// 0x25c458eb6041
	ARDependencyHandler* GetARDependencyHandler();// 0x25c358eb6041
	void CheckARServiceAvailability(Object* WorldContextObject, LatentActionInfo LatentInfo, out enum OutAvailability);// 0x25c258eb6041

--------------------------------
Class: ARGeoTrackingSupport.Object
	ARGeoTrackingSupport* GetGeoTrackingSupport();// 0x25cc58eb6041
	enum GetGeoTrackingStateReason();// 0x25cb58eb6041
	enum GetGeoTrackingState();// 0x25ca58eb6041
	enum GetGeoTrackingAccuracy();// 0x25c958eb6041
	bool AddGeoAnchorAtLocationWithAltitude(float Longitude, float Latitude, float AltitudeMeters, FString OptionalAnchorName);// 0x25c858eb6041
	bool AddGeoAnchorAtLocation(float Longitude, float Latitude, FString OptionalAnchorName);// 0x25c758eb6041

--------------------------------
Class: CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10]
	delegate OnFailed;//[Offset: 0x60, Size: 0x10]
	void GeoTrackingAvailabilityDelegate__DelegateSignature(bool bIsAvailable, FString Error);// 0xec658eb6041
	CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy* CheckGeoTrackingAvailabilityAtLocation(Object* WorldContextObject, float Longitude, float Latitude);// 0xec558eb6041
	CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy* CheckGeoTrackingAvailability(Object* WorldContextObject);// 0xec458eb6041

--------------------------------
Class: GetGeoLocationAsyncTaskBlueprintProxy.ARBaseAsyncTaskBlueprintProxy.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x50, Size: 0x10]
	delegate OnFailed;//[Offset: 0x60, Size: 0x10]
	void GetGeoLocationDelegate__DelegateSignature(float Longitude, float Latitude, float Altitude, FString Error);// 0xec858eb6041
	GetGeoLocationAsyncTaskBlueprintProxy* GetGeoLocationAtWorldPosition(Object* WorldContextObject, out const Vector WorldPosition);// 0xec758eb6041

--------------------------------
Class: ARLifeCycleComponent.SceneComponent.ActorComponent.Object
	delegate OnARActorSpawnedDelegate;//[Offset: 0x2b0, Size: 0x10]
	delegate OnARActorToBeDestroyedDelegate;//[Offset: 0x2c0, Size: 0x10]
	void ServerSpawnARActor(class Object ComponentClass, Guid NativeID);// 0xec258eb6041
	void ServerDestroyARActor(ARActor* Actor);// 0xec158eb6041
	void InstanceARActorToBeDestroyedDelegate__DelegateSignature(ARActor* Actor);// 0xec058eb6041
	void InstanceARActorSpawnedDelegate__DelegateSignature(class Object ComponentClass, Guid NativeID, ARActor* SpawnedActor);// 0xebf58eb6041

--------------------------------
Class: ARBasicLightEstimate.ARLightEstimate.Object
	float AmbientIntensityLumens;//[Offset: 0x28, Size: 0x4]
	float AmbientColorTemperatureKelvin;//[Offset: 0x2c, Size: 0x4]
	LinearColor AmbientColor;//[Offset: 0x30, Size: 0x10]
	float GetAmbientIntensityLumens();// 0x25cf58eb6041
	float GetAmbientColorTemperatureKelvin();// 0x25ce58eb6041
	LinearColor GetAmbientColor();// 0x25cd58eb6041

--------------------------------
Class: AROriginActor.Actor.Object

--------------------------------
Class: ARSharedWorldGameMode.GameMode.GameModeBase.Info.Actor.Object
	int BufferSizePerChunk;//[Offset: 0x35c, Size: 0x4]
	void SetPreviewImageData(byte[] ImageData);// 0xffffff8158eb6000
	void SetARWorldSharingIsReady();// 0x262058eb6041
	void SetARSharedWorldData(byte[] ARWorldData);// 0x261f58eb6041
	ARSharedWorldGameState* GetARSharedWorldGameState();// 0x261e58eb6041

--------------------------------
Class: ARSharedWorldGameState.GameState.GameStateBase.Info.Actor.Object
	byte[] PreviewImageData;//[Offset: 0x2e0, Size: 0x10]
	byte[] ARWorldData;//[Offset: 0x2f0, Size: 0x10]
	int PreviewImageBytesTotal;//[Offset: 0x300, Size: 0x4]
	int ARWorldBytesTotal;//[Offset: 0x304, Size: 0x4]
	int PreviewImageBytesDelivered;//[Offset: 0x308, Size: 0x4]
	int ARWorldBytesDelivered;//[Offset: 0x30c, Size: 0x4]
	void K2_OnARWorldMapIsReady();// 0x262e58eb6041

--------------------------------
Class: ARSharedWorldPlayerController.PlayerController.Controller.Actor.Object
	void ServerMarkReadyForReceiving();// 0x26e558eb6041
	void ClientUpdatePreviewImageData(int Offset, const byte[] Buffer);// 0x26e458eb6041
	void ClientUpdateARWorldData(int Offset, const byte[] Buffer);// 0x26e358eb6041
	void ClientInitSharedWorld(int PreviewImageSize, int ARWorldDataSize);// 0x272458eb6041

--------------------------------
Class: ARSkyLight.SkyLight.Info.Actor.Object
	AREnvironmentCaptureProbe* CaptureProbe;//[Offset: 0x288, Size: 0x8]
	void SetEnvironmentCaptureProbe(AREnvironmentCaptureProbe* InCaptureProbe);// 0x26e758eb6041

--------------------------------
Class: ARTraceResultDummy.Object

--------------------------------
Class: ARTrackedQRCode.ARTrackedImage.ARTrackedGeometry.Object
	FString QRCode;//[Offset: 0x170, Size: 0x10]
	int Version;//[Offset: 0x180, Size: 0x4]

--------------------------------
Class: ARFaceGeometry.ARTrackedGeometry.Object
	Vector LookAtTarget;//[Offset: 0x158, Size: 0x18]
	bool bIsTracked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 0x1]
	<enum,float> BlendShapes;//[Offset: 0x178, Size: 0x50]
	Transform LeftEyeTransform;//[Offset: 0x200, Size: 0x60]
	Transform RightEyeTransform;//[Offset: 0x260, Size: 0x60]
	Transform GetWorldSpaceEyeTransform(enum Eye);// 0x26fe58eb6041
	Transform GetLocalSpaceEyeTransform(enum Eye);// 0x26fd58eb6041
	float GetBlendShapeValue(enum BlendShape);// 0x26fc58eb6041
	<enum,float> GetBlendShapes();// 0x26fb58eb6041

--------------------------------
Class: ARTrackedObject.ARTrackedGeometry.Object
	ARCandidateObject* DetectedObject;//[Offset: 0x158, Size: 0x8]
	ARCandidateObject* GetDetectedObject();// 0x270158eb6041

--------------------------------
Class: ARMeshGeometry.ARTrackedGeometry.Object
	bool GetObjectClassificationAtLocation(out const Vector InWorldLocation, out enum OutClassification, out Vector OutClassificationLocation, float MaxLocationDiff);// 0x274558eb6041

--------------------------------
Class: ARGeoAnchor.ARTrackedGeometry.Object
	float GetLongitude();// 0x270758eb6041
	float GetLatitude();// 0x270658eb6041
	enum GetAltitudeSource();// 0x270558eb6041
	float GetAltitudeMeters();// 0x270458eb6041

--------------------------------
Class: ARTrackableNotifyComponent.ActorComponent.Object
	delegate OnAddTrackedGeometry;//[Offset: 0xb0, Size: 0x10]
	delegate OnUpdateTrackedGeometry;//[Offset: 0xc0, Size: 0x10]
	delegate OnRemoveTrackedGeometry;//[Offset: 0xd0, Size: 0x10]
	delegate OnAddTrackedPlane;//[Offset: 0xe0, Size: 0x10]
	delegate OnUpdateTrackedPlane;//[Offset: 0xf0, Size: 0x10]
	delegate OnRemoveTrackedPlane;//[Offset: 0x100, Size: 0x10]
	delegate OnAddTrackedPoint;//[Offset: 0x110, Size: 0x10]
	delegate OnUpdateTrackedPoint;//[Offset: 0x120, Size: 0x10]
	delegate OnRemoveTrackedPoint;//[Offset: 0x130, Size: 0x10]
	delegate OnAddTrackedImage;//[Offset: 0x140, Size: 0x10]
	delegate OnUpdateTrackedImage;//[Offset: 0x150, Size: 0x10]
	delegate OnRemoveTrackedImage;//[Offset: 0x160, Size: 0x10]
	delegate OnAddTrackedFace;//[Offset: 0x170, Size: 0x10]
	delegate OnUpdateTrackedFace;//[Offset: 0x180, Size: 0x10]
	delegate OnRemoveTrackedFace;//[Offset: 0x190, Size: 0x10]
	delegate OnAddTrackedEnvProbe;//[Offset: 0x1a0, Size: 0x10]
	delegate OnUpdateTrackedEnvProbe;//[Offset: 0x1b0, Size: 0x10]
	delegate OnRemoveTrackedEnvProbe;//[Offset: 0x1c0, Size: 0x10]
	delegate OnAddTrackedObject;//[Offset: 0x1d0, Size: 0x10]
	delegate OnUpdateTrackedObject;//[Offset: 0x1e0, Size: 0x10]
	delegate OnRemoveTrackedObject;//[Offset: 0x1f0, Size: 0x10]

--------------------------------
Class: ARTypesDummyClass.Object

--------------------------------
Class: HeadMountedDisplayFunctionLibrary.BlueprintFunctionLibrary.Object
	void UpdateExternalTrackingHMDPosition(out const Transform ExternalTrackingTransform);// 0x273f58eb6041
	void SetXRTimedInputActionDelegate(out const FName ActionName, out const delegate InDelegate);// 0x273e58eb6041
	void SetXRDisconnectDelegate(out const delegate InDisconnectedDelegate);// 0x273d58eb6041
	void SetWorldToMetersScale(Object* WorldContext, float NewScale);// 0x273c58eb6041
	void SetTrackingOrigin(byte Origin);// 0x273b58eb6041
	void SetSpectatorScreenTexture(Texture* InTexture);// 0x273a58eb6041
	void SetSpectatorScreenModeTexturePlusEyeLayout(Vector2D EyeRectMin, Vector2D EyeRectMax, Vector2D TextureRectMin, Vector2D TextureRectMax, bool bDrawEyeFirst, bool bClearBlack, bool bUseAlpha);// 0x273958eb6041
	void SetSpectatorScreenMode(enum Mode);// 0x273858eb6041
	void SetClippingPlanes(float Near, float Far);// 0x273758eb6041
	void ResetOrientationAndPosition(float Yaw, byte Options);// 0x273658eb6041
	bool IsSpectatorScreenModeControllable();// 0x273558eb6041
	bool IsInLowPersistenceMode();// 0x273458eb6041
	bool IsHeadMountedDisplayEnabled();// 0x273358eb6041
	bool IsHeadMountedDisplayConnected();// 0x273258eb6041
	bool IsDeviceTracking(out const XRDeviceId XRDeviceId);// 0x273158eb6041
	bool HasValidTrackingPosition();// 0x273058eb6041
	int GetXRSystemFlags();// 0x272f58eb6041
	float GetWorldToMetersScale(Object* WorldContext);// 0x272e58eb6041
	void GetVRFocusState(out bool bUseFocus, out bool bHasFocus);// 0x272d58eb6041
	FString GetVersionString();// 0x272c58eb6041
	Transform GetTrackingToWorldTransform(Object* WorldContext);// 0x272b58eb6041
	void GetTrackingSensorParameters(out Vector Origin, out Rotator Rotation, out float LeftFOV, out float RightFOV, out float TopFOV, out float BottomFOV, out float Distance, out float NearPlane, out float FarPlane, out bool IsActive, int Index);// 0x272a58eb6041
	byte GetTrackingOrigin();// 0x272958eb6041
	float GetScreenPercentage();// 0x272858eb6041
	void GetPositionalTrackingCameraParameters(out Vector CameraOrigin, out Rotator CameraRotation, out float HFOV, out float VFOV, out float CameraDistance, out float NearPlane, out float FarPlane);// 0x272758eb6041
	Vector2D GetPlayAreaBounds(byte Origin);// 0x272658eb6041
	float GetPixelDensity();// 0x272558eb6041
	void GetOrientationAndPosition(out Rotator DeviceRotation, out Vector DevicePosition);// 0x276158eb6041
	int GetNumOfTrackingSensors();// 0x272358eb6041
	void GetMotionControllerData(Object* WorldContext, const enum Hand, out XRMotionControllerData MotionControllerData);// 0x272258eb6041
	byte GetHMDWornState();// 0x272158eb6041
	FName GetHMDDeviceName();// 0x272058eb6041
	void GetHMDData(Object* WorldContext, out XRHMDData HMDData);// 0x271f58eb6041
	void GetDeviceWorldPose(Object* WorldContext, out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector Position);// 0x271e58eb6041
	void GetDevicePose(out const XRDeviceId XRDeviceId, out bool bIsTracked, out Rotator Orientation, out bool bHasPositionalTracking, out Vector Position);// 0x271d58eb6041
	bool GetControllerTransformForTime(Object* WorldContext, const int ControllerIndex, const FName MotionSource, Timespan Time, out bool bTimeWasUsed, out Rotator Orientation, out Vector Position, out bool bProvidedLinearVelocity, out Vector LinearVelocity, out bool bProvidedAngularVelocity, out Vector AngularVelocityRadPerSec, out bool bProvidedLinearAcceleration, out Vector LinearAcceleration);// 0x271c58eb6041
	XRDeviceId[] EnumerateTrackedDevices(const FName SystemId, enum DeviceType);// 0x271b58eb6041
	void EnableLowPersistenceMode(bool bEnable);// 0x271a58eb6041
	bool EnableHMD(bool bEnable);// 0x271958eb6041
	void DisconnectRemoteXRDevice();// 0x271858eb6041
	byte ConnectRemoteXRDevice(FString IpAddress, const int BitRate);// 0x271758eb6041
	bool ConfigureGestures(out const XRGestureConfig GestureConfig);// 0x271658eb6041
	void ClearXRTimedInputActionDelegate(out const FName ActionPath);// 0x271558eb6041
	void CalibrateExternalTrackingToHMD(out const Transform ExternalTrackingTransform);// 0x271458eb6041
	void BreakKey(Key InKey, out FString InteractionProfile, out enum Hand, out FName MotionSource, out FString Indentifier, out FString Component);// 0x271358eb6041

--------------------------------
Class: XRDeviceId
	FName SystemName;//[Offset: 0x0, Size: 0x8]
	int DeviceID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: XRMotionControllerData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName DeviceName;//[Offset: 0x4, Size: 0x8]
	Guid ApplicationInstanceID;//[Offset: 0xc, Size: 0x10]
	enum DeviceVisualType;//[Offset: 0x1c, Size: 0x1]
	enum HandIndex;//[Offset: 0x1d, Size: 0x1]
	enum TrackingStatus;//[Offset: 0x1e, Size: 0x1]
	Vector GripPosition;//[Offset: 0x20, Size: 0x18]
	Quat GripRotation;//[Offset: 0x40, Size: 0x20]
	Vector AimPosition;//[Offset: 0x60, Size: 0x18]
	Quat AimRotation;//[Offset: 0x80, Size: 0x20]
	Vector[] HandKeyPositions;//[Offset: 0xa0, Size: 0x10]
	Quat[] HandKeyRotations;//[Offset: 0xb0, Size: 0x10]
	float[] HandKeyRadii;//[Offset: 0xc0, Size: 0x10]
	bool bIsGrasped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]

--------------------------------
Class: XRHMDData
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName DeviceName;//[Offset: 0x4, Size: 0x8]
	Guid ApplicationInstanceID;//[Offset: 0xc, Size: 0x10]
	enum TrackingStatus;//[Offset: 0x1c, Size: 0x1]
	Vector Position;//[Offset: 0x20, Size: 0x18]
	Quat Rotation;//[Offset: 0x40, Size: 0x20]

--------------------------------
Class: XRGestureConfig
	bool bTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	enum AxisGesture;//[Offset: 0x2, Size: 0x1]
	bool bNavigationAxisX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bNavigationAxisY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bNavigationAxisZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]

--------------------------------
Class: HandKeypointConversion.BlueprintFunctionLibrary.Object
	int Conv_HandKeypointToInt32(enum Input);// 0x274058eb6041

--------------------------------
Class: MotionControllerComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int PlayerIndex;//[Offset: 0x538, Size: 0x4]
	enum Hand;//[Offset: 0x53c, Size: 0x1]
	FName MotionSource;//[Offset: 0x540, Size: 0x8]
	bool bDisableLowLatencyUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x548, Size: 0x1]
	enum CurrentTrackingStatus;//[Offset: 0x549, Size: 0x1]
	bool bDisplayDeviceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54a, Size: 0x1]
	FName DisplayModelSource;//[Offset: 0x54c, Size: 0x8]
	StaticMesh* CustomDisplayMesh;//[Offset: 0x558, Size: 0x8]
	MaterialInterface*[] DisplayMeshMaterialOverrides;//[Offset: 0x560, Size: 0x10]
	PrimitiveComponent* DisplayComponent;//[Offset: 0x608, Size: 0x8]
	void SetTrackingSource(const enum NewSource);// 0x274b58eb6041
	void SetTrackingMotionSource(const FName NewSource);// 0x274a58eb6041
	void SetShowDeviceModel(const bool bShowControllerModel);// 0x274958eb6041
	void SetDisplayModelSource(const FName NewDisplayModelSource);// 0x274858eb6041
	void SetCustomDisplayMesh(StaticMesh* NewDisplayMesh);// 0x274758eb6041
	void SetAssociatedPlayerIndex(const int NewPlayer);// 0x274658eb6041
	void OnMotionControllerUpdated();// 0xffffff8158eb6000
	bool IsTracked();// 0x274458eb6041
	enum GetTrackingSource();// 0x274358eb6041
	float GetParameterValue(FName InName, out bool bValueFound);// 0x274258eb6041
	Vector GetHandJointPosition(int jointIndex, out bool bValueFound);// 0x274158eb6041

--------------------------------
Class: MotionTrackedDeviceFunctionLibrary.BlueprintFunctionLibrary.Object
	void SetIsControllerMotionTrackingEnabledByDefault(bool Enable);// 0x275d58eb6041
	bool IsMotionTrackingEnabledForSource(int PlayerIndex, FName SourceName);// 0x275c58eb6041
	bool IsMotionTrackingEnabledForDevice(int PlayerIndex, enum Hand);// 0x275b58eb6041
	bool IsMotionTrackingEnabledForComponent(const MotionControllerComponent* MotionControllerComponent);// 0x275a58eb6041
	bool IsMotionTrackedDeviceCountManagementNecessary();// 0x275958eb6041
	bool IsMotionSourceTracking(int PlayerIndex, FName SourceName);// 0x275858eb6041
	int GetMotionTrackingEnabledControllerCount();// 0x275758eb6041
	int GetMaximumMotionTrackedControllerCount();// 0x275658eb6041
	FName GetActiveTrackingSystemName();// 0x275558eb6041
	FName[] EnumerateMotionSources();// 0x275458eb6041
	bool EnableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0x275358eb6041
	bool EnableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0x275258eb6041
	bool EnableMotionTrackingForComponent(MotionControllerComponent* MotionControllerComponent);// 0x275158eb6041
	void DisableMotionTrackingOfSource(int PlayerIndex, FName SourceName);// 0x275058eb6041
	void DisableMotionTrackingOfDevice(int PlayerIndex, enum Hand);// 0x274f58eb6041
	void DisableMotionTrackingOfControllersForPlayer(int PlayerIndex);// 0x274e58eb6041
	void DisableMotionTrackingOfAllControllers();// 0x274d58eb6041
	void DisableMotionTrackingForComponent(const MotionControllerComponent* MotionControllerComponent);// 0x274c58eb6041

--------------------------------
Class: VRNotificationsComponent.ActorComponent.Object
	delegate HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate;//[Offset: 0xb0, Size: 0x10]
	delegate HMDTrackingInitializedDelegate;//[Offset: 0xc0, Size: 0x10]
	delegate HMDRecenteredDelegate;//[Offset: 0xd0, Size: 0x10]
	delegate HMDLostDelegate;//[Offset: 0xe0, Size: 0x10]
	delegate HMDReconnectedDelegate;//[Offset: 0xf0, Size: 0x10]
	delegate HMDConnectCanceledDelegate;//[Offset: 0x100, Size: 0x10]
	delegate HMDPutOnHeadDelegate;//[Offset: 0x110, Size: 0x10]
	delegate HMDRemovedFromHeadDelegate;//[Offset: 0x120, Size: 0x10]
	delegate VRControllerRecenteredDelegate;//[Offset: 0x130, Size: 0x10]

--------------------------------
Class: XRAssetFunctionLibrary.BlueprintFunctionLibrary.Object
	PrimitiveComponent* AddNamedDeviceVisualizationComponentBlocking(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId);// 0x275f58eb6041
	PrimitiveComponent* AddDeviceVisualizationComponentBlocking(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform);// 0x275e58eb6041

--------------------------------
Class: AsyncTask_LoadXRDeviceVisComponent.BlueprintAsyncActionBase.Object
	delegate OnModelLoaded;//[Offset: 0x30, Size: 0x10]
	delegate OnLoadFailure;//[Offset: 0x40, Size: 0x10]
	PrimitiveComponent* SpawnedComponent;//[Offset: 0x58, Size: 0x8]
	AsyncTask_LoadXRDeviceVisComponent* AddNamedDeviceVisualizationComponentAsync(Actor* Target, const FName SystemName, const FName DeviceName, bool bManualAttachment, out const Transform RelativeTransform, out XRDeviceId XRDeviceId, out PrimitiveComponent* NewComponent);// 0x27a358eb6041
	AsyncTask_LoadXRDeviceVisComponent* AddDeviceVisualizationComponentAsync(Actor* Target, out const XRDeviceId XRDeviceId, bool bManualAttachment, out const Transform RelativeTransform, out PrimitiveComponent* NewComponent);// 0x276058eb6041

--------------------------------
Class: XRLoadingScreenFunctionLibrary.BlueprintFunctionLibrary.Object
	void ShowLoadingScreen();// 0x276658eb6041
	void SetLoadingScreen(Texture* Texture, Vector2D Scale, Vector Offset, bool bShowLoadingMovie, bool bShowOnSet);// 0x276558eb6041
	void HideLoadingScreen();// 0x276458eb6041
	void ClearLoadingScreenSplashes();// 0x276358eb6041
	void AddLoadingScreenSplash(Texture* Texture, Vector Translation, Rotator Rotation, Vector2D Size, Rotator DeltaRotation, bool bClearBeforeAdd);// 0x276258eb6041

--------------------------------
Class: EyeTrackerFunctionLibrary.BlueprintFunctionLibrary.Object
	void SetEyeTrackedPlayer(PlayerController* PlayerController);// 0x276b58eb6041
	bool IsStereoGazeDataAvailable();// 0x276a58eb6041
	bool IsEyeTrackerConnected();// 0x276958eb6041
	bool GetStereoGazeData(out EyeTrackerStereoGazeData OutGazeData);// 0x276858eb6041
	bool GetGazeData(out EyeTrackerGazeData OutGazeData);// 0x276758eb6041

--------------------------------
Class: EyeTrackerStereoGazeData
	Vector LeftEyeOrigin;//[Offset: 0x0, Size: 0x18]
	Vector LeftEyeDirection;//[Offset: 0x18, Size: 0x18]
	Vector RightEyeOrigin;//[Offset: 0x30, Size: 0x18]
	Vector RightEyeDirection;//[Offset: 0x48, Size: 0x18]
	Vector FixationPoint;//[Offset: 0x60, Size: 0x18]
	float ConfidenceValue;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: EyeTrackerGazeData
	Vector GazeOrigin;//[Offset: 0x0, Size: 0x18]
	Vector GazeDirection;//[Offset: 0x18, Size: 0x18]
	Vector FixationPoint;//[Offset: 0x30, Size: 0x18]
	float ConfidenceValue;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: TypedElementCounterInterface.Interface.Object

--------------------------------
Class: TestTypedElementInterfaceA.Interface.Object
	bool SetDisplayName(out const ScriptTypedElementHandle InElementHandle, FText InNewName, bool bNotify);// 0x276d58eb6041
	FText GetDisplayName(out const ScriptTypedElementHandle InElementHandle);// 0x276c58eb6041

--------------------------------
Class: TestTypedElementInterfaceB.Interface.Object
	bool MarkAsTested(out const ScriptTypedElementHandle InElementHandle);// 0x276e58eb6041

--------------------------------
Class: TestTypedElementInterfaceC.Interface.Object
	bool GetIsTested(out const ScriptTypedElementHandle InElementHandle);// 0x276f58eb6041

--------------------------------
Class: TestTypedElementInterfaceA_ImplTyped.Object

--------------------------------
Class: TestTypedElementInterfaceA_ImplUntyped.Object

--------------------------------
Class: TestTypedElementInterfaceBAndC_Typed.Object

--------------------------------
Class: TypedElementHandleLibrary.Object
	void Release(out ScriptTypedElementHandle ElementHandle);// 0x277358eb6041
	bool NotEqual(out const ScriptTypedElementHandle LHS, out const ScriptTypedElementHandle RHS);// 0x277258eb6041
	bool IsSet(out const ScriptTypedElementHandle ElementHandle);// 0x277158eb6041
	bool Equal(out const ScriptTypedElementHandle LHS, out const ScriptTypedElementHandle RHS);// 0x277058eb6041

--------------------------------
Class: TypedElementListLibrary.Object
	void Shrink(ScriptTypedElementListProxy ElementList);// 0x278758eb6041
	void Reset(ScriptTypedElementListProxy ElementList);// 0x278658eb6041
	void Reserve(ScriptTypedElementListProxy ElementList, const int Size);// 0x278558eb6041
	bool Remove(ScriptTypedElementListProxy ElementList, out const ScriptTypedElementHandle ElementHandle);// 0x278458eb6041
	int Num(const ScriptTypedElementListProxy ElementList);// 0x278358eb6041
	bool IsValidIndex(const ScriptTypedElementListProxy ElementList, const int Index);// 0x27c458eb6041
	bool HasElementsOfType(const ScriptTypedElementListProxy ElementList, const FName ElementTypeName);// 0x278158eb6041
	bool HasElements(const ScriptTypedElementListProxy ElementList, const class Interface BaseInterfaceType);// 0x278058eb6041
	Object* GetElementInterface(const ScriptTypedElementListProxy ElementList, out const ScriptTypedElementHandle ElementHandle, const class Interface BaseInterfaceType);// 0x277f58eb6041
	ScriptTypedElementHandle[] GetElementHandles(const ScriptTypedElementListProxy ElementList, const class Interface BaseInterfaceType);// 0x277e58eb6041
	ScriptTypedElementHandle GetElementHandleAt(const ScriptTypedElementListProxy ElementList, const int Index);// 0x277d58eb6041
	void Empty(ScriptTypedElementListProxy ElementList, const int Slack);// 0x277c58eb6041
	ScriptTypedElementListProxy CreateScriptElementList(TypedElementRegistry* Registry);// 0x277b58eb6041
	int CountElementsOfType(const ScriptTypedElementListProxy ElementList, const FName ElementTypeName);// 0x277a58eb6041
	int CountElements(const ScriptTypedElementListProxy ElementList, const class Interface BaseInterfaceType);// 0x277958eb6041
	bool Contains(const ScriptTypedElementListProxy ElementList, out const ScriptTypedElementHandle ElementHandle);// 0x277858eb6041
	ScriptTypedElementListProxy Clone(const ScriptTypedElementListProxy ElementList);// 0x277758eb6041
	void AppendList(ScriptTypedElementListProxy ElementList, const ScriptTypedElementListProxy OtherElementList);// 0x277658eb6041
	void Append(ScriptTypedElementListProxy ElementList, out const ScriptTypedElementHandle[] ElementHandles);// 0x277558eb6041
	bool Add(ScriptTypedElementListProxy ElementList, out const ScriptTypedElementHandle ElementHandle);// 0x277458eb6041

--------------------------------
Class: TypedElementRegistry.Object
	TypedElementRegistry* GetInstance();// 0x278958eb6041
	Object* GetElementInterface(out const ScriptTypedElementHandle InElementHandle, const class Interface InBaseInterfaceType);// 0x278858eb6041

--------------------------------
Class: FoliageInstancedStaticMeshComponent.HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate OnInstanceTakePointDamage;//[Offset: 0x890, Size: 0x10]
	delegate OnInstanceTakeRadialDamage;//[Offset: 0x8a0, Size: 0x10]
	bool bEnableDiscardOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 0x1]
	Guid GenerationGuid;//[Offset: 0x8b4, Size: 0x10]

--------------------------------
Class: FoliageStatistics.BlueprintFunctionLibrary.Object
	int FoliageOverlappingSphereCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Vector CenterPosition, float Radius);// 0x27e558eb6041
	void FoliageOverlappingBoxTransforms(Object* WorldContextObject, const StaticMesh* StaticMesh, Box Box, out Transform[] OutTransforms);// 0x27a258eb6041
	int FoliageOverlappingBoxCount(Object* WorldContextObject, const StaticMesh* StaticMesh, Box Box);// 0x27a158eb6041

--------------------------------
Class: FoliageType.Object
	Guid UpdateGuid;//[Offset: 0x28, Size: 0x10]
	float Density;//[Offset: 0x38, Size: 0x4]
	float DensityAdjustmentFactor;//[Offset: 0x3c, Size: 0x4]
	float Radius;//[Offset: 0x40, Size: 0x4]
	bool bSingleInstanceModeOverrideRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	float SingleInstanceModeRadius;//[Offset: 0x48, Size: 0x4]
	enum Scaling;//[Offset: 0x4c, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x50, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x58, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x60, Size: 0x8]
	FoliageVertexColorChannelMask VertexColorMaskByChannel;//[Offset: 0x68, Size: 0xc]
	byte VertexColorMask;//[Offset: 0x98, Size: 0x1]
	float VertexColorMaskThreshold;//[Offset: 0x9c, Size: 0x4]
	bool VertexColorMaskInvert;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	FloatInterval ZOffset;//[Offset: 0xa4, Size: 0x8]
	bool AlignToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool AverageNormal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	bool AverageNormalSingleComponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1]
	float AlignMaxAngle;//[Offset: 0xb0, Size: 0x4]
	bool RandomYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	float RandomPitchAngle;//[Offset: 0xb8, Size: 0x4]
	FloatInterval GroundSlopeAngle;//[Offset: 0xbc, Size: 0x8]
	FloatInterval Height;//[Offset: 0xc4, Size: 0x8]
	FName[] LandscapeLayers;//[Offset: 0xd0, Size: 0x10]
	float MinimumLayerWeight;//[Offset: 0xe0, Size: 0x4]
	FName[] ExclusionLandscapeLayers;//[Offset: 0xe8, Size: 0x10]
	float MinimumExclusionLayerWeight;//[Offset: 0xf8, Size: 0x4]
	FName LandscapeLayer;//[Offset: 0xfc, Size: 0x8]
	bool CollisionWithWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 0x1]
	Vector CollisionScale;//[Offset: 0x108, Size: 0x18]
	int AverageNormalSampleCount;//[Offset: 0x120, Size: 0x4]
	BoxSphereBounds MeshBounds;//[Offset: 0x128, Size: 0x38]
	Vector LowBoundOriginRadius;//[Offset: 0x160, Size: 0x18]
	byte Mobility;//[Offset: 0x178, Size: 0x1]
	Int32Interval CullDistance;//[Offset: 0x17c, Size: 0x8]
	bool bEnableStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x184, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x184, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x184, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x184, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x184, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x184, Size: 0x1]
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x184, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x184, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x185, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x185, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x188, Size: 0x4]
	enum LightmapType;//[Offset: 0x18c, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18d, Size: 0x1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18d, Size: 0x1]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18d, Size: 0x1]
	BodyInstance BodyInstance;//[Offset: 0x190, Size: 0x188]
	byte CustomNavigableGeometry;//[Offset: 0x318, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x319, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31a, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x31b, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x31c, Size: 0x4]
	int TranslucencySortPriority;//[Offset: 0x320, Size: 0x4]
	float CollisionRadius;//[Offset: 0x324, Size: 0x4]
	float ShadeRadius;//[Offset: 0x328, Size: 0x4]
	int NumSteps;//[Offset: 0x32c, Size: 0x4]
	float InitialSeedDensity;//[Offset: 0x330, Size: 0x4]
	float AverageSpreadDistance;//[Offset: 0x334, Size: 0x4]
	float SpreadVariance;//[Offset: 0x338, Size: 0x4]
	int SeedsPerStep;//[Offset: 0x33c, Size: 0x4]
	int DistributionSeed;//[Offset: 0x340, Size: 0x4]
	float MaxInitialSeedOffset;//[Offset: 0x344, Size: 0x4]
	bool bCanGrowInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	bool bSpawnsInShade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 0x1]
	float MaxInitialAge;//[Offset: 0x34c, Size: 0x4]
	float MaxAge;//[Offset: 0x350, Size: 0x4]
	float OverlapPriority;//[Offset: 0x354, Size: 0x4]
	FloatInterval ProceduralScale;//[Offset: 0x358, Size: 0x8]
	RuntimeFloatCurve ScaleCurve;//[Offset: 0x360, Size: 0x88]
	FoliageDensityFalloff DensityFalloff;//[Offset: 0x3e8, Size: 0x90]
	int ChangeCount;//[Offset: 0x478, Size: 0x4]
	bool ReapplyDensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x47c, Size: 0x1]
	bool ReapplyRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x47c, Size: 0x1]
	bool ReapplyAlignToNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x47c, Size: 0x1]
	bool ReapplyRandomYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x47c, Size: 0x1]
	bool ReapplyScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x47c, Size: 0x1]
	bool ReapplyScaleX;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x47c, Size: 0x1]
	bool ReapplyScaleY;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x47c, Size: 0x1]
	bool ReapplyScaleZ;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x47c, Size: 0x1]
	bool ReapplyRandomPitchAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x47d, Size: 0x1]
	bool ReapplyGroundSlope;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x47d, Size: 0x1]
	bool ReapplyHeight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x47d, Size: 0x1]
	bool ReapplyLandscapeLayers;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x47d, Size: 0x1]
	bool ReapplyZOffset;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x47d, Size: 0x1]
	bool ReapplyCollisionWithWorld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x47d, Size: 0x1]
	bool ReapplyVertexColorMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x47d, Size: 0x1]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x47d, Size: 0x1]
	bool bEnableDiscardOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x47e, Size: 0x1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x480, Size: 0x10]
	int VirtualTextureCullMips;//[Offset: 0x490, Size: 0x4]
	enum VirtualTextureRenderPassType;//[Offset: 0x494, Size: 0x1]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FoliageVertexColorChannelMask
	bool UseMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float MaskThreshold;//[Offset: 0x4, Size: 0x4]
	bool InvertMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: FoliageDensityFalloff
	bool bUseFalloffCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve FalloffCurve;//[Offset: 0x8, Size: 0x88]

--------------------------------
Class: FoliageType_Actor.FoliageType.Object
	class Actor* ActorClass;//[Offset: 0x498, Size: 0x8]
	bool bShouldAttachToBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1]
	bool bStaticMeshOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a1, Size: 0x1]
	class FoliageInstancedStaticMeshComponent* StaticMeshOnlyComponentClass;//[Offset: 0x4a8, Size: 0x8]

--------------------------------
Class: FoliageType_InstancedStaticMesh.FoliageType.Object
	StaticMesh* Mesh;//[Offset: 0x498, Size: 0x8]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x4a0, Size: 0x10]
	class FoliageInstancedStaticMeshComponent* ComponentClass;//[Offset: 0x4b0, Size: 0x8]

--------------------------------
Class: InstancedFoliageActor.ISMPartitionActor.PartitionActor.Actor.Object

--------------------------------
Class: InteractiveFoliageActor.StaticMeshActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x288, Size: 0x8]
	Vector TouchingActorEntryPosition;//[Offset: 0x290, Size: 0x18]
	Vector FoliageVelocity;//[Offset: 0x2a8, Size: 0x18]
	Vector FoliageForce;//[Offset: 0x2c0, Size: 0x18]
	Vector FoliagePosition;//[Offset: 0x2d8, Size: 0x18]
	float FoliageDamageImpulseScale;//[Offset: 0x2f0, Size: 0x4]
	float FoliageTouchImpulseScale;//[Offset: 0x2f4, Size: 0x4]
	float FoliageStiffness;//[Offset: 0x2f8, Size: 0x4]
	float FoliageStiffnessQuadratic;//[Offset: 0x2fc, Size: 0x4]
	float FoliageDamping;//[Offset: 0x300, Size: 0x4]
	float MaxDamageImpulse;//[Offset: 0x304, Size: 0x4]
	float MaxTouchImpulse;//[Offset: 0x308, Size: 0x4]
	float MaxForce;//[Offset: 0x30c, Size: 0x4]
	float Mass;//[Offset: 0x310, Size: 0x4]
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult OverlapInfo);// 0x27a558eb6041

--------------------------------
Class: InteractiveFoliageComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ProceduralFoliageBlockingVolume.Volume.Brush.Actor.Object
	ProceduralFoliageVolume* ProceduralFoliageVolume;//[Offset: 0x2b0, Size: 0x8]
	FoliageDensityFalloff DensityFalloff;//[Offset: 0x2b8, Size: 0x90]

--------------------------------
Class: ProceduralFoliageVolume.Volume.Brush.Actor.Object
	ProceduralFoliageComponent* ProceduralComponent;//[Offset: 0x2b0, Size: 0x8]

--------------------------------
Class: ProceduralFoliageComponent.ActorComponent.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0xb0, Size: 0x8]
	float TileOverlap;//[Offset: 0xb8, Size: 0x4]
	Volume* SpawningVolume;//[Offset: 0xc0, Size: 0x8]
	Guid ProceduralGuid;//[Offset: 0xc8, Size: 0x10]

--------------------------------
Class: ProceduralFoliageSpawner.Object
	int RandomSeed;//[Offset: 0x28, Size: 0x4]
	float TileSize;//[Offset: 0x2c, Size: 0x4]
	int NumUniqueTiles;//[Offset: 0x30, Size: 0x4]
	float MinimumQuadTreeSize;//[Offset: 0x34, Size: 0x4]
	FoliageTypeObject[] FoliageTypes;//[Offset: 0x40, Size: 0x10]
	void Simulate(int NumSteps);// 0x27a658eb6041

--------------------------------
Class: FoliageTypeObject
	Object* FoliageTypeObject;//[Offset: 0x0, Size: 0x8]
	FoliageType* TypeInstance;//[Offset: 0x8, Size: 0x8]
	bool bIsAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	class FoliageType_InstancedStaticMesh* Type;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: ProceduralFoliageTile.Object
	ProceduralFoliageSpawner* FoliageSpawner;//[Offset: 0x28, Size: 0x8]
	ProceduralFoliageInstance[] InstancesArray;//[Offset: 0xd0, Size: 0x10]

--------------------------------
Class: ProceduralFoliageInstance
	Quat Rotation;//[Offset: 0x0, Size: 0x20]
	Vector Location;//[Offset: 0x20, Size: 0x18]
	float Age;//[Offset: 0x38, Size: 0x4]
	Vector Normal;//[Offset: 0x40, Size: 0x18]
	float Scale;//[Offset: 0x58, Size: 0x4]
	FoliageType* Type;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: ControlPointMeshActor.Actor.Object
	ControlPointMeshComponent* ControlPointMeshComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x5c8, Size: 0x4]

--------------------------------
Class: LandscapeSplineInterface.Interface.Object

--------------------------------
Class: LandscapeProxy.PartitionActor.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x280, Size: 0x8]
	Guid LandscapeGuid;//[Offset: 0x288, Size: 0x10]
	IntPoint LandscapeSectionOffset;//[Offset: 0x298, Size: 0x8]
	int MaxLODLevel;//[Offset: 0x2a0, Size: 0x4]
	float LODDistanceFactor;//[Offset: 0x2a4, Size: 0x4]
	byte LODFalloff;//[Offset: 0x2a8, Size: 0x1]
	float ComponentScreenSizeToUseSubSections;//[Offset: 0x2ac, Size: 0x4]
	float LOD0ScreenSize;//[Offset: 0x2b0, Size: 0x4]
	float LOD0DistributionSetting;//[Offset: 0x2b4, Size: 0x4]
	float LODDistributionSetting;//[Offset: 0x2b8, Size: 0x4]
	int StaticLightingLOD;//[Offset: 0x2bc, Size: 0x4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x2c0, Size: 0x8]
	float StreamingDistanceMultiplier;//[Offset: 0x2c8, Size: 0x4]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x2d0, Size: 0x8]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x2f8, Size: 0x8]
	LandscapeProxyMaterialOverride[] LandscapeMaterialsOverride;//[Offset: 0x300, Size: 0x10]
	bool bMeshHoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 0x1]
	byte MeshHolesMaxLod;//[Offset: 0x311, Size: 0x1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x318, Size: 0x10]
	bool bSetCreateRuntimeVirtualTextureVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 0x1]
	int VirtualTextureNumLods;//[Offset: 0x32c, Size: 0x4]
	int VirtualTextureLodBias;//[Offset: 0x330, Size: 0x4]
	enum VirtualTextureRenderPassType;//[Offset: 0x334, Size: 0x1]
	float NegativeZBoundsExtension;//[Offset: 0x338, Size: 0x4]
	float PositiveZBoundsExtension;//[Offset: 0x33c, Size: 0x4]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x340, Size: 0x10]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x350, Size: 0x10]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x360, Size: 0x10]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 0x1]
	float StaticLightingResolution;//[Offset: 0x3d8, Size: 0x4]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3dc, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3dc, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3dc, Size: 0x1]
	bool bCastContactShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3dc, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3dc, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3dc, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3dc, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3dc, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x3dd, Size: 0x1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3de, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3de, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x3df, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x3e0, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x3e4, Size: 0x4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x3e8, Size: 0x18]
	int CollisionMipLevel;//[Offset: 0x400, Size: 0x4]
	int SimpleCollisionMipLevel;//[Offset: 0x404, Size: 0x4]
	float CollisionThickness;//[Offset: 0x408, Size: 0x4]
	BodyInstance BodyInstance;//[Offset: 0x410, Size: 0x188]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x598, Size: 0x1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x598, Size: 0x1]
	int ComponentSizeQuads;//[Offset: 0x59c, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x5a0, Size: 0x4]
	int NumSubsections;//[Offset: 0x5a4, Size: 0x4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a8, Size: 0x1]
	bool bFillCollisionUnderLandscapeForNavmesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a8, Size: 0x1]
	bool bUseDynamicMaterialInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a9, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x5aa, Size: 0x1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ab, Size: 0x1]
	bool bHasLayersContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 0x1]
	void SetLandscapeMaterialVectorParameterValue(FName ParameterName, LinearColor Value);// 0x27ae58eb6041
	void SetLandscapeMaterialTextureParameterValue(FName ParameterName, Texture* Value);// 0x27ad58eb6041
	void SetLandscapeMaterialScalarParameterValue(FName ParameterName, float Value);// 0x27ac58eb6041
	bool LandscapeExportHeightmapToRenderTarget(TextureRenderTarget2D* InRenderTarget, bool InExportHeightIntoRGChannel, bool InExportLandscapeProxies);// 0x27ab58eb6041
	void EditorSetLandscapeMaterial(MaterialInterface* NewLandscapeMaterial);// 0x27aa58eb6041
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer, FName EditLayerName);// 0x27a958eb6041
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x27a858eb6041
	void ChangeComponentScreenSizeToUseSubSections(float InComponentScreenSizeToUseSubSections);// 0x27a758eb6041

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x538, Size: 0x10]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x548, Size: 0x10]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x558, Size: 0x10]
	SplineMeshComponent*[] GetSplineMeshComponents();// 0x27c058eb6041

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x28, Size: 0x18]
	Rotator Rotation;//[Offset: 0x40, Size: 0x18]
	float Width;//[Offset: 0x58, Size: 0x4]
	float LayerWidthRatio;//[Offset: 0x5c, Size: 0x4]
	float SideFalloff;//[Offset: 0x60, Size: 0x4]
	float LeftSideFalloffFactor;//[Offset: 0x64, Size: 0x4]
	float RightSideFalloffFactor;//[Offset: 0x68, Size: 0x4]
	float LeftSideLayerFalloffFactor;//[Offset: 0x6c, Size: 0x4]
	float RightSideLayerFalloffFactor;//[Offset: 0x70, Size: 0x4]
	float EndFalloff;//[Offset: 0x74, Size: 0x4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x78, Size: 0x10]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x88, Size: 0x10]
	Box Bounds;//[Offset: 0x98, Size: 0x38]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0xd0, Size: 0x8]

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 0x8]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 0x18]
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 0x18]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10]
	Box Bounds;//[Offset: 0x80, Size: 0x38]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xb8, Size: 0x10]

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 0x8]
	float TangentLen;//[Offset: 0x8, Size: 0x4]
	FName SocketName;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 0x18]
	Vector Left;//[Offset: 0x18, Size: 0x18]
	Vector Right;//[Offset: 0x30, Size: 0x18]
	Vector FalloffLeft;//[Offset: 0x48, Size: 0x18]
	Vector FalloffRight;//[Offset: 0x60, Size: 0x18]
	Vector LayerLeft;//[Offset: 0x78, Size: 0x18]
	Vector LayerRight;//[Offset: 0x90, Size: 0x18]
	Vector LayerFalloffLeft;//[Offset: 0xa8, Size: 0x18]
	Vector LayerFalloffRight;//[Offset: 0xc0, Size: 0x18]
	float StartEndFalloff;//[Offset: 0xd8, Size: 0x4]

--------------------------------
Class: LandscapeProxyMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 0x8]
	float Hardness;//[Offset: 0x38, Size: 0x4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x538, Size: 0x4]
	int SectionBaseY;//[Offset: 0x53c, Size: 0x4]
	int ComponentSizeQuads;//[Offset: 0x540, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x544, Size: 0x4]
	int NumSubsections;//[Offset: 0x548, Size: 0x4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x550, Size: 0x8]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x558, Size: 0x8]
	LandscapeComponentMaterialOverride[] OverrideMaterials;//[Offset: 0x560, Size: 0x10]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x570, Size: 0x10]
	MaterialInstanceDynamic*[] MaterialInstancesDynamic;//[Offset: 0x580, Size: 0x10]
	int8[] LODIndexToMaterialIndex;//[Offset: 0x590, Size: 0x10]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x5a0, Size: 0x8]
	Vector4 WeightmapScaleBias;//[Offset: 0x5b0, Size: 0x20]
	float WeightmapSubsectionOffset;//[Offset: 0x5d0, Size: 0x4]
	Vector4 HeightmapScaleBias;//[Offset: 0x5e0, Size: 0x20]
	Box CachedLocalBox;//[Offset: 0x600, Size: 0x38]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x638, Size: 0x1c]
	Texture2D* HeightmapTexture;//[Offset: 0x658, Size: 0x8]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x660, Size: 0x10]
	Texture2D*[] WeightmapTextures;//[Offset: 0x670, Size: 0x10]
	LandscapeLODStreamingProxy* LODStreamingProxy;//[Offset: 0x680, Size: 0x8]
	Guid MapBuildDataId;//[Offset: 0x688, Size: 0x10]
	Guid[] IrrelevantLights;//[Offset: 0x698, Size: 0x10]
	int CollisionMipLevel;//[Offset: 0x6a8, Size: 0x4]
	int SimpleCollisionMipLevel;//[Offset: 0x6ac, Size: 0x4]
	float NegativeZBoundsExtension;//[Offset: 0x6b0, Size: 0x4]
	float PositiveZBoundsExtension;//[Offset: 0x6b4, Size: 0x4]
	float StaticLightingResolution;//[Offset: 0x6b8, Size: 0x4]
	int ForcedLOD;//[Offset: 0x6bc, Size: 0x4]
	int LODBias;//[Offset: 0x6c0, Size: 0x4]
	Guid StateId;//[Offset: 0x6c4, Size: 0x10]
	Guid BakedTextureMaterialGuid;//[Offset: 0x6d4, Size: 0x10]
	Guid LastBakedTextureMaterialGuid;//[Offset: 0x6e4, Size: 0x10]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x6f8, Size: 0x8]
	byte MobileBlendableLayerMask;//[Offset: 0x700, Size: 0x1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x708, Size: 0x8]
	MaterialInterface*[] MobileMaterialInterfaces;//[Offset: 0x710, Size: 0x10]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x720, Size: 0x10]
	MaterialInstanceDynamic* GetMaterialInstanceDynamic(int InIndex);// 0x27b558eb6041
	float EditorGetPaintLayerWeightByNameAtLocation(out const Vector InLocation, const FName InPaintLayerName);// 0x27b458eb6041
	float EditorGetPaintLayerWeightAtLocation(out const Vector InLocation, LandscapeLayerInfoObject* PaintLayer);// 0x27b358eb6041

--------------------------------
Class: LandscapeComponentMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x538, Size: 0x10]
	int SectionBaseX;//[Offset: 0x548, Size: 0x4]
	int SectionBaseY;//[Offset: 0x54c, Size: 0x4]
	int CollisionSizeQuads;//[Offset: 0x550, Size: 0x4]
	float CollisionScale;//[Offset: 0x554, Size: 0x4]
	int SimpleCollisionSizeQuads;//[Offset: 0x558, Size: 0x4]
	byte[] CollisionQuadFlags;//[Offset: 0x560, Size: 0x10]
	Guid HeightfieldGuid;//[Offset: 0x570, Size: 0x10]
	Box CachedLocalBox;//[Offset: 0x580, Size: 0x38]
	LandscapeComponent* RenderComponent;//[Offset: 0x5b8, Size: 0x1c]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x5e8, Size: 0x10]
	LandscapeComponent* GetRenderComponent();// 0x27b658eb6041

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 0x8]
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 0x1]
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: LandscapeLODStreamingProxy.StreamableRenderAsset.Object

--------------------------------
Class: Landscape.LandscapeProxy.PartitionActor.Actor.Object

--------------------------------
Class: LandscapeBlueprintBrushBase.Actor.Object
	void RequestLandscapeUpdate();// 0x27b258eb6041
	TextureRenderTarget2D* Render(bool InIsHeightmap, TextureRenderTarget2D* InCombinedResult, out const FName InWeightmapLayerName);// 0x27b158eb6041
	void Initialize(out const Transform InLandscapeTransform, out const IntPoint InLandscapeSize, out const IntPoint InLandscapeRenderTargetSize);// 0x27b058eb6041
	void GetBlueprintRenderDependencies(out Object*[] OutStreamableAssets);// 0x27af58eb6041

--------------------------------
Class: LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 0x10]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 0x8]
	float GrassDensity;//[Offset: 0x48, Size: 0x4]
	float PlacementJitter;//[Offset: 0x4c, Size: 0x4]
	int StartCullDistance;//[Offset: 0x50, Size: 0x4]
	int EndCullDistance;//[Offset: 0x54, Size: 0x4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 0x1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 0x8]
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x8, Size: 0x10]
	PerPlatformFloat GrassDensity;//[Offset: 0x18, Size: 0x4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	float PlacementJitter;//[Offset: 0x20, Size: 0x4]
	PerPlatformInt StartCullDistance;//[Offset: 0x24, Size: 0x4]
	PerPlatformInt EndCullDistance;//[Offset: 0x28, Size: 0x4]
	int MinLOD;//[Offset: 0x2c, Size: 0x4]
	enum Scaling;//[Offset: 0x30, Size: 0x1]
	FloatInterval ScaleX;//[Offset: 0x34, Size: 0x8]
	FloatInterval ScaleY;//[Offset: 0x3c, Size: 0x8]
	FloatInterval ScaleZ;//[Offset: 0x44, Size: 0x8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 0x1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x4f, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 0x1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]

--------------------------------
Class: LandscapeHLODBuilder.HLODBuilder.Object

--------------------------------
Class: LandscapeInfo.Object
	Landscape* LandscapeActor;//[Offset: 0x28, Size: 0x1c]
	Guid LandscapeGuid;//[Offset: 0x44, Size: 0x10]
	int ComponentSizeQuads;//[Offset: 0x54, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x58, Size: 0x4]
	int ComponentNumSubsections;//[Offset: 0x5c, Size: 0x4]
	Vector DrawScale;//[Offset: 0x60, Size: 0x18]
	LandscapeStreamingProxy*[] Proxies;//[Offset: 0x118, Size: 0x10]

--------------------------------
Class: LandscapeStreamingProxy.LandscapeProxy.PartitionActor.Actor.Object
	Landscape* LandscapeActor;//[Offset: 0x5b0, Size: 0x1c]

--------------------------------
Class: LandscapeMaterialInstanceConstant.MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	LandscapeMaterialTextureStreamingInfo[] TextureStreamingInfo;//[Offset: 0x200, Size: 0x10]
	bool bIsLayerThumbnail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
	bool bDisableTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 0x1]
	bool bMobile;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 0x1]
	bool bEditorToolUsage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x210, Size: 0x1]

--------------------------------
Class: LandscapeMaterialTextureStreamingInfo
	FName TextureName;//[Offset: 0x0, Size: 0x8]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: LandscapeMeshCollisionComponent.LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid MeshGuid;//[Offset: 0x638, Size: 0x10]

--------------------------------
Class: LandscapeMeshProxyActor.Actor.Object
	LandscapeMeshProxyComponent* LandscapeMeshProxyComponent;//[Offset: 0x278, Size: 0x8]

--------------------------------
Class: LandscapeMeshProxyComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid LandscapeGuid;//[Offset: 0x5c8, Size: 0x10]
	IntPoint[] ProxyComponentBases;//[Offset: 0x5d8, Size: 0x10]
	int8 ProxyLOD;//[Offset: 0x5e8, Size: 0x1]

--------------------------------
Class: LandscapeSettings.DeveloperSettings.Object
	int MaxNumberOfLayers;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: LandscapeSplineActor.Actor.Object
	Guid LandscapeGuid;//[Offset: 0x280, Size: 0x10]

--------------------------------
Class: LandscapeSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object

--------------------------------
Class: LandscapeWeightmapUsage.Object
	LandscapeComponent* ChannelUsage;//[Offset: 0x28, Size: 0x8]
	Guid LayerGuid;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: MaterialExpressionLandscapeGrassOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	GrassInput[] GrassTypes;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: GrassInput
	FName Name;//[Offset: 0x0, Size: 0x8]
	LandscapeGrassType* GrassType;//[Offset: 0x8, Size: 0x8]
	ExpressionInput Input;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: MaterialExpressionLandscapeLayerBlend.MaterialExpression.Object
	LayerBlendInput[] Layers;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: LayerBlendInput
	FName LayerName;//[Offset: 0x0, Size: 0x8]
	byte BlendType;//[Offset: 0x8, Size: 0x1]
	ExpressionInput LayerInput;//[Offset: 0xc, Size: 0x14]
	ExpressionInput HeightInput;//[Offset: 0x20, Size: 0x14]
	float PreviewWeight;//[Offset: 0x34, Size: 0x4]
	Vector ConstLayerInput;//[Offset: 0x38, Size: 0x18]
	float ConstHeightInput;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: MaterialExpressionLandscapeLayerCoords.MaterialExpression.Object
	byte MappingType;//[Offset: 0x39, Size: 0x1]
	byte CustomUVType;//[Offset: 0x3a, Size: 0x1]
	float MappingScale;//[Offset: 0x3c, Size: 0x4]
	float MappingRotation;//[Offset: 0x40, Size: 0x4]
	float MappingPanU;//[Offset: 0x44, Size: 0x4]
	float MappingPanV;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: MaterialExpressionLandscapeLayerSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x3c, Size: 0x8]
	float PreviewWeight;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: MaterialExpressionLandscapeLayerSwitch.MaterialExpression.Object
	ExpressionInput LayerUsed;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput LayerNotUsed;//[Offset: 0x50, Size: 0x14]
	FName ParameterName;//[Offset: 0x64, Size: 0x8]
	bool PreviewUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]

--------------------------------
Class: MaterialExpressionLandscapeLayerWeight.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x3c, Size: 0x14]
	ExpressionInput Layer;//[Offset: 0x50, Size: 0x14]
	FName ParameterName;//[Offset: 0x64, Size: 0x8]
	float PreviewWeight;//[Offset: 0x6c, Size: 0x4]
	Vector ConstBase;//[Offset: 0x70, Size: 0x18]

--------------------------------
Class: MaterialExpressionLandscapePhysicalMaterialOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	PhysicalMaterialInput[] Inputs;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: PhysicalMaterialInput
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 0x8]
	ExpressionInput Input;//[Offset: 0x8, Size: 0x14]

--------------------------------
Class: MaterialExpressionLandscapeVisibilityMask.MaterialExpression.Object

--------------------------------
Class: FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object

--------------------------------
Class: GenlockedCustomTimeStep.FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object

--------------------------------
Class: GenlockedFixedRateCustomTimeStep.GenlockedCustomTimeStep.FixedFrameRateCustomTimeStep.EngineCustomTimeStep.Object
	FrameRate FrameRate;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: GenlockedTimecodeProvider.TimecodeProvider.Object
	bool bUseGenlockToCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: TimeManagementBlueprintLibrary.BlueprintFunctionLibrary.Object
	FrameTime TransformTime(out const FrameTime SourceTime, out const FrameRate SourceRate, out const FrameRate DestinationRate);// 0x27d958eb6041
	FrameNumber Subtract_FrameNumberInteger(FrameNumber A, int B);// 0x27d858eb6041
	FrameNumber Subtract_FrameNumberFrameNumber(FrameNumber A, FrameNumber B);// 0x27d758eb6041
	FrameTime SnapFrameTimeToRate(out const FrameTime SourceTime, out const FrameRate SourceRate, out const FrameRate SnapToRate);// 0x27d658eb6041
	FrameTime Multiply_SecondsFrameRate(float TimeInSeconds, out const FrameRate FrameRate);// 0x27d558eb6041
	FrameNumber Multiply_FrameNumberInteger(FrameNumber A, int B);// 0x27d458eb6041
	bool IsValid_MultipleOf(out const FrameRate InFrameRate, out const FrameRate OtherFramerate);// 0x27d358eb6041
	bool IsValid_Framerate(out const FrameRate InFrameRate);// 0x27d258eb6041
	FrameRate GetTimecodeFrameRate();// 0x27d158eb6041
	Timecode GetTimecode();// 0x27d058eb6041
	FrameNumber Divide_FrameNumberInteger(FrameNumber A, int B);// 0x27cf58eb6041
	FString Conv_TimecodeToString(out const Timecode InTimecode, bool bForceSignDisplay);// 0x27ce58eb6041
	float Conv_QualifiedFrameTimeToSeconds(out const QualifiedFrameTime InFrameTime);// 0x27cd58eb6041
	float Conv_FrameRateToSeconds(out const FrameRate InFrameRate);// 0x27cc58eb6041
	int Conv_FrameNumberToInteger(out const FrameNumber InFrameNumber);// 0x27cb58eb6041
	FrameNumber Add_FrameNumberInteger(FrameNumber A, int B);// 0x27ca58eb6041
	FrameNumber Add_FrameNumberFrameNumber(FrameNumber A, FrameNumber B);// 0x27c958eb6041

--------------------------------
Class: TimeSynchronizationSource.Object
	bool bUseForSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	int FrameOffset;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: MovieSceneCustomClockSource.Interface.Object
	void OnTick(float DeltaSeconds, float InPlayRate);// 0x27dd58eb6041
	void OnStopPlaying(out const QualifiedFrameTime InStopTime);// 0x27dc58eb6041
	void OnStartPlaying(out const QualifiedFrameTime InStartTime);// 0x27db58eb6041
	FrameTime OnRequestCurrentTime(out const QualifiedFrameTime InCurrentTime, float InPlayRate);// 0x27da58eb6041

--------------------------------
Class: MovieSceneDeterminismSource.Interface.Object

--------------------------------
Class: MovieSceneEntityProvider.Interface.Object

--------------------------------
Class: MovieSceneEvaluationHook.Interface.Object

--------------------------------
Class: MovieScenePlaybackClient.Interface.Object

--------------------------------
Class: MovieSceneTrackTemplateProducer.Interface.Object

--------------------------------
Class: NodeAndChannelMappings.Interface.Object

--------------------------------
Class: MovieSceneNodeGroup.Object

--------------------------------
Class: MovieSceneNodeGroupCollection.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingID;//[Offset: 0x0, Size: 0x18]
	Object* Object;//[Offset: 0x18, Size: 0x28]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: MovieSceneBindingOwnerInterface.Interface.Object

--------------------------------
Class: MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	MovieSceneBoolChannel BoolCurve;//[Offset: 0xe0, Size: 0xd8]

--------------------------------
Class: MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneGenericBoundObjectInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoundSceneComponentInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSceneComponentImpersonator.Interface.Object

--------------------------------
Class: MovieSceneValueDecomposer.Interface.Object

--------------------------------
Class: MovieSceneEasingExternalCurve.Object
	CurveFloat* Curve;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: MovieSceneEasingFunction.Interface.Object
	float OnEvaluate(float Interp);// 0x27de58eb6041

--------------------------------
Class: MovieSceneEvalTimeSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEvaluationHookSystem.MovieSceneEntitySystem.Object
	<MovieSceneEvaluationInstanceKey,MovieSceneEvaluationHookEventContainer> PendingEventsByRootInstance;//[Offset: 0x40, Size: 0x50]

--------------------------------
Class: MovieSceneEvaluationInstanceKey

--------------------------------
Class: MovieSceneEvaluationHookEventContainer
	MovieSceneEvaluationHookEvent[] Events;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationHookEvent
	MovieSceneEvaluationHookComponent Hook;//[Offset: 0x0, Size: 0x20]

--------------------------------
Class: MovieSceneEvaluationHookComponent
	interface class None* Interface;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: MovieSceneHookSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool bRequiresRangedHook;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bRequiresTriggerHooks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: MovieSceneKeyProxy.Interface.Object

--------------------------------
Class: MovieSceneMasterInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePreAnimatedStateSystemInterface.Interface.Object

--------------------------------
Class: MovieSceneCachePreAnimatedStateSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneRestorePreAnimatedStateSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSequenceActor.Interface.Object

--------------------------------
Class: MovieSceneSpawnablesSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSpawnSection.MovieSceneBoolSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneSpawnTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10]
	Guid ObjectGuid;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: TestMovieSceneTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bHighPassFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	MovieSceneSection*[] SectionArray;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: TestMovieSceneSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: TestMovieSceneSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: TestMovieSceneSubTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] SectionArray;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: TestMovieSceneSubSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: TestMovieSceneEvalHookTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] SectionArray;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: TestMovieSceneEvalHookSection.MovieSceneHookSection.MovieSceneSection.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneTrackInstance.Object
	Object* AnimatedObject;//[Offset: 0x28, Size: 0x8]
	bool bIsMasterTrackInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
	MovieSceneEntitySystemLinker* PrivateLinker;//[Offset: 0x38, Size: 0x8]
	MovieSceneTrackInstanceInput[] Inputs;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: MovieSceneTrackInstanceInput
	MovieSceneSection* Section;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: MovieSceneTrackInstanceInstantiator.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTrackInstanceSystem.MovieSceneEntitySystem.Object
	MovieSceneTrackInstanceInstantiator* Instantiator;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: ChaosDebugDrawComponent.ActorComponent.Object

--------------------------------
Class: ChaosNotifyHandlerInterface.Interface.Object

--------------------------------
Class: ChaosSolverEngineBlueprintLibrary.BlueprintFunctionLibrary.Object
	HitResult ConvertPhysicsCollisionToHitResult(out const ChaosPhysicsCollisionInfo PhysicsCollision);// 0x27df58eb6041

--------------------------------
Class: ChaosSolver.Object

--------------------------------
Class: ChaosSolverSettings.DeveloperSettings.Object
	SoftClassPath DefaultChaosSolverActorClass;//[Offset: 0x40, Size: 0x18]

--------------------------------
Class: FieldSystemMetaDataIteration.FieldSystemMetaData.ActorComponent.Object
	int Iterations;//[Offset: 0xb0, Size: 0x4]
	FieldSystemMetaDataIteration* SetMetaDataIteration(int Iterations);// 0x27ed58eb6041

--------------------------------
Class: FieldSystemMetaDataProcessingResolution.FieldSystemMetaData.ActorComponent.Object
	byte ResolutionType;//[Offset: 0xb0, Size: 0x1]
	FieldSystemMetaDataProcessingResolution* SetMetaDataaProcessingResolutionType(byte ResolutionType);// 0x27ee58eb6041

--------------------------------
Class: FieldSystemMetaDataFilter.FieldSystemMetaData.ActorComponent.Object
	byte FilterType;//[Offset: 0xb0, Size: 0x1]
	byte ObjectType;//[Offset: 0xb1, Size: 0x1]
	byte PositionType;//[Offset: 0xb2, Size: 0x1]
	FieldSystemMetaDataFilter* SetMetaDataFilterType(byte FilterType, byte ObjectType, byte PositionType);// 0x27ef58eb6041

--------------------------------
Class: FieldNodeInt.FieldNodeBase.ActorComponent.Object

--------------------------------
Class: FieldNodeFloat.FieldNodeBase.ActorComponent.Object

--------------------------------
Class: FieldNodeVector.FieldNodeBase.ActorComponent.Object

--------------------------------
Class: UniformInteger.FieldNodeInt.FieldNodeBase.ActorComponent.Object
	int Magnitude;//[Offset: 0xb0, Size: 0x4]
	UniformInteger* SetUniformInteger(int Magnitude);// 0x27f058eb6041

--------------------------------
Class: RadialIntMask.FieldNodeInt.FieldNodeBase.ActorComponent.Object
	float Radius;//[Offset: 0xb0, Size: 0x4]
	Vector Position;//[Offset: 0xb8, Size: 0x18]
	int InteriorValue;//[Offset: 0xd0, Size: 0x4]
	int ExteriorValue;//[Offset: 0xd4, Size: 0x4]
	byte SetMaskCondition;//[Offset: 0xd8, Size: 0x1]
	RadialIntMask* SetRadialIntMask(float Radius, Vector Position, int InteriorValue, int ExteriorValue, byte SetMaskConditionIn);// 0x27f158eb6041

--------------------------------
Class: UniformScalar.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4]
	UniformScalar* SetUniformScalar(float Magnitude);// 0x27f258eb6041

--------------------------------
Class: WaveScalar.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4]
	Vector Position;//[Offset: 0xb8, Size: 0x18]
	float Wavelength;//[Offset: 0xd0, Size: 0x4]
	float Period;//[Offset: 0xd4, Size: 0x4]
	byte Function;//[Offset: 0xd8, Size: 0x1]
	byte Falloff;//[Offset: 0xd9, Size: 0x1]
	WaveScalar* SetWaveScalar(float Magnitude, Vector Position, float Wavelength, float Period, float Time, byte Function, byte Falloff);// 0x27f358eb6041

--------------------------------
Class: RadialFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4]
	float MinRange;//[Offset: 0xb4, Size: 0x4]
	float MaxRange;//[Offset: 0xb8, Size: 0x4]
	float Default;//[Offset: 0xbc, Size: 0x4]
	float Radius;//[Offset: 0xc0, Size: 0x4]
	Vector Position;//[Offset: 0xc8, Size: 0x18]
	byte Falloff;//[Offset: 0xe0, Size: 0x1]
	RadialFalloff* SetRadialFalloff(float Magnitude, float MinRange, float MaxRange, float Default, float Radius, Vector Position, byte Falloff);// 0x27f458eb6041

--------------------------------
Class: PlaneFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4]
	float MinRange;//[Offset: 0xb4, Size: 0x4]
	float MaxRange;//[Offset: 0xb8, Size: 0x4]
	float Default;//[Offset: 0xbc, Size: 0x4]
	float Distance;//[Offset: 0xc0, Size: 0x4]
	Vector Position;//[Offset: 0xc8, Size: 0x18]
	Vector Normal;//[Offset: 0xe0, Size: 0x18]
	byte Falloff;//[Offset: 0xf8, Size: 0x1]
	PlaneFalloff* SetPlaneFalloff(float Magnitude, float MinRange, float MaxRange, float Default, float Distance, Vector Position, Vector Normal, byte Falloff);// 0x27f558eb6041

--------------------------------
Class: BoxFalloff.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4]
	float MinRange;//[Offset: 0xb4, Size: 0x4]
	float MaxRange;//[Offset: 0xb8, Size: 0x4]
	float Default;//[Offset: 0xbc, Size: 0x4]
	Transform Transform;//[Offset: 0xc0, Size: 0x60]
	byte Falloff;//[Offset: 0x120, Size: 0x1]
	BoxFalloff* SetBoxFalloff(float Magnitude, float MinRange, float MaxRange, float Default, Transform Transform, byte Falloff);// 0x27f658eb6041

--------------------------------
Class: NoiseField.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	float MinRange;//[Offset: 0xb0, Size: 0x4]
	float MaxRange;//[Offset: 0xb4, Size: 0x4]
	Transform Transform;//[Offset: 0xc0, Size: 0x60]
	NoiseField* SetNoiseField(float MinRange, float MaxRange, Transform Transform);// 0x27f758eb6041

--------------------------------
Class: UniformVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4]
	Vector Direction;//[Offset: 0xb8, Size: 0x18]
	UniformVector* SetUniformVector(float Magnitude, Vector Direction);// 0x27f858eb6041

--------------------------------
Class: RadialVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4]
	Vector Position;//[Offset: 0xb8, Size: 0x18]
	RadialVector* SetRadialVector(float Magnitude, Vector Position);// 0x27f958eb6041

--------------------------------
Class: RandomVector.FieldNodeVector.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4]
	RandomVector* SetRandomVector(float Magnitude);// 0x27fa58eb6041

--------------------------------
Class: OperatorField.FieldNodeBase.ActorComponent.Object
	float Magnitude;//[Offset: 0xb0, Size: 0x4]
	FieldNodeBase* RightField;//[Offset: 0xb8, Size: 0x8]
	FieldNodeBase* LeftField;//[Offset: 0xc0, Size: 0x8]
	byte Operation;//[Offset: 0xc8, Size: 0x1]
	OperatorField* SetOperatorField(float Magnitude, const FieldNodeBase* LeftField, const FieldNodeBase* RightField, byte Operation);// 0x27fb58eb6041

--------------------------------
Class: ToIntegerField.FieldNodeInt.FieldNodeBase.ActorComponent.Object
	FieldNodeFloat* FloatField;//[Offset: 0xb0, Size: 0x8]
	ToIntegerField* SetToIntegerField(const FieldNodeFloat* FloatField);// 0x27fc58eb6041

--------------------------------
Class: ToFloatField.FieldNodeFloat.FieldNodeBase.ActorComponent.Object
	FieldNodeInt* IntField;//[Offset: 0xb0, Size: 0x8]
	ToFloatField* SetToFloatField(const FieldNodeInt* IntegerField);// 0x27fd58eb6041

--------------------------------
Class: CullingField.FieldNodeBase.ActorComponent.Object
	FieldNodeBase* Culling;//[Offset: 0xb0, Size: 0x8]
	FieldNodeBase* Field;//[Offset: 0xb8, Size: 0x8]
	byte Operation;//[Offset: 0xc0, Size: 0x1]
	CullingField* SetCullingField(const FieldNodeBase* Culling, const FieldNodeBase* Field, byte Operation);// 0x27fe58eb6041

--------------------------------
Class: ReturnResultsTerminal.FieldNodeBase.ActorComponent.Object
	ReturnResultsTerminal* SetReturnResultsTerminal();// 0x27ff58eb6041

--------------------------------
Class: NetAnalyticsAggregatorConfig.Object
	NetAnalyticsDataConfig[] NetAnalyticsData;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: NetAnalyticsDataConfig
	FName DataName;//[Offset: 0x0, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: ChaosDestructionListener.SceneComponent.ActorComponent.Object
	bool bIsCollisionEventListeningEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 0x1]
	bool bIsBreakingEventListeningEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b0, Size: 0x1]
	bool bIsTrailingEventListeningEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b0, Size: 0x1]
	bool bIsRemovalEventListeningEnabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b0, Size: 0x1]
	ChaosCollisionEventRequestSettings CollisionEventRequestSettings;//[Offset: 0x2b4, Size: 0x18]
	ChaosBreakingEventRequestSettings BreakingEventRequestSettings;//[Offset: 0x2cc, Size: 0x18]
	ChaosTrailingEventRequestSettings TrailingEventRequestSettings;//[Offset: 0x2e4, Size: 0x18]
	ChaosRemovalEventRequestSettings RemovalEventRequestSettings;//[Offset: 0x2fc, Size: 0x10]
	<ChaosSolverActor*> ChaosSolverActors;//[Offset: 0x310, Size: 0x50]
	<GeometryCollectionActor*> GeometryCollectionActors;//[Offset: 0x360, Size: 0x50]
	delegate OnCollisionEvents;//[Offset: 0x3b0, Size: 0x10]
	delegate OnBreakingEvents;//[Offset: 0x3c0, Size: 0x10]
	delegate OnTrailingEvents;//[Offset: 0x3d0, Size: 0x10]
	delegate OnRemovalEvents;//[Offset: 0x3e0, Size: 0x10]
	void SortTrailingEvents(out ChaosTrailingEventData[] TrailingEvents, enum SortMethod);// 0x281058eb6041
	void SortRemovalEvents(out ChaosRemovalEventData[] RemovalEvents, enum SortMethod);// 0x280f58eb6041
	void SortCollisionEvents(out ChaosCollisionEventData[] CollisionEvents, enum SortMethod);// 0x280e58eb6041
	void SortBreakingEvents(out ChaosBreakingEventData[] BreakingEvents, enum SortMethod);// 0x280d58eb6041
	void SetTrailingEventRequestSettings(out const ChaosTrailingEventRequestSettings InSettings);// 0x280c58eb6041
	void SetTrailingEventEnabled(bool bIsEnabled);// 0x280b58eb6041
	void SetRemovalEventRequestSettings(out const ChaosRemovalEventRequestSettings InSettings);// 0x280a58eb6041
	void SetRemovalEventEnabled(bool bIsEnabled);// 0x280958eb6041
	void SetCollisionEventRequestSettings(out const ChaosCollisionEventRequestSettings InSettings);// 0x280858eb6041
	void SetCollisionEventEnabled(bool bIsEnabled);// 0x280758eb6041
	void SetBreakingEventRequestSettings(out const ChaosBreakingEventRequestSettings InSettings);// 0x284858eb6041
	void SetBreakingEventEnabled(bool bIsEnabled);// 0x280558eb6041
	void RemoveGeometryCollectionActor(GeometryCollectionActor* GeometryCollectionActor);// 0x280458eb6041
	void RemoveChaosSolverActor(ChaosSolverActor* ChaosSolverActor);// 0x280358eb6041
	bool IsEventListening();// 0x280258eb6041
	void AddGeometryCollectionActor(GeometryCollectionActor* GeometryCollectionActor);// 0x280158eb6041
	void AddChaosSolverActor(ChaosSolverActor* ChaosSolverActor);// 0x280058eb6041

--------------------------------
Class: ChaosCollisionEventRequestSettings
	int MaxNumberResults;//[Offset: 0x0, Size: 0x4]
	float MinMass;//[Offset: 0x4, Size: 0x4]
	float MinSpeed;//[Offset: 0x8, Size: 0x4]
	float MinImpulse;//[Offset: 0xc, Size: 0x4]
	float MaxDistance;//[Offset: 0x10, Size: 0x4]
	enum SortMethod;//[Offset: 0x14, Size: 0x1]

--------------------------------
Class: ChaosBreakingEventRequestSettings
	int MaxNumberOfResults;//[Offset: 0x0, Size: 0x4]
	float MinRadius;//[Offset: 0x4, Size: 0x4]
	float MinSpeed;//[Offset: 0x8, Size: 0x4]
	float MinMass;//[Offset: 0xc, Size: 0x4]
	float MaxDistance;//[Offset: 0x10, Size: 0x4]
	enum SortMethod;//[Offset: 0x14, Size: 0x1]

--------------------------------
Class: ChaosTrailingEventRequestSettings
	int MaxNumberOfResults;//[Offset: 0x0, Size: 0x4]
	float MinMass;//[Offset: 0x4, Size: 0x4]
	float MinSpeed;//[Offset: 0x8, Size: 0x4]
	float MinAngularSpeed;//[Offset: 0xc, Size: 0x4]
	float MaxDistance;//[Offset: 0x10, Size: 0x4]
	enum SortMethod;//[Offset: 0x14, Size: 0x1]

--------------------------------
Class: ChaosRemovalEventRequestSettings
	int MaxNumberOfResults;//[Offset: 0x0, Size: 0x4]
	float MinMass;//[Offset: 0x4, Size: 0x4]
	float MaxDistance;//[Offset: 0x8, Size: 0x4]
	enum SortMethod;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ChaosTrailingEventData
	Vector Location;//[Offset: 0x0, Size: 0x18]
	Vector Velocity;//[Offset: 0x18, Size: 0x18]
	Vector AngularVelocity;//[Offset: 0x30, Size: 0x18]
	float Mass;//[Offset: 0x48, Size: 0x4]
	int ParticleIndex;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: ChaosRemovalEventData
	Vector Location;//[Offset: 0x0, Size: 0x18]
	float Mass;//[Offset: 0x18, Size: 0x4]
	int ParticleIndex;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: ChaosCollisionEventData
	Vector Location;//[Offset: 0x0, Size: 0x18]
	Vector Normal;//[Offset: 0x18, Size: 0x18]
	Vector Velocity1;//[Offset: 0x30, Size: 0x18]
	Vector Velocity2;//[Offset: 0x48, Size: 0x18]
	float Mass1;//[Offset: 0x60, Size: 0x4]
	float Mass2;//[Offset: 0x64, Size: 0x4]
	Vector Impulse;//[Offset: 0x68, Size: 0x18]

--------------------------------
Class: ChaosBreakingEventData
	Vector Location;//[Offset: 0x0, Size: 0x18]
	Vector Velocity;//[Offset: 0x18, Size: 0x18]
	float Mass;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: AnimationStateMachineLibrary.BlueprintFunctionLibrary.Object
	bool IsStateBlendingOut(out const AnimUpdateContext UpdateContext, out const AnimationStateResultReference Node);// 0x281558eb6041
	bool IsStateBlendingIn(out const AnimUpdateContext UpdateContext, out const AnimationStateResultReference Node);// 0x281458eb6041
	void ConvertToAnimationStateResultPure(out const AnimNodeReference Node, out AnimationStateResultReference AnimationState, out bool Result);// 0x281358eb6041
	void ConvertToAnimationStateResult(out const AnimNodeReference Node, out AnimationStateResultReference AnimationState, out enum Result);// 0x281258eb6041

--------------------------------
Class: AnimUpdateContext.AnimExecutionContext

--------------------------------
Class: AnimExecutionContext

--------------------------------
Class: AnimationStateResultReference.AnimNodeReference

--------------------------------
Class: AnimNodeReference

--------------------------------
Class: AnimExecutionContextLibrary.BlueprintFunctionLibrary.Object
	float GetDeltaTime(out const AnimUpdateContext Context);// 0x281d58eb6041
	float GetCurrentWeight(out const AnimUpdateContext Context);// 0x281c58eb6041
	AnimNodeReference GetAnimNodeReference(AnimInstance* Instance, int Index);// 0x281b58eb6041
	AnimInstance* GetAnimInstance(out const AnimExecutionContext Context);// 0x281a58eb6041
	AnimUpdateContext ConvertToUpdateContext(out const AnimExecutionContext Context, out enum Result);// 0x281958eb6041
	AnimPoseContext ConvertToPoseContext(out const AnimExecutionContext Context, out enum Result);// 0x281858eb6041
	AnimInitializationContext ConvertToInitializationContext(out const AnimExecutionContext Context, out enum Result);// 0x281758eb6041
	AnimComponentSpacePoseContext ConvertToComponentSpacePoseContext(out const AnimExecutionContext Context, out enum Result);// 0x281658eb6041

--------------------------------
Class: AnimPoseContext.AnimExecutionContext

--------------------------------
Class: AnimInitializationContext.AnimExecutionContext

--------------------------------
Class: AnimComponentSpacePoseContext.AnimExecutionContext

--------------------------------
Class: AnimNotify_PlayMontageNotify.AnimNotify.Object
	FName NotifyName;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: AnimNotify_PlayMontageNotifyWindow.AnimNotifyState.Object
	FName NotifyName;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: AnimSequencerInstance.AnimInstance.Object

--------------------------------
Class: KismetAnimationLibrary.BlueprintFunctionLibrary.Object
	void K2_TwoBoneIK(out const Vector RootPos, out const Vector JointPos, out const Vector EndPos, out const Vector JointTarget, out const Vector Effector, out Vector OutJointPos, out Vector OutEndPos, bool bAllowStretching, float StartStretchRatio, float MaxStretchScale);// 0x282858eb6041
	void K2_StartProfilingTimer();// 0x286958eb6041
	Vector K2_MakePerlinNoiseVectorAndRemap(float X, float Y, float Z, float RangeOutMinX, float RangeOutMaxX, float RangeOutMinY, float RangeOutMaxY, float RangeOutMinZ, float RangeOutMaxZ);// 0x282658eb6041
	float K2_MakePerlinNoiseAndRemap(float Value, float RangeOutMin, float RangeOutMax);// 0x282558eb6041
	Transform K2_LookAt(out const Transform CurrentTransform, out const Vector TargetPosition, Vector LookAtVector, bool bUseUpVector, Vector UpVector, float ClampConeInDegree);// 0x282458eb6041
	float K2_EndProfilingTimer(bool bLog, FString LogPrefix);// 0x282358eb6041
	float K2_DistanceBetweenTwoSocketsAndMapRange(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameA, byte SocketSpaceA, const FName SocketOrBoneNameB, byte SocketSpaceB, bool bRemapRange, float InRangeMin, float InRangeMax, float OutRangeMin, float OutRangeMax);// 0x282258eb6041
	Vector K2_DirectionBetweenSockets(const SkeletalMeshComponent* Component, const FName SocketOrBoneNameFrom, const FName SocketOrBoneNameTo);// 0x282158eb6041
	float K2_CalculateVelocityFromSockets(float DeltaSeconds, SkeletalMeshComponent* Component, const FName SocketOrBoneName, const FName ReferenceSocketOrBone, byte SocketSpace, Vector OffsetInBoneSpace, out PositionHistory History, int NumberOfSamples, float VelocityMin, float VelocityMax, enum EasingType, out const RuntimeFloatCurve CustomCurve);// 0x282058eb6041
	float K2_CalculateVelocityFromPositionHistory(float DeltaSeconds, Vector Position, out PositionHistory History, int NumberOfSamples, float VelocityMin, float VelocityMax);// 0x281f58eb6041
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x281e58eb6041

--------------------------------
Class: PositionHistory
	Vector[] Positions;//[Offset: 0x0, Size: 0x10]
	float Range;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: LinkedAnimGraphLibrary.BlueprintFunctionLibrary.Object
	bool HasLinkedAnimInstance(out const LinkedAnimGraphReference Node);// 0x282c58eb6041
	AnimInstance* GetLinkedAnimInstance(out const LinkedAnimGraphReference Node);// 0x282b58eb6041
	void ConvertToLinkedAnimGraphPure(out const AnimNodeReference Node, out LinkedAnimGraphReference LinkedAnimGraph, out bool Result);// 0x282a58eb6041
	LinkedAnimGraphReference ConvertToLinkedAnimGraph(out const AnimNodeReference Node, out enum Result);// 0x282958eb6041

--------------------------------
Class: LinkedAnimGraphReference.AnimNodeReference

--------------------------------
Class: PlayMontageCallbackProxy.Object
	delegate OnCompleted;//[Offset: 0x28, Size: 0x10]
	delegate OnBlendOut;//[Offset: 0x38, Size: 0x10]
	delegate OnInterrupted;//[Offset: 0x48, Size: 0x10]
	delegate OnNotifyBegin;//[Offset: 0x58, Size: 0x10]
	delegate OnNotifyEnd;//[Offset: 0x68, Size: 0x10]
	void OnNotifyEndReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x283158eb6041
	void OnNotifyBeginReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x283058eb6041
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x282f58eb6041
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x282e58eb6041
	PlayMontageCallbackProxy* CreateProxyObjectForPlayMontage(SkeletalMeshComponent* InSkeletalMeshComponent, AnimMontage* MontageToPlay, float PlayRate, float StartingPosition, FName StartingSection);// 0x282d58eb6041

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
Class: SequenceEvaluatorLibrary.BlueprintFunctionLibrary.Object
	SequenceEvaluatorReference SetSequenceWithInertialBlending(out const AnimUpdateContext UpdateContext, out const SequenceEvaluatorReference SequenceEvaluator, AnimSequenceBase* Sequence, float BlendTime);// 0x283958eb6041
	SequenceEvaluatorReference SetSequence(out const SequenceEvaluatorReference SequenceEvaluator, AnimSequenceBase* Sequence);// 0x283858eb6041
	SequenceEvaluatorReference SetExplicitTime(out const SequenceEvaluatorReference SequenceEvaluator, float Time);// 0x283758eb6041
	AnimSequenceBase* GetSequence(out const SequenceEvaluatorReference SequenceEvaluator);// 0x283658eb6041
	float GetAccumulatedTime(out const SequenceEvaluatorReference SequenceEvaluator);// 0x283558eb6041
	void ConvertToSequenceEvaluatorPure(out const AnimNodeReference Node, out SequenceEvaluatorReference SequenceEvaluator, out bool Result);// 0x283458eb6041
	SequenceEvaluatorReference ConvertToSequenceEvaluator(out const AnimNodeReference Node, out enum Result);// 0x283358eb6041
	SequenceEvaluatorReference AdvanceTime(out const AnimUpdateContext UpdateContext, out const SequenceEvaluatorReference SequenceEvaluator, float PlayRate);// 0x283258eb6041

--------------------------------
Class: SequenceEvaluatorReference.AnimNodeReference

--------------------------------
Class: SequencePlayerLibrary.BlueprintFunctionLibrary.Object
	SequencePlayerReference SetStartPosition(out const SequencePlayerReference SequencePlayer, float StartPosition);// 0x284658eb6041
	SequencePlayerReference SetSequenceWithInertialBlending(out const AnimUpdateContext UpdateContext, out const SequencePlayerReference SequencePlayer, AnimSequenceBase* Sequence, float BlendTime);// 0x284558eb6041
	SequencePlayerReference SetSequence(out const SequencePlayerReference SequencePlayer, AnimSequenceBase* Sequence);// 0x284458eb6041
	SequencePlayerReference SetPlayRate(out const SequencePlayerReference SequencePlayer, float PlayRate);// 0x284358eb6041
	SequencePlayerReference SetAccumulatedTime(out const SequencePlayerReference SequencePlayer, float Time);// 0x284258eb6041
	float GetStartPosition(out const SequencePlayerReference SequencePlayer);// 0x284158eb6041
	AnimSequenceBase* GetSequencePure(out const SequencePlayerReference SequencePlayer);// 0x284058eb6041
	SequencePlayerReference GetSequence(out const SequencePlayerReference SequencePlayer, out AnimSequenceBase* SequenceBase);// 0x283f58eb6041
	float GetPlayRate(out const SequencePlayerReference SequencePlayer);// 0x283e58eb6041
	bool GetLoopAnimation(out const SequencePlayerReference SequencePlayer);// 0x283d58eb6041
	float GetAccumulatedTime(out const SequencePlayerReference SequencePlayer);// 0x283c58eb6041
	void ConvertToSequencePlayerPure(out const AnimNodeReference Node, out SequencePlayerReference SequencePlayer, out bool Result);// 0x283b58eb6041
	SequencePlayerReference ConvertToSequencePlayer(out const AnimNodeReference Node, out enum Result);// 0x283a58eb6041

--------------------------------
Class: SequencePlayerReference.AnimNodeReference

--------------------------------
Class: SequencerAnimationSupport.Interface.Object

--------------------------------
Class: SkeletalControlLibrary.BlueprintFunctionLibrary.Object
	SkeletalControlReference SetAlpha(out const SkeletalControlReference SkeletalControl, float Alpha);// 0x284a58eb6041
	float GetAlpha(out const SkeletalControlReference SkeletalControl);// 0x284958eb6041
	void ConvertToSkeletalControlPure(out const AnimNodeReference Node, out SkeletalControlReference SkeletalControl, out bool Result);// 0x288558eb6041
	SkeletalControlReference ConvertToSkeletalControl(out const AnimNodeReference Node, out enum Result);// 0x284758eb6041

--------------------------------
Class: SkeletalControlReference.AnimNodeReference

--------------------------------
Class: AudioCodecEncoderSettings.Object
	int Version;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: DummyEndpointSettings.AudioEndpointSettingsBase.Object

--------------------------------
Class: AudioPcmEncoderSettings.AudioCodecEncoderSettings.Object
	enum BitDepthConversion;//[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: ByteChannelEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: DoubleChannelEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: FloatChannelEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTransformOrigin.Interface.Object
	Transform BP_GetTransformOrigin();// 0x285858eb6041

--------------------------------
Class: IntegerChannelEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	Guid ConstraintId;//[Offset: 0xdc, Size: 0x10]
	MovieSceneObjectBindingID ConstraintBindingID;//[Offset: 0xec, Size: 0x18]
	void SetConstraintBindingID(out const MovieSceneObjectBindingID InConstraintBindingID);// 0x285a58eb6041
	MovieSceneObjectBindingID GetConstraintBindingID();// 0x285958eb6041

--------------------------------
Class: MovieScene3DAttachSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	FName AttachSocketName;//[Offset: 0x110, Size: 0x8]
	FName AttachComponentName;//[Offset: 0x118, Size: 0x8]
	enum AttachmentLocationRule;//[Offset: 0x120, Size: 0x1]
	enum AttachmentRotationRule;//[Offset: 0x121, Size: 0x1]
	enum AttachmentScaleRule;//[Offset: 0x122, Size: 0x1]
	enum DetachmentLocationRule;//[Offset: 0x123, Size: 0x1]
	enum DetachmentRotationRule;//[Offset: 0x124, Size: 0x1]
	enum DetachmentScaleRule;//[Offset: 0x125, Size: 0x1]

--------------------------------
Class: MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ConstraintSections;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: MovieScene3DAttachTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScene3DPathSection.MovieScene3DConstraintSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel TimingCurve;//[Offset: 0x108, Size: 0xe8]
	enum FrontAxisEnum;//[Offset: 0x1f0, Size: 0x1]
	enum UpAxisEnum;//[Offset: 0x1f1, Size: 0x1]
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f2, Size: 0x1]
	bool bReverse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 0x1]
	bool bForceUpright;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 0x1]

--------------------------------
Class: MovieScene3DPathTrack.MovieScene3DConstraintTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieScenePropertySystem.MovieSceneEntitySystem.Object
	MovieScenePropertyInstantiatorSystem* InstantiatorSystem;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: MovieScenePropertyInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene3DTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene3DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneTransformMask TransformMask;//[Offset: 0xe8, Size: 0x4]
	MovieSceneDoubleChannel Translation;//[Offset: 0xf0, Size: 0xf0]
	MovieSceneDoubleChannel Rotation;//[Offset: 0x3c0, Size: 0xf0]
	MovieSceneDoubleChannel Scale;//[Offset: 0x690, Size: 0xf0]
	MovieSceneFloatChannel ManualWeight;//[Offset: 0x960, Size: 0xe8]
	bool bUseQuaternionInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa48, Size: 0x1]

--------------------------------
Class: MovieSceneDoubleChannel.MovieSceneChannel
	byte PreInfinityExtrap;//[Offset: 0x50, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x51, Size: 0x1]
	FrameNumber[] Times;//[Offset: 0x58, Size: 0x10]
	MovieSceneDoubleValue[] Values;//[Offset: 0x68, Size: 0x10]
	double DefaultValue;//[Offset: 0x78, Size: 0x8]
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	MovieSceneKeyHandleMap KeyHandles;//[Offset: 0x88, Size: 0x60]
	FrameRate TickResolution;//[Offset: 0xe8, Size: 0x8]

--------------------------------
Class: MovieSceneDoubleValue
	double Value;//[Offset: 0x0, Size: 0x8]
	MovieSceneTangentData Tangent;//[Offset: 0x8, Size: 0x14]
	byte InterpMode;//[Offset: 0x1c, Size: 0x1]
	byte TangentMode;//[Offset: 0x1d, Size: 0x1]
	byte PaddingByte;//[Offset: 0x1e, Size: 0x1]

--------------------------------
Class: MovieScene3DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneActorReferenceSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneActorReferenceData ActorReferenceData;//[Offset: 0xe0, Size: 0xf8]
	IntegralCurve ActorGuidIndexCurve;//[Offset: 0x1d8, Size: 0x80]
	FString[] ActorGuidStrings;//[Offset: 0x258, Size: 0x10]

--------------------------------
Class: MovieSceneActorReferenceData.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x50, Size: 0x10]
	MovieSceneActorReferenceKey DefaultValue;//[Offset: 0x60, Size: 0x28]
	MovieSceneActorReferenceKey[] KeyValues;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: MovieSceneActorReferenceKey
	MovieSceneObjectBindingID Object;//[Offset: 0x0, Size: 0x18]
	FName ComponentName;//[Offset: 0x18, Size: 0x8]
	FName SocketName;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: IntegralCurve.IndexedCurve
	IntegralKey[] Keys;//[Offset: 0x68, Size: 0x10]
	int DefaultValue;//[Offset: 0x78, Size: 0x4]
	bool bUseDefaultValueBeforeFirstKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 0x1]

--------------------------------
Class: IntegralKey
	float Time;//[Offset: 0x0, Size: 0x4]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneActorReferenceTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneAudioSection.MovieSceneSection.MovieSceneSignedObject.Object
	SoundBase* Sound;//[Offset: 0xe0, Size: 0x8]
	FrameNumber StartFrameOffset;//[Offset: 0xe8, Size: 0x4]
	float StartOffset;//[Offset: 0xec, Size: 0x4]
	float AudioStartTime;//[Offset: 0xf0, Size: 0x4]
	float AudioDilationFactor;//[Offset: 0xf4, Size: 0x4]
	float AudioVolume;//[Offset: 0xf8, Size: 0x4]
	MovieSceneFloatChannel SoundVolume;//[Offset: 0x100, Size: 0xe8]
	MovieSceneFloatChannel PitchMultiplier;//[Offset: 0x1e8, Size: 0xe8]
	<FName,MovieSceneFloatChannel> Inputs_Float;//[Offset: 0x2d0, Size: 0x50]
	<FName,MovieSceneStringChannel> Inputs_String;//[Offset: 0x320, Size: 0x50]
	<FName,MovieSceneBoolChannel> Inputs_Bool;//[Offset: 0x370, Size: 0x50]
	<FName,MovieSceneIntegerChannel> Inputs_Int;//[Offset: 0x3c0, Size: 0x50]
	<FName,MovieSceneAudioTriggerChannel> Inputs_Trigger;//[Offset: 0x410, Size: 0x50]
	MovieSceneActorReferenceData AttachActorData;//[Offset: 0x460, Size: 0xf8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 0x1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x559, Size: 0x1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55a, Size: 0x1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x560, Size: 0x8]
	delegate OnQueueSubtitles;//[Offset: 0x568, Size: 0x10]
	delegate OnAudioFinished;//[Offset: 0x578, Size: 0x10]
	delegate OnAudioPlaybackPercent;//[Offset: 0x588, Size: 0x10]
	void SetStartOffset(FrameNumber InStartOffset);// 0x285e58eb6041
	void SetSound(SoundBase* InSound);// 0x285d58eb6041
	FrameNumber GetStartOffset();// 0x285c58eb6041
	SoundBase* GetSound();// 0x285b58eb6041

--------------------------------
Class: MovieSceneStringChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x50, Size: 0x10]
	FString[] Values;//[Offset: 0x60, Size: 0x10]
	FString DefaultValue;//[Offset: 0x70, Size: 0x10]
	bool bHasDefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: MovieSceneAudioTriggerChannel.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x50, Size: 0x10]
	bool[] Values;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: MovieSceneAudioTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AudioSections;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: MovieSceneBaseValueEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoolPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneBytePropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneByteSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneByteChannel ByteCurve;//[Offset: 0xe8, Size: 0xe0]

--------------------------------
Class: MovieSceneByteTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: MovieSceneCameraAnimSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraAnimSectionData AnimData;//[Offset: 0xe0, Size: 0x20]
	CameraAnim* CameraAnim;//[Offset: 0x100, Size: 0x8]
	float PlayRate;//[Offset: 0x108, Size: 0x4]
	float PlayScale;//[Offset: 0x10c, Size: 0x4]
	float BlendInTime;//[Offset: 0x110, Size: 0x4]
	float BlendOutTime;//[Offset: 0x114, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]

--------------------------------
Class: MovieSceneCameraAnimSectionData
	CameraAnim* CameraAnim;//[Offset: 0x0, Size: 0x8]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float PlayScale;//[Offset: 0xc, Size: 0x4]
	float BlendInTime;//[Offset: 0x10, Size: 0x4]
	float BlendOutTime;//[Offset: 0x14, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: MovieSceneCameraAnimTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraAnimSections;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: MovieSceneCameraCutSection.MovieSceneSection.MovieSceneSignedObject.Object
	bool bLockPreviousCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	Guid CameraGuid;//[Offset: 0xec, Size: 0x10]
	MovieSceneObjectBindingID CameraBindingID;//[Offset: 0xfc, Size: 0x18]
	Transform InitialCameraCutTransform;//[Offset: 0x120, Size: 0x60]
	bool bHasInitialCameraCutTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	void SetCameraBindingID(out const MovieSceneObjectBindingID InCameraBindingID);// 0x286058eb6041
	MovieSceneObjectBindingID GetCameraBindingID();// 0x285f58eb6041

--------------------------------
Class: MovieSceneCameraCutTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bCanBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	MovieSceneSection*[] Sections;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: MovieSceneCameraCutTrackInstance.MovieSceneTrackInstance.Object

--------------------------------
Class: MovieSceneCameraShakeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0xe0, Size: 0x28]
	class CameraShakeBase* ShakeClass;//[Offset: 0x108, Size: 0x8]
	float PlayScale;//[Offset: 0x110, Size: 0x4]
	enum PlaySpace;//[Offset: 0x114, Size: 0x1]
	Rotator UserDefinedPlaySpace;//[Offset: 0x118, Size: 0x18]

--------------------------------
Class: MovieSceneCameraShakeSectionData
	class CameraShakeBase* ShakeClass;//[Offset: 0x0, Size: 0x8]
	float PlayScale;//[Offset: 0x8, Size: 0x4]
	enum PlaySpace;//[Offset: 0xc, Size: 0x1]
	Rotator UserDefinedPlaySpace;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: MovieSceneCameraShakeSourceShakeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSectionData ShakeData;//[Offset: 0xe0, Size: 0x28]

--------------------------------
Class: MovieSceneCameraShakeSourceShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraShakeSections;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCameraShakeSourceTriggerChannel Channel;//[Offset: 0xe0, Size: 0xd0]

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerChannel.MovieSceneChannel
	FrameNumber[] KeyTimes;//[Offset: 0x50, Size: 0x10]
	MovieSceneCameraShakeSourceTrigger[] KeyValues;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: MovieSceneCameraShakeSourceTrigger
	class CameraShakeBase* ShakeClass;//[Offset: 0x0, Size: 0x8]
	float PlayScale;//[Offset: 0x8, Size: 0x4]
	enum PlaySpace;//[Offset: 0xc, Size: 0x1]
	Rotator UserDefinedPlaySpace;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: MovieSceneCameraShakeSourceTriggerTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: MovieSceneCameraShakeTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] CameraShakeSections;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: MovieSceneCinematicShotSection.MovieSceneSubSection.MovieSceneSection.MovieSceneSignedObject.Object
	FString ShotDisplayName;//[Offset: 0x118, Size: 0x10]
	FText DisplayName;//[Offset: 0x128, Size: 0x18]
	void SetShotDisplayName(FString InShotDisplayName);// 0x286258eb6041
	FString GetShotDisplayName();// 0x286158eb6041

--------------------------------
Class: MovieSceneCinematicShotTrack.MovieSceneSubTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneColorPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneColorSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel RedCurve;//[Offset: 0xe8, Size: 0xe8]
	MovieSceneFloatChannel GreenCurve;//[Offset: 0x1d0, Size: 0xe8]
	MovieSceneFloatChannel BlueCurve;//[Offset: 0x2b8, Size: 0xe8]
	MovieSceneFloatChannel AlphaCurve;//[Offset: 0x3a0, Size: 0xe8]

--------------------------------
Class: MovieSceneColorTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	bool bIsSlateColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: MovieSceneComponentAttachmentInvalidatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentAttachmentSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentMobilitySystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneComponentTransformSystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneCVarSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneCVarOverrides ConsoleVariables;//[Offset: 0xe8, Size: 0x50]
	void SetFromString(FString InString);// 0x286458eb6041
	FString GetString();// 0x286358eb6041

--------------------------------
Class: MovieSceneCVarOverrides
	<FString,FString> ValuesByCVar;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: MovieSceneCVarTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: MovieSceneCVarTrackInstance.MovieSceneTrackInstance.Object

--------------------------------
Class: MovieSceneDataLayerSection.MovieSceneSection.MovieSceneSignedObject.Object
	ActorDataLayer[] DataLayers;//[Offset: 0xe8, Size: 0x10]
	enum DesiredState;//[Offset: 0xf8, Size: 0x1]
	enum PrerollState;//[Offset: 0xf9, Size: 0x1]
	bool bFlushOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa, Size: 0x1]
	void SetPrerollState(enum InPrerollState);// 0x286c58eb6041
	void SetFlushOnUnload(bool bFlushOnUnload);// 0x286b58eb6041
	void SetDesiredState(enum InDesiredState);// 0x286a58eb6041
	void SetDataLayers(out const ActorDataLayer[] InDataLayers);// 0xffffff8158eb6000
	enum GetPrerollState();// 0x286858eb6041
	bool GetFlushOnUnload();// 0x286758eb6041
	enum GetDesiredState();// 0x286658eb6041
	ActorDataLayer[] GetDataLayers();// 0x286558eb6041

--------------------------------
Class: MovieSceneDataLayerSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneDataLayerTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: MovieSceneDeferredComponentMovementSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneDoublePropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneDoubleSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneDoubleChannel DoubleCurve;//[Offset: 0xe8, Size: 0xf0]

--------------------------------
Class: MovieSceneDoubleTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEnumPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEnumSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneByteChannel EnumCurve;//[Offset: 0xe8, Size: 0xe0]

--------------------------------
Class: MovieSceneEnumTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	Enum* Enum;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: MovieSceneEulerTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneEulerTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneEventSection.MovieSceneSection.MovieSceneSignedObject.Object
	NameCurve Events;//[Offset: 0xe0, Size: 0x78]
	MovieSceneEventSectionData EventData;//[Offset: 0x158, Size: 0xd0]

--------------------------------
Class: NameCurve.IndexedCurve
	NameCurveKey[] Keys;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: NameCurveKey
	float Time;//[Offset: 0x0, Size: 0x4]
	FName Value;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: MovieSceneEventSectionData.MovieSceneChannel
	FrameNumber[] Times;//[Offset: 0x50, Size: 0x10]
	EventPayload[] KeyValues;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: EventPayload
	FName EventName;//[Offset: 0x0, Size: 0x8]
	MovieSceneEventParameters Parameters;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: MovieSceneEventParameters

--------------------------------
Class: MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePreSpawnEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePostSpawnEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePostEvalEventSystem.MovieSceneEventSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneFadeSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe0, Size: 0xe8]
	LinearColor FadeColor;//[Offset: 0x1c8, Size: 0x10]
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d8, Size: 0x1]

--------------------------------
Class: MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFadeTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFloatPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneFloatSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe8, Size: 0xe8]

--------------------------------
Class: MovieSceneHierarchicalBiasSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneInitialValueSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneIntegerPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneIntegerSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneIntegerChannel IntegerCurve;//[Offset: 0xe8, Size: 0xd8]

--------------------------------
Class: MovieSceneIntegerTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneInterrogatedPropertyInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneLevelVisibilitySection.MovieSceneSection.MovieSceneSignedObject.Object
	enum Visibility;//[Offset: 0xe8, Size: 0x1]
	FName[] LevelNames;//[Offset: 0xf0, Size: 0x10]
	void SetVisibility(enum InVisibility);// 0x287058eb6041
	void SetLevelNames(out const FName[] InLevelNames);// 0x286f58eb6041
	enum GetVisibility();// 0x286e58eb6041
	FName[] GetLevelNames();// 0x286d58eb6041

--------------------------------
Class: MovieSceneLevelVisibilitySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneLevelVisibilityTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: MovieSceneMaterialParameterCollectionTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MaterialParameterCollection* MPC;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: MovieSceneComponentMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int MaterialIndex;//[Offset: 0xa8, Size: 0x4]

--------------------------------
Class: MovieSceneMotionVectorSimulationSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneObjectPropertySection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneObjectPathChannel ObjectChannel;//[Offset: 0xe0, Size: 0x108]

--------------------------------
Class: MovieSceneObjectPathChannel.MovieSceneChannel
	ClassPtrProperty PropertyClass;//[Size: 0x8]
	FrameNumber[] Times;//[Offset: 0x58, Size: 0x10]
	MovieSceneObjectPathChannelKeyValue[] Values;//[Offset: 0x68, Size: 0x10]
	MovieSceneObjectPathChannelKeyValue DefaultValue;//[Offset: 0x78, Size: 0x30]

--------------------------------
Class: MovieSceneObjectPathChannelKeyValue
	Object* SoftPtr;//[Offset: 0x0, Size: 0x28]
	Object* HardPtr;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MovieSceneParticleParameterTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] Sections;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: MovieSceneParticleSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneParticleChannel ParticleKeys;//[Offset: 0xe0, Size: 0xe0]

--------------------------------
Class: MovieSceneParticleChannel.MovieSceneByteChannel.MovieSceneChannel

--------------------------------
Class: MovieSceneParticleTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] ParticleSections;//[Offset: 0x98, Size: 0x10]

--------------------------------
Class: MovieScenePiecewiseBoolBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePiecewiseByteBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePiecewiseDoubleBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePiecewiseEnumBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePiecewiseFloatBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScenePiecewiseIntegerBlenderSystem.MovieSceneBlenderSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneAsyncAction_SequencePrediction.BlueprintAsyncActionBase.Object
	delegate Result;//[Offset: 0x30, Size: 0x10]
	delegate Failure;//[Offset: 0x40, Size: 0x10]
	MovieSceneSequencePlayer* SequencePlayer;//[Offset: 0x60, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x68, Size: 0x8]
	MovieSceneAsyncAction_SequencePrediction* PredictWorldTransformAtTime(MovieSceneSequencePlayer* Player, SceneComponent* TargetComponent, float TimeInSeconds);// 0x287458eb6041
	MovieSceneAsyncAction_SequencePrediction* PredictWorldTransformAtFrame(MovieSceneSequencePlayer* Player, SceneComponent* TargetComponent, FrameTime FrameTime);// 0x287358eb6041
	MovieSceneAsyncAction_SequencePrediction* PredictLocalTransformAtTime(MovieSceneSequencePlayer* Player, SceneComponent* TargetComponent, float TimeInSeconds);// 0x287258eb6041
	MovieSceneAsyncAction_SequencePrediction* PredictLocalTransformAtFrame(MovieSceneSequencePlayer* Player, SceneComponent* TargetComponent, FrameTime FrameTime);// 0x287158eb6041

--------------------------------
Class: MovieScenePredictionSystem.MovieSceneEntitySystem.Object
	MovieSceneAsyncAction_SequencePrediction*[] PendingPredictions;//[Offset: 0xd0, Size: 0x10]
	MovieSceneAsyncAction_SequencePrediction*[] ProcessingPredictions;//[Offset: 0xe0, Size: 0x10]

--------------------------------
Class: MovieScenePrimitiveMaterialSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneObjectPathChannel MaterialChannel;//[Offset: 0xe0, Size: 0x108]

--------------------------------
Class: MovieScenePrimitiveMaterialTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	int MaterialIndex;//[Offset: 0xc8, Size: 0x4]

--------------------------------
Class: MovieSceneQuaternionInterpolationRotationSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneSkeletalAnimationSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneSkeletalAnimationParams Params;//[Offset: 0xe0, Size: 0x128]
	AnimSequence* AnimSequence;//[Offset: 0x208, Size: 0x8]
	AnimSequenceBase* Animation;//[Offset: 0x210, Size: 0x8]
	float StartOffset;//[Offset: 0x218, Size: 0x4]
	float EndOffset;//[Offset: 0x21c, Size: 0x4]
	float PlayRate;//[Offset: 0x220, Size: 0x4]
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 0x1]
	FName SlotName;//[Offset: 0x228, Size: 0x8]
	Vector StartLocationOffset;//[Offset: 0x230, Size: 0x18]
	Rotator StartRotationOffset;//[Offset: 0x248, Size: 0x18]
	bool bMatchWithPrevious;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	FName MatchedBoneName;//[Offset: 0x264, Size: 0x8]
	Vector MatchedLocationOffset;//[Offset: 0x270, Size: 0x18]
	Rotator MatchedRotationOffset;//[Offset: 0x288, Size: 0x18]
	bool bMatchTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	bool bMatchIncludeZHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 0x1]
	bool bMatchRotationYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a2, Size: 0x1]
	bool bMatchRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a3, Size: 0x1]
	bool bMatchRotationRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 0x1]

--------------------------------
Class: MovieSceneSkeletalAnimationParams
	AnimSequenceBase* Animation;//[Offset: 0x0, Size: 0x8]
	FrameNumber FirstLoopStartFrameOffset;//[Offset: 0x8, Size: 0x4]
	FrameNumber StartFrameOffset;//[Offset: 0xc, Size: 0x4]
	FrameNumber EndFrameOffset;//[Offset: 0x10, Size: 0x4]
	float PlayRate;//[Offset: 0x14, Size: 0x4]
	bool bReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
	FName SlotName;//[Offset: 0x1c, Size: 0x8]
	MirrorDataTable* MirrorDataTable;//[Offset: 0x28, Size: 0x8]
	MovieSceneFloatChannel Weight;//[Offset: 0x30, Size: 0xe8]
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	bool bForceCustomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 0x1]
	float StartOffset;//[Offset: 0x11c, Size: 0x4]
	float EndOffset;//[Offset: 0x120, Size: 0x4]

--------------------------------
Class: MovieSceneSkeletalAnimationTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneSection*[] AnimationSections;//[Offset: 0x98, Size: 0x10]
	bool bUseLegacySectionIndexBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	MovieSceneSkeletalAnimRootMotionTrackParams RootMotionParams;//[Offset: 0xb0, Size: 0x30]
	bool bBlendFirstChildOfRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]

--------------------------------
Class: MovieSceneSkeletalAnimRootMotionTrackParams

--------------------------------
Class: MovieSceneSlomoSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel FloatCurve;//[Offset: 0xe0, Size: 0xe8]

--------------------------------
Class: MovieSceneSlomoTrack.MovieSceneFloatTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneStringSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneStringChannel StringCurve;//[Offset: 0xe0, Size: 0xe8]

--------------------------------
Class: MovieSceneStringTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneTransformOriginSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneFloatVectorPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneDoubleVectorPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneFloatVectorSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel Curves;//[Offset: 0xe8, Size: 0xe8]
	int ChannelsUsed;//[Offset: 0x488, Size: 0x4]

--------------------------------
Class: MovieSceneDoubleVectorSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneDoubleChannel Curves;//[Offset: 0xe8, Size: 0xf0]
	int ChannelsUsed;//[Offset: 0x4a8, Size: 0x4]

--------------------------------
Class: MovieSceneVisibilityTrack.MovieSceneBoolTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneHierarchicalEasingInstantiatorSystem.MovieSceneEntityInstantiatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: WeightAndEasingEvaluatorSystem.MovieSceneEntitySystem.Object

--------------------------------
Class: AsyncTaskDownloadImage.BlueprintAsyncActionBase.Object
	delegate OnSuccess;//[Offset: 0x30, Size: 0x10]
	delegate OnFail;//[Offset: 0x40, Size: 0x10]
	AsyncTaskDownloadImage* DownloadImage(FString URL);// 0x287558eb6041

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x10b758eb6041
	PanelSlot* GetContentSlot();// 0x10b658eb6041
	Widget* GetContent();// 0x10f858eb6041

--------------------------------
Class: BackgroundBlur.ContentWidget.PanelWidget.Widget.Visual.Object
	Margin Padding;//[Offset: 0x13c, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x14c, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x14d, Size: 0x1]
	bool bApplyAlphaToBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e, Size: 0x1]
	float BlurStrength;//[Offset: 0x150, Size: 0x4]
	bool bOverrideAutoRadiusCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	int BlurRadius;//[Offset: 0x158, Size: 0x4]
	Vector4 CornerRadius;//[Offset: 0x160, Size: 0x20]
	SlateBrush LowQualityFallbackBrush;//[Offset: 0x180, Size: 0xc0]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x287d58eb6041
	void SetPadding(Margin InPadding);// 0x287c58eb6041
	void SetLowQualityFallbackBrush(out const SlateBrush InBrush);// 0x287b58eb6041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x287a58eb6041
	void SetCornerRadius(Vector4 InCornerRadius);// 0x287958eb6041
	void SetBlurStrength(float InStrength);// 0x287858eb6041
	void SetBlurRadius(int InBlurRadius);// 0x287758eb6041
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);// 0x287658eb6041

--------------------------------
Class: BackgroundBlurSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x288058eb6041
	void SetPadding(Margin InPadding);// 0x287f58eb6041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x287e58eb6041

--------------------------------
Class: BoolBinding.PropertyBinding.Object
	bool GetValue();// 0x288158eb6041

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x139, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x13a, Size: 0x1]
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13b, Size: 0x1]
	LinearColor ContentColorAndOpacity;//[Offset: 0x13c, Size: 0x10]
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x14c, Size: 0x10]
	Margin Padding;//[Offset: 0x15c, Size: 0x10]
	SlateBrush Background;//[Offset: 0x170, Size: 0xc0]
	delegate BackgroundDelegate;//[Offset: 0x230, Size: 0x10]
	LinearColor BrushColor;//[Offset: 0x240, Size: 0x10]
	delegate BrushColorDelegate;//[Offset: 0x250, Size: 0x10]
	Vector2D DesiredSizeScale;//[Offset: 0x260, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x274, Size: 0x10]
	delegate OnMouseButtonUpEvent;//[Offset: 0x284, Size: 0x10]
	delegate OnMouseMoveEvent;//[Offset: 0x294, Size: 0x10]
	delegate OnMouseDoubleClickEvent;//[Offset: 0x2a4, Size: 0x10]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x288c58eb6041
	void SetPadding(Margin InPadding);// 0x288b58eb6041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x288a58eb6041
	void SetDesiredSizeScale(Vector2D InScale);// 0x288958eb6041
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0x288858eb6041
	void SetBrushFromTexture(Texture2D* Texture);// 0x288758eb6041
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x288658eb6041
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x28c758eb6041
	void SetBrushColor(LinearColor InBrushColor);// 0x288458eb6041
	void SetBrush(out const SlateBrush InBrush);// 0x288358eb6041
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x288258eb6041

--------------------------------
Class: BorderSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x288f58eb6041
	void SetPadding(Margin InPadding);// 0x288e58eb6041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x288d58eb6041

--------------------------------
Class: BrushBinding.PropertyBinding.Object
	SlateBrush GetValue();// 0x289058eb6041

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x140, Size: 0x8]
	ButtonStyle WidgetStyle;//[Offset: 0x150, Size: 0x3b0]
	LinearColor ColorAndOpacity;//[Offset: 0x500, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0x510, Size: 0x10]
	byte ClickMethod;//[Offset: 0x520, Size: 0x1]
	byte TouchMethod;//[Offset: 0x521, Size: 0x1]
	byte PressMethod;//[Offset: 0x522, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x523, Size: 0x1]
	delegate OnClicked;//[Offset: 0x528, Size: 0x10]
	delegate OnPressed;//[Offset: 0x538, Size: 0x10]
	delegate OnReleased;//[Offset: 0x548, Size: 0x10]
	delegate OnHovered;//[Offset: 0x558, Size: 0x10]
	delegate OnUnhovered;//[Offset: 0x568, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x289758eb6041
	void SetStyle(out const ButtonStyle InStyle);// 0x289658eb6041
	void SetPressMethod(byte InPressMethod);// 0x289558eb6041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x289458eb6041
	void SetClickMethod(byte InClickMethod);// 0x289358eb6041
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x289258eb6041
	bool IsPressed();// 0x289158eb6041

--------------------------------
Class: ButtonSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x289a58eb6041
	void SetPadding(Margin InPadding);// 0x289958eb6041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x289858eb6041

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x289b58eb6041

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 0x40]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	int ZOrder;//[Offset: 0x7c, Size: 0x4]
	void SetZOrder(int InZOrder);// 0x28ad58eb6041
	void SetSize(Vector2D InSize);// 0x28ac58eb6041
	void SetPosition(Vector2D InPosition);// 0x28ab58eb6041
	void SetOffsets(Margin InOffset);// 0x28aa58eb6041
	void SetMinimum(Vector2D InMinimumAnchors);// 0x28a958eb6041
	void SetMaximum(Vector2D InMaximumAnchors);// 0x28a858eb6041
	void SetLayout(out const AnchorData InLayoutData);// 0x28a758eb6041
	void SetAutoSize(bool InbAutoSize);// 0x28e858eb6041
	void SetAnchors(Anchors InAnchors);// 0x28a558eb6041
	void SetAlignment(Vector2D InAlignment);// 0x28a458eb6041
	int GetZOrder();// 0x28a358eb6041
	Vector2D GetSize();// 0x28a258eb6041
	Vector2D GetPosition();// 0x28a158eb6041
	Margin GetOffsets();// 0x28a058eb6041
	AnchorData GetLayout();// 0x289f58eb6041
	bool GetAutoSize();// 0x289e58eb6041
	Anchors GetAnchors();// 0x289d58eb6041
	Vector2D GetAlignment();// 0x289c58eb6041

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 0x10]
	Anchors Anchors;//[Offset: 0x10, Size: 0x20]
	Vector2D Alignment;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: CheckBox.ContentWidget.PanelWidget.Widget.Visual.Object
	enum CheckedState;//[Offset: 0x139, Size: 0x1]
	delegate CheckedStateDelegate;//[Offset: 0x13c, Size: 0x10]
	CheckBoxStyle WidgetStyle;//[Offset: 0x150, Size: 0xa10]
	SlateWidgetStyleAsset* Style;//[Offset: 0xb60, Size: 0x8]
	SlateBrushAsset* UncheckedImage;//[Offset: 0xb68, Size: 0x8]
	SlateBrushAsset* UncheckedHoveredImage;//[Offset: 0xb70, Size: 0x8]
	SlateBrushAsset* UncheckedPressedImage;//[Offset: 0xb78, Size: 0x8]
	SlateBrushAsset* CheckedImage;//[Offset: 0xb80, Size: 0x8]
	SlateBrushAsset* CheckedHoveredImage;//[Offset: 0xb88, Size: 0x8]
	SlateBrushAsset* CheckedPressedImage;//[Offset: 0xb90, Size: 0x8]
	SlateBrushAsset* UndeterminedImage;//[Offset: 0xb98, Size: 0x8]
	SlateBrushAsset* UndeterminedHoveredImage;//[Offset: 0xba0, Size: 0x8]
	SlateBrushAsset* UndeterminedPressedImage;//[Offset: 0xba8, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0xbb0, Size: 0x1]
	Margin Padding;//[Offset: 0xbb4, Size: 0x10]
	SlateColor BorderBackgroundColor;//[Offset: 0xbc4, Size: 0x14]
	byte ClickMethod;//[Offset: 0xbd8, Size: 0x1]
	byte TouchMethod;//[Offset: 0xbd9, Size: 0x1]
	byte PressMethod;//[Offset: 0xbda, Size: 0x1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbdb, Size: 0x1]
	delegate OnCheckStateChanged;//[Offset: 0xbe0, Size: 0x10]
	void SetTouchMethod(byte InTouchMethod);// 0x28b558eb6041
	void SetPressMethod(byte InPressMethod);// 0x28b458eb6041
	void SetIsChecked(bool InIsChecked);// 0x28b358eb6041
	void SetClickMethod(byte InClickMethod);// 0x28b258eb6041
	void SetCheckedState(enum InCheckedState);// 0x28b158eb6041
	bool IsPressed();// 0x28b058eb6041
	bool IsChecked();// 0x28af58eb6041
	enum GetCheckedState();// 0x28ae58eb6041

--------------------------------
Class: CheckedStateBinding.PropertyBinding.Object
	enum GetValue();// 0x28b658eb6041

--------------------------------
Class: CircularThrobber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x128, Size: 0x4]
	float Period;//[Offset: 0x12c, Size: 0x4]
	float Radius;//[Offset: 0x130, Size: 0x4]
	SlateBrushAsset* PieceImage;//[Offset: 0x138, Size: 0x8]
	SlateBrush Image;//[Offset: 0x140, Size: 0xc0]
	bool bEnableRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	void SetRadius(float InRadius);// 0x28b958eb6041
	void SetPeriod(float InPeriod);// 0x28b858eb6041
	void SetNumberOfPieces(int InNumberOfPieces);// 0x28b758eb6041

--------------------------------
Class: ColorBinding.PropertyBinding.Object
	SlateColor GetSlateValue();// 0x28bb58eb6041
	LinearColor GetLinearValue();// 0x28ba58eb6041

--------------------------------
Class: ComboBox.Widget.Visual.Object
	Object*[] Items;//[Offset: 0x128, Size: 0x10]
	delegate OnGenerateWidgetEvent;//[Offset: 0x138, Size: 0x10]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]

--------------------------------
Class: ComboBoxKey.Widget.Visual.Object
	FName[] Options;//[Offset: 0x128, Size: 0x10]
	FName SelectedOption;//[Offset: 0x138, Size: 0x8]
	ComboBoxStyle WidgetStyle;//[Offset: 0x140, Size: 0x600]
	TableRowStyle ItemStyle;//[Offset: 0x740, Size: 0xc50]
	SlateColor ForegroundColor;//[Offset: 0x1390, Size: 0x14]
	Margin ContentPadding;//[Offset: 0x13a4, Size: 0x10]
	float MaxListHeight;//[Offset: 0x13b4, Size: 0x4]
	bool bHasDownArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b8, Size: 0x1]
	bool bEnableGamepadNavigationMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b9, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13ba, Size: 0x1]
	delegate OnGenerateContentWidget;//[Offset: 0x13bc, Size: 0x10]
	delegate OnGenerateItemWidget;//[Offset: 0x13cc, Size: 0x10]
	delegate OnSelectionChanged;//[Offset: 0x13e0, Size: 0x10]
	delegate OnOpening;//[Offset: 0x13f0, Size: 0x10]
	void SetSelectedOption(FName Option);// 0x106b58eb6041
	bool RemoveOption(FName Option);// 0x106a58eb6041
	void OnSelectionChangedEvent__DelegateSignature(FName SelectedItem, byte SelectionType);// 0x106958eb6041
	void OnOpeningEvent__DelegateSignature();// 0x106858eb6041
	bool IsOpen();// 0x106758eb6041
	FName GetSelectedOption();// 0x106658eb6041
	Widget* GenerateWidgetEvent__DelegateSignature(FName Item);// 0x106558eb6041
	void ClearSelection();// 0x106458eb6041
	void ClearOptions();// 0x10b558eb6041
	void AddOption(FName Option);// 0x106258eb6041

--------------------------------
Class: TableRowStyle.SlateWidgetStyle
	SlateBrush SelectorFocusedBrush;//[Offset: 0x10, Size: 0xc0]
	SlateBrush ActiveHoveredBrush;//[Offset: 0xd0, Size: 0xc0]
	SlateBrush ActiveBrush;//[Offset: 0x190, Size: 0xc0]
	SlateBrush InactiveHoveredBrush;//[Offset: 0x250, Size: 0xc0]
	SlateBrush InactiveBrush;//[Offset: 0x310, Size: 0xc0]
	bool bUseParentRowBrush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 0x1]
	SlateBrush ParentRowBackgroundBrush;//[Offset: 0x3e0, Size: 0xc0]
	SlateBrush ParentRowBackgroundHoveredBrush;//[Offset: 0x4a0, Size: 0xc0]
	SlateBrush EvenRowBackgroundHoveredBrush;//[Offset: 0x560, Size: 0xc0]
	SlateBrush EvenRowBackgroundBrush;//[Offset: 0x620, Size: 0xc0]
	SlateBrush OddRowBackgroundHoveredBrush;//[Offset: 0x6e0, Size: 0xc0]
	SlateBrush OddRowBackgroundBrush;//[Offset: 0x7a0, Size: 0xc0]
	SlateColor TextColor;//[Offset: 0x860, Size: 0x14]
	SlateColor SelectedTextColor;//[Offset: 0x874, Size: 0x14]
	SlateBrush DropIndicator_Above;//[Offset: 0x890, Size: 0xc0]
	SlateBrush DropIndicator_Onto;//[Offset: 0x950, Size: 0xc0]
	SlateBrush DropIndicator_Below;//[Offset: 0xa10, Size: 0xc0]
	SlateBrush ActiveHighlightedBrush;//[Offset: 0xad0, Size: 0xc0]
	SlateBrush InactiveHighlightedBrush;//[Offset: 0xb90, Size: 0xc0]

--------------------------------
Class: ComboBoxString.Widget.Visual.Object
	FString[] DefaultOptions;//[Offset: 0x128, Size: 0x10]
	FString SelectedOption;//[Offset: 0x138, Size: 0x10]
	ComboBoxStyle WidgetStyle;//[Offset: 0x150, Size: 0x600]
	TableRowStyle ItemStyle;//[Offset: 0x750, Size: 0xc50]
	Margin ContentPadding;//[Offset: 0x13a0, Size: 0x10]
	float MaxListHeight;//[Offset: 0x13b0, Size: 0x4]
	bool HasDownArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b4, Size: 0x1]
	bool EnableGamepadNavigationMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b5, Size: 0x1]
	SlateFontInfo Font;//[Offset: 0x13b8, Size: 0x58]
	SlateColor ForegroundColor;//[Offset: 0x1410, Size: 0x14]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1424, Size: 0x1]
	delegate OnGenerateWidgetEvent;//[Offset: 0x1428, Size: 0x10]
	delegate OnSelectionChanged;//[Offset: 0x1438, Size: 0x10]
	delegate OnOpening;//[Offset: 0x1448, Size: 0x10]
	void SetSelectedOption(FString Option);// 0x108058eb6041
	void SetSelectedIndex(const int Index);// 0x107f58eb6041
	bool RemoveOption(FString Option);// 0x107e58eb6041
	void RefreshOptions();// 0x107d58eb6041
	void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, byte SelectionType);// 0x107c58eb6041
	void OnOpeningEvent__DelegateSignature();// 0x107b58eb6041
	bool IsOpen();// 0x107a58eb6041
	FString GetSelectedOption();// 0x107958eb6041
	int GetSelectedIndex();// 0x107858eb6041
	int GetOptionCount();// 0x107758eb6041
	FString GetOptionAtIndex(int Index);// 0x107658eb6041
	int FindOptionIndex(FString Option);// 0x107558eb6041
	void ClearSelection();// 0x107458eb6041
	void ClearOptions();// 0x107358eb6041
	void AddOption(FString Option);// 0x106c58eb6041

--------------------------------
Class: DynamicEntryBoxBase.Widget.Visual.Object
	enum EntryBoxType;//[Offset: 0x128, Size: 0x1]
	Vector2D EntrySpacing;//[Offset: 0x130, Size: 0x10]
	Vector2D[] SpacingPattern;//[Offset: 0x140, Size: 0x10]
	SlateChildSize EntrySizeRule;//[Offset: 0x150, Size: 0x8]
	byte EntryHorizontalAlignment;//[Offset: 0x158, Size: 0x1]
	byte EntryVerticalAlignment;//[Offset: 0x159, Size: 0x1]
	int MaxElementSize;//[Offset: 0x15c, Size: 0x4]
	RadialBoxSettings RadialBoxSettings;//[Offset: 0x160, Size: 0x10]
	UserWidgetPool EntryWidgetPool;//[Offset: 0x180, Size: 0x88]
	void SetRadialSettings(out const RadialBoxSettings InSettings);// 0x28c258eb6041
	void SetEntrySpacing(out const Vector2D InEntrySpacing);// 0x28c158eb6041
	int GetNumEntries();// 0x28c058eb6041
	UserWidget*[] GetAllEntries();// 0x28bf58eb6041

--------------------------------
Class: RadialBoxSettings
	float StartingAngle;//[Offset: 0x0, Size: 0x4]
	bool bDistributeItemsEvenly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	float AngleBetweenItems;//[Offset: 0x8, Size: 0x4]
	float SectorCentralAngle;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 0x4]
	byte SizeRule;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: UserWidgetPool
	UserWidget*[] ActiveWidgets;//[Offset: 0x0, Size: 0x10]
	UserWidget*[] InactiveWidgets;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: DynamicEntryBox.DynamicEntryBoxBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x208, Size: 0x8]
	void Reset(bool bDeleteWidgets);// 0x28c658eb6041
	void RemoveEntry(UserWidget* EntryWidget);// 0x28c558eb6041
	UserWidget* BP_CreateEntryOfClass(class UserWidget EntryClass);// 0x28c458eb6041
	UserWidget* BP_CreateEntry();// 0x28c358eb6041

--------------------------------
Class: EditableText.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x140, Size: 0x10]
	FText HintText;//[Offset: 0x150, Size: 0x18]
	delegate HintTextDelegate;//[Offset: 0x168, Size: 0x10]
	EditableTextStyle WidgetStyle;//[Offset: 0x180, Size: 0x2c0]
	SlateWidgetStyleAsset* Style;//[Offset: 0x440, Size: 0x8]
	SlateBrushAsset* BackgroundImageSelected;//[Offset: 0x448, Size: 0x8]
	SlateBrushAsset* BackgroundImageComposing;//[Offset: 0x450, Size: 0x8]
	SlateBrushAsset* CaretImage;//[Offset: 0x458, Size: 0x8]
	SlateFontInfo Font;//[Offset: 0x460, Size: 0x58]
	SlateColor ColorAndOpacity;//[Offset: 0x4b8, Size: 0x14]
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc, Size: 0x1]
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cd, Size: 0x1]
	float MinimumDesiredWidth;//[Offset: 0x4d0, Size: 0x4]
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 0x1]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d5, Size: 0x1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d6, Size: 0x1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d7, Size: 0x1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d9, Size: 0x1]
	byte KeyboardType;//[Offset: 0x4da, Size: 0x1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x4db, Size: 0x1]
	enum VirtualKeyboardTrigger;//[Offset: 0x4dc, Size: 0x1]
	enum VirtualKeyboardDismissAction;//[Offset: 0x4dd, Size: 0x1]
	byte Justification;//[Offset: 0x4de, Size: 0x1]
	enum OverflowPolicy;//[Offset: 0x4df, Size: 0x1]
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x4e0, Size: 0x3]
	delegate OnTextChanged;//[Offset: 0x4e8, Size: 0x10]
	delegate OnTextCommitted;//[Offset: 0x4f8, Size: 0x10]
	void SetTextOverflowPolicy(enum InOverflowPolicy);// 0x108b58eb6041
	void SetText(FText InText);// 0x108a58eb6041
	void SetJustification(byte InJustification);// 0x108958eb6041
	void SetIsReadOnly(bool InbIsReadyOnly);// 0x108858eb6041
	void SetIsPassword(bool InbIsPassword);// 0x108758eb6041
	void SetHintText(FText InHintText);// 0x108658eb6041
	void OnEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x108558eb6041
	void OnEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x108458eb6041
	FText GetText();// 0x108158eb6041

--------------------------------
Class: VirtualKeyboardOptions
	bool bEnableAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 0x1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 0x1]

--------------------------------
Class: EditableTextBox.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x140, Size: 0x10]
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x150, Size: 0xad0]
	SlateWidgetStyleAsset* Style;//[Offset: 0xc20, Size: 0x8]
	FText HintText;//[Offset: 0xc28, Size: 0x18]
	delegate HintTextDelegate;//[Offset: 0xc40, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0xc50, Size: 0x58]
	LinearColor ForegroundColor;//[Offset: 0xca8, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0xcb8, Size: 0x10]
	LinearColor ReadOnlyForegroundColor;//[Offset: 0xcc8, Size: 0x10]
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd8, Size: 0x1]
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd9, Size: 0x1]
	float MinimumDesiredWidth;//[Offset: 0xcdc, Size: 0x4]
	Margin Padding;//[Offset: 0xce0, Size: 0x10]
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf0, Size: 0x1]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf1, Size: 0x1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf2, Size: 0x1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf3, Size: 0x1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf4, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf5, Size: 0x1]
	byte KeyboardType;//[Offset: 0xcf6, Size: 0x1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0xcf7, Size: 0x1]
	enum VirtualKeyboardTrigger;//[Offset: 0xcf8, Size: 0x1]
	enum VirtualKeyboardDismissAction;//[Offset: 0xcf9, Size: 0x1]
	byte Justification;//[Offset: 0xcfa, Size: 0x1]
	enum OverflowPolicy;//[Offset: 0xcfb, Size: 0x1]
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xcfc, Size: 0x3]
	delegate OnTextChanged;//[Offset: 0xd00, Size: 0x10]
	delegate OnTextCommitted;//[Offset: 0xd10, Size: 0x10]
	void SetTextOverflowPolicy(enum InOverflowPolicy);// 0x109c58eb6041
	void SetText(FText InText);// 0x109b58eb6041
	void SetJustification(byte InJustification);// 0x109a58eb6041
	void SetIsReadOnly(bool bReadOnly);// 0x109958eb6041
	void SetIsPassword(bool bIsPassword);// 0x109858eb6041
	void SetHintText(FText InText);// 0x109758eb6041
	void SetForegroundColor(LinearColor Color);// 0x109658eb6041
	void SetError(FText InError);// 0x109558eb6041
	void OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x109458eb6041
	void OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x109358eb6041
	bool HasError();// 0x109258eb6041
	FText GetText();// 0x109158eb6041
	void ClearError();// 0x10d658eb6041

--------------------------------
Class: ExpandableArea.Widget.Visual.Object
	ExpandableAreaStyle Style;//[Offset: 0x130, Size: 0x1a0]
	SlateBrush BorderBrush;//[Offset: 0x2d0, Size: 0xc0]
	SlateColor BorderColor;//[Offset: 0x390, Size: 0x14]
	bool bIsExpanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]
	float MaxHeight;//[Offset: 0x3a8, Size: 0x4]
	Margin HeaderPadding;//[Offset: 0x3ac, Size: 0x10]
	Margin AreaPadding;//[Offset: 0x3bc, Size: 0x10]
	delegate OnExpansionChanged;//[Offset: 0x3d0, Size: 0x10]
	Widget* HeaderContent;//[Offset: 0x3e0, Size: 0x8]
	Widget* BodyContent;//[Offset: 0x3e8, Size: 0x8]
	void SetIsExpanded_Animated(bool IsExpanded);// 0x28c958eb6041
	void SetIsExpanded(bool IsExpanded);// 0x28c858eb6041
	bool GetIsExpanded();// 0x290958eb6041

--------------------------------
Class: ExpandableAreaStyle.SlateWidgetStyle
	SlateBrush CollapsedImage;//[Offset: 0x10, Size: 0xc0]
	SlateBrush ExpandedImage;//[Offset: 0xd0, Size: 0xc0]
	float RolloutAnimationSeconds;//[Offset: 0x190, Size: 0x4]

--------------------------------
Class: FloatBinding.PropertyBinding.Object
	float GetValue();// 0x28ca58eb6041

--------------------------------
Class: GridPanel.PanelWidget.Widget.Visual.Object
	float[] ColumnFill;//[Offset: 0x140, Size: 0x10]
	float[] RowFill;//[Offset: 0x150, Size: 0x10]
	void SetRowFill(int ColumnIndex, float Coefficient);// 0x28cd58eb6041
	void SetColumnFill(int ColumnIndex, float Coefficient);// 0x28cc58eb6041
	GridSlot* AddChildToGrid(Widget* Content, int InRow, int InColumn);// 0x28cb58eb6041

--------------------------------
Class: GridSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1]
	int Row;//[Offset: 0x4c, Size: 0x4]
	int RowSpan;//[Offset: 0x50, Size: 0x4]
	int Column;//[Offset: 0x54, Size: 0x4]
	int ColumnSpan;//[Offset: 0x58, Size: 0x4]
	int Layer;//[Offset: 0x5c, Size: 0x4]
	Vector2D Nudge;//[Offset: 0x60, Size: 0x10]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x28d658eb6041
	void SetRowSpan(int InRowSpan);// 0x28d558eb6041
	void SetRow(int InRow);// 0x28d458eb6041
	void SetPadding(Margin InPadding);// 0x28d358eb6041
	void SetNudge(Vector2D InNudge);// 0x28d258eb6041
	void SetLayer(int InLayer);// 0x28d158eb6041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x28d058eb6041
	void SetColumnSpan(int InColumnSpan);// 0x28cf58eb6041
	void SetColumn(int InColumn);// 0x28ce58eb6041

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x28d758eb6041

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	SlateChildSize Size;//[Offset: 0x50, Size: 0x8]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x28db58eb6041
	void SetSize(SlateChildSize InSize);// 0x28da58eb6041
	void SetPadding(Margin InPadding);// 0x28d958eb6041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x28d858eb6041

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x130, Size: 0xc0]
	delegate BrushDelegate;//[Offset: 0x1f0, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x200, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x210, Size: 0x10]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x224, Size: 0x10]
	void SetOpacity(float InOpacity);// 0x28e958eb6041
	void SetDesiredSizeOverride(Vector2D DesiredSize);// 0x292a58eb6041
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x28e758eb6041
	void SetBrushTintColor(SlateColor TintColor);// 0x28e658eb6041
	void SetBrushResourceObject(Object* ResourceObject);// 0x28e558eb6041
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x28e458eb6041
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x28e358eb6041
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x28e258eb6041
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x28e158eb6041
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x28e058eb6041
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x28df58eb6041
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x28de58eb6041
	void SetBrush(out const SlateBrush InBrush);// 0x28dd58eb6041
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x28dc58eb6041

--------------------------------
Class: InputKeySelector.Widget.Visual.Object
	ButtonStyle WidgetStyle;//[Offset: 0x130, Size: 0x3b0]
	TextBlockStyle TextStyle;//[Offset: 0x4e0, Size: 0x310]
	InputChord SelectedKey;//[Offset: 0x7f0, Size: 0x20]
	SlateFontInfo Font;//[Offset: 0x810, Size: 0x58]
	Margin Margin;//[Offset: 0x868, Size: 0x10]
	LinearColor ColorAndOpacity;//[Offset: 0x878, Size: 0x10]
	FText KeySelectionText;//[Offset: 0x888, Size: 0x18]
	FText NoKeySpecifiedText;//[Offset: 0x8a0, Size: 0x18]
	bool bAllowModifierKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8, Size: 0x1]
	bool bAllowGamepadKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b9, Size: 0x1]
	Key[] EscapeKeys;//[Offset: 0x8c0, Size: 0x10]
	delegate OnKeySelected;//[Offset: 0x8d0, Size: 0x10]
	delegate OnIsSelectingKeyChanged;//[Offset: 0x8e0, Size: 0x10]
	void SetTextBlockVisibility(const enum InVisibility);// 0x10a958eb6041
	void SetSelectedKey(out const InputChord InSelectedKey);// 0x10a858eb6041
	void SetNoKeySpecifiedText(FText InNoKeySpecifiedText);// 0x10a758eb6041
	void SetKeySelectionText(FText InKeySelectionText);// 0x10a658eb6041
	void SetEscapeKeys(out const Key[] InKeys);// 0x10a558eb6041
	void SetAllowModifierKeys(bool bInAllowModifierKeys);// 0x10a458eb6041
	void SetAllowGamepadKeys(bool bInAllowGamepadKeys);// 0x10a258eb6041
	void OnKeySelected__DelegateSignature(InputChord SelectedKey);// 0x10a158eb6041
	void OnIsSelectingKeyChanged__DelegateSignature();// 0x10a058eb6041
	bool GetIsSelectingKey();// 0x109d58eb6041

--------------------------------
Class: Int32Binding.PropertyBinding.Object
	int GetValue();// 0x28ea58eb6041

--------------------------------
Class: InvalidationBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bCanCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	bool CacheRelativeTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1]
	void SetCanCache(bool CanCache);// 0x28ed58eb6041
	void InvalidateCache();// 0x28ec58eb6041
	bool GetCanCache();// 0x28eb58eb6041

--------------------------------
Class: UserListEntry.Interface.Object
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0x28f058eb6041
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0x28ef58eb6041
	void BP_OnEntryReleased();// 0x28ee58eb6041

--------------------------------
Class: UserListEntryLibrary.BlueprintFunctionLibrary.Object
	bool IsListItemSelected(interface classNone UserListEntry);// 0x28f358eb6041
	bool IsListItemExpanded(interface classNone UserListEntry);// 0x28f258eb6041
	ListViewBase* GetOwningListView(interface classNone UserListEntry);// 0x28f158eb6041

--------------------------------
Class: ListViewBase.Widget.Visual.Object
	class UserWidget* EntryWidgetClass;//[Offset: 0x128, Size: 0x8]
	float WheelScrollMultiplier;//[Offset: 0x130, Size: 0x4]
	bool bEnableScrollAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 0x1]
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x135, Size: 0x1]
	bool bEnableRightClickScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136, Size: 0x1]
	bool bEnableFixedLineOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x137, Size: 0x1]
	float FixedLineScrollOffset;//[Offset: 0x138, Size: 0x4]
	bool bAllowDragging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]
	delegate BP_OnEntryGenerated;//[Offset: 0x140, Size: 0x10]
	delegate BP_OnEntryReleased;//[Offset: 0x150, Size: 0x10]
	UserWidgetPool EntryWidgetPool;//[Offset: 0x160, Size: 0x88]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x28fe58eb6041
	void SetScrollOffset(const float InScrollOffset);// 0x28fd58eb6041
	void SetScrollbarVisibility(enum InVisibility);// 0x28fc58eb6041
	void ScrollToTop();// 0x28fb58eb6041
	void ScrollToBottom();// 0x28fa58eb6041
	void RequestRefresh();// 0x28f958eb6041
	void RegenerateAllEntries();// 0x28f858eb6041
	float GetScrollOffset();// 0x28f758eb6041
	UserWidget*[] GetDisplayedEntryWidgets();// 0x28f658eb6041

--------------------------------
Class: UserObjectListEntry.UserListEntry.Interface.Object
	void OnListItemObjectSet(Object* ListItemObject);// 0x28f458eb6041

--------------------------------
Class: UserObjectListEntryLibrary.BlueprintFunctionLibrary.Object
	Object* GetListItemObject(interface classNone UserObjectListEntry);// 0x28f558eb6041

--------------------------------
Class: ListView.ListViewBase.Widget.Visual.Object
	TableViewStyle WidgetStyle;//[Offset: 0x300, Size: 0xd0]
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x3d0, Size: 0x6e0]
	byte Orientation;//[Offset: 0xab0, Size: 0x1]
	byte SelectionMode;//[Offset: 0xab1, Size: 0x1]
	enum ConsumeMouseWheel;//[Offset: 0xab2, Size: 0x1]
	bool bClearSelectionOnClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab3, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab4, Size: 0x1]
	float EntrySpacing;//[Offset: 0xab8, Size: 0x4]
	bool bReturnFocusToSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xabc, Size: 0x1]
	Object*[] ListItems;//[Offset: 0xac0, Size: 0x10]
	delegate BP_OnEntryInitialized;//[Offset: 0xae0, Size: 0x10]
	delegate BP_OnItemClicked;//[Offset: 0xaf0, Size: 0x10]
	delegate BP_OnItemDoubleClicked;//[Offset: 0xb00, Size: 0x10]
	delegate BP_OnItemIsHoveredChanged;//[Offset: 0xb10, Size: 0x10]
	delegate BP_OnItemSelectionChanged;//[Offset: 0xb20, Size: 0x10]
	delegate BP_OnItemScrolledIntoView;//[Offset: 0xb30, Size: 0x10]
	void SetSelectionMode(byte SelectionMode);// 0x291758eb6041
	void SetSelectedIndex(int Index);// 0x291658eb6041
	void ScrollIndexIntoView(int Index);// 0x291558eb6041
	void RemoveItem(Object* Item);// 0x291458eb6041
	void OnListItemOuterEndPlayed(Actor* ItemOuter, byte EndPlayReason);// 0x291358eb6041
	void OnListItemEndPlayed(Actor* Item, byte EndPlayReason);// 0x291258eb6041
	void NavigateToIndex(int Index);// 0x291158eb6041
	bool IsRefreshPending();// 0x291058eb6041
	int GetNumItems();// 0x290f58eb6041
	Object*[] GetListItems();// 0x290e58eb6041
	Object* GetItemAt(int Index);// 0x290d58eb6041
	int GetIndexForItem(const Object* Item);// 0x290c58eb6041
	void ClearListItems();// 0x290b58eb6041
	void BP_SetSelectedItem(Object* Item);// 0x290a58eb6041
	void BP_SetListItems(out const Object*[] InListItems);// 0x294b58eb6041
	void BP_SetItemSelection(Object* Item, bool bSelected);// 0x290858eb6041
	void BP_ScrollItemIntoView(Object* Item);// 0x290758eb6041
	void BP_NavigateToItem(Object* Item);// 0x290658eb6041
	bool BP_IsItemVisible(Object* Item);// 0x290558eb6041
	bool BP_GetSelectedItems(out Object*[] Items);// 0x290458eb6041
	Object* BP_GetSelectedItem();// 0x290358eb6041
	int BP_GetNumItemsSelected();// 0x290258eb6041
	void BP_ClearSelection();// 0x290158eb6041
	void BP_CancelScrollIntoView();// 0x290058eb6041
	void AddItem(Object* Item);// 0x28ff58eb6041

--------------------------------
Class: TableViewStyle.SlateWidgetStyle
	SlateBrush BackgroundBrush;//[Offset: 0x10, Size: 0xc0]

--------------------------------
Class: ListViewDesignerPreviewItem.Object

--------------------------------
Class: MenuAnchor.ContentWidget.PanelWidget.Widget.Visual.Object
	class UserWidget* MenuClass;//[Offset: 0x140, Size: 0x8]
	delegate OnGetMenuContentEvent;//[Offset: 0x148, Size: 0x10]
	delegate OnGetUserMenuContentEvent;//[Offset: 0x158, Size: 0x10]
	byte Placement;//[Offset: 0x168, Size: 0x1]
	bool bFitInWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]
	bool ShouldDeferPaintingAfterWindowContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 0x1]
	bool UseApplicationMenuStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b, Size: 0x1]
	delegate OnMenuOpenChanged;//[Offset: 0x170, Size: 0x10]
	void ToggleOpen(bool bFocusOnOpen);// 0x10c158eb6041
	bool ShouldOpenDueToClick();// 0x10c058eb6041
	void SetPlacement(byte InPlacement);// 0x10bf58eb6041
	void Open(bool bFocusMenu);// 0x10be58eb6041
	bool IsOpen();// 0x10bd58eb6041
	bool HasOpenSubMenus();// 0x10bc58eb6041
	UserWidget* GetUserWidget__DelegateSignature();// 0x10bb58eb6041
	Vector2D GetMenuPosition();// 0x10ba58eb6041
	void FitInWindow(bool bFit);// 0x10b958eb6041
	void Close();// 0x10b858eb6041

--------------------------------
Class: MouseCursorBinding.PropertyBinding.Object
	byte GetValue();// 0x291858eb6041

--------------------------------
Class: MovieScene2DTransformPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieScene2DTransformSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieScene2DTransformMask TransformMask;//[Offset: 0xe8, Size: 0x4]
	MovieSceneFloatChannel Translation;//[Offset: 0xf0, Size: 0xe8]
	MovieSceneFloatChannel Rotation;//[Offset: 0x2c0, Size: 0xe8]
	MovieSceneFloatChannel Scale;//[Offset: 0x3a8, Size: 0xe8]
	MovieSceneFloatChannel Shear;//[Offset: 0x578, Size: 0xe8]

--------------------------------
Class: MovieScene2DTransformMask
	uint32 Mask;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieScene2DTransformTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneMarginPropertySystem.MovieScenePropertySystem.MovieSceneEntitySystem.Object

--------------------------------
Class: MovieSceneMarginSection.MovieSceneSection.MovieSceneSignedObject.Object
	MovieSceneFloatChannel TopCurve;//[Offset: 0xe8, Size: 0xe8]
	MovieSceneFloatChannel LeftCurve;//[Offset: 0x1d0, Size: 0xe8]
	MovieSceneFloatChannel RightCurve;//[Offset: 0x2b8, Size: 0xe8]
	MovieSceneFloatChannel BottomCurve;//[Offset: 0x3a0, Size: 0xe8]

--------------------------------
Class: MovieSceneMarginTrack.MovieScenePropertyTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object

--------------------------------
Class: MovieSceneWidgetMaterialTrack.MovieSceneMaterialTrack.MovieSceneNameableTrack.MovieSceneTrack.MovieSceneSignedObject.Object
	FName[] BrushPropertyNamePath;//[Offset: 0xa8, Size: 0x10]
	FName TrackName;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x128, Size: 0x3]
	byte Justification;//[Offset: 0x12b, Size: 0x1]
	enum WrappingPolicy;//[Offset: 0x12c, Size: 0x1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12d, Size: 0x1]
	float WrapTextAt;//[Offset: 0x130, Size: 0x4]
	Margin Margin;//[Offset: 0x134, Size: 0x10]
	float LineHeightPercentage;//[Offset: 0x144, Size: 0x4]
	void SetJustification(byte InJustification);// 0x10e258eb6041

--------------------------------
Class: MultiLineEditableText.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x148, Size: 0x18]
	FText HintText;//[Offset: 0x160, Size: 0x18]
	delegate HintTextDelegate;//[Offset: 0x178, Size: 0x10]
	TextBlockStyle WidgetStyle;//[Offset: 0x190, Size: 0x310]
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 0x1]
	SlateFontInfo Font;//[Offset: 0x4a8, Size: 0x58]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	bool ClearTextSelectionOnFocusLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x501, Size: 0x1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x502, Size: 0x1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x503, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 0x1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x505, Size: 0x1]
	enum VirtualKeyboardDismissAction;//[Offset: 0x506, Size: 0x1]
	delegate OnTextChanged;//[Offset: 0x508, Size: 0x10]
	delegate OnTextCommitted;//[Offset: 0x518, Size: 0x10]
	void SetWidgetStyle(out const TextBlockStyle InWidgetStyle);// 0x10ea58eb6041
	void SetText(FText InText);// 0x10e958eb6041
	void SetIsReadOnly(bool bReadOnly);// 0x10e858eb6041
	void SetHintText(FText InHintText);// 0x10e758eb6041
	void OnMultiLineEditableTextCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x10e658eb6041
	void OnMultiLineEditableTextChangedEvent__DelegateSignature(out const FText Text);// 0x10e558eb6041
	FText GetText();// 0x10e458eb6041
	FText GetHintText();// 0x10e358eb6041

--------------------------------
Class: MultiLineEditableTextBox.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x148, Size: 0x18]
	FText HintText;//[Offset: 0x160, Size: 0x18]
	delegate HintTextDelegate;//[Offset: 0x178, Size: 0x10]
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x190, Size: 0xad0]
	TextBlockStyle TextStyle;//[Offset: 0xc60, Size: 0x310]
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf70, Size: 0x1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf71, Size: 0x1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0xf72, Size: 0x1]
	enum VirtualKeyboardDismissAction;//[Offset: 0xf73, Size: 0x1]
	SlateWidgetStyleAsset* Style;//[Offset: 0xf78, Size: 0x8]
	SlateFontInfo Font;//[Offset: 0xf80, Size: 0x58]
	LinearColor ForegroundColor;//[Offset: 0xfd8, Size: 0x10]
	LinearColor BackgroundColor;//[Offset: 0xfe8, Size: 0x10]
	LinearColor ReadOnlyForegroundColor;//[Offset: 0xff8, Size: 0x10]
	delegate OnTextChanged;//[Offset: 0x1008, Size: 0x10]
	delegate OnTextCommitted;//[Offset: 0x1018, Size: 0x10]
	void SetTextStyle(out const TextBlockStyle InTextStyle);// 0x10f458eb6041
	void SetText(FText InText);// 0x10f358eb6041
	void SetIsReadOnly(bool bReadOnly);// 0x10f258eb6041
	void SetHintText(FText InHintText);// 0x10f158eb6041
	void SetForegroundColor(LinearColor Color);// 0x10f058eb6041
	void SetError(FText InError);// 0x10ef58eb6041
	void OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x10ee58eb6041
	void OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x10ed58eb6041
	FText GetText();// 0x10ec58eb6041
	FText GetHintText();// 0x10eb58eb6041

--------------------------------
Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: NamedSlotInterface.Interface.Object

--------------------------------
Class: NativeWidgetHost.Widget.Visual.Object

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0x291958eb6041

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x291c58eb6041
	void SetPadding(Margin InPadding);// 0x291b58eb6041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x291a58eb6041

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x130, Size: 0x260]
	SlateWidgetStyleAsset* Style;//[Offset: 0x390, Size: 0x8]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x398, Size: 0x8]
	SlateBrushAsset* FillImage;//[Offset: 0x3a0, Size: 0x8]
	SlateBrushAsset* MarqueeImage;//[Offset: 0x3a8, Size: 0x8]
	float Percent;//[Offset: 0x3b0, Size: 0x4]
	byte BarFillType;//[Offset: 0x3b4, Size: 0x1]
	byte BarFillStyle;//[Offset: 0x3b5, Size: 0x1]
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b6, Size: 0x1]
	Vector2D BorderPadding;//[Offset: 0x3b8, Size: 0x10]
	delegate PercentDelegate;//[Offset: 0x3c8, Size: 0x10]
	LinearColor FillColorAndOpacity;//[Offset: 0x3d8, Size: 0x10]
	delegate FillColorAndOpacityDelegate;//[Offset: 0x3e8, Size: 0x10]
	void SetPercent(float InPercent);// 0x291f58eb6041
	void SetIsMarquee(bool InbIsMarquee);// 0x291e58eb6041
	void SetFillColorAndOpacity(LinearColor InColor);// 0x291d58eb6041

--------------------------------
Class: RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bRetainRender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	bool RenderOnInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1]
	bool RenderOnPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b, Size: 0x1]
	int Phase;//[Offset: 0x13c, Size: 0x4]
	int PhaseCount;//[Offset: 0x140, Size: 0x4]
	MaterialInterface* EffectMaterial;//[Offset: 0x148, Size: 0x8]
	FName TextureParameter;//[Offset: 0x150, Size: 0x8]
	void SetTextureParameter(FName TextureParameter);// 0x292558eb6041
	void SetRetainRendering(bool bInRetainRendering);// 0x292458eb6041
	void SetRenderingPhase(int RenderPhase, int TotalPhases);// 0x292358eb6041
	void SetEffectMaterial(MaterialInterface* EffectMaterial);// 0x292258eb6041
	void RequestRender();// 0x292158eb6041
	MaterialInstanceDynamic* GetEffectMaterial();// 0x292058eb6041

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x148, Size: 0x18]
	DataTable* TextStyleSet;//[Offset: 0x160, Size: 0x8]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x168, Size: 0x10]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 0x1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x180, Size: 0x310]
	float MinDesiredWidth;//[Offset: 0x490, Size: 0x4]
	enum TextTransformPolicy;//[Offset: 0x494, Size: 0x1]
	enum TextOverflowPolicy;//[Offset: 0x495, Size: 0x1]
	TextBlockStyle DefaultTextStyle;//[Offset: 0x4a0, Size: 0x310]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x7b0, Size: 0x10]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x293658eb6041
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x293558eb6041
	void SetTextOverflowPolicy(enum InOverflowPolicy);// 0x293458eb6041
	void SetText(out const FText InText);// 0x293358eb6041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x293258eb6041
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x293158eb6041
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x293058eb6041
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x292f58eb6041
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x292e58eb6041
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x292d58eb6041
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x292c58eb6041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x292b58eb6041
	void RefreshTextLayout();// 0x296c58eb6041
	FText GetText();// 0x292958eb6041
	MaterialInstanceDynamic* GetDefaultDynamicMaterial();// 0x292858eb6041
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x292758eb6041
	void ClearAllDefaultStyleOverrides();// 0x292658eb6041

--------------------------------
Class: RichTextBlockDecorator.Object

--------------------------------
Class: RichTextBlockImageDecorator.RichTextBlockDecorator.Object
	DataTable* ImageSet;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: SafeZone.ContentWidget.PanelWidget.Widget.Visual.Object
	bool PadLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	bool PadRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1]
	bool PadTop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b, Size: 0x1]
	bool PadBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 0x1]
	void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);// 0x293758eb6041

--------------------------------
Class: SafeZoneSlot.PanelSlot.Visual.Object
	bool bIsTitleSafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	Margin SafeAreaScale;//[Offset: 0x3c, Size: 0x10]
	byte HAlign;//[Offset: 0x4c, Size: 0x1]
	byte VAlign;//[Offset: 0x4d, Size: 0x1]
	Margin Padding;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x139, Size: 0x1]
	byte StretchDirection;//[Offset: 0x13a, Size: 0x1]
	float UserSpecifiedScale;//[Offset: 0x13c, Size: 0x4]
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x293b58eb6041
	void SetStretchDirection(byte InStretchDirection);// 0x293a58eb6041
	void SetStretch(byte InStretch);// 0x293958eb6041
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x293858eb6041

--------------------------------
Class: ScaleBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x293e58eb6041
	void SetPadding(Margin InPadding);// 0x293d58eb6041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x293c58eb6041

--------------------------------
Class: ScrollBar.Widget.Visual.Object
	ScrollBarStyle WidgetStyle;//[Offset: 0x130, Size: 0x6e0]
	SlateWidgetStyleAsset* Style;//[Offset: 0x810, Size: 0x8]
	bool bAlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 0x1]
	bool bAlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x819, Size: 0x1]
	byte Orientation;//[Offset: 0x81a, Size: 0x1]
	Vector2D Thickness;//[Offset: 0x820, Size: 0x10]
	Margin Padding;//[Offset: 0x830, Size: 0x10]
	void SetState(float InOffsetFraction, float InThumbSizeFraction);// 0x293f58eb6041

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0x140, Size: 0x310]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x450, Size: 0x6e0]
	SlateWidgetStyleAsset* Style;//[Offset: 0xb30, Size: 0x8]
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0xb38, Size: 0x8]
	byte Orientation;//[Offset: 0xb40, Size: 0x1]
	enum ScrollBarVisibility;//[Offset: 0xb41, Size: 0x1]
	enum ConsumeMouseWheel;//[Offset: 0xb42, Size: 0x1]
	Vector2D ScrollbarThickness;//[Offset: 0xb48, Size: 0x10]
	Margin ScrollbarPadding;//[Offset: 0xb58, Size: 0x10]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb68, Size: 0x1]
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb69, Size: 0x1]
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6a, Size: 0x1]
	bool BackPadScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6b, Size: 0x1]
	bool FrontPadScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6c, Size: 0x1]
	bool bAnimateWheelScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6d, Size: 0x1]
	enum NavigationDestination;//[Offset: 0xb6e, Size: 0x1]
	float NavigationScrollPadding;//[Offset: 0xb70, Size: 0x4]
	enum ScrollWhenFocusChanges;//[Offset: 0xb74, Size: 0x1]
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb75, Size: 0x1]
	float WheelScrollMultiplier;//[Offset: 0xb78, Size: 0x4]
	delegate OnUserScrolled;//[Offset: 0xb80, Size: 0x10]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x295258eb6041
	void SetScrollWhenFocusChanges(enum NewScrollWhenFocusChanges);// 0x295158eb6041
	void SetScrollOffset(float NewScrollOffset);// 0x295058eb6041
	void SetScrollbarVisibility(enum NewScrollBarVisibility);// 0x294f58eb6041
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x294e58eb6041
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0x294d58eb6041
	void SetOrientation(byte NewOrientation);// 0x294c58eb6041
	void SetNavigationDestination(const enum NewNavigationDestination);// 0x298d58eb6041
	void SetConsumeMouseWheel(enum NewConsumeMouseWheel);// 0x294a58eb6041
	void SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);// 0x294958eb6041
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x294858eb6041
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0x294758eb6041
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDestination, float Padding);// 0x294658eb6041
	void ScrollToStart();// 0x294558eb6041
	void ScrollToEnd();// 0x294458eb6041
	float GetViewOffsetFraction();// 0x294358eb6041
	float GetScrollOffsetOfEnd();// 0x294258eb6041
	float GetScrollOffset();// 0x294158eb6041
	void EndInertialScrolling();// 0x294058eb6041

--------------------------------
Class: ScrollBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x295558eb6041
	void SetPadding(Margin InPadding);// 0x295458eb6041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x295358eb6041

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x150, Size: 0x4]
	float HeightOverride;//[Offset: 0x154, Size: 0x4]
	float MinDesiredWidth;//[Offset: 0x158, Size: 0x4]
	float MinDesiredHeight;//[Offset: 0x15c, Size: 0x4]
	float MaxDesiredWidth;//[Offset: 0x160, Size: 0x4]
	float MaxDesiredHeight;//[Offset: 0x164, Size: 0x4]
	float MinAspectRatio;//[Offset: 0x168, Size: 0x4]
	float MaxAspectRatio;//[Offset: 0x16c, Size: 0x4]
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x170, Size: 0x1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x170, Size: 0x1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x170, Size: 0x1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x170, Size: 0x1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x170, Size: 0x1]
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x170, Size: 0x1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x170, Size: 0x1]
	void SetWidthOverride(float InWidthOverride);// 0x296558eb6041
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x296458eb6041
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x296358eb6041
	void SetMinAspectRatio(float InMinAspectRatio);// 0x296258eb6041
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x296158eb6041
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x296058eb6041
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x295f58eb6041
	void SetHeightOverride(float InHeightOverride);// 0x295e58eb6041
	void ClearWidthOverride();// 0x295d58eb6041
	void ClearMinDesiredWidth();// 0x295c58eb6041
	void ClearMinDesiredHeight();// 0x295b58eb6041
	void ClearMinAspectRatio();// 0x295a58eb6041
	void ClearMaxDesiredWidth();// 0x295958eb6041
	void ClearMaxDesiredHeight();// 0x295858eb6041
	void ClearMaxAspectRatio();// 0x295758eb6041
	void ClearHeightOverride();// 0x295658eb6041

--------------------------------
Class: SizeBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x296858eb6041
	void SetPadding(Margin InPadding);// 0x296758eb6041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x296658eb6041

--------------------------------
Class: SlateBlueprintLibrary.BlueprintFunctionLibrary.Object
	Vector2D TransformVectorLocalToAbsolute(out const Geometry Geometry, Vector2D LocalVector);// 0x297858eb6041
	Vector2D TransformVectorAbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteVector);// 0x297758eb6041
	float TransformScalarLocalToAbsolute(out const Geometry Geometry, float LocalScalar);// 0x297658eb6041
	float TransformScalarAbsoluteToLocal(out const Geometry Geometry, float AbsoluteScalar);// 0x297558eb6041
	void ScreenToWidgetLocal(Object* WorldContextObject, out const Geometry Geometry, Vector2D ScreenPosition, out Vector2D LocalCoordinate, bool bIncludeWindowPosition);// 0x297458eb6041
	void ScreenToWidgetAbsolute(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D AbsoluteCoordinate, bool bIncludeWindowPosition);// 0x297358eb6041
	void ScreenToViewport(Object* WorldContextObject, Vector2D ScreenPosition, out Vector2D ViewportPosition);// 0x297258eb6041
	void LocalToViewport(Object* WorldContextObject, out const Geometry Geometry, Vector2D LocalCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0x297158eb6041
	Vector2D LocalToAbsolute(out const Geometry Geometry, Vector2D LocalCoordinate);// 0x297058eb6041
	bool IsUnderLocation(out const Geometry Geometry, out const Vector2D AbsoluteCoordinate);// 0x296f58eb6041
	Vector2D GetLocalTopLeft(out const Geometry Geometry);// 0x296e58eb6041
	Vector2D GetLocalSize(out const Geometry Geometry);// 0x296d58eb6041
	Vector2D GetAbsoluteSize(out const Geometry Geometry);// 0x29a958eb6041
	bool EqualEqual_SlateBrush(out const SlateBrush A, out const SlateBrush B);// 0x296b58eb6041
	void AbsoluteToViewport(Object* WorldContextObject, Vector2D AbsoluteDesktopCoordinate, out Vector2D PixelPosition, out Vector2D ViewportPosition);// 0x296a58eb6041
	Vector2D AbsoluteToLocal(out const Geometry Geometry, Vector2D AbsoluteCoordinate);// 0x296958eb6041

--------------------------------
Class: SlateVectorArtData.Object
	SlateMeshVertex[] VertexData;//[Offset: 0x28, Size: 0x10]
	uint32[] IndexData;//[Offset: 0x38, Size: 0x10]
	MaterialInterface* Material;//[Offset: 0x48, Size: 0x8]
	Vector2D ExtentMin;//[Offset: 0x50, Size: 0x10]
	Vector2D ExtentMax;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: SlateMeshVertex
	Vector2f Position;//[Offset: 0x0, Size: 0x8]
	Color Color;//[Offset: 0x8, Size: 0x4]
	Vector2f UV0;//[Offset: 0xc, Size: 0x8]
	Vector2f UV1;//[Offset: 0x14, Size: 0x8]
	Vector2f UV2;//[Offset: 0x1c, Size: 0x8]
	Vector2f UV3;//[Offset: 0x24, Size: 0x8]
	Vector2f UV4;//[Offset: 0x2c, Size: 0x8]
	Vector2f UV5;//[Offset: 0x34, Size: 0x8]

--------------------------------
Class: Slider.Widget.Visual.Object
	float Value;//[Offset: 0x128, Size: 0x4]
	delegate ValueDelegate;//[Offset: 0x12c, Size: 0x10]
	float MinValue;//[Offset: 0x13c, Size: 0x4]
	float MaxValue;//[Offset: 0x140, Size: 0x4]
	SliderStyle WidgetStyle;//[Offset: 0x150, Size: 0x4a0]
	byte Orientation;//[Offset: 0x5f0, Size: 0x1]
	LinearColor SliderBarColor;//[Offset: 0x5f4, Size: 0x10]
	LinearColor SliderHandleColor;//[Offset: 0x604, Size: 0x10]
	bool IndentHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 0x1]
	bool Locked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 0x1]
	bool MouseUsesStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x616, Size: 0x1]
	bool RequiresControllerLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x617, Size: 0x1]
	float StepSize;//[Offset: 0x618, Size: 0x4]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 0x1]
	delegate OnMouseCaptureBegin;//[Offset: 0x620, Size: 0x10]
	delegate OnMouseCaptureEnd;//[Offset: 0x630, Size: 0x10]
	delegate OnControllerCaptureBegin;//[Offset: 0x640, Size: 0x10]
	delegate OnControllerCaptureEnd;//[Offset: 0x650, Size: 0x10]
	delegate OnValueChanged;//[Offset: 0x660, Size: 0x10]
	void SetValue(float InValue);// 0x298258eb6041
	void SetStepSize(float InValue);// 0x298158eb6041
	void SetSliderHandleColor(LinearColor InValue);// 0x298058eb6041
	void SetSliderBarColor(LinearColor InValue);// 0x297f58eb6041
	void SetMinValue(float InValue);// 0x297e58eb6041
	void SetMaxValue(float InValue);// 0x297d58eb6041
	void SetLocked(bool InValue);// 0x297c58eb6041
	void SetIndentHandle(bool InValue);// 0x297b58eb6041
	float GetValue();// 0x297a58eb6041
	float GetNormalizedValue();// 0x297958eb6041

--------------------------------
Class: SliderStyle.SlateWidgetStyle
	SlateBrush NormalBarImage;//[Offset: 0x10, Size: 0xc0]
	SlateBrush HoveredBarImage;//[Offset: 0xd0, Size: 0xc0]
	SlateBrush DisabledBarImage;//[Offset: 0x190, Size: 0xc0]
	SlateBrush NormalThumbImage;//[Offset: 0x250, Size: 0xc0]
	SlateBrush HoveredThumbImage;//[Offset: 0x310, Size: 0xc0]
	SlateBrush DisabledThumbImage;//[Offset: 0x3d0, Size: 0xc0]
	float BarThickness;//[Offset: 0x490, Size: 0x4]

--------------------------------
Class: Spacer.Widget.Visual.Object
	Vector2D Size;//[Offset: 0x128, Size: 0x10]
	void SetSize(Vector2D InSize);// 0x298358eb6041

--------------------------------
Class: SpinBox.Widget.Visual.Object
	float Value;//[Offset: 0x128, Size: 0x4]
	delegate ValueDelegate;//[Offset: 0x12c, Size: 0x10]
	SpinBoxStyle WidgetStyle;//[Offset: 0x140, Size: 0x590]
	SlateWidgetStyleAsset* Style;//[Offset: 0x6d0, Size: 0x8]
	int MinFractionalDigits;//[Offset: 0x6d8, Size: 0x4]
	int MaxFractionalDigits;//[Offset: 0x6dc, Size: 0x4]
	bool bAlwaysUsesDeltaSnap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 0x1]
	float Delta;//[Offset: 0x6e4, Size: 0x4]
	float SliderExponent;//[Offset: 0x6e8, Size: 0x4]
	SlateFontInfo Font;//[Offset: 0x6f0, Size: 0x58]
	byte Justification;//[Offset: 0x748, Size: 0x1]
	float MinDesiredWidth;//[Offset: 0x74c, Size: 0x4]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 0x1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x751, Size: 0x1]
	SlateColor ForegroundColor;//[Offset: 0x754, Size: 0x14]
	delegate OnValueChanged;//[Offset: 0x768, Size: 0x10]
	delegate OnValueCommitted;//[Offset: 0x778, Size: 0x10]
	delegate OnBeginSliderMovement;//[Offset: 0x788, Size: 0x10]
	delegate OnEndSliderMovement;//[Offset: 0x798, Size: 0x10]
	bool bOverride_MinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a8, Size: 0x1]
	bool bOverride_MaxValue;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7a8, Size: 0x1]
	bool bOverride_MinSliderValue;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7a8, Size: 0x1]
	bool bOverride_MaxSliderValue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7a8, Size: 0x1]
	float MinValue;//[Offset: 0x7ac, Size: 0x4]
	float MaxValue;//[Offset: 0x7b0, Size: 0x4]
	float MinSliderValue;//[Offset: 0x7b4, Size: 0x4]
	float MaxSliderValue;//[Offset: 0x7b8, Size: 0x4]
	void SetValue(float NewValue);// 0x111058eb6041
	void SetMinValue(float NewValue);// 0x110f58eb6041
	void SetMinSliderValue(float NewValue);// 0x110e58eb6041
	void SetMinFractionalDigits(int NewValue);// 0x110d58eb6041
	void SetMaxValue(float NewValue);// 0x110c58eb6041
	void SetMaxSliderValue(float NewValue);// 0x110b58eb6041
	void SetMaxFractionalDigits(int NewValue);// 0x110a58eb6041
	void SetForegroundColor(SlateColor InForegroundColor);// 0x110958eb6041
	void SetDelta(float NewValue);// 0x110858eb6041
	void SetAlwaysUsesDeltaSnap(bool bNewValue);// 0x110758eb6041
	void OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, byte CommitMethod);// 0x110658eb6041
	void OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);// 0x110558eb6041
	void OnSpinBoxBeginSliderMovement__DelegateSignature();// 0x110458eb6041
	float GetValue();// 0x110358eb6041
	float GetMinValue();// 0x110258eb6041
	float GetMinSliderValue();// 0x110158eb6041
	int GetMinFractionalDigits();// 0x110058eb6041
	float GetMaxValue();// 0x10ff58eb6041
	float GetMaxSliderValue();// 0x10fe58eb6041
	int GetMaxFractionalDigits();// 0x10fd58eb6041
	float GetDelta();// 0x10fc58eb6041
	bool GetAlwaysUsesDeltaSnap();// 0x10fb58eb6041
	void ClearMinValue();// 0x10fa58eb6041
	void ClearMinSliderValue();// 0x10f958eb6041
	void ClearMaxValue();// 0x114058eb6041
	void ClearMaxSliderValue();// 0x10f658eb6041

--------------------------------
Class: TextBinding.PropertyBinding.Object
	FText GetTextValue();// 0x298558eb6041
	FString GetStringValue();// 0x298458eb6041

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x148, Size: 0x18]
	delegate TextDelegate;//[Offset: 0x160, Size: 0x10]
	SlateColor ColorAndOpacity;//[Offset: 0x170, Size: 0x14]
	delegate ColorAndOpacityDelegate;//[Offset: 0x184, Size: 0x10]
	SlateFontInfo Font;//[Offset: 0x198, Size: 0x58]
	SlateBrush StrikeBrush;//[Offset: 0x1f0, Size: 0xc0]
	Vector2D ShadowOffset;//[Offset: 0x2b0, Size: 0x10]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x2c0, Size: 0x10]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x2d0, Size: 0x10]
	float MinDesiredWidth;//[Offset: 0x2e0, Size: 0x4]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 0x1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 0x1]
	enum TextTransformPolicy;//[Offset: 0x2e6, Size: 0x1]
	enum TextOverflowPolicy;//[Offset: 0x2e7, Size: 0x1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	void SetTextTransformPolicy(enum InTransformPolicy);// 0x299358eb6041
	void SetTextOverflowPolicy(enum InOverflowPolicy);// 0x299258eb6041
	void SetText(FText InText);// 0x299158eb6041
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x299058eb6041
	void SetShadowOffset(Vector2D InShadowOffset);// 0x298f58eb6041
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x298e58eb6041
	void SetOpacity(float InOpacity);// 0xffffff8158eb6000
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x298c58eb6041
	void SetFont(SlateFontInfo InFontInfo);// 0x298b58eb6041
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x298a58eb6041
	void SetAutoWrapText(bool InAutoTextWrap);// 0x298958eb6041
	FText GetText();// 0x298858eb6041
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x298758eb6041
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x298658eb6041

--------------------------------
Class: Throbber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x128, Size: 0x4]
	bool bAnimateHorizontally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 0x1]
	bool bAnimateVertically;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 0x1]
	bool bAnimateOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e, Size: 0x1]
	SlateBrushAsset* PieceImage;//[Offset: 0x130, Size: 0x8]
	SlateBrush Image;//[Offset: 0x140, Size: 0xc0]
	void SetNumberOfPieces(int InNumberOfPieces);// 0x299758eb6041
	void SetAnimateVertically(bool bInAnimateVertically);// 0x299658eb6041
	void SetAnimateOpacity(bool bInAnimateOpacity);// 0x299558eb6041
	void SetAnimateHorizontally(bool bInAnimateHorizontally);// 0x299458eb6041

--------------------------------
Class: TileView.ListView.ListViewBase.Widget.Visual.Object
	float EntryHeight;//[Offset: 0xb40, Size: 0x4]
	float EntryWidth;//[Offset: 0xb44, Size: 0x4]
	enum TileAlignment;//[Offset: 0xb48, Size: 0x1]
	bool bWrapHorizontalNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb49, Size: 0x1]
	void SetEntryWidth(float NewWidth);// 0x299b58eb6041
	void SetEntryHeight(float NewHeight);// 0x299a58eb6041
	float GetEntryWidth();// 0x299958eb6041
	float GetEntryHeight();// 0x299858eb6041

--------------------------------
Class: TreeView.ListView.ListViewBase.Widget.Visual.Object
	delegate BP_OnGetItemChildren;//[Offset: 0xb50, Size: 0x10]
	delegate BP_OnItemExpansionChanged;//[Offset: 0xb60, Size: 0x10]
	void SetItemExpansion(Object* Item, bool bExpandItem);// 0x299e58eb6041
	void ExpandAll();// 0x299d58eb6041
	void CollapseAll();// 0x299c58eb6041

--------------------------------
Class: UniformGridPanel.PanelWidget.Widget.Visual.Object
	Margin SlotPadding;//[Offset: 0x13c, Size: 0x10]
	float MinDesiredSlotWidth;//[Offset: 0x14c, Size: 0x4]
	float MinDesiredSlotHeight;//[Offset: 0x150, Size: 0x4]
	void SetSlotPadding(Margin InSlotPadding);// 0x29a458eb6041
	void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth);// 0x29a358eb6041
	void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight);// 0x29a258eb6041
	UniformGridSlot* AddChildToUniformGrid(Widget* Content, int InRow, int InColumn);// 0x29a158eb6041

--------------------------------
Class: UniformGridSlot.PanelSlot.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x38, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x39, Size: 0x1]
	int Row;//[Offset: 0x3c, Size: 0x4]
	int Column;//[Offset: 0x40, Size: 0x4]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x29a858eb6041
	void SetRow(int InRow);// 0x29a758eb6041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x29a658eb6041
	void SetColumn(int InColumn);// 0x29a558eb6041

--------------------------------
Class: UserWidgetBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x2a0458eb6041

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 0x8]
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2a0858eb6041
	void SetSize(SlateChildSize InSize);// 0x2a0758eb6041
	void SetPadding(Margin InPadding);// 0x2a0658eb6041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2a0558eb6041

--------------------------------
Class: Viewport.ContentWidget.PanelWidget.Widget.Visual.Object
	LinearColor BackgroundColor;//[Offset: 0x13c, Size: 0x10]
	Actor* Spawn(class Actor ActorClass);// 0x2a0e58eb6041
	void SetViewRotation(Rotator Rotation);// 0x2a0d58eb6041
	void SetViewLocation(Vector Location);// 0x2a4e58eb6041
	Rotator GetViewRotation();// 0x2a0b58eb6041
	World* GetViewportWorld();// 0x2a0a58eb6041
	Vector GetViewLocation();// 0x2a0958eb6041

--------------------------------
Class: VisibilityBinding.PropertyBinding.Object
	enum GetValue();// 0x2a0f58eb6041

--------------------------------
Class: WidgetAnimationDelegateBinding.DynamicBlueprintBinding.Object
	BlueprintWidgetAnimationDelegateBinding[] WidgetAnimationDelegateBindings;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: BlueprintWidgetAnimationDelegateBinding
	enum Action;//[Offset: 0x0, Size: 0x1]
	FName AnimationToBind;//[Offset: 0x4, Size: 0x8]
	FName FunctionNameToBind;//[Offset: 0xc, Size: 0x8]
	FName UserTag;//[Offset: 0x14, Size: 0x8]

--------------------------------
Class: WidgetAnimationPlayCallbackProxy.Object
	delegate Finished;//[Offset: 0x28, Size: 0x10]
	WidgetAnimationPlayCallbackProxy* CreatePlayAnimationTimeRangeProxyObject(out UMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x2a1958eb6041
	WidgetAnimationPlayCallbackProxy* CreatePlayAnimationProxyObject(out UMGSequencePlayer* Result, UserWidget* Widget, WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x2a1858eb6041

--------------------------------
Class: WidgetBinding.PropertyBinding.Object
	Widget* GetValue();// 0x2a1a58eb6041

--------------------------------
Class: WidgetBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	WidgetTree* WidgetTree;//[Offset: 0x3b8, Size: 0x8]
	bool bClassRequiresNativeTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 0x1]
	DelegateRuntimeBinding[] Bindings;//[Offset: 0x3c8, Size: 0x10]
	WidgetAnimation*[] Animations;//[Offset: 0x3d8, Size: 0x10]
	FName[] NamedSlots;//[Offset: 0x3e8, Size: 0x10]

--------------------------------
Class: DelegateRuntimeBinding
	FString ObjectName;//[Offset: 0x0, Size: 0x10]
	FName PropertyName;//[Offset: 0x10, Size: 0x8]
	FName FunctionName;//[Offset: 0x18, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x20, Size: 0x28]
	enum Kind;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: WidgetBlueprintLibrary.BlueprintFunctionLibrary.Object
	EventReply UnlockMouse(out EventReply Reply);// 0x114e58eb6041
	EventReply Unhandled();// 0x114c58eb6041
	void SetWindowTitleBarState(Widget* TitleBarContent, enum Mode, bool bTitleBarDragEnabled, bool bWindowButtonsVisible, bool bTitleBarVisible);// 0x114b58eb6041
	void SetWindowTitleBarOnCloseClickedDelegate(delegate Delegate);// 0x114a58eb6041
	void SetWindowTitleBarCloseButtonActive(bool bActive);// 0x114958eb6041
	EventReply SetUserFocus(out EventReply Reply, Widget* FocusWidget, bool bInAllUsers);// 0x114858eb6041
	EventReply SetMousePosition(out EventReply Reply, Vector2D NewMousePosition);// 0x114758eb6041
	void SetInputMode_UIOnlyEx(PlayerController* PlayerController, Widget* InWidgetToFocus, enum InMouseLockMode);// 0x114658eb6041
	void SetInputMode_GameOnly(PlayerController* PlayerController);// 0x114458eb6041
	void SetInputMode_GameAndUIEx(PlayerController* PlayerController, Widget* InWidgetToFocus, enum InMouseLockMode, bool bHideCursorDuringCapture);// 0x114358eb6041
	bool SetHardwareCursor(Object* WorldContextObject, byte CursorShape, FName CursorName, Vector2D HotSpot);// 0x114258eb6041
	void SetFocusToGameViewport();// 0x114158eb6041
	void SetColorVisionDeficiencyType(enum Type, float Severity, bool CorrectDeficiency, bool ShowCorrectionWithDeficiency);// 0x138758eb6041
	void SetBrushResourceToTexture(out SlateBrush Brush, Texture2D* Texture);// 0x113f58eb6041
	void SetBrushResourceToMaterial(out SlateBrush Brush, MaterialInterface* Material);// 0x113e58eb6041
	void RestorePreviousWindowTitleBarState();// 0x113d58eb6041
	EventReply ReleaseMouseCapture(out EventReply Reply);// 0x113c58eb6041
	EventReply ReleaseJoystickCapture(out EventReply Reply, bool bInAllJoysticks);// 0x113b58eb6041
	void OnGameWindowCloseButtonClickedDelegate__DelegateSignature();// 0x113a58eb6041
	SlateBrush NoResourceBrush();// 0x113958eb6041
	SlateBrush MakeBrushFromTexture(Texture2D* Texture, int Width, int Height);// 0x113858eb6041
	SlateBrush MakeBrushFromMaterial(MaterialInterface* Material, int Width, int Height);// 0x113758eb6041
	SlateBrush MakeBrushFromAsset(SlateBrushAsset* BrushAsset);// 0x113658eb6041
	EventReply LockMouse(out EventReply Reply, Widget* CapturingWidget);// 0x113558eb6041
	bool IsDragDropping();// 0x113458eb6041
	EventReply Handled();// 0x113358eb6041
	void GetSafeZonePadding(Object* WorldContextObject, out Vector4 SafePadding, out Vector2D SafePaddingScale, out Vector4 SpillOverPadding);// 0x113158eb6041
	KeyEvent GetKeyEventFromAnalogInputEvent(out const AnalogInputEvent Event);// 0x113058eb6041
	InputEvent GetInputEventFromPointerEvent(out const PointerEvent Event);// 0x112e58eb6041
	InputEvent GetInputEventFromNavigationEvent(out const NavigationEvent Event);// 0x112c58eb6041
	InputEvent GetInputEventFromKeyEvent(out const KeyEvent Event);// 0x112a58eb6041
	InputEvent GetInputEventFromCharacterEvent(out const CharacterEvent Event);// 0x112958eb6041
	MaterialInstanceDynamic* GetDynamicMaterial(out SlateBrush Brush);// 0x112858eb6041
	DragDropOperation* GetDragDroppingContent();// 0x112758eb6041
	Texture2D* GetBrushResourceAsTexture2D(out const SlateBrush Brush);// 0x112658eb6041
	MaterialInterface* GetBrushResourceAsMaterial(out const SlateBrush Brush);// 0x112558eb6041
	Object* GetBrushResource(out const SlateBrush Brush);// 0x112458eb6041
	void GetAllWidgetsWithInterface(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class Interface Interface, bool TopLevelOnly);// 0x112358eb6041
	void GetAllWidgetsOfClass(Object* WorldContextObject, out UserWidget*[] FoundWidgets, class UserWidget WidgetClass, bool TopLevelOnly);// 0x112258eb6041
	EventReply EndDragDrop(out EventReply Reply);// 0x112158eb6041
	void DrawTextFormatted(out PaintContext Context, out const FText Text, Vector2D Position, Font* Font, int FontSize, FName FontTypeFace, LinearColor Tint);// 0x112058eb6041
	void DrawText(out PaintContext Context, FString InString, Vector2D Position, LinearColor Tint);// 0x111f58eb6041
	void DrawLines(out PaintContext Context, out const Vector2D[] Points, LinearColor Tint, bool bAntiAlias, float Thickness);// 0x111e58eb6041
	void DrawLine(out PaintContext Context, Vector2D PositionA, Vector2D PositionB, LinearColor Tint, bool bAntiAlias, float Thickness);// 0x111c58eb6041
	void DrawBox(out PaintContext Context, Vector2D Position, Vector2D Size, SlateBrushAsset* Brush, LinearColor Tint);// 0x111b58eb6041
	void DismissAllMenus();// 0x117858eb6041
	EventReply DetectDragIfPressed(out const PointerEvent PointerEvent, Widget* WidgetDetectingDrag, Key DragKey);// 0x111958eb6041
	EventReply DetectDrag(out EventReply Reply, Widget* WidgetDetectingDrag, Key DragKey);// 0x111858eb6041
	DragDropOperation* CreateDragDropOperation(class DragDropOperation OperationClass);// 0x111758eb6041
	UserWidget* Create(Object* WorldContextObject, class UserWidget WidgetType, PlayerController* OwningPlayer);// 0x111658eb6041
	EventReply ClearUserFocus(out EventReply Reply, bool bInAllUsers);// 0x111558eb6041
	EventReply CaptureMouse(out EventReply Reply, Widget* CapturingWidget);// 0x111458eb6041
	EventReply CaptureJoystick(out EventReply Reply, Widget* CapturingWidget, bool bInAllJoysticks);// 0x111358eb6041
	void CancelDragDrop();// 0x111158eb6041

--------------------------------
Class: NavigationEvent.InputEvent

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x559, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x55a, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x560, Size: 0x8]
	IntPoint DrawSize;//[Offset: 0x568, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x571, Size: 0x1]
	float RedrawTime;//[Offset: 0x574, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x580, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x590, Size: 0x10]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1, Size: 0x1]
	enum WindowVisibility;//[Offset: 0x5a2, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a3, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x5a8, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x5b0, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x5c0, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x5d0, Size: 0x4]
	enum BlendMode;//[Offset: 0x5d4, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d5, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d6, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x5d8, Size: 0x8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x5e0, Size: 0x8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x5e8, Size: 0x8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x5f0, Size: 0x8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x5f8, Size: 0x8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x600, Size: 0x8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x608, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x610, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x618, Size: 0x8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x621, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x624, Size: 0x8]
	int LayerZOrder;//[Offset: 0x62c, Size: 0x4]
	enum GeometryMode;//[Offset: 0x630, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x634, Size: 0x4]
	enum TickMode;//[Offset: 0x638, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x668, Size: 0x8]
	void SetWindowVisibility(enum InVisibility);// 0x2a4058eb6041
	void SetWindowFocusable(bool bInWindowFocusable);// 0x2a3f58eb6041
	void SetWidgetSpace(enum NewSpace);// 0x2a3e58eb6041
	void SetWidget(UserWidget* Widget);// 0x2a3d58eb6041
	void SetTwoSided(const bool bWantTwoSided);// 0x2a3c58eb6041
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x2a3b58eb6041
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x2a3a58eb6041
	void SetTickMode(enum InTickMode);// 0x2a3958eb6041
	void SetRedrawTime(float InRedrawTime);// 0x2a3858eb6041
	void SetPivot(out const Vector2D InPivot);// 0x2a3758eb6041
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x2a3658eb6041
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x2a3558eb6041
	void SetGeometryMode(enum InGeometryMode);// 0x2a3458eb6041
	void SetDrawSize(Vector2D Size);// 0x2a3358eb6041
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x2a3258eb6041
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x2a3158eb6041
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x2a3058eb6041
	void RequestRenderUpdate();// 0x2a2f58eb6041
	void RequestRedraw();// 0x2a2e58eb6041
	bool IsWidgetVisible();// 0x2a6f58eb6041
	enum GetWindowVisiblility();// 0x2a2c58eb6041
	bool GetWindowFocusable();// 0x2a2b58eb6041
	enum GetWidgetSpace();// 0x2a2a58eb6041
	UserWidget* GetWidget();// 0x2a2958eb6041
	UserWidget* GetUserWidgetObject();// 0x2a2858eb6041
	bool GetTwoSided();// 0x2a2758eb6041
	bool GetTickWhenOffscreen();// 0x2a2658eb6041
	TextureRenderTarget2D* GetRenderTarget();// 0x2a2558eb6041
	float GetRedrawTime();// 0x2a2458eb6041
	Vector2D GetPivot();// 0x2a2358eb6041
	LocalPlayer* GetOwnerPlayer();// 0x2a2258eb6041
	MaterialInstanceDynamic* GetMaterialInstance();// 0x2a2158eb6041
	bool GetManuallyRedraw();// 0x2a2058eb6041
	enum GetGeometryMode();// 0x2a1f58eb6041
	Vector2D GetDrawSize();// 0x2a1e58eb6041
	bool GetDrawAtDesiredSize();// 0x2a1d58eb6041
	float GetCylinderArcAngle();// 0x2a1c58eb6041
	Vector2D GetCurrentDrawSize();// 0x2a1b58eb6041

--------------------------------
Class: WidgetInteractionComponent.SceneComponent.ActorComponent.Object
	delegate OnHoveredWidgetChanged;//[Offset: 0x2b0, Size: 0x10]
	int VirtualUserIndex;//[Offset: 0x2d0, Size: 0x4]
	int PointerIndex;//[Offset: 0x2d4, Size: 0x4]
	byte TraceChannel;//[Offset: 0x2d8, Size: 0x1]
	float InteractionDistance;//[Offset: 0x2dc, Size: 0x4]
	enum InteractionSource;//[Offset: 0x2e0, Size: 0x1]
	bool bEnableHitTesting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 0x1]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e2, Size: 0x1]
	float DebugSphereLineThickness;//[Offset: 0x2e4, Size: 0x4]
	float DebugLineThickness;//[Offset: 0x2e8, Size: 0x4]
	LinearColor DebugColor;//[Offset: 0x2ec, Size: 0x10]
	HitResult CustomHitResult;//[Offset: 0x378, Size: 0xe8]
	Vector2D LocalHitLocation;//[Offset: 0x460, Size: 0x10]
	Vector2D LastLocalHitLocation;//[Offset: 0x470, Size: 0x10]
	WidgetComponent* HoveredWidgetComponent;//[Offset: 0x480, Size: 0x8]
	HitResult LastHitResult;//[Offset: 0x488, Size: 0xe8]
	bool bIsHoveredWidgetInteractable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 0x1]
	bool bIsHoveredWidgetFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x571, Size: 0x1]
	bool bIsHoveredWidgetHitTestVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x572, Size: 0x1]
	void SetFocus(Widget* FocusWidget);// 0x2a4f58eb6041
	void SetCustomHitResult(out const HitResult HitResult);// 0x2a9058eb6041
	bool SendKeyChar(FString Characters, bool bRepeat);// 0x2a4d58eb6041
	void ScrollWheel(float ScrollDelta);// 0x2a4c58eb6041
	void ReleasePointerKey(Key Key);// 0x2a4b58eb6041
	bool ReleaseKey(Key Key);// 0x2a4a58eb6041
	void PressPointerKey(Key Key);// 0x2a4958eb6041
	bool PressKey(Key Key, bool bRepeat);// 0x2a4858eb6041
	bool PressAndReleaseKey(Key Key);// 0x2a4758eb6041
	bool IsOverInteractableWidget();// 0x2a4658eb6041
	bool IsOverHitTestVisibleWidget();// 0x2a4558eb6041
	bool IsOverFocusableWidget();// 0x2a4458eb6041
	HitResult GetLastHitResult();// 0x2a4358eb6041
	WidgetComponent* GetHoveredWidgetComponent();// 0x2a4258eb6041
	Vector2D Get2DHitLocation();// 0x2a4158eb6041

--------------------------------
Class: WidgetLayoutLibrary.BlueprintFunctionLibrary.Object
	WrapBoxSlot* SlotAsWrapBoxSlot(Widget* Widget);// 0x2a6558eb6041
	WidgetSwitcherSlot* SlotAsWidgetSwitcherSlot(Widget* Widget);// 0x2a6458eb6041
	VerticalBoxSlot* SlotAsVerticalBoxSlot(Widget* Widget);// 0x2a6358eb6041
	UniformGridSlot* SlotAsUniformGridSlot(Widget* Widget);// 0x2a6258eb6041
	SizeBoxSlot* SlotAsSizeBoxSlot(Widget* Widget);// 0x2a6158eb6041
	ScrollBoxSlot* SlotAsScrollBoxSlot(Widget* Widget);// 0x2a6058eb6041
	ScaleBoxSlot* SlotAsScaleBoxSlot(Widget* Widget);// 0x2a5f58eb6041
	SafeZoneSlot* SlotAsSafeBoxSlot(Widget* Widget);// 0x2a5e58eb6041
	OverlaySlot* SlotAsOverlaySlot(Widget* Widget);// 0x2a5d58eb6041
	HorizontalBoxSlot* SlotAsHorizontalBoxSlot(Widget* Widget);// 0x2a5c58eb6041
	GridSlot* SlotAsGridSlot(Widget* Widget);// 0x2a5b58eb6041
	CanvasPanelSlot* SlotAsCanvasSlot(Widget* Widget);// 0x2a5a58eb6041
	BorderSlot* SlotAsBorderSlot(Widget* Widget);// 0x2a5958eb6041
	void RemoveAllWidgets(Object* WorldContextObject);// 0x2a5858eb6041
	bool ProjectWorldLocationToWidgetPosition(PlayerController* PlayerController, Vector WorldLocation, out Vector2D ScreenPosition, bool bPlayerViewportRelative);// 0x2a5758eb6041
	Geometry GetViewportWidgetGeometry(Object* WorldContextObject);// 0x2a5658eb6041
	Vector2D GetViewportSize(Object* WorldContextObject);// 0x2a5558eb6041
	float GetViewportScale(Object* WorldContextObject);// 0x2a5458eb6041
	Geometry GetPlayerScreenWidgetGeometry(PlayerController* PlayerController);// 0x2a5358eb6041
	bool GetMousePositionScaledByDPI(PlayerController* Player, out float LocationX, out float LocationY);// 0x2a5258eb6041
	Vector2D GetMousePositionOnViewport(Object* WorldContextObject);// 0x2a5158eb6041
	Vector2D GetMousePositionOnPlatform();// 0x2a5058eb6041

--------------------------------
Class: WrapBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	bool bFillEmptySpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	float FillSpanWhenLessThan;//[Offset: 0x4c, Size: 0x4]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1]
	bool bForceNewLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2a7d58eb6041
	void SetPadding(Margin InPadding);// 0x2a7c58eb6041
	void SetNewLine(bool InForceNewLine);// 0x2a7b58eb6041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2a7a58eb6041
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);// 0x2a7958eb6041
	void SetFillEmptySpace(bool InbFillEmptySpace);// 0x2a7858eb6041

--------------------------------
Class: WidgetSwitcherSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2a6e58eb6041
	void SetPadding(Margin InPadding);// 0x2a6d58eb6041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2a6c58eb6041

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x13c, Size: 0x4]
	void SetActiveWidgetIndex(int Index);// 0x2a6b58eb6041
	void SetActiveWidget(Widget* Widget);// 0x2a6a58eb6041
	Widget* GetWidgetAtIndex(int Index);// 0x2a6958eb6041
	int GetNumWidgets();// 0x2a6858eb6041
	int GetActiveWidgetIndex();// 0x2a6758eb6041
	Widget* GetActiveWidget();// 0x2a6658eb6041

--------------------------------
Class: WindowTitleBarArea.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bWindowButtonsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 0x1]
	bool bDoubleClickTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2a7158eb6041
	void SetPadding(Margin InPadding);// 0x2a7058eb6041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2ab158eb6041

--------------------------------
Class: WindowTitleBarAreaSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 0x10]
	byte HorizontalAlignment;//[Offset: 0x48, Size: 0x1]
	byte VerticalAlignment;//[Offset: 0x49, Size: 0x1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x2a7458eb6041
	void SetPadding(Margin InPadding);// 0x2a7358eb6041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2a7258eb6041

--------------------------------
Class: WrapBox.PanelWidget.Widget.Visual.Object
	Vector2D InnerSlotPadding;//[Offset: 0x140, Size: 0x10]
	float WrapSize;//[Offset: 0x150, Size: 0x4]
	bool bExplicitWrapSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 0x1]
	byte HorizontalAlignment;//[Offset: 0x155, Size: 0x1]
	byte Orientation;//[Offset: 0x156, Size: 0x1]
	void SetInnerSlotPadding(Vector2D InPadding);// 0x2a7758eb6041
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x2a7658eb6041
	WrapBoxSlot* AddChildToWrapBox(Widget* Content);// 0x2a7558eb6041

--------------------------------
Class: TypedElementAssetDataInterface.Interface.Object
	AssetData GetAssetData(out const ScriptTypedElementHandle InElementHandle);// 0x2a7f58eb6041
	AssetData[] GetAllReferencedAssetDatas(out const ScriptTypedElementHandle InElementHandle);// 0x2a7e58eb6041

--------------------------------
Class: TypedElementHierarchyInterface.Interface.Object
	ScriptTypedElementHandle GetParentElement(out const ScriptTypedElementHandle InElementHandle, const bool bAllowCreate);// 0x2a8158eb6041
	void GetChildElements(out const ScriptTypedElementHandle InElementHandle, out ScriptTypedElementHandle[] OutElementHandles, const bool bAllowCreate);// 0x2a8058eb6041

--------------------------------
Class: TypedElementObjectInterface.Interface.Object
	class Object GetObjectClass(out const ScriptTypedElementHandle InElementHandle);// 0x2a8358eb6041
	Object* GetObject(out const ScriptTypedElementHandle InElementHandle);// 0x2a8258eb6041

--------------------------------
Class: TypedElementSelectionInterface.Interface.Object
	bool SelectElement(out const ScriptTypedElementHandle InElementHandle, ScriptTypedElementListProxy InSelectionSet, out const TypedElementSelectionOptions InSelectionOptions);// 0x2a8a58eb6041
	bool IsElementSelected(out const ScriptTypedElementHandle InElementHandle, const ScriptTypedElementListProxy InSelectionSet, out const TypedElementIsSelectedOptions InSelectionOptions);// 0x2a8958eb6041
	ScriptTypedElementHandle GetSelectionElement(out const ScriptTypedElementHandle InElementHandle, const ScriptTypedElementListProxy InCurrentSelection, const enum InSelectionMethod);// 0x2a8858eb6041
	bool DeselectElement(out const ScriptTypedElementHandle InElementHandle, ScriptTypedElementListProxy InSelectionSet, out const TypedElementSelectionOptions InSelectionOptions);// 0x2a8758eb6041
	bool CanSelectElement(out const ScriptTypedElementHandle InElementHandle, out const TypedElementSelectionOptions InSelectionOptions);// 0x2a8658eb6041
	bool CanDeselectElement(out const ScriptTypedElementHandle InElementHandle, out const TypedElementSelectionOptions InSelectionOptions);// 0x2a8558eb6041
	bool AllowSelectionModifiers(out const ScriptTypedElementHandle InElementHandle, const ScriptTypedElementListProxy InSelectionSet);// 0x2a8458eb6041

--------------------------------
Class: TypedElementSelectionSetLibrary.Object
	bool SetSelectionFromList(TypedElementSelectionSet* SelectionSet, const ScriptTypedElementListProxy ElementList, const TypedElementSelectionOptions SelectionOptions);// 0x2a8f58eb6041
	bool SelectElementsFromList(TypedElementSelectionSet* SelectionSet, const ScriptTypedElementListProxy ElementList, const TypedElementSelectionOptions SelectionOptions);// 0x2a8e58eb6041
	ScriptTypedElementListProxy GetNormalizedSelection(TypedElementSelectionSet* SelectionSet, const TypedElementSelectionNormalizationOptions NormalizationOptions);// 0x2a8d58eb6041
	ScriptTypedElementListProxy GetNormalizedElementList(TypedElementSelectionSet* SelectionSet, const ScriptTypedElementListProxy ElementList, const TypedElementSelectionNormalizationOptions NormalizationOptions);// 0x2a8c58eb6041
	bool DeselectElementsFromList(TypedElementSelectionSet* SelectionSet, const ScriptTypedElementListProxy ElementList, const TypedElementSelectionOptions SelectionOptions);// 0x2a8b58eb6041

--------------------------------
Class: TypedElementSelectionNormalizationOptions
	bool bExpandGroups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bFollowAttachment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: CameraRig_Crane.Actor.Object
	float CranePitch;//[Offset: 0x278, Size: 0x4]
	float CraneYaw;//[Offset: 0x27c, Size: 0x4]
	float CraneArmLength;//[Offset: 0x280, Size: 0x4]
	bool bLockMountPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	bool bLockMountYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1]
	SceneComponent* TransformComponent;//[Offset: 0x288, Size: 0x8]
	SceneComponent* CraneYawControl;//[Offset: 0x290, Size: 0x8]
	SceneComponent* CranePitchControl;//[Offset: 0x298, Size: 0x8]
	SceneComponent* CraneCameraMount;//[Offset: 0x2a0, Size: 0x8]

--------------------------------
Class: CameraRig_Rail.Actor.Object
	float CurrentPositionOnRail;//[Offset: 0x278, Size: 0x4]
	bool bLockOrientationToRail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 0x1]
	SceneComponent* TransformComponent;//[Offset: 0x280, Size: 0x8]
	SplineComponent* RailSplineComponent;//[Offset: 0x288, Size: 0x8]
	SceneComponent* RailCameraMount;//[Offset: 0x290, Size: 0x8]
	SplineComponent* GetRailSplineComponent();// 0x2acd58eb6041

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x960, Size: 0x68]
	CineCameraComponent* GetCineCameraComponent();// 0x2a9258eb6041

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 0x4]
	Actor* ActorToTrack;//[Offset: 0x20, Size: 0x28]
	Vector RelativeOffset;//[Offset: 0x48, Size: 0x18]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0xa10, Size: 0xc]
	CameraFilmbackSettings Filmback;//[Offset: 0xa1c, Size: 0xc]
	CameraLensSettings LensSettings;//[Offset: 0xa28, Size: 0x18]
	CameraFocusSettings FocusSettings;//[Offset: 0xa40, Size: 0x68]
	float CurrentFocalLength;//[Offset: 0xaa8, Size: 0x4]
	float CurrentAperture;//[Offset: 0xaac, Size: 0x4]
	float CurrentFocusDistance;//[Offset: 0xab0, Size: 0x4]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0xac0, Size: 0x10]
	NamedLensPreset[] LensPresets;//[Offset: 0xad0, Size: 0x10]
	FString DefaultFilmbackPresetName;//[Offset: 0xae0, Size: 0x10]
	FString DefaultFilmbackPreset;//[Offset: 0xaf0, Size: 0x10]
	FString DefaultLensPresetName;//[Offset: 0xb00, Size: 0x10]
	float DefaultLensFocalLength;//[Offset: 0xb10, Size: 0x4]
	float DefaultLensFStop;//[Offset: 0xb14, Size: 0x4]
	void SetLensPresetByName(FString InPresetName);// 0x2aa958eb6041
	void SetFilmbackPresetByName(FString InPresetName);// 0x2aa858eb6041
	void SetCurrentFocalLength(float InFocalLength);// 0x2aa758eb6041
	float GetVerticalFieldOfView();// 0x2aa658eb6041
	NamedLensPreset[] GetLensPresetsCopy();// 0x2aa558eb6041
	FString GetLensPresetName();// 0x2aa458eb6041
	float GetHorizontalFieldOfView();// 0x2aa358eb6041
	NamedFilmbackPreset[] GetFilmbackPresetsCopy();// 0x2aa258eb6041
	FString GetFilmbackPresetName();// 0x2aa158eb6041
	FString GetDefaultFilmbackPresetName();// 0x2aa058eb6041

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 0x18]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 0x10]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 0xc]

--------------------------------
Class: AudioLinkBlueprintInterface.Interface.Object
	void StopLink();// 0x2aad58eb6041
	void SetLinkSound(SoundBase* NewSound);// 0x2aac58eb6041
	void PlayLink(float StartTime);// 0x2aab58eb6041
	bool IsLinkPlaying();// 0x2aaa58eb6041

--------------------------------
Class: AudioDeviceNotificationSubsystem.EngineSubsystem.DynamicSubsystem.Subsystem.Object
	delegate DefaultCaptureDeviceChanged;//[Offset: 0x38, Size: 0x10]
	delegate DefaultRenderDeviceChanged;//[Offset: 0x60, Size: 0x10]
	delegate DeviceAdded;//[Offset: 0x88, Size: 0x10]
	delegate DeviceRemoved;//[Offset: 0xb0, Size: 0x10]
	delegate DeviceStateChanged;//[Offset: 0xd8, Size: 0x10]
	delegate DeviceSwitched;//[Offset: 0x100, Size: 0x10]

--------------------------------
Class: AudioMixerBlueprintLibrary.BlueprintFunctionLibrary.Object
	float TrimAudioCache(float InMegabytesToFree);// 0x2ad358eb6041
	void SwapAudioOutputDevice(const Object* WorldContextObject, FString NewDeviceId, out const delegate OnCompletedDeviceSwap);// 0x2ad258eb6041
	SoundWave* StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundSubmix* SubmixToRecord, SoundWave* ExistingSoundWaveToOverwrite);// 0x2ad158eb6041
	void StopAudioBus(const Object* WorldContextObject, AudioBus* AudioBus);// 0x2ad058eb6041
	void StopAnalyzingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToStopAnalyzing);// 0x2acf58eb6041
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration, SoundSubmix* SubmixToRecord);// 0x2ace58eb6041
	void StartAudioBus(const Object* WorldContextObject, AudioBus* AudioBus);// 0x2b0f58eb6041
	void StartAnalyzingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToAnalyze, enum FFTSize, enum InterpolationMethod, enum WindowType, float HopSize, enum SpectrumType);// 0x2acc58eb6041
	void SetSubmixEffectChainOverride(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset*[] SubmixEffectPresetChain, float FadeTimeSec);// 0x2acb58eb6041
	void SetBypassSourceEffectChainEntry(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, int EntryIndex, bool bBypassed);// 0x2aca58eb6041
	void ResumeRecordingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToPause);// 0x2ac958eb6041
	void ReplaceSubmixEffect(const Object* WorldContextObject, SoundSubmix* InSoundSubmix, int SubmixChainIndex, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2ac858eb6041
	void ReplaceSoundEffectSubmix(const Object* WorldContextObject, SoundSubmix* InSoundSubmix, int SubmixChainIndex, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2ac758eb6041
	void RemoveSubmixEffectPresetAtIndex(const Object* WorldContextObject, SoundSubmix* SoundSubmix, int SubmixChainIndex);// 0x2ac658eb6041
	void RemoveSubmixEffectPreset(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2ac558eb6041
	void RemoveSubmixEffectAtIndex(const Object* WorldContextObject, SoundSubmix* SoundSubmix, int SubmixChainIndex);// 0x2ac458eb6041
	void RemoveSubmixEffect(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2ac358eb6041
	void RemoveSourceEffectFromPresetChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, int EntryIndex);// 0x2ac258eb6041
	void RemoveMasterSubmixEffect(const Object* WorldContextObject, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2ac158eb6041
	void PrimeSoundForPlayback(SoundWave* SoundWave, const delegate OnLoadCompletion);// 0x2ac058eb6041
	void PrimeSoundCueForPlayback(SoundCue* SoundCue);// 0x2abf58eb6041
	void PauseRecordingOutput(const Object* WorldContextObject, SoundSubmix* SubmixToPause);// 0x2abe58eb6041
	SoundSubmixSpectralAnalysisBandSettings[] MakePresetSpectralAnalysisBandSettings(enum InBandPresetType, int InNumBands, int InAttackTimeMsec, int InReleaseTimeMsec);// 0x2abd58eb6041
	SoundSubmixSpectralAnalysisBandSettings[] MakeMusicalSpectralAnalysisBandSettings(int InNumSemitones, enum InStartingMusicalNote, int InStartingOctave, int InAttackTimeMsec, int InReleaseTimeMsec);// 0x2abc58eb6041
	SoundSubmixSpectralAnalysisBandSettings[] MakeFullSpectrumSpectralAnalysisBandSettings(int InNumBands, float InMinimumFrequency, float InMaximumFrequency, int InAttackTimeMsec, int InReleaseTimeMsec);// 0x2abb58eb6041
	bool IsAudioBusActive(const Object* WorldContextObject, AudioBus* AudioBus);// 0x2aba58eb6041
	void GetPhaseForFrequencies(const Object* WorldContextObject, out const float[] Frequencies, out float[] Phases, SoundSubmix* SubmixToAnalyze);// 0x2ab958eb6041
	int GetNumberOfEntriesInSourceEffectChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain);// 0x2ab858eb6041
	void GetMagnitudeForFrequencies(const Object* WorldContextObject, out const float[] Frequencies, out float[] Magnitudes, SoundSubmix* SubmixToAnalyze);// 0x2ab758eb6041
	void GetCurrentAudioOutputDeviceName(const Object* WorldContextObject, out const delegate OnObtainCurrentDeviceEvent);// 0x2ab658eb6041
	void GetAvailableAudioOutputDevices(const Object* WorldContextObject, out const delegate OnObtainDevicesEvent);// 0x2ab558eb6041
	FString Conv_AudioOutputDeviceInfoToString(out const AudioOutputDeviceInfo Info);// 0x2ab458eb6041
	void ClearSubmixEffects(const Object* WorldContextObject, SoundSubmix* SoundSubmix);// 0x2ab358eb6041
	void ClearSubmixEffectChainOverride(const Object* WorldContextObject, SoundSubmix* SoundSubmix, float FadeTimeSec);// 0x2ab258eb6041
	void ClearMasterSubmixEffects(const Object* WorldContextObject);// 0xffffff8158eb6000
	int AddSubmixEffect(const Object* WorldContextObject, SoundSubmix* SoundSubmix, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2ab058eb6041
	void AddSourceEffectToPresetChain(const Object* WorldContextObject, SoundEffectSourcePresetChain* PresetChain, SourceEffectChainEntry Entry);// 0x2aaf58eb6041
	void AddMasterSubmixEffect(const Object* WorldContextObject, SoundEffectSubmixPreset* SubmixEffectPreset);// 0x2aae58eb6041

--------------------------------
Class: AudioOutputDeviceInfo
	FString Name;//[Offset: 0x0, Size: 0x10]
	FString DeviceID;//[Offset: 0x10, Size: 0x10]
	int NumChannels;//[Offset: 0x20, Size: 0x4]
	int SampleRate;//[Offset: 0x24, Size: 0x4]
	enum Format;//[Offset: 0x28, Size: 0x1]
	enum[] OutputChannelArray;//[Offset: 0x30, Size: 0x10]
	bool bIsSystemDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bIsCurrentDevice;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: SubmixEffectDynamicsProcessorPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectDynamicsProcessorSettings Settings;//[Offset: 0xf0, Size: 0x60]
	void SetSettings(out const SubmixEffectDynamicsProcessorSettings Settings);// 0x2af058eb6041
	void SetExternalSubmix(SoundSubmix* Submix);// 0x2aef58eb6041
	void SetAudioBus(AudioBus* AudioBus);// 0x2b3058eb6041
	void ResetKey();// 0x2aed58eb6041

--------------------------------
Class: SubmixEffectDynamicsProcessorSettings
	enum DynamicsProcessorType;//[Offset: 0x0, Size: 0x1]
	enum PeakMode;//[Offset: 0x1, Size: 0x1]
	enum LinkMode;//[Offset: 0x2, Size: 0x1]
	float InputGainDb;//[Offset: 0x4, Size: 0x4]
	float ThresholdDb;//[Offset: 0x8, Size: 0x4]
	float Ratio;//[Offset: 0xc, Size: 0x4]
	float KneeBandwidthDb;//[Offset: 0x10, Size: 0x4]
	float LookAheadMsec;//[Offset: 0x14, Size: 0x4]
	float AttackTimeMsec;//[Offset: 0x18, Size: 0x4]
	float ReleaseTimeMsec;//[Offset: 0x1c, Size: 0x4]
	enum KeySource;//[Offset: 0x20, Size: 0x1]
	AudioBus* ExternalAudioBus;//[Offset: 0x28, Size: 0x8]
	SoundSubmix* ExternalSubmix;//[Offset: 0x30, Size: 0x8]
	bool bChannelLinked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bAnalogMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	bool bBypass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 0x1]
	bool bKeyAudition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 0x1]
	float KeyGainDb;//[Offset: 0x3c, Size: 0x4]
	float OutputGainDb;//[Offset: 0x40, Size: 0x4]
	SubmixEffectDynamicProcessorFilterSettings KeyHighshelf;//[Offset: 0x44, Size: 0xc]
	SubmixEffectDynamicProcessorFilterSettings KeyLowshelf;//[Offset: 0x50, Size: 0xc]

--------------------------------
Class: SubmixEffectDynamicProcessorFilterSettings
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float Cutoff;//[Offset: 0x4, Size: 0x4]
	float GainDb;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SubmixEffectSubmixEQPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectSubmixEQSettings Settings;//[Offset: 0xa0, Size: 0x10]
	void SetSettings(out const SubmixEffectSubmixEQSettings InSettings);// 0x2af158eb6041

--------------------------------
Class: SubmixEffectSubmixEQSettings
	SubmixEffectEQBand[] EQBands;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SubmixEffectEQBand
	float Frequency;//[Offset: 0x0, Size: 0x4]
	float Bandwidth;//[Offset: 0x4, Size: 0x4]
	float GainDb;//[Offset: 0x8, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: SubmixEffectReverbPreset.SoundEffectSubmixPreset.SoundEffectPreset.Object
	SubmixEffectReverbSettings Settings;//[Offset: 0xcc, Size: 0x40]
	void SetSettingsWithReverbEffect(const ReverbEffect* InReverbEffect, const float WetLevel, const float DryLevel);// 0x2af358eb6041
	void SetSettings(out const SubmixEffectReverbSettings InSettings);// 0x2af258eb6041

--------------------------------
Class: SubmixEffectReverbSettings
	bool bBypassEarlyReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float ReflectionsDelay;//[Offset: 0x4, Size: 0x4]
	float GainHF;//[Offset: 0x8, Size: 0x4]
	float ReflectionsGain;//[Offset: 0xc, Size: 0x4]
	bool bBypassLateReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LateDelay;//[Offset: 0x14, Size: 0x4]
	float DecayTime;//[Offset: 0x18, Size: 0x4]
	float Density;//[Offset: 0x1c, Size: 0x4]
	float Diffusion;//[Offset: 0x20, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x24, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x28, Size: 0x4]
	float LateGain;//[Offset: 0x2c, Size: 0x4]
	float Gain;//[Offset: 0x30, Size: 0x4]
	float WetLevel;//[Offset: 0x34, Size: 0x4]
	float DryLevel;//[Offset: 0x38, Size: 0x4]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: QuartzSubsystem.TickableWorldSubsystem.WorldSubsystem.Subsystem.Object
	bool IsQuartzEnabled();// 0x2b0658eb6041
	bool IsClockRunning(const Object* WorldContextObject, FName ClockName);// 0x2b0558eb6041
	float GetRoundTripMinLatency(const Object* WorldContextObject);// 0x2b0458eb6041
	float GetRoundTripMaxLatency(const Object* WorldContextObject);// 0x2b0358eb6041
	float GetRoundTripAverageLatency(const Object* WorldContextObject);// 0x2b0258eb6041
	QuartzClockHandle* GetHandleForClock(const Object* WorldContextObject, FName ClockName);// 0x2b0158eb6041
	float GetGameThreadToAudioRenderThreadMinLatency(const Object* WorldContextObject);// 0x2b0058eb6041
	float GetGameThreadToAudioRenderThreadMaxLatency(const Object* WorldContextObject);// 0x2aff58eb6041
	float GetGameThreadToAudioRenderThreadAverageLatency(const Object* WorldContextObject);// 0x2afe58eb6041
	float GetEstimatedClockRunTime(const Object* WorldContextObject, out const FName InClockName);// 0x2afd58eb6041
	float GetDurationOfQuantizationTypeInSeconds(const Object* WorldContextObject, FName ClockName, out const enum QuantizationType, float Multiplier);// 0x2afc58eb6041
	QuartzTransportTimeStamp GetCurrentClockTimestamp(const Object* WorldContextObject, out const FName InClockName);// 0x2afb58eb6041
	float GetAudioRenderThreadToGameThreadMinLatency();// 0x2afa58eb6041
	float GetAudioRenderThreadToGameThreadMaxLatency();// 0x2af958eb6041
	float GetAudioRenderThreadToGameThreadAverageLatency();// 0x2af858eb6041
	bool DoesClockExist(const Object* WorldContextObject, FName ClockName);// 0x2af758eb6041
	void DeleteClockByName(const Object* WorldContextObject, FName ClockName);// 0x2af658eb6041
	void DeleteClockByHandle(const Object* WorldContextObject, out QuartzClockHandle* InClockHandle);// 0x2af558eb6041
	QuartzClockHandle* CreateNewClock(const Object* WorldContextObject, FName ClockName, QuartzClockSettings InSettings, bool bOverrideSettingsIfClockExists, bool bUseAudioEngineClockManager);// 0x2af458eb6041

--------------------------------
Class: QuartzClockSettings
	QuartzTimeSignature TimeSignature;//[Offset: 0x0, Size: 0x18]
	bool bIgnoreLevelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: QuartzTimeSignature
	int NumBeats;//[Offset: 0x0, Size: 0x4]
	enum BeatType;//[Offset: 0x4, Size: 0x1]
	QuartzPulseOverrideStep[] OptionalPulseOverride;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: QuartzPulseOverrideStep
	int NumberOfPulses;//[Offset: 0x0, Size: 0x4]
	enum PulseDuration;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: JsonUtilitiesDummyObject.Object

--------------------------------
Class: AssetRegistryHelpers.Object
	SoftObjectPath ToSoftObjectPath(out const AssetData InAssetData);// 0x2b1558eb6041
	ARFilter SetFilterTagsAndValues(out const ARFilter InFilter, out const TagAndValue[] InTagsAndValues);// 0x2b1458eb6041
	bool IsValid(out const AssetData InAssetData);// 0x2b1358eb6041
	bool IsUAsset(out const AssetData InAssetData);// 0x2b1258eb6041
	bool IsRedirector(out const AssetData InAssetData);// 0x2b1158eb6041
	bool IsAssetLoaded(out const AssetData InAssetData);// 0x2b1058eb6041
	bool GetTagValue(out const AssetData InAssetData, out const FName InTagName, out FString OutTagValue);// 0x2b5158eb6041
	FString GetFullName(out const AssetData InAssetData);// 0x2b0e58eb6041
	FString GetExportTextName(out const AssetData InAssetData);// 0x2b0d58eb6041
	class Object GetClass(out const AssetData InAssetData);// 0x2b0c58eb6041
	interface classNone GetAssetRegistry();// 0x2b0b58eb6041
	Object* GetAsset(out const AssetData InAssetData);// 0x2b0a58eb6041
	AssetData CreateAssetData(const Object* InAsset, bool bAllowBlueprintClass);// 0x2b0958eb6041

--------------------------------
Class: ARFilter
	FName[] PackageNames;//[Offset: 0x0, Size: 0x10]
	FName[] PackagePaths;//[Offset: 0x10, Size: 0x10]
	FName[] ObjectPaths;//[Offset: 0x20, Size: 0x10]
	FName[] ClassNames;//[Offset: 0x30, Size: 0x10]
	<FName> RecursiveClassesExclusionSet;//[Offset: 0x90, Size: 0x50]
	bool bRecursivePaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	bool bRecursiveClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 0x1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 0x1]

--------------------------------
Class: TagAndValue
	FName Tag;//[Offset: 0x0, Size: 0x8]
	FString Value;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AssetRegistry.Interface.Object
	void WaitForPackage(FString PackageName);// 0x2b2d58eb6041
	void WaitForCompletion();// 0x2b2c58eb6041
	void UseFilterToExcludeAssets(out AssetData[] AssetDataList, out const ARFilter Filter);// 0x2b2b58eb6041
	void SearchAllAssets(bool bSynchronousSearch);// 0x2b2a58eb6041
	void ScanPathsSynchronous(out const FString[] InPaths, bool bForceRescan, bool bIgnoreDenyListScanFilters);// 0x2b2958eb6041
	void ScanModifiedAssetFiles(out const FString[] InFilePaths);// 0x2b2858eb6041
	void ScanFilesSynchronous(out const FString[] InFilePaths, bool bForceRescan);// 0x2b2758eb6041
	void RunAssetsThroughFilter(out AssetData[] AssetDataList, out const ARFilter Filter);// 0x2b2658eb6041
	void PrioritizeSearchPath(FString PathToPrioritize);// 0x2b2558eb6041
	bool K2_GetReferencers(FName PackageName, out const AssetRegistryDependencyOptions ReferenceOptions, out FName[] OutReferencers);// 0x2b2458eb6041
	bool K2_GetDependencies(FName PackageName, out const AssetRegistryDependencyOptions DependencyOptions, out FName[] OutDependencies);// 0x2b2358eb6041
	bool IsSearchAsync();// 0x2b2258eb6041
	bool IsSearchAllAssets();// 0x2b2158eb6041
	bool IsLoadingAssets();// 0x2b2058eb6041
	bool HasAssets(const FName PackagePath, const bool bRecursive);// 0x2b1f58eb6041
	void GetSubPaths(FString InBasePath, out FString[] OutPathList, bool bInRecurse);// 0x2b1e58eb6041
	bool GetAssetsByPaths(FName[] PackagePaths, out AssetData[] OutAssetData, bool bRecursive, bool bIncludeOnlyOnDiskAssets);// 0x2b1d58eb6041
	bool GetAssetsByPath(FName PackagePath, out AssetData[] OutAssetData, bool bRecursive, bool bIncludeOnlyOnDiskAssets);// 0x2b1c58eb6041
	bool GetAssetsByPackageName(FName PackageName, out AssetData[] OutAssetData, bool bIncludeOnlyOnDiskAssets);// 0x2b1b58eb6041
	bool GetAssetsByClass(FName ClassName, out AssetData[] OutAssetData, bool bSearchSubClasses);// 0x2b1a58eb6041
	bool GetAssets(out const ARFilter Filter, out AssetData[] OutAssetData);// 0x2b1958eb6041
	AssetData GetAssetByObjectPath(const FName ObjectPath, bool bIncludeOnlyOnDiskAssets);// 0x2b1858eb6041
	void GetAllCachedPaths(out FString[] OutPathList);// 0x2b1758eb6041
	bool GetAllAssets(out AssetData[] OutAssetData, bool bIncludeOnlyOnDiskAssets);// 0x2b1658eb6041

--------------------------------
Class: AssetRegistryDependencyOptions
	bool bIncludeSoftPackageReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bIncludeHardPackageReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bIncludeSearchableNames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bIncludeSoftManagementReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bIncludeHardManagementReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]

--------------------------------
Class: BlueprintGameplayTagLibrary.BlueprintFunctionLibrary.Object
	bool RemoveGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0x2b4b58eb6041
	bool NotEqual_TagTag(GameplayTag A, FString B);// 0x2b4a58eb6041
	bool NotEqual_TagContainerTagContainer(GameplayTagContainer A, FString B);// 0x2b4958eb6041
	bool NotEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0x2b4858eb6041
	bool NotEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0x2b4758eb6041
	bool MatchesTag(GameplayTag TagOne, GameplayTag TagTwo, bool bExactMatch);// 0x2b4658eb6041
	bool MatchesAnyTags(GameplayTag TagOne, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0x2b4558eb6041
	GameplayTagContainer MakeLiteralGameplayTagContainer(GameplayTagContainer Value);// 0x2b4458eb6041
	GameplayTag MakeLiteralGameplayTag(GameplayTag Value);// 0x2b4358eb6041
	GameplayTagQuery MakeGameplayTagQuery(GameplayTagQuery TagQuery);// 0x2b4258eb6041
	GameplayTagContainer MakeGameplayTagContainerFromTag(GameplayTag SingleTag);// 0x2b4158eb6041
	GameplayTagContainer MakeGameplayTagContainerFromArray(out const GameplayTag[] GameplayTags);// 0x2b4058eb6041
	bool IsTagQueryEmpty(out const GameplayTagQuery TagQuery);// 0x2b3f58eb6041
	bool IsGameplayTagValid(GameplayTag GameplayTag);// 0x2b3e58eb6041
	bool HasTag(out const GameplayTagContainer TagContainer, GameplayTag Tag, bool bExactMatch);// 0x2b3d58eb6041
	bool HasAnyTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0x2b3c58eb6041
	bool HasAllTags(out const GameplayTagContainer TagContainer, out const GameplayTagContainer OtherContainer, bool bExactMatch);// 0x2b3b58eb6041
	bool HasAllMatchingGameplayTags(interface classNone TagContainerInterface, out const GameplayTagContainer OtherContainer);// 0x2b3a58eb6041
	FName GetTagName(out const GameplayTag GameplayTag);// 0x2b3958eb6041
	int GetNumGameplayTagsInContainer(out const GameplayTagContainer TagContainer);// 0x2b3858eb6041
	FString GetDebugStringFromGameplayTagContainer(out const GameplayTagContainer TagContainer);// 0x2b3758eb6041
	FString GetDebugStringFromGameplayTag(GameplayTag GameplayTag);// 0x2b3658eb6041
	void GetAllActorsOfClassMatchingTagQuery(Object* WorldContextObject, class Actor ActorClass, out const GameplayTagQuery GameplayTagQuery, out Actor*[] OutActors);// 0x2b3558eb6041
	bool EqualEqual_GameplayTagContainer(out const GameplayTagContainer A, out const GameplayTagContainer B);// 0x2b3458eb6041
	bool EqualEqual_GameplayTag(GameplayTag A, GameplayTag B);// 0x2b3358eb6041
	bool DoesTagAssetInterfaceHaveTag(interface classNone TagContainerInterface, GameplayTag Tag);// 0x2b3258eb6041
	bool DoesContainerMatchTagQuery(out const GameplayTagContainer TagContainer, out const GameplayTagQuery TagQuery);// 0x2b3158eb6041
	void BreakGameplayTagContainer(out const GameplayTagContainer GameplayTagContainer, out GameplayTag[] GameplayTags);// 0x2b7258eb6041
	void AppendGameplayTagContainers(out GameplayTagContainer InOutTagContainer, out const GameplayTagContainer InTagContainer);// 0x2b2f58eb6041
	void AddGameplayTag(out GameplayTagContainer TagContainer, GameplayTag Tag);// 0x2b2e58eb6041

--------------------------------
Class: GameplayTagAssetInterface.Interface.Object
	bool HasMatchingGameplayTag(GameplayTag TagToCheck);// 0x2b4f58eb6041
	bool HasAnyMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0x2b4e58eb6041
	bool HasAllMatchingGameplayTags(out const GameplayTagContainer TagContainer);// 0x2b4d58eb6041
	void GetOwnedGameplayTags(out GameplayTagContainer TagContainer);// 0x2b4c58eb6041

--------------------------------
Class: EditableGameplayTagQuery.Object
	FString UserDescription;//[Offset: 0x28, Size: 0x10]
	EditableGameplayTagQueryExpression* RootExpression;//[Offset: 0x48, Size: 0x8]
	GameplayTagQuery TagQueryExportText_Helper;//[Offset: 0x50, Size: 0x48]

--------------------------------
Class: EditableGameplayTagQueryExpression.Object

--------------------------------
Class: EditableGameplayTagQueryExpression_AnyTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20]

--------------------------------
Class: EditableGameplayTagQueryExpression_AllTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20]

--------------------------------
Class: EditableGameplayTagQueryExpression_NoTagsMatch.EditableGameplayTagQueryExpression.Object
	GameplayTagContainer Tags;//[Offset: 0x28, Size: 0x20]

--------------------------------
Class: EditableGameplayTagQueryExpression_AnyExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: EditableGameplayTagQueryExpression_AllExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: EditableGameplayTagQueryExpression_NoExprMatch.EditableGameplayTagQueryExpression.Object
	EditableGameplayTagQueryExpression*[] Expressions;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: GameplayTagsManager.Object
	<FName,GameplayTagSource> TagSources;//[Offset: 0x160, Size: 0x50]
	DataTable*[] GameplayTagTables;//[Offset: 0x230, Size: 0x10]

--------------------------------
Class: GameplayTagSource
	FName SourceName;//[Offset: 0x0, Size: 0x8]
	enum SourceType;//[Offset: 0x8, Size: 0x1]
	GameplayTagsList* SourceTagList;//[Offset: 0x10, Size: 0x8]
	RestrictedGameplayTagsList* SourceRestrictedTagList;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: GameplayTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10]
	GameplayTagTableRow[] GameplayTagList;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: GameplayTagTableRow.TableRowBase
	FName Tag;//[Offset: 0x8, Size: 0x8]
	FString DevComment;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: RestrictedGameplayTagsList.Object
	FString ConfigFileName;//[Offset: 0x28, Size: 0x10]
	RestrictedGameplayTagTableRow[] RestrictedGameplayTagList;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: RestrictedGameplayTagTableRow.GameplayTagTableRow.TableRowBase
	bool bAllowNonRestrictedChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: GameplayTagsSettings.GameplayTagsList.Object
	bool ImportTagsFromConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	bool WarnOnInvalidTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 0x1]
	bool ClearInvalidTags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 0x1]
	bool FastReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 0x1]
	FString InvalidTagCharacters;//[Offset: 0x50, Size: 0x10]
	GameplayTagCategoryRemap[] CategoryRemapping;//[Offset: 0x60, Size: 0x10]
	SoftObjectPath[] GameplayTagTableList;//[Offset: 0x70, Size: 0x10]
	GameplayTagRedirect[] GameplayTagRedirects;//[Offset: 0x80, Size: 0x10]
	FName[] CommonlyReplicatedTags;//[Offset: 0x90, Size: 0x10]
	int NumBitsForContainerSize;//[Offset: 0xa0, Size: 0x4]
	int NetIndexFirstBitSegment;//[Offset: 0xa4, Size: 0x4]
	RestrictedConfigInfo[] RestrictedConfigFiles;//[Offset: 0xa8, Size: 0x10]

--------------------------------
Class: GameplayTagCategoryRemap
	FString BaseCategory;//[Offset: 0x0, Size: 0x10]
	FString[] RemapCategories;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: GameplayTagRedirect
	FName OldTagName;//[Offset: 0x0, Size: 0x8]
	FName NewTagName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: RestrictedConfigInfo
	FString RestrictedConfigName;//[Offset: 0x0, Size: 0x10]
	FString[] Owners;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: GameplayTagsDeveloperSettings.DeveloperSettings.Object
	FString DeveloperConfigName;//[Offset: 0x38, Size: 0x10]
	FName FavoriteTagSource;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: PacketHandlerProfileConfig.Object
	FString[] Components;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: ClothSharedSimConfigBase.Object

--------------------------------
Class: ClothPhysicalMeshDataBase_Legacy.Object
	Vector3f[] Vertices;//[Offset: 0x28, Size: 0x10]
	Vector3f[] Normals;//[Offset: 0x38, Size: 0x10]
	uint32[] Indices;//[Offset: 0x48, Size: 0x10]
	float[] InverseMasses;//[Offset: 0x58, Size: 0x10]
	ClothVertBoneData[] BoneData;//[Offset: 0x68, Size: 0x10]
	int NumFixedVerts;//[Offset: 0x78, Size: 0x4]
	int MaxBoneWeights;//[Offset: 0x7c, Size: 0x4]
	uint32[] SelfCollisionIndices;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: ClothVertBoneData
	int NumInfluences;//[Offset: 0x0, Size: 0x4]
	uint16 BoneIndices;//[Offset: 0x4, Size: 0x2]
	float BoneWeights;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: FileMediaSource.BaseMediaSource.MediaSource.Object
	FString FilePath;//[Offset: 0x88, Size: 0x10]
	bool PrecacheFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	void SetFilePath(FString Path);// 0x2baf58eb6041

--------------------------------
Class: MediaBlueprintFunctionLibrary.BlueprintFunctionLibrary.Object
	void EnumerateWebcamCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0x2bb258eb6041
	void EnumerateVideoCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0x2bb158eb6041
	void EnumerateAudioCaptureDevices(out MediaCaptureDevice[] OutDevices, int Filter);// 0x2bb058eb6041

--------------------------------
Class: MediaCaptureDevice
	FText DisplayName;//[Offset: 0x0, Size: 0x18]
	FString URL;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: MediaComponent.ActorComponent.Object
	MediaTexture* MediaTexture;//[Offset: 0xb0, Size: 0x8]
	MediaPlayer* MediaPlayer;//[Offset: 0xb8, Size: 0x8]
	MediaTexture* GetMediaTexture();// 0x2bf158eb6041
	MediaPlayer* GetMediaPlayer();// 0x2bb358eb6041

--------------------------------
Class: PlatformMediaSource.MediaSource.Object
	MediaSource* MediaSource;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: StreamMediaSource.BaseMediaSource.MediaSource.Object
	FString StreamUrl;//[Offset: 0x88, Size: 0x10]

--------------------------------
Class: TimeSynchronizableMediaSource.BaseMediaSource.MediaSource.Object
	bool bUseTimeSynchronization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	int FrameDelay;//[Offset: 0x8c, Size: 0x4]
	double TimeDelay;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: AnimSequenceLevelSequenceLink.AssetUserData.Object
	Guid SkelTrackGuid;//[Offset: 0x28, Size: 0x10]
	SoftObjectPath PathToLevelSequence;//[Offset: 0x38, Size: 0x18]

--------------------------------
Class: DefaultLevelSequenceInstanceData.Object
	Actor* TransformOriginActor;//[Offset: 0x30, Size: 0x8]
	Transform TransformOrigin;//[Offset: 0x40, Size: 0x60]

--------------------------------
Class: LevelSequenceMetaData.Interface.Object

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 0x18]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 0x8]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x2c1a58eb6041

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x290, Size: 0x14]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x2a8, Size: 0x8]
	LevelSequence* LevelSequenceAsset;//[Offset: 0x2b0, Size: 0x8]
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x2b8, Size: 0x2]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x2c0, Size: 0x8]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x2c8, Size: 0x8]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 0x1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 0x1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 0x1]
	Object* DefaultInstanceData;//[Offset: 0x2d8, Size: 0x8]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x2e0, Size: 0x8]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	void ShowBurnin();// 0x1a5e58eb6041
	void SetSequence(LevelSequence* InSequence);// 0x1a5d58eb6041
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x1a5c58eb6041
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x1a5b58eb6041
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x1a5a58eb6041
	void ResetBindings();// 0x1e0458eb6041
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x1a5858eb6041
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x1a5758eb6041
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x1a5658eb6041
	void OnLevelSequenceLoaded__DelegateSignature();// 0x1a5558eb6041
	LevelSequence* LoadSequence();// 0x1a5458eb6041
	void HideBurnin();// 0x1a5358eb6041
	LevelSequencePlayer* GetSequencePlayer();// 0x1a5258eb6041
	LevelSequence* GetSequence();// 0x1a5158eb6041
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x1a5058eb6041
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x1a4f58eb6041
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x1a4e58eb6041
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x1a4958eb6041

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x4d0, Size: 0x10]
	CameraComponent* GetActiveCameraComponent();// 0x2c2458eb6041
	LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x2c2358eb6041

--------------------------------
Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 0x1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x290, Size: 0xa8]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x338, Size: 0x8]
	void SetSettings(Object* InSettings);// 0x2c1c58eb6041
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x2c1b58eb6041

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 0x10]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 0x10]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 0x10]
	FString CurrentShotName;//[Offset: 0x30, Size: 0x10]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 0x10]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 0x10]
	FString SourceTimecode;//[Offset: 0x60, Size: 0x10]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 0x28]
	LevelSequence* ActiveShot;//[Offset: 0x98, Size: 0x8]
	MovieSceneSequenceID ShotID;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: LevelSequenceAnimSequenceLink.AssetUserData.Object
	LevelSequenceAnimSequenceLinkItem[] AnimSequenceLinks;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelSequenceAnimSequenceLinkItem
	Guid SkelTrackGuid;//[Offset: 0x0, Size: 0x10]
	SoftObjectPath PathToAnimSequence;//[Offset: 0x10, Size: 0x18]
	bool bExportTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bExportMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bExportAttributeCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
	bool bExportMaterialCurves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 0x1]
	bool bRecordInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 0x1]

--------------------------------
Class: LevelSequenceDirector.Object
	LevelSequencePlayer* Player;//[Offset: 0x28, Size: 0x8]
	int SubSequenceID;//[Offset: 0x30, Size: 0x4]
	int MovieScenePlayerIndex;//[Offset: 0x34, Size: 0x4]
	void OnCreated();// 0x2c2258eb6041
	MovieSceneSequence* GetSequence();// 0x2c2158eb6041
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x2c2058eb6041
	Object* GetBoundObject(MovieSceneObjectBindingID ObjectBinding);// 0x2c1f58eb6041
	Actor*[] GetBoundActors(MovieSceneObjectBindingID ObjectBinding);// 0x2c1e58eb6041
	Actor* GetBoundActor(MovieSceneObjectBindingID ObjectBinding);// 0x2c1d58eb6041

--------------------------------
Class: LegacyLevelSequenceDirectorBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: LevelSequenceProjectSettings.DeveloperSettings.Object
	bool bDefaultLockEngineToDisplayRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	FString DefaultDisplayRate;//[Offset: 0x40, Size: 0x10]
	FString DefaultTickResolution;//[Offset: 0x50, Size: 0x10]
	enum DefaultClockSource;//[Offset: 0x60, Size: 0x1]

--------------------------------
Class: LevelSequenceMediaController.Actor.Object
	LevelSequenceActor* Sequence;//[Offset: 0x280, Size: 0x8]
	MediaComponent* MediaComponent;//[Offset: 0x288, Size: 0x8]
	float ServerStartTimeSeconds;//[Offset: 0x290, Size: 0x4]
	void SynchronizeToServer(float DesyncThresholdSeconds);// 0x2c2958eb6041
	void Play();// 0x2c2858eb6041
	void OnRep_ServerStartTimeSeconds();// 0x2c2758eb6041
	LevelSequenceActor* GetSequence();// 0x2c2658eb6041
	MediaComponent* GetMediaComponent();// 0x2c2558eb6041

--------------------------------
Class: MovieSceneCaptureProtocolBase.Object
	enum State;//[Offset: 0x50, Size: 0x1]
	bool IsCapturing();// 0x2c2b58eb6041
	enum GetState();// 0x2c2a58eb6041

--------------------------------
Class: MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: NullAudioCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: MasterAudioSubmixCaptureProtocol.MovieSceneAudioCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	FString Filename;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: CompositionGraphCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	CompositionGraphCapturePasses IncludeRenderPasses;//[Offset: 0x58, Size: 0x10]
	bool bCaptureFramesInHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	int HDRCompressionQuality;//[Offset: 0x6c, Size: 0x4]
	byte CaptureGamut;//[Offset: 0x70, Size: 0x1]
	SoftObjectPath PostProcessingMaterial;//[Offset: 0x78, Size: 0x18]
	bool bDisableScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	MaterialInterface* PostProcessingMaterialPtr;//[Offset: 0x98, Size: 0x8]

--------------------------------
Class: CompositionGraphCapturePasses
	FString[] Value;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	int CompressionQuality;//[Offset: 0xd8, Size: 0x4]

--------------------------------
Class: ImageSequenceProtocol_BMP.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_PNG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_JPG.CompressedImageSequenceProtocol.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object

--------------------------------
Class: ImageSequenceProtocol_EXR.ImageSequenceProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	bool bCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]
	byte CaptureGamut;//[Offset: 0xd9, Size: 0x1]

--------------------------------
Class: MovieSceneCaptureInterface.Interface.Object

--------------------------------
Class: MovieSceneCapture.Object
	SoftClassPath ImageCaptureProtocolType;//[Offset: 0x38, Size: 0x18]
	SoftClassPath AudioCaptureProtocolType;//[Offset: 0x50, Size: 0x18]
	MovieSceneImageCaptureProtocolBase* ImageCaptureProtocol;//[Offset: 0x68, Size: 0x8]
	MovieSceneAudioCaptureProtocolBase* AudioCaptureProtocol;//[Offset: 0x70, Size: 0x8]
	MovieSceneCaptureSettings Settings;//[Offset: 0x78, Size: 0x70]
	bool bUseSeparateProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 0x1]
	bool bCloseEditorWhenCaptureStarts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	FString AdditionalCommandLineArguments;//[Offset: 0xf0, Size: 0x10]
	FString InheritedCommandLineArguments;//[Offset: 0x100, Size: 0x10]
	void SetImageCaptureProtocolType(class MovieSceneCaptureProtocolBase ProtocolType);// 0x2c2f58eb6041
	void SetAudioCaptureProtocolType(class MovieSceneCaptureProtocolBase ProtocolType);// 0x2c2e58eb6041
	MovieSceneCaptureProtocolBase* GetImageCaptureProtocol();// 0x2c2d58eb6041
	MovieSceneCaptureProtocolBase* GetAudioCaptureProtocol();// 0x2c2c58eb6041

--------------------------------
Class: MovieSceneCaptureSettings
	DirectoryPath OutputDirectory;//[Offset: 0x0, Size: 0x10]
	class GameModeBase* GameModeOverride;//[Offset: 0x10, Size: 0x8]
	FString OutputFormat;//[Offset: 0x18, Size: 0x10]
	bool bOverwriteExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bUseRelativeFrameNumbers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	int HandleFrames;//[Offset: 0x2c, Size: 0x4]
	FString MovieExtension;//[Offset: 0x30, Size: 0x10]
	byte ZeroPadFrameNumbers;//[Offset: 0x40, Size: 0x1]
	FrameRate FrameRate;//[Offset: 0x44, Size: 0x8]
	bool bUseCustomFrameRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	FrameRate CustomFrameRate;//[Offset: 0x50, Size: 0x8]
	CaptureResolution Resolution;//[Offset: 0x58, Size: 0x8]
	bool bEnableTextureStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bCinematicEngineScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	bool bCinematicMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1]
	bool bAllowMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1]
	bool bAllowTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	bool bShowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 0x1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66, Size: 0x1]
	bool bUsePathTracer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67, Size: 0x1]
	int PathTracerSamplePerPixel;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: CaptureResolution
	int ResX;//[Offset: 0x0, Size: 0x4]
	int ResY;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: LevelCapture.MovieSceneCapture.Object
	bool bAutoStartCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	Guid PrerequisiteActorId;//[Offset: 0x234, Size: 0x10]

--------------------------------
Class: MovieSceneCaptureEnvironment.Object
	bool IsCaptureInProgress();// 0x2c3458eb6041
	int GetCaptureFrameNumber();// 0x2c7558eb6041
	float GetCaptureElapsedTime();// 0x2c3258eb6041
	MovieSceneImageCaptureProtocolBase* FindImageCaptureProtocol();// 0x2c3158eb6041
	MovieSceneAudioCaptureProtocolBase* FindAudioCaptureProtocol();// 0x2c3058eb6041

--------------------------------
Class: UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	World* World;//[Offset: 0x58, Size: 0x8]
	void StopCapturingFinalPixels();// 0x2c4458eb6041
	void StartCapturingFinalPixels(out const CapturedPixelsID StreamID);// 0x2c4358eb6041
	void ResolveBuffer(Texture* Buffer, out const CapturedPixelsID BufferID);// 0x2c4258eb6041
	void OnWarmUp();// 0x2c4158eb6041
	void OnTick();// 0x2c4058eb6041
	void OnStartCapture();// 0x2c3f58eb6041
	bool OnSetup();// 0x2c3e58eb6041
	void OnPreTick();// 0x2c3d58eb6041
	void OnPixelsReceived(out const CapturedPixels Pixels, out const CapturedPixelsID ID, FrameMetrics FrameMetrics);// 0x2c3c58eb6041
	void OnPauseCapture();// 0x2c3b58eb6041
	void OnFinalize();// 0x2c3a58eb6041
	void OnCaptureFrame();// 0x2c3958eb6041
	bool OnCanFinalize();// 0x2c3858eb6041
	void OnBeginFinalize();// 0x2c3758eb6041
	FrameMetrics GetCurrentFrameMetrics();// 0x2c3658eb6041
	FString GenerateFilename(out const FrameMetrics InFrameMetrics);// 0x2c3558eb6041

--------------------------------
Class: CapturedPixelsID
	<FName,FName> Identifiers;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: CapturedPixels

--------------------------------
Class: FrameMetrics
	float TotalElapsedTime;//[Offset: 0x0, Size: 0x4]
	float FrameDelta;//[Offset: 0x4, Size: 0x4]
	int FrameNumber;//[Offset: 0x8, Size: 0x4]
	int NumDroppedFrames;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: UserDefinedImageCaptureProtocol.UserDefinedCaptureProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	enum Format;//[Offset: 0xd8, Size: 0x1]
	bool bEnableCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	int CompressionQuality;//[Offset: 0xdc, Size: 0x4]
	void WriteImageToDisk(out const CapturedPixels PixelData, out const CapturedPixelsID StreamID, out const FrameMetrics FrameMetrics, bool bCopyImageData);// 0x2c4758eb6041
	FString GenerateFilenameForCurrentFrame();// 0x2c4658eb6041
	FString GenerateFilenameForBuffer(Texture* Buffer, out const CapturedPixelsID StreamID);// 0x2c4558eb6041

--------------------------------
Class: VideoCaptureProtocol.FrameGrabberProtocol.MovieSceneImageCaptureProtocolBase.MovieSceneCaptureProtocolBase.Object
	bool bUseCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	float CompressionQuality;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: MoviePlayerSettings.Object
	bool bWaitForMoviesToComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bMoviesAreSkippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	FString[] StartupMovies;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: Overlays.Object

--------------------------------
Class: BasicOverlays.Overlays.Object
	OverlayItem[] Overlays;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: OverlayItem
	Timespan StartTime;//[Offset: 0x0, Size: 0x8]
	Timespan EndTime;//[Offset: 0x8, Size: 0x8]
	FString Text;//[Offset: 0x10, Size: 0x10]
	Vector2D Position;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: LocalizedOverlays.Overlays.Object
	BasicOverlays* DefaultOverlays;//[Offset: 0x28, Size: 0x8]
	<FString,BasicOverlays*> LocaleToOverlaysMap;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: BuildPatchManifest.Object
	byte ManifestFileVersion;//[Offset: 0x28, Size: 0x1]
	bool bIsFileData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	uint32 AppID;//[Offset: 0x2c, Size: 0x4]
	FString AppName;//[Offset: 0x30, Size: 0x10]
	FString BuildVersion;//[Offset: 0x40, Size: 0x10]
	FString LaunchExe;//[Offset: 0x50, Size: 0x10]
	FString LaunchCommand;//[Offset: 0x60, Size: 0x10]
	<FString> PrereqIds;//[Offset: 0x70, Size: 0x50]
	FString PrereqName;//[Offset: 0xc0, Size: 0x10]
	FString PrereqPath;//[Offset: 0xd0, Size: 0x10]
	FString PrereqArgs;//[Offset: 0xe0, Size: 0x10]
	FileManifestData[] FileManifestList;//[Offset: 0xf0, Size: 0x10]
	ChunkInfoData[] ChunkList;//[Offset: 0x100, Size: 0x10]
	CustomFieldData[] CustomFields;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: FileManifestData
	FString Filename;//[Offset: 0x0, Size: 0x10]
	SHAHashData FileHash;//[Offset: 0x10, Size: 0x14]
	ChunkPartData[] FileChunkParts;//[Offset: 0x28, Size: 0x10]
	FString[] InstallTags;//[Offset: 0x38, Size: 0x10]
	bool bIsUnixExecutable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	FString SymlinkTarget;//[Offset: 0x50, Size: 0x10]
	bool bIsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bIsCompressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]

--------------------------------
Class: SHAHashData
	byte Hash;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ChunkPartData
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	uint32 Offset;//[Offset: 0x10, Size: 0x4]
	uint32 Size;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ChunkInfoData
	Guid Guid;//[Offset: 0x0, Size: 0x10]
	uint64 Hash;//[Offset: 0x10, Size: 0x8]
	SHAHashData ShaHash;//[Offset: 0x18, Size: 0x14]
	int64 FileSize;//[Offset: 0x30, Size: 0x8]
	byte GroupNumber;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: CustomFieldData
	FString Key;//[Offset: 0x0, Size: 0x10]
	FString Value;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ClothingAssetCustomData.Object

--------------------------------
Class: ClothingAssetCommon.ClothingAssetBase.Object
	PhysicsAsset* PhysicsAsset;//[Offset: 0x48, Size: 0x8]
	<FName,ClothConfigBase*> ClothConfigs;//[Offset: 0x50, Size: 0x50]
	ClothLODDataCommon[] LODData;//[Offset: 0xa0, Size: 0x10]
	int[] LodMap;//[Offset: 0xb0, Size: 0x10]
	FName[] UsedBoneNames;//[Offset: 0xc0, Size: 0x10]
	int[] UsedBoneIndices;//[Offset: 0xd0, Size: 0x10]
	int ReferenceBoneIndex;//[Offset: 0xe0, Size: 0x4]
	ClothingAssetCustomData* CustomData;//[Offset: 0xe8, Size: 0x8]

--------------------------------
Class: ClothLODDataCommon
	ClothPhysicalMeshData PhysicalMeshData;//[Offset: 0x0, Size: 0xd8]
	ClothCollisionData CollisionData;//[Offset: 0xd8, Size: 0x40]
	bool bUseMultipleInfluences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 0x1]
	float SkinningKernelRadius;//[Offset: 0x11c, Size: 0x4]
	bool bSmoothTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 0x1]

--------------------------------
Class: ClothPhysicalMeshData
	Vector3f[] Vertices;//[Offset: 0x0, Size: 0x10]
	Vector3f[] Normals;//[Offset: 0x10, Size: 0x10]
	uint32[] Indices;//[Offset: 0x20, Size: 0x10]
	<uint32,PointWeightMap> WeightMaps;//[Offset: 0x30, Size: 0x50]
	float[] InverseMasses;//[Offset: 0x80, Size: 0x10]
	ClothVertBoneData[] BoneData;//[Offset: 0x90, Size: 0x10]
	uint32[] SelfCollisionIndices;//[Offset: 0xa0, Size: 0x10]
	ClothTetherData EuclideanTethers;//[Offset: 0xb0, Size: 0x10]
	ClothTetherData GeodesicTethers;//[Offset: 0xc0, Size: 0x10]
	int MaxBoneWeights;//[Offset: 0xd0, Size: 0x4]
	int NumFixedVerts;//[Offset: 0xd4, Size: 0x4]

--------------------------------
Class: PointWeightMap
	float[] Values;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: ClothTetherData

--------------------------------
Class: ClothCollisionData
	ClothCollisionPrim_Sphere[] Spheres;//[Offset: 0x0, Size: 0x10]
	ClothCollisionPrim_SphereConnection[] SphereConnections;//[Offset: 0x10, Size: 0x10]
	ClothCollisionPrim_Convex[] Convexes;//[Offset: 0x20, Size: 0x10]
	ClothCollisionPrim_Box[] Boxes;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ClothCollisionPrim_Sphere
	int BoneIndex;//[Offset: 0x0, Size: 0x4]
	float Radius;//[Offset: 0x4, Size: 0x4]
	Vector LocalPosition;//[Offset: 0x8, Size: 0x18]

--------------------------------
Class: ClothCollisionPrim_SphereConnection
	int SphereIndices;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: ClothCollisionPrim_Convex
	ClothCollisionPrim_ConvexFace[] Faces;//[Offset: 0x0, Size: 0x10]
	Vector[] SurfacePoints;//[Offset: 0x10, Size: 0x10]
	int BoneIndex;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: ClothCollisionPrim_ConvexFace
	Plane Plane;//[Offset: 0x0, Size: 0x20]
	int[] Indices;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: ClothCollisionPrim_Box
	Vector LocalPosition;//[Offset: 0x0, Size: 0x18]
	Quat LocalRotation;//[Offset: 0x20, Size: 0x20]
	Vector HalfExtents;//[Offset: 0x40, Size: 0x18]
	int BoneIndex;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: ClothLODDataCommon_Legacy.Object
	ClothPhysicalMeshDataBase_Legacy* PhysicalMeshData;//[Offset: 0x28, Size: 0x8]
	ClothPhysicalMeshData ClothPhysicalMeshData;//[Offset: 0x30, Size: 0xd8]
	ClothCollisionData CollisionData;//[Offset: 0x108, Size: 0x40]

--------------------------------
Class: ClothConfigNv.ClothConfigCommon.ClothConfigBase.Object
	enum ClothingWindMethod;//[Offset: 0x28, Size: 0x1]
	ClothConstraintSetupNv VerticalConstraint;//[Offset: 0x2c, Size: 0x10]
	ClothConstraintSetupNv HorizontalConstraint;//[Offset: 0x3c, Size: 0x10]
	ClothConstraintSetupNv BendConstraint;//[Offset: 0x4c, Size: 0x10]
	ClothConstraintSetupNv ShearConstraint;//[Offset: 0x5c, Size: 0x10]
	float SelfCollisionRadius;//[Offset: 0x6c, Size: 0x4]
	float SelfCollisionStiffness;//[Offset: 0x70, Size: 0x4]
	float SelfCollisionCullScale;//[Offset: 0x74, Size: 0x4]
	Vector Damping;//[Offset: 0x78, Size: 0x18]
	float Friction;//[Offset: 0x90, Size: 0x4]
	float WindDragCoefficient;//[Offset: 0x94, Size: 0x4]
	float WindLiftCoefficient;//[Offset: 0x98, Size: 0x4]
	Vector LinearDrag;//[Offset: 0xa0, Size: 0x18]
	Vector AngularDrag;//[Offset: 0xb8, Size: 0x18]
	Vector LinearInertiaScale;//[Offset: 0xd0, Size: 0x18]
	Vector AngularInertiaScale;//[Offset: 0xe8, Size: 0x18]
	Vector CentrifugalInertiaScale;//[Offset: 0x100, Size: 0x18]
	float SolverFrequency;//[Offset: 0x118, Size: 0x4]
	float StiffnessFrequency;//[Offset: 0x11c, Size: 0x4]
	float GravityScale;//[Offset: 0x120, Size: 0x4]
	Vector GravityOverride;//[Offset: 0x128, Size: 0x18]
	bool bUseGravityOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	float TetherStiffness;//[Offset: 0x144, Size: 0x4]
	float TetherLimit;//[Offset: 0x148, Size: 0x4]
	float CollisionThickness;//[Offset: 0x14c, Size: 0x4]
	float AnimDriveSpringStiffness;//[Offset: 0x150, Size: 0x4]
	float AnimDriveDamperStiffness;//[Offset: 0x154, Size: 0x4]
	enum WindMethod;//[Offset: 0x158, Size: 0x1]
	ClothConstraintSetup_Legacy VerticalConstraintConfig;//[Offset: 0x15c, Size: 0x10]
	ClothConstraintSetup_Legacy HorizontalConstraintConfig;//[Offset: 0x16c, Size: 0x10]
	ClothConstraintSetup_Legacy BendConstraintConfig;//[Offset: 0x17c, Size: 0x10]
	ClothConstraintSetup_Legacy ShearConstraintConfig;//[Offset: 0x18c, Size: 0x10]

--------------------------------
Class: ClothConstraintSetupNv
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float StiffnessMultiplier;//[Offset: 0x4, Size: 0x4]
	float StretchLimit;//[Offset: 0x8, Size: 0x4]
	float CompressionLimit;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ClothConstraintSetup_Legacy
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float StiffnessMultiplier;//[Offset: 0x4, Size: 0x4]
	float StretchLimit;//[Offset: 0x8, Size: 0x4]
	float CompressionLimit;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ClothingSimulationFactoryNv.ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractorNv.ClothingSimulationInteractor.Object
	void SetAnimDriveDamperStiffness(float InStiffness);// 0x363358eb6041

--------------------------------
Class: ClothPhysicalMeshDataNv_Legacy.ClothPhysicalMeshDataBase_Legacy.Object
	float[] MaxDistances;//[Offset: 0xe0, Size: 0x10]
	float[] BackstopDistances;//[Offset: 0xf0, Size: 0x10]
	float[] BackstopRadiuses;//[Offset: 0x100, Size: 0x10]
	float[] AnimDriveMultipliers;//[Offset: 0x110, Size: 0x10]

--------------------------------
Class: AndroidRuntimeSettings.Object
	FString PackageName;//[Offset: 0x28, Size: 0x10]
	int StoreVersion;//[Offset: 0x38, Size: 0x4]
	int StoreVersionOffsetArmV7;//[Offset: 0x3c, Size: 0x4]
	int StoreVersionOffsetArm64;//[Offset: 0x40, Size: 0x4]
	int StoreVersionOffsetX8664;//[Offset: 0x44, Size: 0x4]
	FString ApplicationDisplayName;//[Offset: 0x48, Size: 0x10]
	FString VersionDisplayName;//[Offset: 0x58, Size: 0x10]
	int MinSDKVersion;//[Offset: 0x68, Size: 0x4]
	int TargetSDKVersion;//[Offset: 0x6c, Size: 0x4]
	byte InstallLocation;//[Offset: 0x70, Size: 0x1]
	bool bEnableGradle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool bEnableLint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	bool bPackageDataInsideApk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73, Size: 0x1]
	bool bCreateAllPlatformsInstall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	bool bDisableVerifyOBBOnStartUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 0x1]
	bool bForceSmallOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 0x1]
	bool bAllowLargeOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77, Size: 0x1]
	bool bAllowPatchOBBFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool bAllowOverflowOBBFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
	bool bUseExternalFilesDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 0x1]
	bool bPublicLogFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 0x1]
	byte Orientation;//[Offset: 0x7c, Size: 0x1]
	float MaxAspectRatio;//[Offset: 0x80, Size: 0x4]
	bool bUseDisplayCutout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool bRestoreNotificationsOnReboot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	bool bFullScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1]
	bool bEnableNewKeyboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87, Size: 0x1]
	byte DepthBufferPreference;//[Offset: 0x88, Size: 0x1]
	bool bValidateTextureFormats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	bool bForceCompressNativeLibs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 0x1]
	bool bEnableAdvancedBinaryCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b, Size: 0x1]
	bool bEnableBundle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	bool bEnableUniversalAPK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 0x1]
	bool bBundleABISplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e, Size: 0x1]
	bool bBundleLanguageSplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f, Size: 0x1]
	bool bBundleDensitySplit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	FString[] ExtraManifestNodeTags;//[Offset: 0x98, Size: 0x10]
	FString[] ExtraApplicationNodeTags;//[Offset: 0xa8, Size: 0x10]
	FString ExtraApplicationSettings;//[Offset: 0xb8, Size: 0x10]
	FString[] ExtraActivityNodeTags;//[Offset: 0xc8, Size: 0x10]
	FString ExtraActivitySettings;//[Offset: 0xd8, Size: 0x10]
	FString[] ExtraPermissions;//[Offset: 0xe8, Size: 0x10]
	bool bAndroidVoiceEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	byte[] PackageForOculusMobile;//[Offset: 0x100, Size: 0x10]
	bool bRemoveOSIG;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	FString KeyStore;//[Offset: 0x118, Size: 0x10]
	FString KeyAlias;//[Offset: 0x128, Size: 0x10]
	FString KeyStorePassword;//[Offset: 0x138, Size: 0x10]
	FString KeyPassword;//[Offset: 0x148, Size: 0x10]
	bool bBuildForArm64;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	bool bBuildForX8664;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 0x1]
	bool bBuildForES31;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 0x1]
	bool bSupportsVulkan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b, Size: 0x1]
	bool bSupportsVulkanSM5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 0x1]
	DirectoryPath DebugVulkanLayerDirectory;//[Offset: 0x160, Size: 0x10]
	FString[] DebugVulkanDeviceLayers;//[Offset: 0x170, Size: 0x10]
	FString[] DebugVulkanInstanceLayers;//[Offset: 0x180, Size: 0x10]
	bool bAndroidOpenGLSupportsBackbufferSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	bool bDetectVulkanByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 0x1]
	bool bBuildWithHiddenSymbolVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x192, Size: 0x1]
	bool bSaveSymbols;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x193, Size: 0x1]
	bool bForceLDLinker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 0x1]
	bool bEnableGooglePlaySupport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x195, Size: 0x1]
	bool bUseGetAccounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x196, Size: 0x1]
	FString GamesAppID;//[Offset: 0x198, Size: 0x10]
	GooglePlayAchievementMapping[] AchievementMap;//[Offset: 0x1a8, Size: 0x10]
	GooglePlayLeaderboardMapping[] LeaderboardMap;//[Offset: 0x1b8, Size: 0x10]
	bool bEnableSnapshots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	bool bSupportAdMob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 0x1]
	FString AdMobAdUnitID;//[Offset: 0x1d0, Size: 0x10]
	FString[] AdMobAdUnitIDs;//[Offset: 0x1e0, Size: 0x10]
	FString GooglePlayLicenseKey;//[Offset: 0x1f0, Size: 0x10]
	FString GCMClientSenderID;//[Offset: 0x200, Size: 0x10]
	bool bShowLaunchImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	bool bAllowIMU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 0x1]
	bool bAllowControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x212, Size: 0x1]
	bool bBlockAndroidKeysOnControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x213, Size: 0x1]
	bool bControllersBlockDeviceFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 0x1]
	byte AndroidAudio;//[Offset: 0x215, Size: 0x1]
	int AudioSampleRate;//[Offset: 0x218, Size: 0x4]
	int AudioCallbackBufferFrameSize;//[Offset: 0x21c, Size: 0x4]
	int AudioNumBuffersToEnqueue;//[Offset: 0x220, Size: 0x4]
	int AudioMaxChannels;//[Offset: 0x224, Size: 0x4]
	int AudioNumSourceWorkers;//[Offset: 0x228, Size: 0x4]
	FString SpatializationPlugin;//[Offset: 0x230, Size: 0x10]
	FString ReverbPlugin;//[Offset: 0x240, Size: 0x10]
	FString OcclusionPlugin;//[Offset: 0x250, Size: 0x10]
	PlatformRuntimeAudioCompressionOverrides CompressionOverrides;//[Offset: 0x260, Size: 0x10]
	int CacheSizeKB;//[Offset: 0x270, Size: 0x4]
	int MaxChunkSizeOverrideKB;//[Offset: 0x274, Size: 0x4]
	bool bResampleForDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	int SoundCueCookQualityIndex;//[Offset: 0x27c, Size: 0x4]
	float MaxSampleRate;//[Offset: 0x280, Size: 0x4]
	float HighSampleRate;//[Offset: 0x284, Size: 0x4]
	float MedSampleRate;//[Offset: 0x288, Size: 0x4]
	float LowSampleRate;//[Offset: 0x28c, Size: 0x4]
	float MinSampleRate;//[Offset: 0x290, Size: 0x4]
	float CompressionQualityModifier;//[Offset: 0x294, Size: 0x4]
	float AutoStreamingThreshold;//[Offset: 0x298, Size: 0x4]
	byte AndroidGraphicsDebugger;//[Offset: 0x29c, Size: 0x1]
	DirectoryPath MaliGraphicsDebuggerPath;//[Offset: 0x2a0, Size: 0x10]
	bool bEnableMaliPerfCounters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	bool bMultiTargetFormat_ETC2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 0x1]
	bool bMultiTargetFormat_DXT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 0x1]
	bool bMultiTargetFormat_ASTC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b3, Size: 0x1]
	float TextureFormatPriority_ETC2;//[Offset: 0x2b4, Size: 0x4]
	float TextureFormatPriority_DXT;//[Offset: 0x2b8, Size: 0x4]
	float TextureFormatPriority_ASTC;//[Offset: 0x2bc, Size: 0x4]
	FString SDKAPILevelOverride;//[Offset: 0x2c0, Size: 0x10]
	FString NDKAPILevelOverride;//[Offset: 0x2d0, Size: 0x10]
	FString BuildToolsOverride;//[Offset: 0x2e0, Size: 0x10]
	bool bStreamLandscapeMeshLODs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 0x1]
	bool bEnableDomStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 0x1]

--------------------------------
Class: GooglePlayAchievementMapping
	FString Name;//[Offset: 0x0, Size: 0x10]
	FString AchievementID;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: GooglePlayLeaderboardMapping
	FString Name;//[Offset: 0x0, Size: 0x10]
	FString LeaderboardID;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: PlatformRuntimeAudioCompressionOverrides
	bool bOverrideCompressionTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float DurationThreshold;//[Offset: 0x4, Size: 0x4]
	int MaxNumRandomBranches;//[Offset: 0x8, Size: 0x4]
	int SoundCueQualityIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x280, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x288, Size: 0x88]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x310, Size: 0x1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x310, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x310, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x310, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x310, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x311, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x314, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x318, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x428, Size: 0x10]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x40, Size: 0x18]
	class Actor* NavigationDataClass;//[Offset: 0x58, Size: 0x8]
	class Actor* NavDataClass;//[Offset: 0x60, Size: 0x28]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaID;//[Offset: 0x10, Size: 0x4]
	ClassPtrProperty AreaClass;//[Size: 0x8]

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4]
	Color DrawColor;//[Offset: 0x34, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: NavAreaMeta.NavArea.NavAreaBase.Object

--------------------------------
Class: NavAreaMeta_SwitchByAgent.NavAreaMeta.NavArea.NavAreaBase.Object
	class NavArea* Agent0Area;//[Offset: 0x48, Size: 0x8]
	class NavArea* Agent1Area;//[Offset: 0x50, Size: 0x8]
	class NavArea* Agent2Area;//[Offset: 0x58, Size: 0x8]
	class NavArea* Agent3Area;//[Offset: 0x60, Size: 0x8]
	class NavArea* Agent4Area;//[Offset: 0x68, Size: 0x8]
	class NavArea* Agent5Area;//[Offset: 0x70, Size: 0x8]
	class NavArea* Agent6Area;//[Offset: 0x78, Size: 0x8]
	class NavArea* Agent7Area;//[Offset: 0x80, Size: 0x8]
	class NavArea* Agent8Area;//[Offset: 0x88, Size: 0x8]
	class NavArea* Agent9Area;//[Offset: 0x90, Size: 0x8]
	class NavArea* Agent10Area;//[Offset: 0x98, Size: 0x8]
	class NavArea* Agent11Area;//[Offset: 0xa0, Size: 0x8]
	class NavArea* Agent12Area;//[Offset: 0xa8, Size: 0x8]
	class NavArea* Agent13Area;//[Offset: 0xb0, Size: 0x8]
	class NavArea* Agent14Area;//[Offset: 0xb8, Size: 0x8]
	class NavArea* Agent15Area;//[Offset: 0xc0, Size: 0x8]

--------------------------------
Class: NavArea_Default.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_LowHeight.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Null.NavArea.NavAreaBase.Object

--------------------------------
Class: NavArea_Obstacle.NavArea.NavAreaBase.Object

--------------------------------
Class: NavCollision.NavCollisionBase.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x80, Size: 0x10]
	NavCollisionBox[] BoxCollision;//[Offset: 0x90, Size: 0x10]
	class NavArea* AreaClass;//[Offset: 0xa0, Size: 0x8]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	bool bCreateOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 0x1]

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 0x18]
	float Radius;//[Offset: 0x18, Size: 0x4]
	float Height;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 0x18]
	Vector Extent;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: NavigationGraph.NavigationData.Actor.Object

--------------------------------
Class: NavigationGraphNode.Actor.Object

--------------------------------
Class: NavigationGraphNodeComponent.SceneComponent.ActorComponent.Object
	NavGraphNode Node;//[Offset: 0x2b0, Size: 0x18]
	NavigationGraphNodeComponent* NextNodeComponent;//[Offset: 0x2c8, Size: 0x8]
	NavigationGraphNodeComponent* PrevNodeComponent;//[Offset: 0x2d0, Size: 0x8]

--------------------------------
Class: NavGraphNode
	Object* Owner;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xb0, Size: 0x4]
	float TileRemovalRadius;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x28, Size: 0x10]
	Vector[] PathPoints;//[Offset: 0x38, Size: 0x10]
	byte RecalculateOnInvalidation;//[Offset: 0x48, Size: 0x1]
	bool IsValid();// 0x363b58eb6041
	bool IsStringPulled();// 0x363a58eb6041
	bool IsPartial();// 0x363958eb6041
	float GetPathLength();// 0x363858eb6041
	float GetPathCost();// 0x363758eb6041
	FString GetDebugString();// 0x363658eb6041
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x367758eb6041
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x363458eb6041

--------------------------------
Class: NavigationPathGenerator.Interface.Object

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: NavigationSystemV1.NavigationSystemBase.Object
	NavigationData* MainNavData;//[Offset: 0x28, Size: 0x8]
	NavigationData* AbstractNavData;//[Offset: 0x30, Size: 0x8]
	FName DefaultAgentName;//[Offset: 0x38, Size: 0x8]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x40, Size: 0x28]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bSpawnNavDataInNavBoundsLevel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bShouldDiscardSubLevelNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bTickWhilePaused;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x69, Size: 0x1]
	float ActiveTilesUpdateInterval;//[Offset: 0x6c, Size: 0x4]
	enum DataGatheringMode;//[Offset: 0x70, Size: 0x1]
	float DirtyAreaWarningSizeThreshold;//[Offset: 0x74, Size: 0x4]
	float GatheringNavModifiersWarningLimitTime;//[Offset: 0x78, Size: 0x4]
	NavDataConfig[] SupportedAgents;//[Offset: 0x80, Size: 0x10]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x90, Size: 0x4]
	Box BuildBounds;//[Offset: 0x98, Size: 0x38]
	NavigationData*[] NavDataSet;//[Offset: 0xd0, Size: 0x10]
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0xe0, Size: 0x10]
	delegate OnNavDataRegisteredEvent;//[Offset: 0x100, Size: 0x10]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0x110, Size: 0x10]
	enum OperationMode;//[Offset: 0x1fc, Size: 0x1]
	float DirtyAreasUpdateFreq;//[Offset: 0x1624, Size: 0x4]
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x365358eb6041
	void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x365258eb6041
	void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x365158eb6041
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x365058eb6041
	void SetGeometryGatheringMode(enum NewMode);// 0x364f58eb6041
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x364e58eb6041
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x364d58eb6041
	Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x364c58eb6041
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x364b58eb6041
	bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x364a58eb6041
	bool K2_ReplaceAreaInOctreeData(const Object* Object, class NavArea OldArea, class NavArea NewArea);// 0x364958eb6041
	bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x364858eb6041
	bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x364758eb6041
	bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x364658eb6041
	bool K2_GetRandomLocationInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x364558eb6041
	bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x364458eb6041
	bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x364358eb6041
	Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x364258eb6041
	Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x364158eb6041
	byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x364058eb6041
	byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x363f58eb6041
	NavigationSystemV1* GetNavigationSystem(Object* WorldContextObject);// 0x363e58eb6041
	NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x363d58eb6041
	NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x363c58eb6041

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x2b0, Size: 0x4]

--------------------------------
Class: NavigationSystemModuleConfig.NavigationSystemConfig.Object
	bool bStrictlyStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d, Size: 0x1]
	bool bCreateOnClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d, Size: 0x1]
	bool bAutoSpawnMissingNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d, Size: 0x1]
	bool bSpawnNavDataInNavBoundsLevel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4d, Size: 0x1]

--------------------------------
Class: NavigationTestingActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x288, Size: 0x8]
	NavigationInvokerComponent* InvokerComponent;//[Offset: 0x290, Size: 0x8]
	bool bActAsNavigationInvoker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1]
	NavAgentProperties NavAgentProps;//[Offset: 0x2a0, Size: 0x30]
	Vector QueryingExtent;//[Offset: 0x2d0, Size: 0x18]
	NavigationData* MyNavData;//[Offset: 0x2e8, Size: 0x8]
	Vector ProjectedLocation;//[Offset: 0x2f0, Size: 0x18]
	bool bProjectedLocationValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x308, Size: 0x1]
	bool bSearchStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x308, Size: 0x1]
	float CostLimitFactor;//[Offset: 0x30c, Size: 0x4]
	float MinimumCostLimit;//[Offset: 0x310, Size: 0x4]
	bool bBacktracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 0x1]
	bool bUseHierarchicalPathfinding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x314, Size: 0x1]
	bool bGatherDetailedInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x314, Size: 0x1]
	bool bDrawDistanceToWall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x314, Size: 0x1]
	bool bShowNodePool;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x314, Size: 0x1]
	bool bShowBestPath;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x314, Size: 0x1]
	bool bShowDiffWithPreviousStep;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x314, Size: 0x1]
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x314, Size: 0x1]
	byte CostDisplayMode;//[Offset: 0x315, Size: 0x1]
	Vector2D TextCanvasOffset;//[Offset: 0x318, Size: 0x10]
	bool bPathExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x328, Size: 0x1]
	bool bPathIsPartial;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x328, Size: 0x1]
	bool bPathSearchOutOfNodes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x328, Size: 0x1]
	float PathfindingTime;//[Offset: 0x32c, Size: 0x4]
	float PathCost;//[Offset: 0x330, Size: 0x4]
	int PathfindingSteps;//[Offset: 0x334, Size: 0x4]
	NavigationTestingActor* OtherActor;//[Offset: 0x338, Size: 0x8]
	class NavigationQueryFilter* FilterClass;//[Offset: 0x340, Size: 0x8]
	int ShowStepIndex;//[Offset: 0x348, Size: 0x4]
	float OffsetFromCornersDistance;//[Offset: 0x34c, Size: 0x4]

--------------------------------
Class: NavLinkComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	NavigationLink[] Links;//[Offset: 0x540, Size: 0x10]

--------------------------------
Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	Object* CachedNavParent;//[Offset: 0xf8, Size: 0x8]
	void SetNavigationRelevancy(bool bRelevant);// 0x365458eb6041

--------------------------------
Class: NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object
	uint32 NavLinkUserId;//[Offset: 0x108, Size: 0x4]
	class NavArea* EnabledAreaClass;//[Offset: 0x110, Size: 0x8]
	class NavArea* DisabledAreaClass;//[Offset: 0x118, Size: 0x8]
	NavAgentSelector SupportedAgents;//[Offset: 0x120, Size: 0x4]
	Vector LinkRelativeStart;//[Offset: 0x128, Size: 0x18]
	Vector LinkRelativeEnd;//[Offset: 0x140, Size: 0x18]
	byte LinkDirection;//[Offset: 0x158, Size: 0x1]
	bool bLinkEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x159, Size: 0x1]
	bool bNotifyWhenEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x159, Size: 0x1]
	bool bNotifyWhenDisabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x159, Size: 0x1]
	bool bCreateBoxObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x159, Size: 0x1]
	Vector ObstacleOffset;//[Offset: 0x160, Size: 0x18]
	Vector ObstacleExtent;//[Offset: 0x178, Size: 0x18]
	class NavArea* ObstacleAreaClass;//[Offset: 0x190, Size: 0x8]
	float BroadcastRadius;//[Offset: 0x198, Size: 0x4]
	float BroadcastInterval;//[Offset: 0x19c, Size: 0x4]
	byte BroadcastChannel;//[Offset: 0x1a0, Size: 0x1]

--------------------------------
Class: NavLinkCustomInterface.Interface.Object

--------------------------------
Class: NavLinkHostInterface.Interface.Object

--------------------------------
Class: NavLinkRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NavLinkTrivial.NavLinkDefinition.Object

--------------------------------
Class: NavMeshRenderingComponent.DebugDrawComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0x100, Size: 0x8]
	Vector FailsafeExtent;//[Offset: 0x108, Size: 0x18]
	bool bIncludeAgentHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 0x1]
	void SetAreaClass(class NavArea NewAreaClass);// 0x365558eb6041

--------------------------------
Class: NavModifierVolume.Volume.Brush.Actor.Object
	class NavArea* AreaClass;//[Offset: 0x2b8, Size: 0x8]
	bool bMaskFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	void SetAreaClass(class NavArea NewAreaClass);// 0x369858eb6041

--------------------------------
Class: NavNodeInterface.Interface.Object

--------------------------------
Class: NavSystemConfigOverride.Actor.Object
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x278, Size: 0x8]
	enum OverridePolicy;//[Offset: 0x280, Size: 0x1]
	bool bLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x281, Size: 0x1]

--------------------------------
Class: NavTestRenderingComponent.DebugDrawComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: RecastFilter_UseDefaultArea.NavigationQueryFilter.Object

--------------------------------
Class: RecastNavMesh.NavigationData.Actor.Object
	bool bDrawTriangleEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48c, Size: 0x1]
	bool bDrawPolyEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48c, Size: 0x1]
	bool bDrawFilledPolys;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48c, Size: 0x1]
	bool bDrawNavMeshEdges;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48c, Size: 0x1]
	bool bDrawTileBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48c, Size: 0x1]
	bool bDrawPathCollidingGeometry;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x48c, Size: 0x1]
	bool bDrawTileLabels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x48c, Size: 0x1]
	bool bDrawPolygonLabels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x48c, Size: 0x1]
	bool bDrawDefaultPolygonCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48d, Size: 0x1]
	bool bDrawPolygonFlags;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48d, Size: 0x1]
	bool bDrawLabelsOnPathNodes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48d, Size: 0x1]
	bool bDrawNavLinks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48d, Size: 0x1]
	bool bDrawFailedNavLinks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48d, Size: 0x1]
	bool bDrawClusters;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x48d, Size: 0x1]
	bool bDrawOctree;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x48d, Size: 0x1]
	bool bDrawOctreeDetails;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x48d, Size: 0x1]
	bool bDrawMarkedForbiddenPolys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48e, Size: 0x1]
	bool bDistinctlyDrawTilesBeingBuilt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48e, Size: 0x1]
	float DrawOffset;//[Offset: 0x490, Size: 0x4]
	RecastNavMeshTileGenerationDebug TileGenerationDebug;//[Offset: 0x494, Size: 0x14]
	bool bFixedTilePoolSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a8, Size: 0x1]
	int TilePoolSize;//[Offset: 0x4ac, Size: 0x4]
	float TileSizeUU;//[Offset: 0x4b0, Size: 0x4]
	float CellSize;//[Offset: 0x4b4, Size: 0x4]
	float CellHeight;//[Offset: 0x4b8, Size: 0x4]
	float AgentRadius;//[Offset: 0x4bc, Size: 0x4]
	float AgentHeight;//[Offset: 0x4c0, Size: 0x4]
	float AgentMaxSlope;//[Offset: 0x4c4, Size: 0x4]
	float AgentMaxStepHeight;//[Offset: 0x4c8, Size: 0x4]
	float MinRegionArea;//[Offset: 0x4cc, Size: 0x4]
	float MergeRegionSize;//[Offset: 0x4d0, Size: 0x4]
	float MaxSimplificationError;//[Offset: 0x4d4, Size: 0x4]
	int MaxSimultaneousTileGenerationJobsCount;//[Offset: 0x4d8, Size: 0x4]
	int TileNumberHardLimit;//[Offset: 0x4dc, Size: 0x4]
	int PolyRefTileBits;//[Offset: 0x4e0, Size: 0x4]
	int PolyRefNavPolyBits;//[Offset: 0x4e4, Size: 0x4]
	int PolyRefSaltBits;//[Offset: 0x4e8, Size: 0x4]
	Vector NavMeshOriginOffset;//[Offset: 0x4f0, Size: 0x18]
	float DefaultDrawDistance;//[Offset: 0x508, Size: 0x4]
	float DefaultMaxSearchNodes;//[Offset: 0x50c, Size: 0x4]
	float DefaultMaxHierarchicalSearchNodes;//[Offset: 0x510, Size: 0x4]
	byte RegionPartitioning;//[Offset: 0x514, Size: 0x1]
	byte LayerPartitioning;//[Offset: 0x515, Size: 0x1]
	int RegionChunkSplits;//[Offset: 0x518, Size: 0x4]
	int LayerChunkSplits;//[Offset: 0x51c, Size: 0x4]
	bool bSortNavigationAreasByCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x520, Size: 0x1]
	bool bIsWorldPartitioned;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x520, Size: 0x1]
	bool bPerformVoxelFiltering;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x520, Size: 0x1]
	bool bMarkLowHeightAreas;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x520, Size: 0x1]
	bool bUseExtraTopCellWhenMarkingAreas;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x520, Size: 0x1]
	bool bFilterLowSpanSequences;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x520, Size: 0x1]
	bool bFilterLowSpanFromTileCache;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x520, Size: 0x1]
	bool bDoFullyAsyncNavDataGathering;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x520, Size: 0x1]
	bool bUseBetterOffsetsFromCorners;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x521, Size: 0x1]
	bool bStoreEmptyTileLayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x521, Size: 0x1]
	bool bUseVirtualFilters;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x521, Size: 0x1]
	bool bUseVirtualGeometryFilteringAndDirtying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x521, Size: 0x1]
	bool bAllowNavLinkAsPathEnd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x521, Size: 0x1]
	bool bUseVoxelCache;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x521, Size: 0x1]
	float TileSetUpdateInterval;//[Offset: 0x524, Size: 0x4]
	float HeuristicScale;//[Offset: 0x528, Size: 0x4]
	float VerticalDeviationFromGroundCompensation;//[Offset: 0x52c, Size: 0x4]
	bool K2_ReplaceAreaInTileBounds(Box Bounds, class NavArea OldArea, class NavArea NewArea, bool ReplaceLinks);// 0x365758eb6041

--------------------------------
Class: RecastNavMeshTileGenerationDebug
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	IntVector TileCoordinate;//[Offset: 0x4, Size: 0xc]
	bool bHeightfieldSolidFromRasterization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bHeightfieldSolidPostRadiusFiltering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bHeightfieldSolidPostHeightFiltering;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bCompactHeightfield;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bCompactHeightfieldEroded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bCompactHeightfieldRegions;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bCompactHeightfieldDistances;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bTileCacheLayerAreas;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bTileCacheLayerRegions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bTileCacheContours;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bTileCachePolyMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bTileCacheDetailMesh;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: RecastNavMeshDataChunk.NavigationDataChunk.Object

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 0x8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 0x1]
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 0x8]
	void ReadyForActivation();// 0x137c58eb6041
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x137b58eb6041
	void EndTask();// 0x137958eb6041

--------------------------------
Class: GameplayTaskOwnerInterface.Interface.Object

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 0x4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 0x1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 0x1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 0x10]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 0x10]
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 0x10]
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 0x10]
	delegate OnClaimedResourcesChange;//[Offset: 0x110, Size: 0x10]
	void OnRep_SimulatedTasks();// 0x365958eb6041
	enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x365858eb6041

--------------------------------
Class: GameplayTask_ClaimResource.GameplayTask.Object
	GameplayTask_ClaimResource* ClaimResources(interface classNone InTaskOwner, class GameplayTaskResource[] ResourceClasses, const byte Priority, const FName TaskInstanceName);// 0x365b58eb6041
	GameplayTask_ClaimResource* ClaimResource(interface classNone InTaskOwner, class GameplayTaskResource ResourceClass, const byte Priority, const FName TaskInstanceName);// 0x365a58eb6041

--------------------------------
Class: GameplayTask_SpawnActor.GameplayTask.Object
	delegate Success;//[Offset: 0x60, Size: 0x10]
	delegate DidNotSpawn;//[Offset: 0x70, Size: 0x10]
	class Actor* ClassToSpawn;//[Offset: 0xb0, Size: 0x8]
	GameplayTask_SpawnActor* SpawnActor(interface classNone TaskOwner, Vector SpawnLocation, Rotator SpawnRotation, class Actor Class, bool bSpawnOnlyOnAuthority);// 0x365e58eb6041
	void FinishSpawningActor(Object* WorldContextObject, Actor* SpawnedActor);// 0x365d58eb6041
	bool BeginSpawningActor(Object* WorldContextObject, out Actor* SpawnedActor);// 0x365c58eb6041

--------------------------------
Class: GameplayTask_TimeLimitedExecution.GameplayTask.Object
	delegate OnFinished;//[Offset: 0x60, Size: 0x10]
	delegate OnTimeExpired;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: GameplayTask_WaitDelay.GameplayTask.Object
	delegate OnFinish;//[Offset: 0x60, Size: 0x10]
	GameplayTask_WaitDelay* TaskWaitDelay(interface classNone TaskOwner, float Time, const byte Priority);// 0x138058eb6041
	void TaskDelayDelegate__DelegateSignature();// 0x137f58eb6041

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 0x10]
	delegate OnFail;//[Offset: 0x38, Size: 0x10]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x365f58eb6041

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: AIBlueprintHelperLibrary.BlueprintFunctionLibrary.Object
	void UnlockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bUnlockMovement, bool UnlockAILogic);// 0x366f58eb6041
	Pawn* SpawnAIFromClass(Object* WorldContextObject, class Pawn PawnClass, BehaviorTree* BehaviorTree, Vector Location, Rotator Rotation, bool bNoCollisionFail, Actor* Owner);// 0x366e58eb6041
	void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x366d58eb6041
	void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x366c58eb6041
	void SendAIMessage(Pawn* Target, FName Message, Object* MessageSource, bool bSuccess);// 0x366b58eb6041
	void LockAIResourcesWithAnimation(AnimInstance* AnimInstance, bool bLockMovement, bool LockAILogic);// 0x366a58eb6041
	bool IsValidAIRotation(Rotator Rotation);// 0x366958eb6041
	bool IsValidAILocation(Vector Location);// 0x366858eb6041
	bool IsValidAIDirection(Vector DirectionVector);// 0x366758eb6041
	int GetNextNavLinkIndex(const Controller* Controller);// 0x366658eb6041
	Vector[] GetCurrentPathPoints(Controller* Controller);// 0x366558eb6041
	int GetCurrentPathIndex(const Controller* Controller);// 0x366458eb6041
	NavigationPath* GetCurrentPath(Controller* Controller);// 0x366358eb6041
	BlackboardComponent* GetBlackboard(Actor* Target);// 0x366258eb6041
	AIController* GetAIController(Actor* ControlledActor);// 0x366158eb6041
	AIAsyncTaskBlueprintProxy* CreateMoveToProxyObject(Object* WorldContextObject, Pawn* Pawn, Vector Destination, Actor* TargetActor, float AcceptanceRadius, bool bStopOnOverlap);// 0x366058eb6041

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 0x8]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 0x10]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 0x10]
	BTService*[] Services;//[Offset: 0x68, Size: 0x10]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 0x10]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 0x8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 0x8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 0x8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 0x10]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 0x10]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x58, Size: 0x4]
	float RandomDeviation;//[Offset: 0x5c, Size: 0x4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 0x1]
	byte FlowAbortMode;//[Offset: 0x59, Size: 0x1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 0x1]
	uint16 Number;//[Offset: 0x2, Size: 0x2]

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 0x8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 0x10]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 0x8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 0x8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 0x8]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 0x8]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 0x8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 0x10]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x36c758eb6041
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x36c658eb6041
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x36c558eb6041
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x36c458eb6041
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x36c358eb6041
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x36c258eb6041
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x36c158eb6041
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x36c058eb6041
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x36bf58eb6041
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x36be58eb6041
	bool IsVectorValueSet(out const FName KeyName);// 0x36bd58eb6041
	Vector GetValueAsVector(out const FName KeyName);// 0x36bc58eb6041
	FString GetValueAsString(out const FName KeyName);// 0x36bb58eb6041
	Rotator GetValueAsRotator(out const FName KeyName);// 0x36ba58eb6041
	Object* GetValueAsObject(out const FName KeyName);// 0x36fb58eb6041
	FName GetValueAsName(out const FName KeyName);// 0x36b858eb6041
	int GetValueAsInt(out const FName KeyName);// 0x36b758eb6041
	float GetValueAsFloat(out const FName KeyName);// 0x36b658eb6041
	byte GetValueAsEnum(out const FName KeyName);// 0x36b558eb6041
	class Object GetValueAsClass(out const FName KeyName);// 0x36b458eb6041
	bool GetValueAsBool(out const FName KeyName);// 0x36b358eb6041
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x36b258eb6041
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x36b158eb6041
	void ClearValue(out const FName KeyName);// 0x36b058eb6041

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xc0, Size: 0x8]
	void StopLogic(FString Reason);// 0x36ab58eb6041
	void StartLogic();// 0x36aa58eb6041
	void RestartLogic();// 0x36a958eb6041
	bool IsRunning();// 0x36a858eb6041
	bool IsPaused();// 0x36a758eb6041

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 0x1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x348, Size: 0x1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x348, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x348, Size: 0x1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x348, Size: 0x1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x348, Size: 0x1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x350, Size: 0x8]
	BrainComponent* BrainComponent;//[Offset: 0x358, Size: 0x8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x360, Size: 0x8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x368, Size: 0x8]
	BlackboardComponent* Blackboard;//[Offset: 0x370, Size: 0x8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x378, Size: 0x8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x380, Size: 0x8]
	delegate ReceiveMoveCompleted;//[Offset: 0x388, Size: 0x10]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x368458eb6041
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x368358eb6041
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x368258eb6041
	void SetMoveBlockDetection(bool bEnable);// 0x368158eb6041
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x368058eb6041
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x367f58eb6041
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x367e58eb6041
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x367d58eb6041
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x367c58eb6041
	void K2_SetFocus(Actor* NewFocus);// 0x367b58eb6041
	void K2_SetFocalPoint(Vector FP);// 0x367a58eb6041
	void K2_ClearFocus();// 0x367958eb6041
	bool HasPartialPath();// 0x367858eb6041
	PathFollowingComponent* GetPathFollowingComponent();// 0x36b958eb6041
	byte GetMoveStatus();// 0x367658eb6041
	Vector GetImmediateMoveDestination();// 0x367558eb6041
	Actor* GetFocusActor();// 0x367458eb6041
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x367358eb6041
	Vector GetFocalPoint();// 0x367258eb6041
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x367158eb6041
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x367058eb6041

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 0x8]
	NavigationData* MyNavData;//[Offset: 0xf8, Size: 0x8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x370958eb6041
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x370858eb6041
	Vector GetPathDestination();// 0x370758eb6041
	byte GetPathActionType();// 0x370658eb6041

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 0x10]
	class AISense* DominantSense;//[Offset: 0xc0, Size: 0x8]
	AIController* AIOwner;//[Offset: 0xd8, Size: 0x8]
	delegate OnPerceptionUpdated;//[Offset: 0x160, Size: 0x10]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x170, Size: 0x10]
	delegate OnTargetPerceptionInfoUpdated;//[Offset: 0x180, Size: 0x10]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x368e58eb6041
	void RequestStimuliListenerUpdate();// 0x368d58eb6041
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x368c58eb6041
	void GetPerceivedHostileActorsBySense(const class AISense SenseToUse, out Actor*[] OutActors);// 0x368b58eb6041
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x368a58eb6041
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x368958eb6041
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x368858eb6041
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x368758eb6041
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x368658eb6041
	void ForgetAll();// 0x368558eb6041

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 0x4]
	float MaxAge;//[Offset: 0x2c, Size: 0x4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 0x4]
	enum NotifyType;//[Offset: 0x2c, Size: 0x1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 0x10]
	float PerceptionAgingRate;//[Offset: 0x98, Size: 0x4]
	void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x369758eb6041
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x369658eb6041
	bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x369558eb6041
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x369458eb6041
	class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x369358eb6041

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 0x4]
	float ExpirationAge;//[Offset: 0x4, Size: 0x4]
	float Strength;//[Offset: 0x8, Size: 0x4]
	Vector StimulusLocation;//[Offset: 0x10, Size: 0x18]
	Vector ReceiverLocation;//[Offset: 0x28, Size: 0x18]
	FName Tag;//[Offset: 0x40, Size: 0x8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 0x18]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 0x18]
	SoftClassPath EnvQueryManagerClassName;//[Offset: 0x88, Size: 0x18]
	float AcceptanceRadius;//[Offset: 0xa0, Size: 0x4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0xa4, Size: 0x4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0xa8, Size: 0x4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 0x1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 0x1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae, Size: 0x1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf, Size: 0x1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 0x1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 0x1]
	bool bAddBlackboardSelfKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3, Size: 0x1]
	bool bClearBBEntryOnBTEQSFail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	byte DefaultSightCollisionChannel;//[Offset: 0xb5, Size: 0x1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xb8, Size: 0x8]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xc0, Size: 0x8]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xc8, Size: 0x8]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xd0, Size: 0x10]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xe0, Size: 0x8]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xe8, Size: 0x8]
	void AILoggingVerbose();// 0x36a458eb6041
	void AIIgnorePlayers();// 0x36a358eb6041

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 0x4]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 0x10]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 0x8]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x128, Size: 0x10]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x278, Size: 0x8]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x36ae58eb6041
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x36ad58eb6041
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x36ac58eb6041

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 0x10]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 0x10]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 0x10]
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 0x4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 0x4]
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 0x8]
	double ExecutionTimeWarningSeconds;//[Offset: 0x140, Size: 0x8]
	double HandlingResultTimeWarningSeconds;//[Offset: 0x148, Size: 0x8]
	double GenerationTimeWarningSeconds;//[Offset: 0x150, Size: 0x8]
	EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x371358eb6041

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 0x8]
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 0x8]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 0x10]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 0x8]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x2c, Size: 0x4]
	byte TestPurpose;//[Offset: 0x30, Size: 0x1]
	FString TestComment;//[Offset: 0x38, Size: 0x10]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 0x1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 0x1]
	byte FilterType;//[Offset: 0x4a, Size: 0x1]
	AIDataProviderBoolValue BoolValue;//[Offset: 0x50, Size: 0x38]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 0x38]
	byte ScoringEquation;//[Offset: 0xf9, Size: 0x1]
	byte ClampMinType;//[Offset: 0xfa, Size: 0x1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 0x1]
	enum NormalizationType;//[Offset: 0xfc, Size: 0x1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 0x38]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 0x38]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 0x38]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 0x38]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	ClassPtrProperty PropertyType;//[Size: 0x8]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 0x8]
	FName DataField;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 0x4]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 0x8]
	int OptionIndex;//[Offset: 0x60, Size: 0x4]
	delegate OnQueryFinishedEvent;//[Offset: 0x68, Size: 0x10]
	void SetNamedParam(FName ParamName, float Value);// 0x139558eb6041
	Vector[] GetResultsAsLocations();// 0x139458eb6041
	Actor*[] GetResultsAsActors();// 0x139358eb6041
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x139258eb6041
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x139158eb6041
	float GetItemScore(int ItemIndex);// 0x138f58eb6041
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x138e58eb6041

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x371f58eb6041
	void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x371e58eb6041
	bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector Start, out const Vector End, out Vector[] PathPoints);// 0x371d58eb6041
	int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x431a8bd3d8eb6000
	int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x371b58eb6041
	int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x371a58eb6041
	int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x371958eb6041

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 0x10]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 0x8]
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 0x10]
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 0x10]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 0x8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x372658eb6041
	bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x372558eb6041
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x372458eb6041
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x372358eb6041

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 0x8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 0x8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 0x8]
	Object* Instigator;//[Offset: 0x40, Size: 0x8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 0x8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	byte GetActionPriority();// 0x372258eb6041
	void Finish(byte WithResult);// 0x372158eb6041
	PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x372058eb6041

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: AIDataProvider_QueryParams.AIDataProvider.Object
	FName ParamName;//[Offset: 0x28, Size: 0x8]
	float FloatValue;//[Offset: 0x30, Size: 0x4]
	int IntValue;//[Offset: 0x34, Size: 0x4]
	bool BoolValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: AIDataProvider_Random.AIDataProvider_QueryParams.AIDataProvider.Object
	float Min;//[Offset: 0x3c, Size: 0x4]
	float Max;//[Offset: 0x40, Size: 0x4]
	bool bInteger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 0x1]

--------------------------------
Class: AIPerceptionListenerInterface.Interface.Object

--------------------------------
Class: AIPerceptionStimuliSourceComponent.ActorComponent.Object
	bool bAutoRegisterAsSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	class AISense[] RegisterAsSourceForSenses;//[Offset: 0xb8, Size: 0x10]
	void UnregisterFromSense(class AISense SenseClass);// 0x369258eb6041
	void UnregisterFromPerceptionSystem();// 0x369158eb6041
	void RegisterWithPerceptionSystem();// 0x369058eb6041
	void RegisterForSense(class AISense SenseClass);// 0x368f58eb6041

--------------------------------
Class: AIResourceInterface.Interface.Object

--------------------------------
Class: AIResource_Movement.GameplayTaskResource.Object

--------------------------------
Class: AIResource_Logic.GameplayTaskResource.Object

--------------------------------
Class: AISenseBlueprintListener.UserDefinedStruct.ScriptStruct.Struct.Field.Object

--------------------------------
Class: AISenseConfig_Blueprint.AISenseConfig.Object
	class AISense_Blueprint* Implementation;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: AISense_Blueprint.AISense.Object
	class UserDefinedStruct* ListenerDataType;//[Offset: 0x78, Size: 0x8]
	AIPerceptionComponent*[] ListenerContainer;//[Offset: 0x80, Size: 0x10]
	AISenseEvent*[] UnprocessedEvents;//[Offset: 0x90, Size: 0x10]
	float OnUpdate(out const AISenseEvent*[] EventsToProcess);// 0x369e58eb6041
	void OnListenerUpdated(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x369d58eb6041
	void OnListenerUnregistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x369c58eb6041
	void OnListenerRegistered(Actor* ActorListener, AIPerceptionComponent* PerceptionComponent);// 0x369b58eb6041
	void K2_OnNewPawn(Pawn* NewPawn);// 0x369a58eb6041
	void GetAllListenerComponents(out AIPerceptionComponent*[] ListenerComponents);// 0x369958eb6041
	void GetAllListenerActors(out Actor*[] ListenerActors);// 0x36da58eb6041

--------------------------------
Class: AISenseConfig_Damage.AISenseConfig.Object
	class AISense_Damage* Implementation;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: AISense_Damage.AISense.Object
	AIDamageEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10]
	void ReportDamageEvent(Object* WorldContextObject, Actor* DamagedActor, Actor* Instigator, float DamageAmount, Vector EventLocation, Vector HitLocation, FName Tag);// 0x369f58eb6041

--------------------------------
Class: AIDamageEvent
	float Amount;//[Offset: 0x0, Size: 0x4]
	Vector Location;//[Offset: 0x8, Size: 0x18]
	Vector HitLocation;//[Offset: 0x20, Size: 0x18]
	Actor* DamagedActor;//[Offset: 0x38, Size: 0x8]
	Actor* Instigator;//[Offset: 0x40, Size: 0x8]
	FName Tag;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: AISenseConfig_Hearing.AISenseConfig.Object
	class AISense_Hearing* Implementation;//[Offset: 0x48, Size: 0x8]
	float HearingRange;//[Offset: 0x50, Size: 0x4]
	float LoSHearingRange;//[Offset: 0x54, Size: 0x4]
	bool bUseLoSHearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: AISense_Hearing.AISense.Object
	AINoiseEvent[] NoiseEvents;//[Offset: 0x78, Size: 0x10]
	float SpeedOfSoundSq;//[Offset: 0x88, Size: 0x4]
	void ReportNoiseEvent(Object* WorldContextObject, Vector NoiseLocation, float Loudness, Actor* Instigator, float MaxRange, FName Tag);// 0x36a058eb6041

--------------------------------
Class: AINoiseEvent
	Vector NoiseLocation;//[Offset: 0x8, Size: 0x18]
	float Loudness;//[Offset: 0x20, Size: 0x4]
	float MaxRange;//[Offset: 0x24, Size: 0x4]
	Actor* Instigator;//[Offset: 0x28, Size: 0x8]
	FName Tag;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: AISenseAffiliationFilter
	bool bDetectEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bDetectNeutrals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bDetectFriendlies;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: AISenseConfig_Prediction.AISenseConfig.Object

--------------------------------
Class: AISenseConfig_Sight.AISenseConfig.Object
	class AISense_Sight* Implementation;//[Offset: 0x48, Size: 0x8]
	float SightRadius;//[Offset: 0x50, Size: 0x4]
	float LoseSightRadius;//[Offset: 0x54, Size: 0x4]
	float PeripheralVisionAngleDegrees;//[Offset: 0x58, Size: 0x4]
	AISenseAffiliationFilter DetectionByAffiliation;//[Offset: 0x5c, Size: 0x4]
	float AutoSuccessRangeFromLastSeenLocation;//[Offset: 0x60, Size: 0x4]
	float PointOfViewBackwardOffset;//[Offset: 0x64, Size: 0x4]
	float NearClippingRadius;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: AISense_Sight.AISense.Object
	int MaxTracesPerTick;//[Offset: 0x140, Size: 0x4]
	int MinQueriesPerTimeSliceCheck;//[Offset: 0x144, Size: 0x4]
	double MaxTimeSlicePerTick;//[Offset: 0x148, Size: 0x8]
	float HighImportanceQueryDistanceThreshold;//[Offset: 0x150, Size: 0x4]
	float MaxQueryImportance;//[Offset: 0x158, Size: 0x4]
	float SightLimitQueryImportance;//[Offset: 0x15c, Size: 0x4]

--------------------------------
Class: AISenseConfig_Team.AISenseConfig.Object

--------------------------------
Class: AISenseConfig_Touch.AISenseConfig.Object

--------------------------------
Class: AISenseEvent_Damage.AISenseEvent.Object
	AIDamageEvent Event;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: AISenseEvent_Hearing.AISenseEvent.Object
	AINoiseEvent Event;//[Offset: 0x28, Size: 0x40]

--------------------------------
Class: AISense_Prediction.AISense.Object
	AIPredictionEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10]
	void RequestPawnPredictionEvent(Pawn* Requestor, Actor* PredictedActor, float PredictionTime);// 0x36a258eb6041
	void RequestControllerPredictionEvent(AIController* Requestor, Actor* PredictedActor, float PredictionTime);// 0x36a158eb6041

--------------------------------
Class: AIPredictionEvent
	Actor* Requestor;//[Offset: 0x0, Size: 0x8]
	Actor* PredictedActor;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AISense_Team.AISense.Object
	AITeamStimulusEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: AITeamStimulusEvent
	Actor* Broadcaster;//[Offset: 0x40, Size: 0x8]
	Actor* Enemy;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: AISense_Touch.AISense.Object
	AITouchEvent[] RegisteredEvents;//[Offset: 0x78, Size: 0x10]

--------------------------------
Class: AITouchEvent
	Actor* TouchReceiver;//[Offset: 0x18, Size: 0x8]
	Actor* OtherActor;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: AISightTargetInterface.Interface.Object

--------------------------------
Class: AITask.GameplayTask.Object
	AIController* OwnerController;//[Offset: 0x60, Size: 0x8]

--------------------------------
Class: AITask_LockLogic.AITask.GameplayTask.Object

--------------------------------
Class: AITask_MoveTo.AITask.GameplayTask.Object
	delegate OnRequestFailed;//[Offset: 0x68, Size: 0x10]
	delegate OnMoveFinished;//[Offset: 0x78, Size: 0x10]
	AIMoveRequest MoveRequest;//[Offset: 0x88, Size: 0x48]
	AITask_MoveTo* AIMoveTo(AIController* Controller, Vector GoalLocation, Actor* GoalActor, float AcceptanceRadius, byte StopOnOverlap, byte AcceptPartialPath, bool bUsePathfinding, bool bLockAILogic, bool bUseContinuosGoalTracking, byte ProjectGoalOnNavigation);// 0x36a558eb6041

--------------------------------
Class: AIMoveRequest
	Actor* GoalActor;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AITask_RunEQS.AITask.GameplayTask.Object
	AITask_RunEQS* RunEQS(AIController* Controller, EnvQuery* QueryTemplate);// 0x36a658eb6041

--------------------------------
Class: BehaviorTreeTypes.Object

--------------------------------
Class: BlackboardAssetProvider.Interface.Object
	BlackboardData* GetBlackboardAsset();// 0x36af58eb6041

--------------------------------
Class: BlackboardKeyType_Bool.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Class.BlackboardKeyType.Object
	ClassPtrProperty BaseClass;//[Size: 0x8]

--------------------------------
Class: BlackboardKeyType_Enum.BlackboardKeyType.Object
	Enum* EnumType;//[Offset: 0x30, Size: 0x8]
	FString EnumName;//[Offset: 0x38, Size: 0x10]
	bool bIsEnumNameValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: BlackboardKeyType_Float.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Int.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Name.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_NativeEnum.BlackboardKeyType.Object
	FString EnumName;//[Offset: 0x30, Size: 0x10]
	Enum* EnumType;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: BlackboardKeyType_Object.BlackboardKeyType.Object
	ClassPtrProperty BaseClass;//[Size: 0x8]

--------------------------------
Class: BlackboardKeyType_Rotator.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_String.BlackboardKeyType.Object
	FString StringValue;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: BlackboardKeyType_Vector.BlackboardKeyType.Object

--------------------------------
Class: BTComposite_Selector.BTCompositeNode.BTNode.Object

--------------------------------
Class: BTComposite_Sequence.BTCompositeNode.BTNode.Object

--------------------------------
Class: BTComposite_SimpleParallel.BTCompositeNode.BTNode.Object
	byte FinishMode;//[Offset: 0x8c, Size: 0x1]

--------------------------------
Class: BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x60, Size: 0x28]

--------------------------------
Class: BlackboardKeySelector
	BlackboardKeyType*[] AllowedTypes;//[Offset: 0x0, Size: 0x10]
	FName SelectedKeyName;//[Offset: 0x10, Size: 0x8]
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x18, Size: 0x8]
	byte SelectedKeyID;//[Offset: 0x20, Size: 0x1]
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 0x1]

--------------------------------
Class: BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int IntValue;//[Offset: 0x88, Size: 0x4]
	float FloatValue;//[Offset: 0x8c, Size: 0x4]
	FString StringValue;//[Offset: 0x90, Size: 0x10]
	FString CachedDescription;//[Offset: 0xa0, Size: 0x10]
	byte OperationType;//[Offset: 0xb0, Size: 0x1]
	byte NotifyObserver;//[Offset: 0xb1, Size: 0x1]

--------------------------------
Class: BTDecorator_BlueprintBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x60, Size: 0x8]
	Actor* ActorOwner;//[Offset: 0x68, Size: 0x8]
	FName[] ObservedKeyNames;//[Offset: 0x70, Size: 0x10]
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	bool bCheckConditionOnlyBlackBoardChanges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 0x1]
	bool bIsObservingBB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 0x1]
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x36d558eb6041
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x36d458eb6041
	void ReceiveObserverDeactivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x36d358eb6041
	void ReceiveObserverDeactivated(Actor* OwnerActor);// 0x36d258eb6041
	void ReceiveObserverActivatedAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x36d158eb6041
	void ReceiveObserverActivated(Actor* OwnerActor);// 0x36d058eb6041
	void ReceiveExecutionStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x36cf58eb6041
	void ReceiveExecutionStart(Actor* OwnerActor);// 0x36ce58eb6041
	void ReceiveExecutionFinishAI(AIController* OwnerController, Pawn* ControlledPawn, byte NodeResult);// 0x36cd58eb6041
	void ReceiveExecutionFinish(Actor* OwnerActor, byte NodeResult);// 0x36cc58eb6041
	bool PerformConditionCheckAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x36cb58eb6041
	bool PerformConditionCheck(Actor* OwnerActor);// 0x36ca58eb6041
	bool IsDecoratorObserverActive();// 0x36c958eb6041
	bool IsDecoratorExecutionActive();// 0x36c858eb6041

--------------------------------
Class: BTDecorator_CheckGameplayTagsOnActor.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector ActorToCheck;//[Offset: 0x60, Size: 0x28]
	enum TagsToMatch;//[Offset: 0x88, Size: 0x1]
	GameplayTagContainer GameplayTags;//[Offset: 0x90, Size: 0x20]
	FString CachedDescription;//[Offset: 0xb0, Size: 0x10]

--------------------------------
Class: BTDecorator_CompareBBEntries.BTDecorator.BTAuxiliaryNode.BTNode.Object
	byte Operator;//[Offset: 0x5a, Size: 0x1]
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x60, Size: 0x28]
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x88, Size: 0x28]

--------------------------------
Class: BTDecorator_ConditionalLoop.BTDecorator_Blackboard.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_ConeCheck.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ConeHalfAngle;//[Offset: 0x5c, Size: 0x4]
	BlackboardKeySelector ConeOrigin;//[Offset: 0x60, Size: 0x28]
	BlackboardKeySelector ConeDirection;//[Offset: 0x88, Size: 0x28]
	BlackboardKeySelector Observed;//[Offset: 0xb0, Size: 0x28]

--------------------------------
Class: BTDecorator_Cooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float CoolDownTime;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: BTDecorator_DoesPathExist.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKeyA;//[Offset: 0x60, Size: 0x28]
	BlackboardKeySelector BlackboardKeyB;//[Offset: 0x88, Size: 0x28]
	bool bUseSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	byte PathQueryType;//[Offset: 0xb1, Size: 0x1]
	class NavigationQueryFilter* FilterClass;//[Offset: 0xb8, Size: 0x8]

--------------------------------
Class: BTDecorator_ForceSuccess.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_IsAtLocation.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x88, Size: 0x4]
	AIDataProviderFloatValue ParametrizedAcceptableRadius;//[Offset: 0x90, Size: 0x38]
	enum GeometricDistanceType;//[Offset: 0xc8, Size: 0x1]
	bool bUseParametrizedRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc9, Size: 0x1]
	bool bUseNavAgentGoalLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc9, Size: 0x1]
	bool bPathFindingBasedTest;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc9, Size: 0x1]

--------------------------------
Class: BTDecorator_IsBBEntryOfClass.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	class Object* TestClass;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: BTDecorator_KeepInCone.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ConeHalfAngle;//[Offset: 0x5c, Size: 0x4]
	BlackboardKeySelector ConeOrigin;//[Offset: 0x60, Size: 0x28]
	BlackboardKeySelector Observed;//[Offset: 0x88, Size: 0x28]
	bool bUseSelfAsOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	bool bUseSelfAsObserved;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 0x1]

--------------------------------
Class: BTDecorator_Loop.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int NumLoops;//[Offset: 0x5c, Size: 0x4]
	bool bInfiniteLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	float InfiniteLoopTimeoutTime;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: BTDecorator_ReachedMoveGoal.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_SetTagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x5c, Size: 0x8]
	float CooldownDuration;//[Offset: 0x64, Size: 0x4]
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: BTDecorator_TagCooldown.BTDecorator.BTAuxiliaryNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x5c, Size: 0x8]
	float CooldownDuration;//[Offset: 0x64, Size: 0x4]
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	bool bActivatesCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 0x1]

--------------------------------
Class: BTDecorator_TimeLimit.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float TimeLimit;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: BTFunctionLibrary.BlueprintFunctionLibrary.Object
	void StopUsingExternalEvent(BTNode* NodeOwner);// 0x36f058eb6041
	void StartUsingExternalEvent(BTNode* NodeOwner, Actor* OwningActor);// 0x36ef58eb6041
	void SetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key, Vector Value);// 0x36ee58eb6041
	void SetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key, FString Value);// 0x36ed58eb6041
	void SetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key, Rotator Value);// 0x36ec58eb6041
	void SetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key, Object* Value);// 0x36eb58eb6041
	void SetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key, FName Value);// 0x36ea58eb6041
	void SetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key, int Value);// 0x36e958eb6041
	void SetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key, float Value);// 0x36e858eb6041
	void SetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key, byte Value);// 0x36e758eb6041
	void SetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key, class Object Value);// 0x36e658eb6041
	void SetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key, bool Value);// 0x36e558eb6041
	BlackboardComponent* GetOwnersBlackboard(BTNode* NodeOwner);// 0x36e458eb6041
	BehaviorTreeComponent* GetOwnerComponent(BTNode* NodeOwner);// 0x36e358eb6041
	Vector GetBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36e258eb6041
	FString GetBlackboardValueAsString(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36e158eb6041
	Rotator GetBlackboardValueAsRotator(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36e058eb6041
	Object* GetBlackboardValueAsObject(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36df58eb6041
	FName GetBlackboardValueAsName(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36de58eb6041
	int GetBlackboardValueAsInt(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36dd58eb6041
	float GetBlackboardValueAsFloat(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36dc58eb6041
	byte GetBlackboardValueAsEnum(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36db58eb6041
	class Object GetBlackboardValueAsClass(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x371c58eb6041
	bool GetBlackboardValueAsBool(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36d958eb6041
	Actor* GetBlackboardValueAsActor(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36d858eb6041
	void ClearBlackboardValueAsVector(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36d758eb6041
	void ClearBlackboardValue(BTNode* NodeOwner, out const BlackboardKeySelector Key);// 0x36d658eb6041

--------------------------------
Class: BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x68, Size: 0x28]

--------------------------------
Class: BTService_BlueprintBase.BTService.BTAuxiliaryNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x68, Size: 0x8]
	Actor* ActorOwner;//[Offset: 0x70, Size: 0x8]
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 0x1]
	bool bShowEventDetails;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 0x1]
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x36f958eb6041
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x36f858eb6041
	void ReceiveSearchStartAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x36f758eb6041
	void ReceiveSearchStart(Actor* OwnerActor);// 0x36f658eb6041
	void ReceiveDeactivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x36f558eb6041
	void ReceiveDeactivation(Actor* OwnerActor);// 0x36f458eb6041
	void ReceiveActivationAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x36f358eb6041
	void ReceiveActivation(Actor* OwnerActor);// 0x36f258eb6041
	bool IsServiceActive();// 0x36f158eb6041

--------------------------------
Class: BTService_DefaultFocus.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	byte FocusPriority;//[Offset: 0x90, Size: 0x1]

--------------------------------
Class: BTService_RunEQS.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	EQSParametrizedQueryExecutionRequest EQSRequest;//[Offset: 0x90, Size: 0x48]
	bool bUpdateBBOnFail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 0x1]

--------------------------------
Class: EQSParametrizedQueryExecutionRequest
	EnvQuery* QueryTemplate;//[Offset: 0x0, Size: 0x8]
	AIDynamicParam[] QueryConfig;//[Offset: 0x8, Size: 0x10]
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0x18, Size: 0x28]
	byte RunMode;//[Offset: 0x40, Size: 0x1]
	bool bUseBBKeyForQueryTemplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 0x1]

--------------------------------
Class: AIDynamicParam
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	enum ParamType;//[Offset: 0x8, Size: 0x1]
	float Value;//[Offset: 0xc, Size: 0x4]
	BlackboardKeySelector BBKey;//[Offset: 0x10, Size: 0x28]

--------------------------------
Class: BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x70, Size: 0x28]

--------------------------------
Class: BTTask_BlueprintBase.BTTaskNode.BTNode.Object
	AIController* AIOwner;//[Offset: 0x70, Size: 0x8]
	Actor* ActorOwner;//[Offset: 0x78, Size: 0x8]
	IntervalCountdown TickInterval;//[Offset: 0x80, Size: 0x8]
	bool bShowPropertyDetails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	void SetFinishOnMessageWithId(FName MessageName, int RequestID);// 0x370558eb6041
	void SetFinishOnMessage(FName MessageName);// 0x370458eb6041
	void ReceiveTickAI(AIController* OwnerController, Pawn* ControlledPawn, float DeltaSeconds);// 0x370358eb6041
	void ReceiveTick(Actor* OwnerActor, float DeltaSeconds);// 0x370258eb6041
	void ReceiveExecuteAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x370158eb6041
	void ReceiveExecute(Actor* OwnerActor);// 0x370058eb6041
	void ReceiveAbortAI(AIController* OwnerController, Pawn* ControlledPawn);// 0x36ff58eb6041
	void ReceiveAbort(Actor* OwnerActor);// 0x36fe58eb6041
	bool IsTaskExecuting();// 0x36fd58eb6041
	bool IsTaskAborting();// 0x36fc58eb6041
	void FinishExecute(bool bSuccess);// 0x373d58eb6041
	void FinishAbort();// 0x36fa58eb6041

--------------------------------
Class: IntervalCountdown
	float Interval;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: BTTask_FinishWithResult.BTTaskNode.BTNode.Object
	byte Result;//[Offset: 0x69, Size: 0x1]

--------------------------------
Class: BTTask_GameplayTaskBase.BTTaskNode.BTNode.Object
	bool bWaitForGameplayTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 0x1]

--------------------------------
Class: BTTask_MakeNoise.BTTaskNode.BTNode.Object
	float Loudnes;//[Offset: 0x6c, Size: 0x4]

--------------------------------
Class: BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x98, Size: 0x4]
	class NavigationQueryFilter* FilterClass;//[Offset: 0xa0, Size: 0x8]
	float ObservedBlackboardValueTolerance;//[Offset: 0xa8, Size: 0x4]
	bool bObserveBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1]
	bool bTrackMovingGoal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xac, Size: 0x1]
	bool bProjectGoalLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xac, Size: 0x1]
	bool bReachTestIncludesAgentRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xac, Size: 0x1]
	bool bReachTestIncludesGoalRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xac, Size: 0x1]
	bool bStopOnOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xac, Size: 0x1]
	bool bStopOnOverlapNeedsUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xad, Size: 0x1]

--------------------------------
Class: BTTask_MoveDirectlyToward.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	bool bDisablePathUpdateOnGoalLocationChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xae, Size: 0x1]
	bool bProjectVectorGoalToNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xae, Size: 0x1]
	bool bUpdatedDeprecatedProperties;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xae, Size: 0x1]

--------------------------------
Class: BTTask_PawnActionBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTask_PlayAnimation.BTTaskNode.BTNode.Object
	AnimationAsset* AnimationToPlay;//[Offset: 0x70, Size: 0x8]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 0x1]
	bool bNonBlocking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 0x1]
	BehaviorTreeComponent* MyOwnerComp;//[Offset: 0x80, Size: 0x8]
	SkeletalMeshComponent* CachedSkelMesh;//[Offset: 0x88, Size: 0x8]

--------------------------------
Class: BTTask_PlaySound.BTTaskNode.BTNode.Object
	SoundCue* SoundToPlay;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: BTTask_PushPawnAction.BTTask_PawnActionBase.BTTaskNode.BTNode.Object
	PawnAction* Action;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: BTTask_RotateToFaceBBEntry.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float Precision;//[Offset: 0x98, Size: 0x4]

--------------------------------
Class: BTTask_RunBehavior.BTTaskNode.BTNode.Object
	BehaviorTree* BehaviorAsset;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: BTTask_RunBehaviorDynamic.BTTaskNode.BTNode.Object
	GameplayTag InjectionTag;//[Offset: 0x6c, Size: 0x8]
	BehaviorTree* DefaultBehaviorAsset;//[Offset: 0x78, Size: 0x8]
	BehaviorTree* BehaviorAsset;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: BTTask_RunEQSQuery.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	EnvQuery* QueryTemplate;//[Offset: 0x98, Size: 0x8]
	EnvNamedValue[] QueryParams;//[Offset: 0xa0, Size: 0x10]
	AIDynamicParam[] QueryConfig;//[Offset: 0xb0, Size: 0x10]
	byte RunMode;//[Offset: 0xc0, Size: 0x1]
	BlackboardKeySelector EQSQueryBlackboardKey;//[Offset: 0xc8, Size: 0x28]
	bool bUseBBKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	EQSParametrizedQueryExecutionRequest EQSRequest;//[Offset: 0xf8, Size: 0x48]
	bool bUpdateBBOnFail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]

--------------------------------
Class: EnvNamedValue
	FName ParamName;//[Offset: 0x0, Size: 0x8]
	enum ParamType;//[Offset: 0x8, Size: 0x1]
	float Value;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BTTask_SetTagCooldown.BTTaskNode.BTNode.Object
	GameplayTag CooldownTag;//[Offset: 0x6c, Size: 0x8]
	bool bAddToExistingDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	float CooldownDuration;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: BTTask_Wait.BTTaskNode.BTNode.Object
	float WaitTime;//[Offset: 0x6c, Size: 0x4]
	float RandomDeviation;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: BTTask_WaitBlackboardTime.BTTask_Wait.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x78, Size: 0x28]

--------------------------------
Class: CrowdAgentInterface.Interface.Object

--------------------------------
Class: CrowdFollowingComponent.PathFollowingComponent.ActorComponent.Object
	Vector CrowdAgentMoveDirection;//[Offset: 0x2e0, Size: 0x18]
	void SuspendCrowdSteering(bool bSuspend);// 0x370a58eb6041

--------------------------------
Class: CrowdManager.CrowdManagerBase.Object
	NavigationData* MyNavData;//[Offset: 0x28, Size: 0x8]
	CrowdAvoidanceConfig[] AvoidanceConfig;//[Offset: 0x30, Size: 0x10]
	CrowdAvoidanceSamplingPattern[] SamplingPatterns;//[Offset: 0x40, Size: 0x10]
	int MaxAgents;//[Offset: 0x50, Size: 0x4]
	float MaxAgentRadius;//[Offset: 0x54, Size: 0x4]
	int MaxAvoidedAgents;//[Offset: 0x58, Size: 0x4]
	int MaxAvoidedWalls;//[Offset: 0x5c, Size: 0x4]
	float NavmeshCheckInterval;//[Offset: 0x60, Size: 0x4]
	float PathOptimizationInterval;//[Offset: 0x64, Size: 0x4]
	float SeparationDirClamp;//[Offset: 0x68, Size: 0x4]
	float PathOffsetRadiusMultiplier;//[Offset: 0x6c, Size: 0x4]
	bool bResolveCollisions;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x70, Size: 0x1]

--------------------------------
Class: CrowdAvoidanceConfig
	float VelocityBias;//[Offset: 0x0, Size: 0x4]
	float DesiredVelocityWeight;//[Offset: 0x4, Size: 0x4]
	float CurrentVelocityWeight;//[Offset: 0x8, Size: 0x4]
	float SideBiasWeight;//[Offset: 0xc, Size: 0x4]
	float ImpactTimeWeight;//[Offset: 0x10, Size: 0x4]
	float ImpactTimeRange;//[Offset: 0x14, Size: 0x4]
	byte CustomPatternIdx;//[Offset: 0x18, Size: 0x1]
	byte AdaptiveDivisions;//[Offset: 0x19, Size: 0x1]
	byte AdaptiveRings;//[Offset: 0x1a, Size: 0x1]
	byte AdaptiveDepth;//[Offset: 0x1b, Size: 0x1]

--------------------------------
Class: CrowdAvoidanceSamplingPattern
	float[] Angles;//[Offset: 0x0, Size: 0x10]
	float[] Radii;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: DetourCrowdAIController.AIController.Controller.Actor.Object

--------------------------------
Class: EnvQueryContext_BlueprintBase.EnvQueryContext.Object
	void ProvideSingleLocation(Object* QuerierObject, Actor* QuerierActor, out Vector ResultingLocation);// 0x370e58eb6041
	void ProvideSingleActor(Object* QuerierObject, Actor* QuerierActor, out Actor* ResultingActor);// 0x370d58eb6041
	void ProvideLocationsSet(Object* QuerierObject, Actor* QuerierActor, out Vector[] ResultingLocationSet);// 0x370c58eb6041
	void ProvideActorsSet(Object* QuerierObject, Actor* QuerierActor, out Actor*[] ResultingActorsSet);// 0x370b58eb6041

--------------------------------
Class: EnvQueryContext_Item.EnvQueryContext.Object

--------------------------------
Class: EnvQueryContext_Querier.EnvQueryContext.Object

--------------------------------
Class: EnvQueryDebugHelpers.Object

--------------------------------
Class: EnvQueryGenerator_ActorsOfClass.EnvQueryGenerator.EnvQueryNode.Object
	class Actor* SearchedActorClass;//[Offset: 0x50, Size: 0x8]
	AIDataProviderBoolValue GenerateOnlyActorsInRadius;//[Offset: 0x58, Size: 0x38]
	AIDataProviderFloatValue SearchRadius;//[Offset: 0x90, Size: 0x38]
	class EnvQueryContext* SearchCenter;//[Offset: 0xc8, Size: 0x8]

--------------------------------
Class: EnvQueryGenerator_BlueprintBase.EnvQueryGenerator.EnvQueryNode.Object
	FText GeneratorsActionDescription;//[Offset: 0x50, Size: 0x18]
	class EnvQueryContext* Context;//[Offset: 0x68, Size: 0x8]
	class EnvQueryItemType* GeneratedItemType;//[Offset: 0x70, Size: 0x8]
	Object* GetQuerier();// 0x371258eb6041
	void DoItemGeneration(out const Vector[] ContextLocations);// 0x371158eb6041
	void AddGeneratedVector(Vector GeneratedVector);// 0x371058eb6041
	void AddGeneratedActor(Actor* GeneratedActor);// 0x370f58eb6041

--------------------------------
Class: EnvQueryGenerator_Composite.EnvQueryGenerator.EnvQueryNode.Object
	EnvQueryGenerator*[] Generators;//[Offset: 0x50, Size: 0x10]
	bool bAllowDifferentItemTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bHasMatchingItemType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	class EnvQueryItemType* ForcedItemType;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	EnvTraceData ProjectionData;//[Offset: 0x50, Size: 0x38]

--------------------------------
Class: EnvTraceData
	int VersionNum;//[Offset: 0x0, Size: 0x4]
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x8, Size: 0x8]
	float ProjectDown;//[Offset: 0x10, Size: 0x4]
	float ProjectUp;//[Offset: 0x14, Size: 0x4]
	float ExtentX;//[Offset: 0x18, Size: 0x4]
	float ExtentY;//[Offset: 0x1c, Size: 0x4]
	float ExtentZ;//[Offset: 0x20, Size: 0x4]
	float PostProjectionVerticalOffset;//[Offset: 0x24, Size: 0x4]
	byte TraceChannel;//[Offset: 0x28, Size: 0x1]
	byte SerializedChannel;//[Offset: 0x29, Size: 0x1]
	FName TraceProfileName;//[Offset: 0x2c, Size: 0x8]
	byte TraceShape;//[Offset: 0x34, Size: 0x1]
	byte TraceMode;//[Offset: 0x35, Size: 0x1]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x36, Size: 0x1]
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x36, Size: 0x1]
	bool bCanTraceOnNavMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x36, Size: 0x1]
	bool bCanTraceOnGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x36, Size: 0x1]
	bool bCanDisableTrace;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x36, Size: 0x1]
	bool bCanProjectDown;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x36, Size: 0x1]

--------------------------------
Class: EnvQueryGenerator_Cone.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue AlignedPointsDistance;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue ConeDegrees;//[Offset: 0xc0, Size: 0x38]
	AIDataProviderFloatValue AngleStep;//[Offset: 0xf8, Size: 0x38]
	AIDataProviderFloatValue Range;//[Offset: 0x130, Size: 0x38]
	class EnvQueryContext* CenterActor;//[Offset: 0x168, Size: 0x8]
	bool bIncludeContextLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1]

--------------------------------
Class: EnvQueryGenerator_CurrentLocation.EnvQueryGenerator.EnvQueryNode.Object
	class EnvQueryContext* QueryContext;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: EnvQueryGenerator_Donut.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue InnerRadius;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue OuterRadius;//[Offset: 0xc0, Size: 0x38]
	AIDataProviderIntValue NumberOfRings;//[Offset: 0xf8, Size: 0x38]
	AIDataProviderIntValue PointsPerRing;//[Offset: 0x130, Size: 0x38]
	EnvDirection ArcDirection;//[Offset: 0x168, Size: 0x20]
	AIDataProviderFloatValue ArcAngle;//[Offset: 0x188, Size: 0x38]
	bool bUseSpiralPattern;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 0x1]
	class EnvQueryContext* Center;//[Offset: 0x1c8, Size: 0x8]
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d0, Size: 0x1]

--------------------------------
Class: AIDataProviderIntValue.AIDataProviderTypedValue.AIDataProviderValue
	int DefaultValue;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: EnvDirection
	class EnvQueryContext* LineFrom;//[Offset: 0x0, Size: 0x8]
	class EnvQueryContext* LineTo;//[Offset: 0x8, Size: 0x8]
	class EnvQueryContext* Rotation;//[Offset: 0x10, Size: 0x8]
	byte DirMode;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: EnvQueryGenerator_OnCircle.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue CircleRadius;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0xc0, Size: 0x38]
	AIDataProviderIntValue NumberOfPoints;//[Offset: 0xf8, Size: 0x38]
	enum PointOnCircleSpacingMethod;//[Offset: 0x130, Size: 0x1]
	EnvDirection ArcDirection;//[Offset: 0x138, Size: 0x20]
	AIDataProviderFloatValue ArcAngle;//[Offset: 0x158, Size: 0x38]
	float AngleRadians;//[Offset: 0x190, Size: 0x4]
	class EnvQueryContext* CircleCenter;//[Offset: 0x198, Size: 0x8]
	bool bIgnoreAnyContextActorsWhenGeneratingCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 0x1]
	AIDataProviderFloatValue CircleCenterZOffset;//[Offset: 0x1a8, Size: 0x38]
	EnvTraceData TraceData;//[Offset: 0x1e0, Size: 0x38]
	bool bDefineArc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 0x1]

--------------------------------
Class: EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderFloatValue GridSize;//[Offset: 0x88, Size: 0x38]
	AIDataProviderFloatValue SpaceBetween;//[Offset: 0xc0, Size: 0x38]
	class EnvQueryContext* GenerateAround;//[Offset: 0xf8, Size: 0x8]

--------------------------------
Class: EnvQueryGenerator_PathingGrid.EnvQueryGenerator_SimpleGrid.EnvQueryGenerator_ProjectedPoints.EnvQueryGenerator.EnvQueryNode.Object
	AIDataProviderBoolValue PathToItem;//[Offset: 0x100, Size: 0x38]
	class NavigationQueryFilter* NavigationFilter;//[Offset: 0x138, Size: 0x8]
	AIDataProviderFloatValue ScanRangeMultiplier;//[Offset: 0x140, Size: 0x38]

--------------------------------
Class: EnvQueryGenerator_PerceivedActors.EnvQueryGenerator.EnvQueryNode.Object
	class Actor* AllowedActorClass;//[Offset: 0x50, Size: 0x8]
	AIDataProviderFloatValue SearchRadius;//[Offset: 0x58, Size: 0x38]
	class EnvQueryContext* ListenerContext;//[Offset: 0x90, Size: 0x8]
	class AISense* SenseToUse;//[Offset: 0x98, Size: 0x8]
	bool bIncludeKnownActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Actor.EnvQueryItemType_ActorBase.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Direction.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryItemType_Point.EnvQueryItemType_VectorBase.EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest_Distance.EnvQueryTest.EnvQueryNode.Object
	byte TestMode;//[Offset: 0x1f1, Size: 0x1]
	class EnvQueryContext* DistanceTo;//[Offset: 0x1f8, Size: 0x8]

--------------------------------
Class: EnvQueryTest_Dot.EnvQueryTest.EnvQueryNode.Object
	EnvDirection LineA;//[Offset: 0x1f8, Size: 0x20]
	EnvDirection LineB;//[Offset: 0x218, Size: 0x20]
	enum TestMode;//[Offset: 0x238, Size: 0x1]
	bool bAbsoluteValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x239, Size: 0x1]

--------------------------------
Class: EnvQueryTest_GameplayTags.EnvQueryTest.EnvQueryNode.Object
	GameplayTagQuery TagQueryToMatch;//[Offset: 0x1f8, Size: 0x48]
	bool bRejectIncompatibleItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	bool bUpdatedToUseQuery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 0x1]
	enum TagsToMatch;//[Offset: 0x242, Size: 0x1]
	GameplayTagContainer GameplayTags;//[Offset: 0x248, Size: 0x20]

--------------------------------
Class: EnvQueryTest_Overlap.EnvQueryTest.EnvQueryNode.Object
	EnvOverlapData OverlapData;//[Offset: 0x1f8, Size: 0x30]

--------------------------------
Class: EnvOverlapData
	float ExtentX;//[Offset: 0x0, Size: 0x4]
	float ExtentY;//[Offset: 0x4, Size: 0x4]
	float ExtentZ;//[Offset: 0x8, Size: 0x4]
	Vector ShapeOffset;//[Offset: 0x10, Size: 0x18]
	byte OverlapChannel;//[Offset: 0x28, Size: 0x1]
	byte OverlapShape;//[Offset: 0x29, Size: 0x1]
	bool bOnlyBlockingHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a, Size: 0x1]
	bool bOverlapComplex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a, Size: 0x1]
	bool bSkipOverlapQuerier;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object
	byte TestMode;//[Offset: 0x1f1, Size: 0x1]
	class EnvQueryContext* Context;//[Offset: 0x1f8, Size: 0x8]
	AIDataProviderBoolValue PathFromContext;//[Offset: 0x200, Size: 0x38]
	AIDataProviderBoolValue SkipUnreachable;//[Offset: 0x238, Size: 0x38]
	class NavigationQueryFilter* FilterClass;//[Offset: 0x270, Size: 0x8]

--------------------------------
Class: EnvQueryTest_PathfindingBatch.EnvQueryTest_Pathfinding.EnvQueryTest.EnvQueryNode.Object
	AIDataProviderFloatValue ScanRangeMultiplier;//[Offset: 0x278, Size: 0x38]

--------------------------------
Class: EnvQueryTest_Project.EnvQueryTest.EnvQueryNode.Object
	EnvTraceData ProjectionData;//[Offset: 0x1f8, Size: 0x38]

--------------------------------
Class: EnvQueryTest_Random.EnvQueryTest.EnvQueryNode.Object

--------------------------------
Class: EnvQueryTest_Trace.EnvQueryTest.EnvQueryNode.Object
	EnvTraceData TraceData;//[Offset: 0x1f8, Size: 0x38]
	AIDataProviderBoolValue TraceFromContext;//[Offset: 0x230, Size: 0x38]
	AIDataProviderFloatValue ItemHeightOffset;//[Offset: 0x268, Size: 0x38]
	AIDataProviderFloatValue ContextHeightOffset;//[Offset: 0x2a0, Size: 0x38]
	class EnvQueryContext* Context;//[Offset: 0x2d8, Size: 0x8]

--------------------------------
Class: EnvQueryTest_Volume.EnvQueryTest.EnvQueryNode.Object
	class EnvQueryContext* VolumeContext;//[Offset: 0x1f8, Size: 0x8]
	class Volume* VolumeClass;//[Offset: 0x200, Size: 0x8]
	bool bDoComplexVolumeTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1]

--------------------------------
Class: EnvQueryTypes.Object

--------------------------------
Class: EQSQueryResultSourceInterface.Interface.Object

--------------------------------
Class: EQSRenderingComponent.DebugDrawComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: EQSTestingPawn.Character.Pawn.Actor.Object
	EnvQuery* QueryTemplate;//[Offset: 0x600, Size: 0x8]
	EnvNamedValue[] QueryParams;//[Offset: 0x608, Size: 0x10]
	AIDynamicParam[] QueryConfig;//[Offset: 0x618, Size: 0x10]
	float TimeLimitPerStep;//[Offset: 0x628, Size: 0x4]
	int StepToDebugDraw;//[Offset: 0x62c, Size: 0x4]
	enum HighlightMode;//[Offset: 0x630, Size: 0x1]
	bool bDrawLabels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x631, Size: 0x1]
	bool bDrawFailedItems;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x631, Size: 0x1]
	bool bReRunQueryOnlyOnFinishedMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x631, Size: 0x1]
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x631, Size: 0x1]
	bool bTickDuringGame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x631, Size: 0x1]
	byte QueryingMode;//[Offset: 0x632, Size: 0x1]
	NavAgentProperties NavAgentProperties;//[Offset: 0x638, Size: 0x30]

--------------------------------
Class: GenericTeamAgentInterface.Interface.Object

--------------------------------
Class: GridPathAIController.AIController.Controller.Actor.Object

--------------------------------
Class: GridPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	NavLocalGridManager* GridManager;//[Offset: 0x2c8, Size: 0x8]

--------------------------------
Class: NavFilter_AIControllerDefault.NavigationQueryFilter.Object

--------------------------------
Class: NavLinkProxy.Actor.Object
	NavigationLink[] PointLinks;//[Offset: 0x288, Size: 0x10]
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x298, Size: 0x10]
	NavLinkCustomComponent* SmartLinkComp;//[Offset: 0x2a8, Size: 0x8]
	bool bSmartLinkIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	delegate OnSmartLinkReached;//[Offset: 0x2b8, Size: 0x10]
	void SetSmartLinkEnabled(bool bEnabled);// 0x371858eb6041
	void ResumePathFollowing(Actor* Agent);// 0x371758eb6041
	void ReceiveSmartLinkReached(Actor* Agent, out const Vector Destination);// 0x371658eb6041
	bool IsSmartLinkEnabled();// 0x371558eb6041
	bool HasMovingAgents();// 0x371458eb6041

--------------------------------
Class: PathFollowingManager.Object

--------------------------------
Class: PawnAction_BlueprintBase.PawnAction.Object
	void ActionTick(Pawn* ControlledPawn, float DeltaSeconds);// 0x372b58eb6041
	void ActionStart(Pawn* ControlledPawn);// 0x372a58eb6041
	void ActionResume(Pawn* ControlledPawn);// 0x372958eb6041
	void ActionPause(Pawn* ControlledPawn);// 0x372858eb6041
	void ActionFinished(Pawn* ControlledPawn, byte WithResult);// 0x372758eb6041

--------------------------------
Class: PawnAction_Move.PawnAction.Object
	Actor* GoalActor;//[Offset: 0x90, Size: 0x8]
	Vector GoalLocation;//[Offset: 0x98, Size: 0x18]
	float AcceptableRadius;//[Offset: 0xb0, Size: 0x4]
	class NavigationQueryFilter* FilterClass;//[Offset: 0xb8, Size: 0x8]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bFinishOnOverlap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bUsePathfinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bProjectGoalToNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bUpdatePathToGoal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	bool bAbortChildActionOnPathChange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc0, Size: 0x1]

--------------------------------
Class: PawnAction_Repeat.PawnAction.Object
	PawnAction* ActionToRepeat;//[Offset: 0x90, Size: 0x8]
	PawnAction* RecentActionCopy;//[Offset: 0x98, Size: 0x8]
	byte ChildFailureHandlingMode;//[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: PawnAction_Sequence.PawnAction.Object
	PawnAction*[] ActionSequence;//[Offset: 0x90, Size: 0x10]
	byte ChildFailureHandlingMode;//[Offset: 0xa0, Size: 0x1]
	PawnAction* RecentActionCopy;//[Offset: 0xa8, Size: 0x8]

--------------------------------
Class: PawnAction_Wait.PawnAction.Object
	float TimeToWait;//[Offset: 0x90, Size: 0x4]

--------------------------------
Class: PawnSensingComponent.ActorComponent.Object
	float HearingThreshold;//[Offset: 0xb0, Size: 0x4]
	float LOSHearingThreshold;//[Offset: 0xb4, Size: 0x4]
	float SightRadius;//[Offset: 0xb8, Size: 0x4]
	float SensingInterval;//[Offset: 0xbc, Size: 0x4]
	float HearingMaxSoundAge;//[Offset: 0xc0, Size: 0x4]
	bool bEnableSensingUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1]
	bool bOnlySensePlayers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 0x1]
	bool bSeePawns;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc4, Size: 0x1]
	bool bHearNoises;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc4, Size: 0x1]
	delegate OnSeePawn;//[Offset: 0xd0, Size: 0x10]
	delegate OnHearNoise;//[Offset: 0xe0, Size: 0x10]
	float PeripheralVisionAngle;//[Offset: 0xf0, Size: 0x4]
	float PeripheralVisionCosine;//[Offset: 0xf4, Size: 0x4]
	void SetSensingUpdatesEnabled(const bool bEnabled);// 0x139c58eb6041
	void SetSensingInterval(const float NewSensingInterval);// 0x139b58eb6041
	void SetPeripheralVisionAngle(const float NewPeripheralVisionAngle);// 0x139a58eb6041
	void SeePawnDelegate__DelegateSignature(Pawn* Pawn);// 0x139958eb6041
	void HearNoiseDelegate__DelegateSignature(Pawn* Instigator, out const Vector Location, float Volume);// 0x139858eb6041
	float GetPeripheralVisionCosine();// 0x139758eb6041
	float GetPeripheralVisionAngle();// 0x139658eb6041

--------------------------------
Class: VisualLoggerExtension.Object

--------------------------------
Class: RigVMMemoryStorageGeneratorClass.Class.Struct.Field.Object

--------------------------------
Class: CTPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: TPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: HumanPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: ZombiePlayerStart.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: BaseController.PlayerController.Controller.Actor.Object
	ASFunction_NotThreadSafe HideHUD;//[Size: 0x0]
	ASFunction_ReferenceArg ShowHUD;//[Size: 0x0]
	ASFunction_NotThreadSafe TouchMove;//[Size: 0x0]
	ASFunction_NotThreadSafe TouchReleased;//[Size: 0x0]
	ASFunction_NotThreadSafe TouchPressed;//[Size: 0x0]
	ASFunction_NoParams PopShowcursor;//[Size: 0x0]
	ASFunction_NoParams PushShowCursor;//[Size: 0x0]
	ASFunction_ReferenceArg PressedEsc;//[Size: 0x0]
	ASFunction_NoParams UserConstructionScript;//[Size: 0x1]
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x1]

--------------------------------
Class: CrosshairComponent.ActorComponent.Object
	Vector PunchAngle;//[Offset: 0xb0, Size: 0x18]
	double CrossHairOffset;//[Offset: 0xc8, Size: 0x8]
	ASFunction_FloatExtendedToDoubleArg ReceiveTick;//[Size: 0x1]
	ASFunction_DoubleArg DropPunchAngle;//[Size: 0x0]

--------------------------------
Class: FootStepComponent.ActorComponent.Object
	SoundWave* FootStepSound1;//[Offset: 0xc0, Size: 0x8]
	SoundWave* FootStepSound2;//[Offset: 0xc8, Size: 0x8]
	ASFunction_FloatExtendedToDoubleArg ReceiveTick;//[Size: 0x1]
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x1]

--------------------------------
Class: HealthComponent.ActorComponent.Object
	delegate Event_OnTakeDamage;//[Offset: 0xb0, Size: 0x10]
	delegate Event_OnUserDied;//[Offset: 0xc0, Size: 0x10]
	delegate Event_OnClientHealthChange;//[Offset: 0xd0, Size: 0x10]
	int health;//[Offset: 0xe0, Size: 0x4]
	int maxHealth;//[Offset: 0xe4, Size: 0x4]
	ASFunction_NoParams Rep_Health;//[Size: 0x0]
	ASFunction_DWordArg DecHp;//[Size: 0x0]
	ASFunction_ReferenceArg TakeDamage;//[Size: 0x0]
	ASFunction_DWordArg IncHp;//[Size: 0x0]
	ASFunction_DWordArg SetHealth;//[Size: 0x0]
	ASFunction_ByteReturn GetIsDead;//[Size: 0x0]
	ASFunction_DWordReturn GetMaxHealth;//[Size: 0x0]
	ASFunction_DWordReturn GetHealth;//[Size: 0x0]

--------------------------------
Class: HudManagerComponent.ActorComponent.Object
	LiveGameUI* GameHud;//[Offset: 0xb0, Size: 0x8]
	class LiveGameUI* MobileGameHudClass;//[Offset: 0xb8, Size: 0x8]
	class LiveGameUI* PCGameHudClass;//[Offset: 0xc0, Size: 0x8]
	ASFunction_NotThreadSafe HideHUD;//[Size: 0x0]
	ASFunction_NoParams ShowHudClient;//[Size: 0x0]
	ASFunction_NotThreadSafe ShowHUD;//[Size: 0x0]
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x1]

--------------------------------
Class: LiveGameUI.UserWidget.Widget.Visual.Object
	ProgressBar* ProgressBar_Hp;//[Offset: 0x290, Size: 0x8]
	TextBlock* TextBlock_Hp;//[Offset: 0x298, Size: 0x8]
	TextBlock* TextBlock_Clip;//[Offset: 0x2a0, Size: 0x8]
	TextBlock* TextBlock_Ammo;//[Offset: 0x2a8, Size: 0x8]
	WpnShow* MainWeapon;//[Offset: 0x2b0, Size: 0x8]
	WpnShow* SecondWeapon;//[Offset: 0x2b8, Size: 0x8]
	WpnShow* Knife;//[Offset: 0x2c0, Size: 0x8]
	MobileButton* Button_Shoot2;//[Offset: 0x2d0, Size: 0x8]
	Button* Button_Reload;//[Offset: 0x2d8, Size: 0x8]
	MobileSwitchButton* Button_Crouch;//[Offset: 0x2e0, Size: 0x8]
	MobileButton* Button_Jump;//[Offset: 0x2e8, Size: 0x8]
	Button* Button_Throw;//[Offset: 0x2f0, Size: 0x8]
	MobileSwitchButton* Button_SwitchShoot;//[Offset: 0x2f8, Size: 0x8]
	Button* Button_Jianshi;//[Offset: 0x300, Size: 0x8]
	ASFunction_NotThreadSafe UpdateAmmo;//[Size: 0x0]
	ASFunction_NotThreadSafe UpdateCurrentWeapon;//[Size: 0x0]
	ASFunction_ReferenceArg UpdateWeapons;//[Size: 0x0]
	ASFunction_NotThreadSafe UpdateHp;//[Size: 0x0]
	ASFunction_NoParams ReloadPressed;//[Size: 0x0]
	ASFunction_NoParams ShootRelease;//[Size: 0x0]
	ASFunction_NoParams ShootPressed;//[Size: 0x0]
	ASFunction_ByteArg Crouch;//[Size: 0x0]
	ASFunction_NoParams Jump;//[Size: 0x0]
	ASFunction_NoParams ThrowWeapon;//[Size: 0x0]
	ASFunction_ObjectReturn GetLocalController;//[Size: 0x0]
	ASFunction_NoParams Jianshi;//[Size: 0x0]
	ASFunction_NoParams Construct;//[Size: 0x1]

--------------------------------
Class: WpnShow.UserWidget.Widget.Visual.Object
	Image* Image_Wpn;//[Offset: 0x290, Size: 0x8]
	TextBlock* TextBlock_Name;//[Offset: 0x298, Size: 0x8]
	Image* Image_TextGround;//[Offset: 0x2a0, Size: 0x8]
	Image* Image_TextGround_NotCurrent;//[Offset: 0x2a8, Size: 0x8]
	Button* Button_Change;//[Offset: 0x2b0, Size: 0x8]
	enum WpnSlot;//[Offset: 0x2b8, Size: 0x1]
	ASFunction_NoParams ChangeWpn;//[Size: 0x0]
	ASFunction_ByteArg SetCurrentWeapon;//[Size: 0x0]
	ASFunction_NotThreadSafe UpdateWeapon;//[Size: 0x0]
	ASFunction_NoParams Construct;//[Size: 0x1]

--------------------------------
Class: MobileButton.UserWidget.Widget.Visual.Object
	Button* Button;//[Offset: 0x290, Size: 0x8]
	Texture2D* PressedTexture;//[Offset: 0x298, Size: 0x8]
	Texture2D* ReleasedTexture;//[Offset: 0x2a0, Size: 0x8]
	Image* Image_fg;//[Offset: 0x2a8, Size: 0x8]
	Texture2D* MarkTexture;//[Offset: 0x2b0, Size: 0x8]
	Image* Image_bg;//[Offset: 0x2b8, Size: 0x8]
	ASFunction_NoParams OnReleased;//[Size: 0x0]
	ASFunction_NoParams OnPressed;//[Size: 0x0]
	ASFunction_NoParams Construct;//[Size: 0x1]

--------------------------------
Class: MobileSwitchButton.UserWidget.Widget.Visual.Object
	Button* Button;//[Offset: 0x290, Size: 0x8]
	Image* Image_fg;//[Offset: 0x298, Size: 0x8]
	Texture2D* Image_State1;//[Offset: 0x2a0, Size: 0x8]
	Texture2D* Image_State2;//[Offset: 0x2a8, Size: 0x8]
	bool IsChecked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	delegate OnStateChange;//[Offset: 0x2b8, Size: 0x10]
	ASFunction_NoParams Reset;//[Size: 0x0]
	ASFunction_NoParams OnSwitch;//[Size: 0x0]
	ASFunction_NoParams Construct;//[Size: 0x1]

--------------------------------
Class: PlayerInputComponent.InputComponent.ActorComponent.Object
	ASFunction_ReferenceArg Input_Crouch_R;//[Size: 0x0]
	ASFunction_ReferenceArg Input_Crouch_P;//[Size: 0x0]
	ASFunction_ReferenceArg Input_Jump;//[Size: 0x0]
	ASFunction_FloatArg Input_LookRight;//[Size: 0x0]
	ASFunction_FloatArg Input_LookUp;//[Size: 0x0]
	ASFunction_FloatArg Input_MoveRight;//[Size: 0x0]
	ASFunction_FloatArg Input_MoveForward;//[Size: 0x0]
	ASFunction_ReferenceArg Input_Common_Axis;//[Size: 0x0]
	ASFunction_ReferenceArg Input_Common_DoubleClick;//[Size: 0x0]
	ASFunction_ReferenceArg Input_Common_Repeat;//[Size: 0x0]
	ASFunction_ReferenceArg Input_Common_Released;//[Size: 0x0]
	ASFunction_ReferenceArg Input_Common_Pressed;//[Size: 0x0]
	ASFunction_FloatArg Test;//[Size: 0x0]
	ASFunction_NoParams BindInput;//[Size: 0x0]
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x1]

--------------------------------
Class: WeaponSystemComponent.ActorComponent.Object
	bool CanPickUpWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	BaseWeapon*[] Weapons;//[Offset: 0xb8, Size: 0x10]
	BaseWeapon* currentWeapon;//[Offset: 0xc8, Size: 0x8]
	BaseWeapon* LastWeapon;//[Offset: 0xd8, Size: 0x8]
	ASFunction_NoParams RefreshHud;//[Size: 0x0]
	ASFunction_NoParams ChangeToSlot4;//[Size: 0x0]
	ASFunction_NoParams ChangeToLastWeapon;//[Size: 0x0]
	ASFunction_NotThreadSafe OnCommonInput;//[Size: 0x0]
	ASFunction_ByteArg ChangeToWeapon;//[Size: 0x0]
	ASFunction_ByteArg ChangeToWeapon_SV;//[Size: 0x0]
	ASFunction_ByteArg ChangeToWeaponImpl;//[Size: 0x0]
	ASFunction_NoParams AutoSwitchWeapon;//[Size: 0x0]
	ASFunction_ByteArg ThrowWeappon;//[Size: 0x0]
	ASFunction_ByteArg ConfiscateWeapon;//[Size: 0x0]
	ASFunction_NotThreadSafe GiveWeapon;//[Size: 0x0]
	ASFunction_NoParams OnDied;//[Size: 0x0]
	ASFunction_NoParams Rep_Weapons;//[Size: 0x0]
	ASFunction_NoParams Rep_CurrentWeapon;//[Size: 0x0]
	ASFunction_NotThreadSafe PickWeapon;//[Size: 0x0]
	ASFunction_NotThreadSafe SetCurrentWeapon;//[Size: 0x0]
	ASFunction_ObjectReturn GetCurrentWeapon;//[Size: 0x0]

--------------------------------
Class: BaseWeapon.Actor.Object
	SkeletalMesh* FPWeaponSkeletalMesh;//[Offset: 0x278, Size: 0x8]
	StaticMesh* TPWeaponStaticMesh;//[Offset: 0x280, Size: 0x8]
	StaticMesh* FPMagazineSkeletalMesh;//[Offset: 0x288, Size: 0x8]
	class AnimInstance* FPWeaponAnimBlueprint;//[Offset: 0x290, Size: 0x8]
	class AnimInstance* FPArmAnimBlueprint;//[Offset: 0x298, Size: 0x8]
	AnimSequence* ViewAnim;//[Offset: 0x2a0, Size: 0x8]
	class AnimInstance* TPPlayerAnimBlueprint;//[Offset: 0x2a8, Size: 0x8]
	class AnimInstance* TPWeaponAnimBlueprint;//[Offset: 0x2b0, Size: 0x8]
	enum Slot;//[Offset: 0x2b8, Size: 0x1]
	bool Throwable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 0x1]
	FString WpnName;//[Offset: 0x2c0, Size: 0x10]
	Texture2D* BigWeaponIcon;//[Offset: 0x2d0, Size: 0x8]
	Texture2D* SmallWeaponIcon;//[Offset: 0x2d8, Size: 0x8]
	bool IsCurrentWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	double CrossHairDefaultOfs;//[Offset: 0x2e8, Size: 0x8]
	ASFunction_NoParams RefreshHud;//[Size: 0x0]
	ASFunction_ByteReturn CheckCanView;//[Size: 0x0]
	ASFunction_NotThreadSafe OnCommonInput;//[Size: 0x0]
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x1]
	ASFunction_NotThreadSafe SetScalarParamterValue;//[Size: 0x0]
	ASFunction_NoParams UserConstructionScript;//[Size: 0x1]
	ASFunction_ByteReturn GetCurrentState;//[Size: 0x0]
	ASFunction_NoParams PutDown;//[Size: 0x0]
	ASFunction_NotThreadSafe PutDown_CL;//[Size: 0x0]
	ASFunction_NotThreadSafe PutOn_CL;//[Size: 0x0]
	ASFunction_NotThreadSafe GetWeaponSampleInfo;//[Size: 0x0]
	ASFunction_NoParams PutOn;//[Size: 0x0]

--------------------------------
Class: BasePlayer.Character.Pawn.Actor.Object
	SkeletalMesh* PlayerArmSkeletalMesh;//[Offset: 0x600, Size: 0x8]
	SkeletalMesh* PlayerSkeletalMesh;//[Offset: 0x608, Size: 0x8]
	enum Team;//[Offset: 0x610, Size: 0x1]
	CameraComponent* FPCameraComp;//[Offset: 0x618, Size: 0x8]
	SceneComponent* FPRootComp;//[Offset: 0x620, Size: 0x8]
	SkeletalMeshComponent* FPArmComp;//[Offset: 0x628, Size: 0x8]
	SkeletalMeshComponent* FPWeaponComp;//[Offset: 0x630, Size: 0x8]
	StaticMeshComponent* FPMagazineComp;//[Offset: 0x638, Size: 0x8]
	SkeletalMeshComponent* TPWeaponComp;//[Offset: 0x640, Size: 0x8]
	StaticMeshComponent* TPMagazineComp;//[Offset: 0x648, Size: 0x8]
	PlayerInputComponent* PlayerInputComponent;//[Offset: 0x650, Size: 0x8]
	WeaponSystemComponent* WeaponSystemComponet;//[Offset: 0x658, Size: 0x8]
	FootStepComponent* FootStepComponent;//[Offset: 0x660, Size: 0x8]
	HudManagerComponent* HudManagerComponent;//[Offset: 0x668, Size: 0x8]
	HealthComponent* HealthCompnent;//[Offset: 0x670, Size: 0x8]
	CrosshairComponent* CrosshariComponent;//[Offset: 0x678, Size: 0x8]
	double FloorDistance;//[Offset: 0x698, Size: 0x8]
	double LookUp;//[Offset: 0x6a0, Size: 0x8]
	<enum,AnimSequenceBase*> DamageAnimations;//[Offset: 0x6a8, Size: 0x50]
	AnimSequenceBase* DefaultDamageAnimation;//[Offset: 0x6f8, Size: 0x8]
	<enum,AnimSequenceBase*> DieAnimations;//[Offset: 0x700, Size: 0x50]
	AnimSequenceBase* DefaultDieAnimation;//[Offset: 0x750, Size: 0x8]
	SoundWave*[] DamageSounds;//[Offset: 0x758, Size: 0x10]
	SoundWave*[] BigDamageSounds;//[Offset: 0x768, Size: 0x10]
	SoundWave*[] DiedSounds;//[Offset: 0x778, Size: 0x10]
	ParticleSystem*[] BloodParticleSystems;//[Offset: 0x788, Size: 0x10]
	ASFunction_NoParams ReceiveDestroyed;//[Size: 0x1]
	ASFunction_NoParams RefreshHud;//[Size: 0x0]
	ASFunction_ReferenceArg OnTakeDamage;//[Size: 0x0]
	ASFunction_NoParams OnDiedAnimationPlayEnd;//[Size: 0x0]
	ASFunction_ReferenceArg CL_OnUserDied;//[Size: 0x0]
	ASFunction_ReferenceArg OnUserDied;//[Size: 0x0]
	ASFunction_NoParams OnClientHealthChange;//[Size: 0x0]
	ASFunction_NoParams OnJumped;//[Size: 0x1]
	ASFunction_NotThreadSafe ReceiveUnpossessed;//[Size: 0x1]
	ASFunction_NotThreadSafe ReceivePossessed;//[Size: 0x1]
	ASFunction_FloatExtendedToDoubleArg ReceiveTick;//[Size: 0x1]
	ASFunction_ByteReturn GetWeaponState;//[Size: 0x0]
	ASFunction_ObjectReturn GetCurrentWeapon;//[Size: 0x0]
	ASFunction_NotThreadSafe OnCommonInput;//[Size: 0x0]
	ASFunction_ReferenceArg ThrowWeapon;//[Size: 0x0]
	ASFunction_NotThreadSafe GetPawnSimapleInfo;//[Size: 0x0]
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x1]
	ASFunction_NoParams UserConstructionScript;//[Size: 0x1]
	ASFunction_DoubleArg CL_AddControllerYawInput;//[Size: 0x0]
	ASFunction_DoubleArg CL_AddControllerPitchInput;//[Size: 0x0]

--------------------------------
Class: BaseZombie.BasePlayer.Character.Pawn.Actor.Object

--------------------------------
Class: Human.BasePlayer.Character.Pawn.Actor.Object

--------------------------------
Class: G1SGameInstance.GameInstance.Object
	G1SSaveGame* SaveGame;//[Offset: 0x1a8, Size: 0x8]
	ASFunction_NoParams ReceiveInit;//[Size: 0x1]

--------------------------------
Class: G1SSaveGame.SaveGame.Object
	double MouseSpeed;//[Offset: 0x28, Size: 0x8]
	FString PlayerName;//[Offset: 0x30, Size: 0x10]
	ASFunction_ReferenceArg SetPlayerName;//[Size: 0x0]
	ASFunction_NotThreadSafe GetPlayerName;//[Size: 0x0]

--------------------------------
Class: G1SPhysicalMaterial.PhysicalMaterial.Object
	PhysicalMaterialHitInfo[] MaterialHitInfos;//[Offset: 0x80, Size: 0x10]
	ASFunction_NotThreadSafe GetMaterialHitInfo;//[Size: 0x0]

--------------------------------
Class: PhysicalMaterialHitInfo
	ParticleSystem* WallAsh;//[Offset: 0x0, Size: 0x8]
	Material* BulletScars;//[Offset: 0x8, Size: 0x8]
	Material* KnifeMark;//[Offset: 0x10, Size: 0x8]
	Material* KnifeAsh;//[Offset: 0x18, Size: 0x8]
	SoundWave* KnifeHitSound;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: PawnPhysicalMaterial.PhysicalMaterial.Object
	enum HitPart;//[Offset: 0x80, Size: 0x1]

--------------------------------
Class: Trajectory.Actor.Object
	NiagaraComponent* PS;//[Offset: 0x278, Size: 0x8]
	ASFunction_NoParams _DestroyActor;//[Size: 0x0]
	ASFunction_FloatExtendedToDoubleArg ReceiveTick;//[Size: 0x1]
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x1]

--------------------------------
Class: BaseGameMode.GameMode.GameModeBase.Info.Actor.Object
	WeaponFactory* WeaonFactory;//[Offset: 0x370, Size: 0x8]
	ASFunction_NotThreadSafe K2_OnLogout;//[Size: 0x1]
	ASFunction_NotThreadSafe K2_PostLogin;//[Size: 0x1]
	ASFunction_NotThreadSafe OnPlayerDied;//[Size: 0x0]
	ASFunction_NotThreadSafe OnPlayerInjuried;//[Size: 0x0]
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x1]
	ASFunction_NoParams UserConstructionScript;//[Size: 0x1]

--------------------------------
Class: WeaponFactory.Object
	<enum,class Object> Weapons;//[Offset: 0x28, Size: 0x50]
	ASFunction_NotThreadSafe GetWeapon;//[Size: 0x0]
	ASFunction_NotThreadSafe RegistWeapon;//[Size: 0x0]
	ASFunction_NoParams Init;//[Size: 0x0]

--------------------------------
Class: BaseGameState.GameState.GameStateBase.Info.Actor.Object
	<int,BasePlayerState*> PlayerStates;//[Offset: 0x2e0, Size: 0x50]
	ASFunction_DWordArg RemovePlayerState;//[Size: 0x0]
	ASFunction_NotThreadSafe AddPlayerState;//[Size: 0x0]
	ASFunction_NoParams Rep_PlayerStates;//[Size: 0x0]

--------------------------------
Class: BasePlayerState.PlayerState.Info.Actor.Object

--------------------------------
Class: BaseGameHud.HUD.Actor.Object
	Texture* ShootButton;//[Offset: 0x370, Size: 0x8]
	Texture* ShootButtonBG;//[Offset: 0x378, Size: 0x8]
	Texture* ShootButtonBG2;//[Offset: 0x380, Size: 0x8]
	CrossHair hair;//[Offset: 0x388, Size: 0x20]
	Vector DamageLocation;//[Offset: 0x3a8, Size: 0x18]
	double TakeDamageTime;//[Offset: 0x3c0, Size: 0x8]
	ASFunction_NoParams UserConstructionScript;//[Size: 0x1]
	ASFunction_NotThreadSafe ReceiveDrawHUD;//[Size: 0x1]

--------------------------------
Class: CrossHair
	LinearColor Color;//[Offset: 0x0, Size: 0x10]
	int LineLength;//[Offset: 0x10, Size: 0x4]
	int SpacingLength;//[Offset: 0x14, Size: 0x4]
	int Offset;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CommonComponent.UserWidget.Widget.Visual.Object
	MobileButton* Button_Exit;//[Offset: 0x290, Size: 0x8]
	ASFunction_NoParams OnExit;//[Size: 0x0]
	ASFunction_NoParams Construct;//[Size: 0x1]

--------------------------------
Class: SubPage.UserWidget.Widget.Visual.Object
	Standalone* MainPage;//[Offset: 0x290, Size: 0x8]
	Button* Button_Return;//[Offset: 0x298, Size: 0x8]
	ASFunction_NoParams OnButton_ReturnClick;//[Size: 0x0]
	ASFunction_NoParams Construct;//[Size: 0x1]

--------------------------------
Class: Standalone.UserWidget.Widget.Visual.Object
	Button* Button_Exit;//[Offset: 0x290, Size: 0x8]
	Button* Button_NewGame;//[Offset: 0x298, Size: 0x8]
	Button* Button_Online;//[Offset: 0x2a0, Size: 0x8]
	class SubPage* NewGameWidget;//[Offset: 0x2a8, Size: 0x8]
	class SubPage* OnlineWidget;//[Offset: 0x2b0, Size: 0x8]
	NewGame* NewGame;//[Offset: 0x2b8, Size: 0x8]
	SubPage* Online;//[Offset: 0x2c0, Size: 0x8]
	ASFunction_NoParams OnButton_NewGameClicked;//[Size: 0x0]
	ASFunction_NoParams OnButton_OnlineClicked;//[Size: 0x0]
	ASFunction_NoParams OnButton_ExitClicked;//[Size: 0x0]
	ASFunction_NoParams Construct;//[Size: 0x1]

--------------------------------
Class: NewGame.SubPage.UserWidget.Widget.Visual.Object
	Button* Button_StartGame;//[Offset: 0x2a0, Size: 0x8]

--------------------------------
Class: Module_Base_UserInterface_Outside_StandaloneStatics.Object
	ASFunction_NotThreadSafe InitOutSideUMG;//[Size: 0x0]

--------------------------------
Class: Module_Base_Util_UtilStatics.Object
	ASFunction_NotThreadSafe IsFPController;//[Size: 0x0]
	ASFunction_NotThreadSafe IsMobile;//[Size: 0x0]

--------------------------------
Class: BaseGun.BaseWeapon.Actor.Object
	WeaponStateComponent* WeaponStateComp;//[Offset: 0x300, Size: 0x8]
	double PutOnTime;//[Offset: 0x308, Size: 0x8]
	double FireTime;//[Offset: 0x310, Size: 0x8]
	double ReloadTime;//[Offset: 0x318, Size: 0x8]
	int MaxClip;//[Offset: 0x320, Size: 0x4]
	int MaxAmmo;//[Offset: 0x324, Size: 0x4]
	WeaponDamageInfo DamageInfo;//[Offset: 0x328, Size: 0x58]
	AnimSet[] FireAnim;//[Offset: 0x380, Size: 0x10]
	AnimSet[] CrouchFireAnim;//[Offset: 0x390, Size: 0x10]
	SoundWave*[] FireSound;//[Offset: 0x3a0, Size: 0x10]
	ParticleSystem* FirePartic;//[Offset: 0x3b0, Size: 0x8]
	int Clip;//[Offset: 0x3b8, Size: 0x4]
	int Ammo;//[Offset: 0x3bc, Size: 0x4]
	BlueprintGeneratedClass* Trajectory;//[Offset: 0x3c0, Size: 0x8]
	RecoilForceComponent* RecoilForceComponent;//[Offset: 0x3d0, Size: 0x8]
	double Accuracy;//[Offset: 0x3d8, Size: 0x8]
	double MoltenTime;//[Offset: 0x3e0, Size: 0x8]
	ASFunction_ByteReturn CheckCanView;//[Size: 0x1]
	ASFunction_NotThreadSafe PutOn_CL;//[Size: 0x1]
	ASFunction_NoParams PutOn;//[Size: 0x1]
	ASFunction_NoParams PutDown;//[Size: 0x1]
	ASFunction_ByteReturn IsOnFire;//[Size: 0x0]
	ASFunction_NotThreadSafe OnCommonInput;//[Size: 0x1]
	ASFunction_ByteReturn GetCurrentState;//[Size: 0x1]
	ASFunction_NoParams OnReloadEnd;//[Size: 0x0]
	ASFunction_FloatExtendedToDoubleArg ReceiveTick;//[Size: 0x1]
	ASFunction_NoParams OnReloadStart;//[Size: 0x0]
	ASFunction_NoParams Reload;//[Size: 0x0]
	ASFunction_NotThreadSafe CalcAccuracy;//[Size: 0x0]
	ASFunction_NotThreadSafe CalcEndPosition;//[Size: 0x0]
	ASFunction_NotThreadSafe OnHitActorShow;//[Size: 0x0]
	ASFunction_NotThreadSafe OnHitActor;//[Size: 0x0]
	ASFunction_NotThreadSafe Fire_Impl;//[Size: 0x0]
	ASFunction_NoParams FireStart;//[Size: 0x0]
	ASFunction_NoParams UserConstructionScript;//[Size: 0x2]
	ASFunction_NoParams RefreshHud;//[Size: 0x1]
	ASFunction_NoParams Rep_AmmoAndClip;//[Size: 0x0]
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x2]
	ASFunction_DWordArg SetAmmo;//[Size: 0x0]
	ASFunction_DWordReturn GetAmmo;//[Size: 0x0]
	ASFunction_DWordArg SetClip;//[Size: 0x0]
	ASFunction_DWordReturn GetClip;//[Size: 0x0]

--------------------------------
Class: WeaponStateComponent.ActorComponent.Object
	enum CurrentState;//[Offset: 0xb0, Size: 0x1]
	<enum,TimingStateInfo> TimingStates;//[Offset: 0xb8, Size: 0x50]
	ASFunction_NoParams ClearState;//[Size: 0x0]
	ASFunction_ByteArg RegistPermanentState;//[Size: 0x0]
	ASFunction_ByteArg FoceToState;//[Size: 0x0]
	ASFunction_NotThreadSafe ToState;//[Size: 0x0]
	ASFunction_NotThreadSafe RegistTimingState;//[Size: 0x0]
	ASFunction_FloatExtendedToDoubleArg ReceiveTick;//[Size: 0x1]
	ASFunction_ByteReturn GetCurrentState;//[Size: 0x0]

--------------------------------
Class: TimingStateInfo
	double Time;//[Offset: 0x0, Size: 0x8]
	delegate Begin;//[Offset: 0x8, Size: 0x10]
	delegate End;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: WeaponDamageInfo
	<enum,int> Damage;//[Offset: 0x0, Size: 0x50]
	int DefaultDamage;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: RecoilForceComponent.ActorComponent.Object
	double[] UpBase;//[Offset: 0xb0, Size: 0x10]
	double[] LateralBase;//[Offset: 0xc0, Size: 0x10]
	double[] UpModifier;//[Offset: 0xd0, Size: 0x10]
	double[] LateralModifier;//[Offset: 0xe0, Size: 0x10]
	double[] UpMax;//[Offset: 0xf0, Size: 0x10]
	double[] LateralMax;//[Offset: 0x100, Size: 0x10]
	int[] DirectionChange;//[Offset: 0x110, Size: 0x10]
	int ShotsFired;//[Offset: 0x120, Size: 0x4]
	double DecreaseShotsFired;//[Offset: 0x128, Size: 0x8]
	bool bDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	ASFunction_NotThreadSafe KickBack;//[Size: 0x0]
	ASFunction_NotThreadSafe CalcEndPosition;//[Size: 0x0]
	ASFunction_FloatExtendedToDoubleArg ReceiveTick;//[Size: 0x1]
	ASFunction_NoParams Fire;//[Size: 0x0]

--------------------------------
Class: AutomaticGun.BaseGun.BaseWeapon.Actor.Object
	ASFunction_NotThreadSafe OnCommonInput;//[Size: 0x2]
	ASFunction_FloatExtendedToDoubleArg ReceiveTick;//[Size: 0x2]
	ASFunction_NoParams PutOn;//[Size: 0x2]
	ASFunction_NoParams EndFire;//[Size: 0x0]
	ASFunction_NoParams StartFire;//[Size: 0x0]

--------------------------------
Class: BaseGrenade.BaseWeapon.Actor.Object
	WeaponStateComponent* WeaponStateComp;//[Offset: 0x300, Size: 0x8]
	double PutOnTime;//[Offset: 0x308, Size: 0x8]
	AnimSequence* HoldOnAnim;//[Offset: 0x310, Size: 0x8]
	ASFunction_NoParams PutDown;//[Size: 0x1]
	ASFunction_NoParams PutOn;//[Size: 0x1]
	ASFunction_ByteReturn GetCurrentState;//[Size: 0x1]
	ASFunction_NoParams UserConstructionScript;//[Size: 0x2]

--------------------------------
Class: BaseKnife.BaseWeapon.Actor.Object
	WeaponStateComponent* WeaponStateComp;//[Offset: 0x300, Size: 0x8]
	double PutOnTime;//[Offset: 0x308, Size: 0x8]
	double Fire1Time;//[Offset: 0x310, Size: 0x8]
	double Fire1DamageTime;//[Offset: 0x318, Size: 0x8]
	double Fire1Distance;//[Offset: 0x320, Size: 0x8]
	double Fire1Angle;//[Offset: 0x328, Size: 0x8]
	AnimSet Fire1Anim;//[Offset: 0x330, Size: 0x28]
	Material* Hit1Mark;//[Offset: 0x358, Size: 0x8]
	KnifeHitSound Hit1Sound;//[Offset: 0x360, Size: 0x10]
	double Fire2Time;//[Offset: 0x370, Size: 0x8]
	double Fire2DamageTime;//[Offset: 0x378, Size: 0x8]
	double Fire2Distance;//[Offset: 0x380, Size: 0x8]
	double Fire2Angle;//[Offset: 0x388, Size: 0x8]
	AnimSet Fire2Anim;//[Offset: 0x390, Size: 0x28]
	Material* Hit2Mark;//[Offset: 0x3b8, Size: 0x8]
	KnifeHitSound Hit2Sound;//[Offset: 0x3c0, Size: 0x10]
	WeaponDamageInfo Hit1DamageInfo;//[Offset: 0x3d0, Size: 0x58]
	WeaponDamageInfo Hit2DamageInfo;//[Offset: 0x428, Size: 0x58]
	WeaponDamageInfo Hit3DamageInfo;//[Offset: 0x480, Size: 0x58]
	double Fire3Time;//[Offset: 0x4d8, Size: 0x8]
	double Fire3DamageTime;//[Offset: 0x4e0, Size: 0x8]
	double Fire3Distance;//[Offset: 0x4e8, Size: 0x8]
	double Fire3Angle;//[Offset: 0x4f0, Size: 0x8]
	AnimSet Fire3Anim;//[Offset: 0x4f8, Size: 0x28]
	Material* Hit3Mark;//[Offset: 0x520, Size: 0x8]
	KnifeHitSound Hit3Sound;//[Offset: 0x528, Size: 0x10]
	double LastFire1Time;//[Offset: 0x538, Size: 0x8]
	ASFunction_NoParams RefreshHud;//[Size: 0x1]
	ASFunction_NotThreadSafe PutOn_CL;//[Size: 0x1]
	ASFunction_NoParams PutDown;//[Size: 0x1]
	ASFunction_NoParams PutOn;//[Size: 0x1]
	ASFunction_NotThreadSafe OnCommonInput;//[Size: 0x1]
	ASFunction_NoParams Input_Fire3;//[Size: 0x0]
	ASFunction_NoParams Input_Fire1;//[Size: 0x0]
	ASFunction_NoParams Fire3Damage;//[Size: 0x0]
	ASFunction_NoParams Fire3;//[Size: 0x0]
	ASFunction_NoParams Fire2Damage;//[Size: 0x0]
	ASFunction_NoParams Fire1Damage;//[Size: 0x0]
	ASFunction_NoParams Fire2;//[Size: 0x0]
	ASFunction_NoParams Fire1;//[Size: 0x0]
	ASFunction_NoParams UserConstructionScript;//[Size: 0x2]
	ASFunction_NoParams ReceiveBeginPlay;//[Size: 0x2]
	ASFunction_ByteReturn GetCurrentState;//[Size: 0x1]
	ASFunction_ByteReturn CheckCanView;//[Size: 0x1]

--------------------------------
Class: KnifeHitSound
	SoundWave* HitSound;//[Offset: 0x0, Size: 0x8]
	SoundWave* HitAirSound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: SemiAutomaticGun.BaseGun.BaseWeapon.Actor.Object
	ASFunction_NoParams Fire;//[Size: 0x0]
	ASFunction_NotThreadSafe OnCommonInput;//[Size: 0x2]

--------------------------------
Class: WeaponPack.Actor.Object
	StaticMeshComponent* WeaponComponent;//[Offset: 0x278, Size: 0x8]
	BaseWeapon* Weapon;//[Offset: 0x280, Size: 0x8]
	ASFunction_NoParams Rep_Weapon;//[Size: 0x0]
	ASFunction_ObjectReturn GetWeapon;//[Size: 0x0]
	ASFunction_NotThreadSafe SetWeapon;//[Size: 0x0]
	ASFunction_NotThreadSafe TouchEvent;//[Size: 0x0]
	ASFunction_NoParams Destroy;//[Size: 0x0]
	ASFunction_NoParams ReceiveDestroyed;//[Size: 0x1]

--------------------------------
Class: WeaponAnimBlueprint.AnimInstance.Object
	enum CurrentState;//[Offset: 0x350, Size: 0x1]
	BaseWeapon* currentWeapon;//[Offset: 0x358, Size: 0x8]
	double Speed;//[Offset: 0x360, Size: 0x8]
	double Direction;//[Offset: 0x368, Size: 0x8]
	bool IsCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 0x1]
	bool IsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 0x1]
	double LookUp;//[Offset: 0x378, Size: 0x8]
	ASFunction_DoubleArg Tick;//[Size: 0x0]

--------------------------------
Class: WeaponAnimBlueprint3P.WeaponAnimBlueprint.AnimInstance.Object
	AnimSequence* ReloadAnim;//[Offset: 0x380, Size: 0x8]
	AnimSequence* PutonAnim;//[Offset: 0x388, Size: 0x8]
	AnimSequence* IdleAnim;//[Offset: 0x390, Size: 0x8]

--------------------------------
Class: WeaponAnimBlurprint1P.WeaponAnimBlueprint.AnimInstance.Object
	AnimSequence* IdleAnim;//[Offset: 0x380, Size: 0x8]
	AnimSequence* RunAnim;//[Offset: 0x388, Size: 0x8]
	AnimSequence* PutonAnim;//[Offset: 0x390, Size: 0x8]
	AnimSequence* ReloadAnim;//[Offset: 0x398, Size: 0x8]
	AnimSequence* JumpBegin;//[Offset: 0x3a0, Size: 0x8]
	AnimSequence* JumpLoop;//[Offset: 0x3a8, Size: 0x8]
	AnimSequence* JumpEnd;//[Offset: 0x3b0, Size: 0x8]
	AnimSequence* CrouchBegin;//[Offset: 0x3b8, Size: 0x8]
	AnimSequence* CrouchEnd;//[Offset: 0x3c0, Size: 0x8]

--------------------------------
Class: DefaultGameMode.BaseGameMode.GameMode.GameModeBase.Info.Actor.Object
	ASFunction_NoParams UserConstructionScript;//[Size: 0x2]

--------------------------------
Class: DeathMatchMode.DefaultGameMode.BaseGameMode.GameMode.GameModeBase.Info.Actor.Object
	Actor*[] CTPlayerStarts;//[Offset: 0x378, Size: 0x10]
	Actor*[] TPlayerStarts;//[Offset: 0x390, Size: 0x10]
	class TDMScoreBoard* ScoreBoard;//[Offset: 0x3a8, Size: 0x8]
	ASFunction_NotThreadSafe K2_OnLogout;//[Size: 0x2]
	ASFunction_NotThreadSafe K2_PostLogin;//[Size: 0x2]
	ASFunction_FloatExtendedToDoubleArg ReceiveTick;//[Size: 0x1]
	ASFunction_NotThreadSafe OnChooseTeam;//[Size: 0x0]
	ASFunction_NotThreadSafe OnRespawnActor;//[Size: 0x0]
	ASFunction_NotThreadSafe OnPlayerDied;//[Size: 0x1]
	ASFunction_NotThreadSafe OnPlayerInjuried;//[Size: 0x1]
	ASFunction_NotThreadSafe GetPlayer;//[Size: 0x0]
	ASFunction_NoParams UserConstructionScript;//[Size: 0x3]

--------------------------------
Class: TDMScoreBoard.UserWidget.Widget.Visual.Object
	TextBlock* TextBlock_CT;//[Offset: 0x290, Size: 0x8]
	TextBlock* TextBlock_T;//[Offset: 0x298, Size: 0x8]
	ASFunction_DWordArg SetTScore;//[Size: 0x0]
	ASFunction_DWordArg SetCTScore;//[Size: 0x0]

--------------------------------
Class: TimeTask.Object
	double Time;//[Offset: 0x28, Size: 0x8]
	TDMController* Controller;//[Offset: 0x30, Size: 0x8]
	BasePlayer* Player;//[Offset: 0x38, Size: 0x8]
	delegate Func;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: TDMController.BaseController.PlayerController.Controller.Actor.Object
	enum ChooseTeam;//[Offset: 0x810, Size: 0x1]
	int KillNum;//[Offset: 0x814, Size: 0x4]
	int DeadNum;//[Offset: 0x818, Size: 0x4]
	TDMScoreBoard* ScoreBoard;//[Offset: 0x820, Size: 0x8]
	ASFunction_ReferenceArg ShowScoreBoard;//[Size: 0x0]
	ASFunction_ByteArg OnChooseTeam;//[Size: 0x0]

--------------------------------
Class: TDMGameState.BaseGameState.GameState.GameStateBase.Info.Actor.Object
	int _CTKillNum;//[Offset: 0x330, Size: 0x4]
	int _TKillNum;//[Offset: 0x334, Size: 0x4]
	ASFunction_NoParams Rep_Score;//[Size: 0x0]
	ASFunction_NoParams Rep_PlayerStates;//[Size: 0x1]
	ASFunction_NotThreadSafe GetPlayerDeadNum;//[Size: 0x0]
	ASFunction_NotThreadSafe SetPlayerDeadNum;//[Size: 0x0]
	ASFunction_NotThreadSafe GetPlayerKillNum;//[Size: 0x0]
	ASFunction_NotThreadSafe SetPlayerKillNum;//[Size: 0x0]
	ASFunction_DWordArg SetTKillNum;//[Size: 0x0]
	ASFunction_DWordReturn GetTKillNum;//[Size: 0x0]
	ASFunction_DWordArg SetCTKillNum;//[Size: 0x0]
	ASFunction_DWordReturn GetCTKillNum;//[Size: 0x0]

--------------------------------
Class: TDMPlayerState.BasePlayerState.PlayerState.Info.Actor.Object

--------------------------------
Class: TDMUserList.UserWidget.Widget.Visual.Object

--------------------------------
Class: DefaultFactory.WeaponFactory.Object
	ASFunction_NoParams Init;//[Size: 0x1]

--------------------------------
Class: AK47.AutomaticGun.BaseGun.BaseWeapon.Actor.Object
	ASFunction_NotThreadSafe CalcAccuracy;//[Size: 0x1]

--------------------------------
Class: Deagle.SemiAutomaticGun.BaseGun.BaseWeapon.Actor.Object

--------------------------------
Class: M4A1.AutomaticGun.BaseGun.BaseWeapon.Actor.Object
	ASFunction_NotThreadSafe CalcAccuracy;//[Size: 0x1]

--------------------------------
Class: ListRoom_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x290, Size: 0x8]
	Button* Button;//[Offset: 0x298, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x2a0, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x2a8, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x2b0, Size: 0x8]
	BlueprintSessionResult Result;//[Offset: 0x2b8, Size: 0x108]
	static void Init(BlueprintSessionResult Result, int CallFunc_GetPingInMs_ReturnValue, FString CallFunc_GetServerName_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, int CallFunc_GetMaxPlayers_ReturnValue, int CallFunc_GetCurrentPlayers_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x457559136001
	void OnFailure_B62835F84A491C83023EFE921920FB07();// 0x457459136001
	void OnSuccess_B62835F84A491C83023EFE921920FB07();// 0xffffffffbacf5040
	void OnListItemObjectSet(Object* ListItemObject);// 0x457159136001
	void BP_OnItemSelectionChanged(bool bIsSelected);// 0x457759136001
	void BP_OnItemExpansionChanged(bool bIsExpanded);// 0x457859136001
	void BP_OnEntryReleased();// 0x457959136001
	void BndEvt__ListRoom_Button_0_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0xffffff8158eb6000
	void ExecuteUbergraph_ListRoom(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Object* K2Node_Event_ListItemObject, bool K2Node_Event_bIsSelected, bool K2Node_Event_bIsExpanded, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, JoinSessionCallbackProxy* CallFunc_JoinSession_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x386558eb6031

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: Background_C.UserWidget.Widget.Visual.Object

--------------------------------
Class: NewGame_Content_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x290, Size: 0x8]
	Button* Button_Return;//[Offset: 0x298, Size: 0x8]
	Button* Button_StartGame;//[Offset: 0x2a0, Size: 0x8]
	ComboBoxString* ComboBoxString;//[Offset: 0x2a8, Size: 0x8]
	Image* Image;//[Offset: 0x2b0, Size: 0x8]
	void OnFailure_400BCC634143E4D48B08979E0286E637();// 0x473b59136001
	void OnSuccess_400BCC634143E4D48B08979E0286E637();// 0x476f59136001
	void BndEvt__NewGame_Button_StartGame_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x473859136001
	void BndEvt__NewGame_Content_Button_Return_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x473959136001
	void ExecuteUbergraph_NewGame_Content(int EntryPoint, int CallFunc_GetSelectedIndex_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchInteger_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, CreateSessionCallbackProxy* CallFunc_CreateSession_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x473a59136001

--------------------------------
Class: KeySettings_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x290, Size: 0x8]
	Button* Button_apply;//[Offset: 0x298, Size: 0x8]
	Button* Button_GameSettings;//[Offset: 0x2a0, Size: 0x8]
	Button* Button_KeySettings;//[Offset: 0x2a8, Size: 0x8]
	Button* Button_ReturnMune;//[Offset: 0x2b0, Size: 0x8]
	Button* Button_ScreenSettings;//[Offset: 0x2b8, Size: 0x8]
	Image* Image;//[Offset: 0x2c0, Size: 0x8]
	Slider* Slider;//[Offset: 0x2c8, Size: 0x8]
	TextBlock* TextBlock_MouseSpeed;//[Offset: 0x2d0, Size: 0x8]
	G1SSaveGame* GameSave;//[Offset: 0x2d8, Size: 0x8]
	void PreConstruct(bool IsDesignTime);// 0x477459136001
	void BndEvt__Settings_Button_91_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x477259136001
	void BndEvt__KeySettings_Button_ScreenSettings_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0xffffff8158eb6000
	void BndEvt__KeySettings_Button_GameSettings_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x477159136001
	void BndEvt__KeySettings_Slider_308_K2Node_ComponentBoundEvent_3_OnFloatValueChangedEvent__DelegateSignature(float Value);// 0xffffff8158eb6000
	void BndEvt__KeySettings_Button_apply_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature();// 0x477059136001
	void ExecuteUbergraph_KeySettings(int EntryPoint, bool CallFunc_SaveGameToSlot_ReturnValue, bool K2Node_Event_IsDesignTime, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, ScreenSettings_C* CallFunc_Create_ReturnValue, GameSettings_C* CallFunc_Create_ReturnValue, float K2Node_ComponentBoundEvent_Value, FText CallFunc_Conv_FloatToText_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, G1SGameInstance* K2Node_DynamicCast_AsG1SGame_Instance, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_FloatToText_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetValue_ReturnValue, float CallFunc_SetValue_InValue_NarrowingCast, float CallFunc_Conv_FloatToText_Value_NarrowingCast, double K2Node_VariableSet_MouseSpeed_WideningCast);// 0x477359136001

--------------------------------
Class: ScreenSettings_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x290, Size: 0x8]
	Button* Button_AllLeft;//[Offset: 0x298, Size: 0x8]
	Button* Button_AllRight;//[Offset: 0x2a0, Size: 0x8]
	Button* Button_apply;//[Offset: 0x2a8, Size: 0x8]
	Button* Button_ColorationLeft;//[Offset: 0x2b0, Size: 0x8]
	Button* Button_ColorationRight;//[Offset: 0x2b8, Size: 0x8]
	Button* Button_GameSettings;//[Offset: 0x2c0, Size: 0x8]
	Button* Button_JaggiesLeft;//[Offset: 0x2c8, Size: 0x8]
	Button* Button_JaggiesRight;//[Offset: 0x2d0, Size: 0x8]
	Button* Button_KeySettings;//[Offset: 0x2d8, Size: 0x8]
	Button* Button_LightLeft;//[Offset: 0x2e0, Size: 0x8]
	Button* Button_LightRight;//[Offset: 0x2e8, Size: 0x8]
	Button* Button_PlantLeft;//[Offset: 0x2f0, Size: 0x8]
	Button* Button_PlantRight;//[Offset: 0x2f8, Size: 0x8]
	Button* Button_ProcessingLeft;//[Offset: 0x300, Size: 0x8]
	Button* Button_ProcessingRight;//[Offset: 0x308, Size: 0x8]
	Button* Button_ReflectionLeft;//[Offset: 0x310, Size: 0x8]
	Button* Button_ReflectionRight;//[Offset: 0x318, Size: 0x8]
	Button* Button_ReturnMune;//[Offset: 0x320, Size: 0x8]
	Button* Button_ScreenSettings;//[Offset: 0x328, Size: 0x8]
	Button* Button_ShadeLeft;//[Offset: 0x330, Size: 0x8]
	Button* Button_ShadeRight;//[Offset: 0x338, Size: 0x8]
	Button* Button_SpecialEffectLeft;//[Offset: 0x340, Size: 0x8]
	Button* Button_SpecialEffectRight;//[Offset: 0x348, Size: 0x8]
	Button* Button_TextureLeft;//[Offset: 0x350, Size: 0x8]
	Button* Button_TextureRihgt;//[Offset: 0x358, Size: 0x8]
	Button* Button_ViewLeft;//[Offset: 0x360, Size: 0x8]
	Button* Button_ViewRight;//[Offset: 0x368, Size: 0x8]
	ComboBoxString* ComboBoxString_Resolution;//[Offset: 0x370, Size: 0x8]
	ComboBoxString* ComboBoxString_WindowMode;//[Offset: 0x378, Size: 0x8]
	Image* Image;//[Offset: 0x380, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x388, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x390, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x398, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x3a0, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x3a8, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x3b0, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x3b8, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x3c0, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x3c8, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x3d0, Size: 0x8]
	TextBlock* TextBlock;//[Offset: 0x3d8, Size: 0x8]
	int ShadeQuality;//[Offset: 0x3e0, Size: 0x4]
	FText[] QualityLevels;//[Offset: 0x3e8, Size: 0x10]
	FText[] ShadeLevels;//[Offset: 0x3f8, Size: 0x10]
	int AllQuality;//[Offset: 0x408, Size: 0x4]
	int ViewQuality;//[Offset: 0x40c, Size: 0x4]
	FText[] ViewLevels;//[Offset: 0x410, Size: 0x10]
	int JaggiesQuality;//[Offset: 0x420, Size: 0x4]
	FText[] JaggiesLevels;//[Offset: 0x428, Size: 0x10]
	int LightQuality;//[Offset: 0x438, Size: 0x4]
	FText[] LightLevels;//[Offset: 0x440, Size: 0x10]
	FText[] ReflectionLevels;//[Offset: 0x450, Size: 0x10]
	int ReflectionQuality;//[Offset: 0x460, Size: 0x4]
	int TextureQuality;//[Offset: 0x464, Size: 0x4]
	FText[] TextueLeveles;//[Offset: 0x468, Size: 0x10]
	int SpecialEffectQuality;//[Offset: 0x478, Size: 0x4]
	FText[] SpecialEffectLevels;//[Offset: 0x480, Size: 0x10]
	int PlantQuality;//[Offset: 0x490, Size: 0x4]
	FText[] PlantLevels;//[Offset: 0x498, Size: 0x10]
	int ColorationQuality;//[Offset: 0x4a8, Size: 0x4]
	FText[] ColorationLevels;//[Offset: 0x4b0, Size: 0x10]
	int ProcessingQuality;//[Offset: 0x4c0, Size: 0x4]
	FText[] ProcessingLevels;//[Offset: 0x4c8, Size: 0x10]
	void GetData(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, byte CallFunc_GetFullscreenMode_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, IntPoint CallFunc_GetScreenResolution_ReturnValue, IntPoint[] K2Node_MakeArray_Array, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, IntPoint CallFunc_Array_Get_Item, int CallFunc_GetShadingQuality_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_BuildString_Int_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetFoliageQuality_ReturnValue, int CallFunc_GetVisualEffectQuality_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetTextureQuality_ReturnValue, int CallFunc_GetReflectionQuality_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetShadowQuality_ReturnValue, int CallFunc_GetPostProcessingQuality_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetGlobalIlluminationQuality_ReturnValue, int CallFunc_GetAntiAliasingQuality_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetViewDistanceQuality_ReturnValue);// 0x45ba59136001
	void AllLevels(bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, int CallFunc_Conv_BoolToInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x459b59136001
	FText ProcessingQualityLevels();// 0x45be59136001
	FText ColorationQualityLevels();// 0x45b759136001
	FText PlantQualityLevels();// 0x45bd59136001
	FText SpecialEffectQualityLevels();// 0x45c359136001
	FText TextureQualityLevels();// 0x45c459136001
	FText ReflectionQualityLevels();// 0x45bf59136001
	FText LightQuealityLevels();// 0x45bc59136001
	FText JaggiesQualityLevels();// 0x45bb59136001
	FText ViewQualityLevels();// 0xffffffffdddb66a0
	FText AllQualityLevels();// 0x459c59136001
	void All Quakity(bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x459a59136001
	void SetAllWindowModes(int CallFunc_MakeLiteralInt_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, byte CallFunc_Conv_IntToByte_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, byte CallFunc_GetEnumeratorValueFromIndex_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue);// 0x45c159136001
	void SetAllSupportedResolutions(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, IntPoint[] CallFunc_GetSupportedFullscreenResolutions_Resolutions, bool CallFunc_GetSupportedFullscreenResolutions_ReturnValue, int CallFunc_Array_Length_ReturnValue, IntPoint CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_BuildString_Int_ReturnValue);// 0x45c059136001
	FText ShadeQualityLevels();// 0x45c259136001
	void BndEvt__Settings_Button_91_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x45b459136001
	void BndEvt__ScreenSettings_Button_4_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x459e59136001
	void BndEvt__ScreenSettings_Button_3_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x459d59136001
	void BndEvt__ScreenSettings_Button_GameSettings_K2Node_ComponentBoundEvent_4_OnButtonClickedEvent__DelegateSignature();// 0x45a459136001
	void BndEvt__ScreenSettings_Button_KeySettings_K2Node_ComponentBoundEvent_6_OnButtonClickedEvent__DelegateSignature();// 0x45a759136001
	void Construct();// 0x45b859136001
	void BndEvt__ScreenSettings_Button_apply_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();// 0x45a159136001
	void BndEvt__ScreenSettings_Button_AllLeft_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();// 0x459f59136001
	void BndEvt__ScreenSettings_Button_AllRight_K2Node_ComponentBoundEvent_7_OnButtonClickedEvent__DelegateSignature();// 0x45a059136001
	void BndEvt__ScreenSettings_Button_ViewLeft_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x5cb3038158eb603d
	void BndEvt__ScreenSettings_Button_ViewRight_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x45b659136001
	void BndEvt__ScreenSettings_Button_JaggiesLeft_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();// 0x45a559136001
	void BndEvt__ScreenSettings_Button_JaggiesRight_K2Node_ComponentBoundEvent_11_OnButtonClickedEvent__DelegateSignature();// 0x45a659136001
	void BndEvt__ScreenSettings_Button_LightLeft_K2Node_ComponentBoundEvent_12_OnButtonClickedEvent__DelegateSignature();// 0x45a859136001
	void BndEvt__ScreenSettings_Button_LightRight_K2Node_ComponentBoundEvent_13_OnButtonClickedEvent__DelegateSignature();// 0x45a959136001
	void BndEvt__ScreenSettings_Button_ReflectionLeft_K2Node_ComponentBoundEvent_14_OnButtonClickedEvent__DelegateSignature();// 0x45ae59136001
	void BndEvt__ScreenSettings_Button_ReflectionRight_K2Node_ComponentBoundEvent_15_OnButtonClickedEvent__DelegateSignature();// 0x45af59136001
	void BndEvt__ScreenSettings_Button_TextureLeft_K2Node_ComponentBoundEvent_16_OnButtonClickedEvent__DelegateSignature();// 0x45b259136001
	void BndEvt__ScreenSettings_Button_TextureRihgt_K2Node_ComponentBoundEvent_17_OnButtonClickedEvent__DelegateSignature();// 0x45b359136001
	void BndEvt__ScreenSettings_Button_SpecialEffectLeft_K2Node_ComponentBoundEvent_18_OnButtonClickedEvent__DelegateSignature();// 0xffffff8158eb6000
	void BndEvt__ScreenSettings_Button_SpecialEffectRight_K2Node_ComponentBoundEvent_19_OnButtonClickedEvent__DelegateSignature();// 0x45b159136001
	void BndEvt__ScreenSettings_Button_PlantLeft_K2Node_ComponentBoundEvent_20_OnButtonClickedEvent__DelegateSignature();// 0x45aa59136001
	void BndEvt__ScreenSettings_Button_PlantRight_K2Node_ComponentBoundEvent_21_OnButtonClickedEvent__DelegateSignature();// 0x45ab59136001
	void BndEvt__ScreenSettings_Button_ColorationLeft_K2Node_ComponentBoundEvent_22_OnButtonClickedEvent__DelegateSignature();// 0x45a259136001
	void BndEvt__ScreenSettings_Button_ColorationRight_K2Node_ComponentBoundEvent_23_OnButtonClickedEvent__DelegateSignature();// 0x45a359136001
	void BndEvt__ScreenSettings_Button_ProcessingLeft_K2Node_ComponentBoundEvent_24_OnButtonClickedEvent__DelegateSignature();// 0x45ac59136001
	void BndEvt__ScreenSettings_Button_ProcessingRight_K2Node_ComponentBoundEvent_25_OnButtonClickedEvent__DelegateSignature();// 0x45ad59136001
	static void ExecuteUbergraph_ScreenSettings(int EntryPoint, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, GameSettings_C* CallFunc_Create_ReturnValue, KeySettings_C* CallFunc_Create_ReturnValue, IntPoint[] CallFunc_GetSupportedFullscreenResolutions_Resolutions, bool CallFunc_GetSupportedFullscreenResolutions_ReturnValue, int CallFunc_GetSelectedIndex_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_GetSelectedIndex_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue);// 0x45b959136001

--------------------------------
Class: GameSettings_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x290, Size: 0x8]
	Button* Button_apply;//[Offset: 0x298, Size: 0x8]
	Button* Button_GameSettings;//[Offset: 0x2a0, Size: 0x8]
	Button* Button_KeySettings;//[Offset: 0x2a8, Size: 0x8]
	Button* Button_ReturnMune;//[Offset: 0x2b0, Size: 0x8]
	Button* Button_ScreenSettings;//[Offset: 0x2b8, Size: 0x8]
	EditableTextBox* EditableTextBox_Name;//[Offset: 0x2c0, Size: 0x8]
	Image* Image;//[Offset: 0x2c8, Size: 0x8]
	G1SSaveGame* Save Game;//[Offset: 0x2d0, Size: 0x8]
	void PreConstruct(bool IsDesignTime);// 0x473759136001
	void BndEvt__Settings_Button_91_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x471559136001
	void BndEvt__GameSettings_Button_ScreenSettings_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x471459136001
	void BndEvt__GameSettings_Button_KeySettings_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x471359136001
	void BndEvt__GameSettings_Button_apply_K2Node_ComponentBoundEvent_3_OnButtonClickedEvent__DelegateSignature();// 0x471259136001
	void ExecuteUbergraph_GameSettings(int EntryPoint, bool K2Node_Event_IsDesignTime, bool CallFunc_SaveGameToSlot_ReturnValue, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, ScreenSettings_C* CallFunc_Create_ReturnValue, KeySettings_C* CallFunc_Create_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, G1SGameInstance* K2Node_DynamicCast_AsG1SGame_Instance, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetPlayerName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x471659136001

--------------------------------
Class: Online_C.SubPage.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a0, Size: 0x8]
	Button* Button_Search;//[Offset: 0x2a8, Size: 0x8]
	ListView* ListView;//[Offset: 0x2b0, Size: 0x8]
	BlueprintSessionResult NewVar;//[Offset: 0x2b8, Size: 0x108]
	void OnFailure_90503AB4401B9E4328F3BBA97FBDED6E(out const BlueprintSessionResult[] Results);// 0xffffff8158eb6000
	void OnSuccess_90503AB4401B9E4328F3BBA97FBDED6E(out const BlueprintSessionResult[] Results);// 0x47a059136001
	void BndEvt__Online_Button_Search_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x479c59136000
	static void ExecuteUbergraph_Online(int EntryPoint, const BlueprintSessionResult[] K2Node_CustomEvent_Results, delegate K2Node_CreateDelegate_OutputDelegate, const BlueprintSessionResult[] K2Node_CustomEvent_Results, delegate K2Node_CreateDelegate_OutputDelegate, BlueprintSessionResult[] Temp_struct_Variable, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, BlueprintSessionResult CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, FindSessionsCallbackProxy* CallFunc_FindSessions_ReturnValue, ListRoom_C* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0xffffff8158eb6000

--------------------------------
Class: Standalone_Content_C.Standalone.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c8, Size: 0x8]
	Button* Button_Setting;//[Offset: 0x2d0, Size: 0x8]
	EditableTextBox* EditableTextBox;//[Offset: 0x2d8, Size: 0x8]
	FText GetText();// 0x47c659136001
	void BndEvt__Standalone_Content_Button_Online_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();// 0x47c359136001
	void BndEvt__Standalone_Content_Button_NewGame_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x47a159136001
	void BndEvt__Standalone_Content_Button_Setting_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x47c459136001
	void ExecuteUbergraph_Standalone_Content(int EntryPoint, GameInstance* CallFunc_GetGameInstance_ReturnValue, G1SGameInstance* K2Node_DynamicCast_AsG1SGame_Instance, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, NewGame_Content_C* CallFunc_Create_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, PlayerController* CallFunc_GetPlayerControllerFromID_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, ScreenSettings_C* CallFunc_Create_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x47c559136001

--------------------------------
Class: Standalone_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x280, Size: 0x8]
	CameraActor* CameraActor_1_ExecuteUbergraph_Standalone_RefProperty;//[Offset: 0x288, Size: 0x8]
	void ReceiveBeginPlay();// 0x481f59136001
	void ExecuteUbergraph_Standalone(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue);// 0x358eb6084

--------------------------------
